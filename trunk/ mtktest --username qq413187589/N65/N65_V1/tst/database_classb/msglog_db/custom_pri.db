#line 1 "tst\database\msglog_db\custom_parse_db.c"
 


































 





























































































#line 1 "kal\include\kal_release.h"
 


































 








































































































































































































































































































































 











 




#line 1 "nucleus\inc\Nucleus.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 













 


 


 


 




 




 




 


 


typedef unsigned long           UNSIGNED;
typedef long                    SIGNED;
typedef unsigned char           DATA_ELEMENT;
typedef DATA_ELEMENT            OPTION;
typedef int                     STATUS;
typedef unsigned char           UNSIGNED_CHAR;
typedef char                    CHAR;
typedef int                     INT;
typedef unsigned long *         UNSIGNED_PTR;
typedef unsigned char *         BYTE_PTR;


typedef char           INT8;  
typedef unsigned char  UINT8; 
typedef signed short   INT16; 
typedef unsigned short UINT16;
typedef signed long    INT32; 
typedef unsigned long  UINT32;


 









 


   



 


   






 








 















 

typedef struct NU_VECTOR_STRUCT
{
     void        *pointer;
} NU_VECTOR;


 






















 





 















 























































 







 











 




































































 



#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 66 "nucleus\inc\cs_defs.h"


 




 


typedef struct  CS_NODE_STRUCT
{
    struct CS_NODE_STRUCT  *cs_previous;
    struct CS_NODE_STRUCT  *cs_next;
    DATA_ELEMENT            cs_priority;


    DATA_ELEMENT            cs_padding[ 3 ];


}  CS_NODE;




#line 418 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





 








 

typedef struct TM_TCB_STRUCT 
{
    INT                 tm_timer_type;          
    UNSIGNED            tm_remaining_time;      
     void                *tm_information;         
    struct TM_TCB_STRUCT
                       *tm_next_timer,          
                       *tm_previous_timer;      
} TM_TCB;    


 

typedef struct TM_APP_TCB_STRUCT
{
    CS_NODE             tm_created;             
                                                
    UNSIGNED            tm_id;                  
    CHAR                tm_name[ 8 ];   
     void   (*tm_expiration_routine)(UNSIGNED);   
    UNSIGNED            tm_expiration_id;       
    INT                 tm_enabled;             
    UNSIGNED            tm_expirations;         
    UNSIGNED            tm_initial_time;        
    UNSIGNED            tm_reschedule_time;     
    TM_TCB              tm_actual_timer;        
} TM_APP_TCB;


 

   
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





 











 

typedef struct TC_TCB_STRUCT 
{
     


       
    CS_NODE             tc_created;             
                                                
    UNSIGNED            tc_id;                  
    CHAR                tc_name[ 8 ];   
    DATA_ELEMENT        tc_status;              
    DATA_ELEMENT        tc_delayed_suspend;     
    DATA_ELEMENT        tc_priority;            
    DATA_ELEMENT        tc_preemption;          
    UNSIGNED            tc_scheduled;           
    UNSIGNED            tc_cur_time_slice;      
     void                *tc_stack_start;         
     void                *tc_stack_end;           
     void                *tc_stack_pointer;       
    UNSIGNED            tc_stack_size;          
    UNSIGNED            tc_stack_minimum;       
    struct TC_PROTECT_STRUCT
                       *tc_current_protect;     
     void                *tc_saved_stack_ptr;     
    UNSIGNED            tc_time_slice;          

    
     


    struct TC_TCB_STRUCT
                       *tc_ready_previous,      
                       *tc_ready_next;          
                        
     

    UNSIGNED            tc_priority_group;      
    struct TC_TCB_STRUCT
                      **tc_priority_head;       
    DATA_ELEMENT       *tc_sub_priority_ptr;    
    DATA_ELEMENT        tc_sub_priority;        
    DATA_ELEMENT        tc_saved_status;        
    DATA_ELEMENT        tc_signal_active;       
    

    DATA_ELEMENT        tc_padding[ 1 ];


                                                
     void                 (*tc_entry)(UNSIGNED,  void  *);
    UNSIGNED            tc_argc;                
     void                *tc_argv;                
     void                 (*tc_cleanup) ( void  *); 
     void                *tc_cleanup_info;        
    struct TC_PROTECT_STRUCT
                       *tc_suspend_protect;     
                                                

     
    INT                 tc_timer_active;        
    TM_TCB              tc_timer_control;       

     
    
    UNSIGNED            tc_signals;             
    UNSIGNED            tc_enabled_signals;     
    
     

    
     
     void                 (*tc_signal_handler) (UNSIGNED);

     

    UNSIGNED            tc_system_reserved_1;   
    UNSIGNED            tc_system_reserved_2;   
    UNSIGNED            tc_system_reserved_3;   
    UNSIGNED            tc_app_reserved_1;      

} TC_TCB;    


 

typedef struct TC_HCB_STRUCT 
{
     


       
    CS_NODE             tc_created;             
                                                
    UNSIGNED            tc_id;                  
    CHAR                tc_name[ 8 ];   
    DATA_ELEMENT        tc_not_used_1;          
    DATA_ELEMENT        tc_not_used_2;          
    DATA_ELEMENT        tc_priority;            
    DATA_ELEMENT        tc_not_used_3;          
    UNSIGNED            tc_scheduled;           
    UNSIGNED            tc_cur_time_slice;      
     void                *tc_stack_start;         
     void                *tc_stack_end;           
     void                *tc_stack_pointer;       
    UNSIGNED            tc_stack_size;          
    UNSIGNED            tc_stack_minimum;       
    struct TC_PROTECT_STRUCT
                       *tc_current_protect;     
    struct TC_HCB_STRUCT
                       *tc_active_next;         
    
     


    UNSIGNED            tc_activation_count;    
     void                 (*tc_entry)( void );      

     

    UNSIGNED            tc_system_reserved_1;   
    UNSIGNED            tc_system_reserved_2;   
    UNSIGNED            tc_system_reserved_3;   
    UNSIGNED            tc_app_reserved_1;      

} TC_HCB;    


 

typedef struct TC_PROTECT_STRUCT
{
    TC_TCB             *tc_tcb_pointer;         
    UNSIGNED            tc_thread_waiting;      
} TC_PROTECT;




#line 117 "nucleus\inc\tm_defs.h"




#line 419 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





























































































































































#line 420 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\mb_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 67 "nucleus\inc\mb_defs.h"
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





























































































































































#line 68 "nucleus\inc\mb_defs.h"


 





 





 

typedef struct MB_MCB_STRUCT 
{
    CS_NODE             mb_created;             
                                                
    UNSIGNED            mb_id;                  
    CHAR                mb_name[ 8 ];   
    DATA_ELEMENT        mb_message_present;     
    DATA_ELEMENT        mb_fifo_suspend;        

    DATA_ELEMENT        mb_padding[ 2 ];

    UNSIGNED            mb_tasks_waiting;       
    UNSIGNED                                    
                        mb_message_area[ 4 ];
    struct MB_SUSPEND_STRUCT
                       *mb_suspension_list;     
} MB_MCB;    


 

   
typedef struct MB_SUSPEND_STRUCT
{
    CS_NODE             mb_suspend_link;        
    MB_MCB             *mb_mailbox;             
    TC_TCB             *mb_suspended_task;      
    UNSIGNED           *mb_message_area;        
    STATUS              mb_return_status;       
} MB_SUSPEND;




#line 421 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\qu_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 66 "nucleus\inc\qu_defs.h"
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





























































































































































#line 67 "nucleus\inc\qu_defs.h"


 





 




 

typedef struct QU_QCB_STRUCT 
{
    CS_NODE             qu_created;             
                                                
    UNSIGNED            qu_id;                  
    CHAR                qu_name[ 8 ];   
    DATA_ELEMENT        qu_fixed_size;          
    DATA_ELEMENT        qu_fifo_suspend;        

    DATA_ELEMENT        qu_padding[ 2 ];

    UNSIGNED            qu_queue_size;          
    UNSIGNED            qu_messages;            
    UNSIGNED            qu_message_size;        
    UNSIGNED            qu_available;           
    UNSIGNED_PTR        qu_start;               
    UNSIGNED_PTR        qu_end;                 
    UNSIGNED_PTR        qu_read;                
    UNSIGNED_PTR        qu_write;               
    UNSIGNED            qu_tasks_waiting;       
    struct QU_SUSPEND_STRUCT
                       *qu_urgent_list;         
    struct QU_SUSPEND_STRUCT
                       *qu_suspension_list;     
} QU_QCB;    


 

   
typedef struct QU_SUSPEND_STRUCT
{
    CS_NODE             qu_suspend_link;        
    QU_QCB             *qu_queue;               
    TC_TCB             *qu_suspended_task;      
    UNSIGNED_PTR        qu_message_area;        
    UNSIGNED            qu_message_size;        
    UNSIGNED            qu_actual_size;         
    STATUS              qu_return_status;       
} QU_SUSPEND;




#line 422 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\pi_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 66 "nucleus\inc\pi_defs.h"
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





























































































































































#line 67 "nucleus\inc\pi_defs.h"


 





 




 

typedef struct PI_PCB_STRUCT 
{
    CS_NODE             pi_created;             
                                                
    UNSIGNED            pi_id;                  
    CHAR                pi_name[ 8 ];   
    DATA_ELEMENT        pi_fixed_size;          
    DATA_ELEMENT        pi_fifo_suspend;        

    DATA_ELEMENT        pi_padding[ 2 ];

    UNSIGNED            pi_pipe_size;           
    UNSIGNED            pi_messages;            
    UNSIGNED            pi_message_size;        
    UNSIGNED            pi_available;           
    BYTE_PTR            pi_start;               
    BYTE_PTR            pi_end;                 
    BYTE_PTR            pi_read;                
    BYTE_PTR            pi_write;               
    UNSIGNED            pi_tasks_waiting;       
    struct PI_SUSPEND_STRUCT
                       *pi_urgent_list;         
    struct PI_SUSPEND_STRUCT
                       *pi_suspension_list;     
} PI_PCB;    


 

   
typedef struct PI_SUSPEND_STRUCT
{
    CS_NODE             pi_suspend_link;        
    PI_PCB             *pi_pipe;                
    TC_TCB             *pi_suspended_task;      
    BYTE_PTR            pi_message_area;        
    UNSIGNED            pi_message_size;        
    UNSIGNED            pi_actual_size;         
    STATUS              pi_return_status;       
} PI_SUSPEND;




#line 423 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\sm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 66 "nucleus\inc\sm_defs.h"
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





























































































































































#line 67 "nucleus\inc\sm_defs.h"


 





 




 

typedef struct SM_SCB_STRUCT 
{
    CS_NODE             sm_created;             
                                                
    UNSIGNED            sm_id;                  
    CHAR                sm_name[ 8 ];   
    UNSIGNED            sm_semaphore_count;     
    DATA_ELEMENT        sm_fifo_suspend;        

    DATA_ELEMENT        sm_padding[ 3 ];

    UNSIGNED            sm_tasks_waiting;       
    struct SM_SUSPEND_STRUCT
                       *sm_suspension_list;     
} SM_SCB;    


 

   
typedef struct SM_SUSPEND_STRUCT
{
    CS_NODE             sm_suspend_link;        
    SM_SCB             *sm_semaphore;           
    TC_TCB             *sm_suspended_task;      
    STATUS              sm_return_status;       
} SM_SUSPEND;




#line 424 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\ev_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 66 "nucleus\inc\ev_defs.h"
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





























































































































































#line 67 "nucleus\inc\ev_defs.h"


 





 






 

typedef struct EV_GCB_STRUCT 
{
    CS_NODE             ev_created;             
                                                
    UNSIGNED            ev_id;                  
    CHAR                ev_name[ 8 ];   
    UNSIGNED            ev_current_events;      
    UNSIGNED            ev_tasks_waiting;       
    struct EV_SUSPEND_STRUCT
                       *ev_suspension_list;     
} EV_GCB;    


 

   
typedef struct EV_SUSPEND_STRUCT
{
    CS_NODE             ev_suspend_link;        
    EV_GCB             *ev_event_group;         
    UNSIGNED            ev_requested_events;    
    DATA_ELEMENT        ev_operation;           

    DATA_ELEMENT        ev_padding[ 3 ];

    TC_TCB             *ev_suspended_task;      
    STATUS              ev_return_status;       
    UNSIGNED            ev_actual_events;       
} EV_SUSPEND;




#line 425 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\pm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 67 "nucleus\inc\pm_defs.h"
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





























































































































































#line 68 "nucleus\inc\pm_defs.h"


 





 







 

typedef struct PM_PCB_STRUCT 
{
    CS_NODE             pm_created;             
                                                
    UNSIGNED            pm_id;                  
    CHAR                pm_name[ 8 ];   
     void                *pm_start_address;       
    UNSIGNED            pm_pool_size;           
    UNSIGNED            pm_partition_size;      
    UNSIGNED            pm_available;           
    UNSIGNED            pm_allocated;           
    struct PM_HEADER_STRUCT    
                       *pm_available_list;      
    DATA_ELEMENT        pm_fifo_suspend;        

    DATA_ELEMENT        pm_padding[ 3 ];

    UNSIGNED            pm_tasks_waiting;       
    struct PM_SUSPEND_STRUCT
                       *pm_suspension_list;     
} PM_PCB;    


 

typedef struct PM_HEADER_STRUCT
{
    struct PM_HEADER_STRUCT
                       *pm_next_available;      
                                                
    PM_PCB             *pm_partition_pool;      
} PM_HEADER;


 

   
typedef struct PM_SUSPEND_STRUCT
{
    CS_NODE             pm_suspend_link;        
    PM_PCB             *pm_partition_pool;      
    TC_TCB             *pm_suspended_task;      
     void                *pm_return_pointer;      
    STATUS              pm_return_status;       
} PM_SUSPEND;




#line 426 "nucleus\inc\Nucleus.h"
#line 1 "nucleus\inc\dm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 70 "nucleus\inc\dm_defs.h"
#line 1 "nucleus\inc\tc_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 72 "nucleus\inc\tc_defs.h"
#line 1 "nucleus\inc\tm_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\cs_defs.h"
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 1 "nucleus\inc\nucleus.h"
#line 66 "nucleus\inc\cs_defs.h"



 






















#line 65 "nucleus\inc\tm_defs.h"


 





















































#line 73 "nucleus\inc\tc_defs.h"


 





























































































































































#line 71 "nucleus\inc\dm_defs.h"


 





 







 

typedef struct DM_PCB_STRUCT 
{
    CS_NODE             dm_created;             
                                                
    TC_PROTECT          dm_protect;             
    UNSIGNED            dm_id;                  
    CHAR                dm_name[ 8 ];   
     void                *dm_start_address;       
    UNSIGNED            dm_pool_size;           
    UNSIGNED            dm_min_allocation;      
    UNSIGNED            dm_available;           
    struct DM_HEADER_STRUCT    
                       *dm_memory_list;         
    struct DM_HEADER_STRUCT
                       *dm_search_ptr;          
    DATA_ELEMENT        dm_fifo_suspend;        

    DATA_ELEMENT        dm_padding[ 3 ];

    UNSIGNED            dm_tasks_waiting;       
    struct DM_SUSPEND_STRUCT
                       *dm_suspension_list;     
} DM_PCB;    


 

typedef struct DM_HEADER_STRUCT
{
    struct DM_HEADER_STRUCT
                       *dm_next_memory,         
                       *dm_previous_memory;     
    DATA_ELEMENT        dm_memory_free;         

    DATA_ELEMENT        dm_padding[ 3 ];

    DM_PCB             *dm_memory_pool;         
} DM_HEADER;


 

   
typedef struct DM_SUSPEND_STRUCT
{
    CS_NODE             dm_suspend_link;        
    DM_PCB             *dm_memory_pool;         
    UNSIGNED            dm_request_size;        
    TC_TCB             *dm_suspended_task;      
     void                *dm_return_pointer;      
    STATUS              dm_return_status;       
} DM_SUSPEND;




#line 427 "nucleus\inc\Nucleus.h"













 

typedef TC_TCB      NU_TASK;













 

typedef TC_HCB      NU_HISR;













 

typedef MB_MCB      NU_MAILBOX;


 










 

typedef QU_QCB      NU_QUEUE;













 

typedef PI_PCB      NU_PIPE;













 

typedef SM_SCB      NU_SEMAPHORE;













 

typedef EV_GCB      NU_EVENT_GROUP;













 

typedef PM_PCB      NU_PARTITION_POOL;













 

typedef DM_PCB      NU_MEMORY_POOL;













 

typedef TM_APP_TCB      NU_TIMER;













 

typedef TC_PROTECT      NU_PROTECT;




 

struct NU_INITIALIZE_STRUCT
{
     void        *nu_io_address;               
    UNSIGNED    nu_logical_units;            
     void        *nu_memory;                   
    INT         nu_vector;                   
};

struct NU_ASSIGN_STRUCT
{
    UNSIGNED    nu_logical_unit;             
    INT         nu_assign_info;              
};

struct NU_RELEASE_STRUCT
{
    UNSIGNED    nu_logical_unit;             
    INT         nu_release_info;             
};

struct NU_INPUT_STRUCT
{
    UNSIGNED    nu_logical_unit;             
    UNSIGNED    nu_offset;                   
    UNSIGNED    nu_request_size;             
    UNSIGNED    nu_actual_size;              
     void        *nu_buffer_ptr;               
};

struct NU_OUTPUT_STRUCT
{
    UNSIGNED    nu_logical_unit;             
    UNSIGNED    nu_offset;                   
    UNSIGNED    nu_request_size;             
    UNSIGNED    nu_actual_size;              
     void        *nu_buffer_ptr;               
};

struct NU_STATUS_STRUCT
{
    UNSIGNED    nu_logical_unit;             
     void        *nu_extra_status;             
};

struct NU_TERMINATE_STRUCT
{
    UNSIGNED    nu_logical_unit;             
};


typedef struct NU_DRIVER_REQUEST_STRUCT
{
    INT         nu_function;                 
    UNSIGNED    nu_timeout;                  
    STATUS      nu_status;                   
    UNSIGNED    nu_supplemental;             
     void        *nu_supplemental_ptr;         
    
     
    union NU_REQUEST_INFO_UNION
    {
        struct NU_INITIALIZE_STRUCT     nu_initialize;
        struct NU_ASSIGN_STRUCT         nu_assign;
        struct NU_RELEASE_STRUCT        nu_release;
        struct NU_INPUT_STRUCT          nu_input;
        struct NU_OUTPUT_STRUCT         nu_output;
        struct NU_STATUS_STRUCT         nu_status;
        struct NU_TERMINATE_STRUCT      nu_terminate;
    } nu_request_info;
    
} NU_DRIVER_REQUEST;

typedef struct NU_DRIVER_STRUCT
{
    UNSIGNED       words[ 3 ];       
    CHAR           nu_driver_name[ 8 ];
     void           *nu_info_ptr;
    UNSIGNED       nu_driver_id;
     void            (*nu_driver_entry)(struct NU_DRIVER_STRUCT *,
                                                NU_DRIVER_REQUEST *);
} NU_DRIVER;



 

 void             Application_Initialize( void  *first_available_memory);


 



 












































































































































































































































 

STATUS           TCCE_Create_Task (NU_TASK *task, CHAR *name, 
                         void  (*task_entry)(UNSIGNED,  void  *), UNSIGNED argc,
                         void  *argv,  void  *stack_address, UNSIGNED stack_size,
                        OPTION priority, UNSIGNED time_slice, 
                        OPTION preempt, OPTION auto_start);
STATUS           TCCE_Delete_Task (NU_TASK *task);
STATUS           TCCE_Reset_Task (NU_TASK *task, UNSIGNED argc,  void  *argv);
STATUS           TCCE_Terminate_Task (NU_TASK *task);
STATUS           TCCE_Resume_Service (NU_TASK *task);
STATUS           TCCE_Suspend_Service (NU_TASK *task);
 void              TCCE_Relinquish ( void );
 void              TCCE_Task_Sleep (UNSIGNED ticks);
OPTION           TCSE_Change_Priority (NU_TASK *task, OPTION new_priority);
OPTION           TCSE_Change_Preemption (OPTION preempt);
UNSIGNED         TCSE_Change_Time_Slice (NU_TASK *task, UNSIGNED time_slice);
UNSIGNED         TCT_Check_Stack ( void );
NU_TASK        * TCC_Current_Task_Pointer ( void );
UNSIGNED         TCF_Established_Tasks ( void );
STATUS           TCF_Task_Information (NU_TASK *task, CHAR *name, 
                        DATA_ELEMENT *status, UNSIGNED *scheduled_count,
                        OPTION *priority, OPTION *preempt,
                        UNSIGNED *time_slice,  void  **stack_base,
                        UNSIGNED *stack_size, UNSIGNED *minimum_stack);
UNSIGNED         TCF_Task_Pointers (NU_TASK **pointer_list, 
                                                UNSIGNED maximum_pointers);

 

STATUS           MBCE_Create_Mailbox (NU_MAILBOX *mailbox, CHAR *name, 
                                                OPTION suspend_type);
STATUS           MBCE_Delete_Mailbox (NU_MAILBOX *mailbox);
STATUS           MBSE_Reset_Mailbox (NU_MAILBOX *mailbox);
STATUS           MBCE_Send_To_Mailbox (NU_MAILBOX *mailbox,  void  *message, 
                                                        UNSIGNED suspend);
STATUS           MBSE_Broadcast_To_Mailbox (NU_MAILBOX *mailbox,  void  *message,
                                                        UNSIGNED suspend);
STATUS           MBCE_Receive_From_Mailbox (NU_MAILBOX *mailbox,  void  *message,
                                                        UNSIGNED suspend);
UNSIGNED         MBF_Established_Mailboxes ( void );
STATUS           MBF_Mailbox_Information (NU_MAILBOX *mailbox, CHAR *name, 
                  OPTION *suspend_type, OPTION *message_present,
                  UNSIGNED *tasks_waiting, NU_TASK **first_task);
UNSIGNED         MBF_Mailbox_Pointers (NU_MAILBOX **pointer_list,
                                                UNSIGNED maximum_pointers);

 

STATUS           QUCE_Create_Queue (NU_QUEUE *queue, CHAR *name, 
                       void  *start_address, UNSIGNED queue_size, 
                      OPTION message_type, UNSIGNED message_size,
                      OPTION suspend_type);
STATUS           QUCE_Delete_Queue (NU_QUEUE *queue);
STATUS           QUSE_Reset_Queue (NU_QUEUE *queue);
STATUS           QUSE_Send_To_Front_Of_Queue (NU_QUEUE *queue,  void  *message, 
                                        UNSIGNED size, UNSIGNED suspend);
STATUS           QUCE_Send_To_Queue (NU_QUEUE *queue,  void  *message, 
                                        UNSIGNED size, UNSIGNED suspend);
STATUS           QUSE_Broadcast_To_Queue (NU_QUEUE *queue,  void  *message, 
                                        UNSIGNED size, UNSIGNED suspend);
STATUS           QUCE_Receive_From_Queue (NU_QUEUE *queue,  void  *message,
                      UNSIGNED size, UNSIGNED *actual_size, UNSIGNED suspend);
UNSIGNED         QUF_Established_Queues ( void );
STATUS           QUF_Queue_Information (NU_QUEUE *queue, CHAR *name, 
                   void  **start_address, UNSIGNED *queue_size, 
                  UNSIGNED *available, UNSIGNED *messages, 
                  OPTION *message_type, UNSIGNED *message_size,
                  OPTION *suspend_type, UNSIGNED *tasks_waiting,
                  NU_TASK **first_task);
UNSIGNED         QUF_Queue_Pointers (NU_QUEUE **pointer_list, 
                                                UNSIGNED maximum_pointers);

 

STATUS           PICE_Create_Pipe (NU_PIPE *pipe, CHAR *name, 
                       void  *start_address, UNSIGNED pipe_size, 
                      OPTION message_type, UNSIGNED message_size,
                      OPTION suspend_type);
STATUS           PICE_Delete_Pipe (NU_PIPE *pipe);
STATUS           PISE_Reset_Pipe (NU_PIPE *pipe);
STATUS           PISE_Send_To_Front_Of_Pipe (NU_PIPE *pipe,  void  *message, 
                                        UNSIGNED size, UNSIGNED suspend);
STATUS           PICE_Send_To_Pipe (NU_PIPE *pipe,  void  *message, 
                                        UNSIGNED size, UNSIGNED suspend);
STATUS           PISE_Broadcast_To_Pipe (NU_PIPE *pipe,  void  *message, 
                                        UNSIGNED size, UNSIGNED suspend);
STATUS           PICE_Receive_From_Pipe (NU_PIPE *pipe,  void  *message,
                      UNSIGNED size, UNSIGNED *actual_size, UNSIGNED suspend);
UNSIGNED         PIF_Established_Pipes ( void );
STATUS           PIF_Pipe_Information (NU_PIPE *pipe, CHAR *name, 
                   void  **start_address, UNSIGNED *pipe_size, 
                  UNSIGNED *available, UNSIGNED *messages, 
                  OPTION *message_type, UNSIGNED *message_size,
                  OPTION *suspend_type, UNSIGNED *tasks_waiting,
                  NU_TASK **first_task);
UNSIGNED         PIF_Pipe_Pointers (NU_PIPE **pointer_list, 
                                                UNSIGNED maximum_pointers);

 

STATUS           SMCE_Create_Semaphore (NU_SEMAPHORE *semaphore, CHAR *name, 
                        UNSIGNED initial_count, OPTION suspend_type);
STATUS           SMCE_Delete_Semaphore (NU_SEMAPHORE *semaphore);
STATUS           SMSE_Reset_Semaphore (NU_SEMAPHORE *semaphore, 
                                        UNSIGNED initial_count);
STATUS           SMCE_Obtain_Semaphore (NU_SEMAPHORE *semaphore, UNSIGNED suspend);
STATUS           SMCE_Release_Semaphore (NU_SEMAPHORE *semaphore);
UNSIGNED         SMF_Established_Semaphores ( void );
STATUS           SMF_Semaphore_Information (NU_SEMAPHORE *semaphore, CHAR *name, 
                  UNSIGNED *current_count, OPTION *suspend_type, 
                  UNSIGNED *tasks_waiting, NU_TASK **first_task);
UNSIGNED         SMF_Semaphore_Pointers (NU_SEMAPHORE **pointer_list, 
                                                UNSIGNED maximum_pointers);
                                                
 

STATUS           EVCE_Create_Event_Group (NU_EVENT_GROUP *group, CHAR *name);
STATUS           EVCE_Delete_Event_Group (NU_EVENT_GROUP *group);
STATUS           EVCE_Set_Events (NU_EVENT_GROUP *group, UNSIGNED events, 
                                                OPTION operation);
STATUS           EVCE_Retrieve_Events (NU_EVENT_GROUP *group, 
                        UNSIGNED requested_flags, OPTION operation, 
                        UNSIGNED *retrieved_flags, UNSIGNED suspend);
UNSIGNED         EVF_Established_Event_Groups ( void );
STATUS           EVF_Event_Group_Information (NU_EVENT_GROUP *group, CHAR *name, 
                  UNSIGNED *event_flags, UNSIGNED *tasks_waiting, 
                  NU_TASK **first_task);
UNSIGNED         EVF_Event_Group_Pointers (NU_EVENT_GROUP **pointer_list, 
                                                UNSIGNED maximum_pointers);

 

UNSIGNED         TCSE_Control_Signals (UNSIGNED signal_enable_mask);
UNSIGNED         TCSE_Receive_Signals ( void );
STATUS           TCSE_Register_Signal_Handler ( void  (*signal_handler)(UNSIGNED));
STATUS           TCSE_Send_Signals (NU_TASK *task, UNSIGNED signals);

 
                                                
STATUS           PMCE_Create_Partition_Pool (NU_PARTITION_POOL *pool, CHAR *name, 
                         void  *start_address, UNSIGNED pool_size,
                        UNSIGNED partition_size, OPTION suspend_type);
STATUS           PMCE_Delete_Partition_Pool (NU_PARTITION_POOL *pool);
STATUS           PMCE_Allocate_Partition (NU_PARTITION_POOL *pool, 
                                 void  **return_pointer, UNSIGNED suspend);
STATUS           PMCE_Deallocate_Partition ( void  *partition);
UNSIGNED         PMF_Established_Partition_Pools ( void );
STATUS           PMF_Partition_Pool_Information (NU_PARTITION_POOL *pool, 
                        CHAR *name, 
                   void  **start_address, UNSIGNED *pool_size,
                  UNSIGNED *partition_size, UNSIGNED *available,
                  UNSIGNED *allocated, OPTION *suspend_type, 
                  UNSIGNED *tasks_waiting, NU_TASK **first_task);
UNSIGNED         PMF_Partition_Pool_Pointers (NU_PARTITION_POOL **pointer_list, 
                                                UNSIGNED maximum_pointers);

 

STATUS           DMCE_Create_Memory_Pool (NU_MEMORY_POOL *pool, CHAR *name, 
                         void  *start_address, UNSIGNED pool_size,
                        UNSIGNED min_allocation, OPTION suspend_type);
STATUS           DMCE_Delete_Memory_Pool (NU_MEMORY_POOL *pool);
STATUS           DMCE_Allocate_Memory (NU_MEMORY_POOL *pool,  void  **return_pointer,
                                UNSIGNED size, UNSIGNED suspend);
STATUS           DMCE_Deallocate_Memory ( void  *memory);
UNSIGNED         DMF_Established_Memory_Pools ( void );
STATUS           DMF_Memory_Pool_Information (NU_MEMORY_POOL *pool, CHAR *name, 
                   void  **start_address, UNSIGNED *pool_size,
                  UNSIGNED *min_allocation, UNSIGNED *available,
                  OPTION *suspend_type, UNSIGNED *tasks_waiting, 
                  NU_TASK **first_task);
UNSIGNED         DMF_Memory_Pool_Pointers (NU_MEMORY_POOL **pointer_list, 
                                                UNSIGNED maximum_pointers);

 

INT              TCT_Control_Interrupts (INT new_level);
INT              TCT_Local_Control_Interrupts (INT new_level);
 void              TCT_Restore_Interrupts ( void );
 void            * INT_Setup_Vector (INT vector,  void  *new_vector);
STATUS           TCC_Register_LISR (INT vector, 
                                 void  (*new_lisr)(INT),
                                         void  (**old_lisr)(INT));
STATUS           TCCE_Activate_HISR (NU_HISR *hisr);
STATUS           TCCE_Create_HISR (NU_HISR *hisr, CHAR *name,
                         void  (*hisr_entry)( void ), OPTION priority,
                         void  *stack_address, UNSIGNED stack_size);
STATUS           TCCE_Delete_HISR (NU_HISR *hisr);
NU_HISR        * TCC_Current_HISR_Pointer ( void );
UNSIGNED         TCF_Established_HISRs ( void );
STATUS           TCF_HISR_Information (NU_HISR *hisr, CHAR *name,
                        UNSIGNED *scheduled_count, DATA_ELEMENT *priority,
                         void  **stack_base, UNSIGNED *stack_size,
                        UNSIGNED *minimum_stack);
UNSIGNED         TCF_HISR_Pointers (NU_HISR **pointer_list,
                                                UNSIGNED maximum_pointers);
 void              TCT_Protect (NU_PROTECT *protect_struct);
 void              TCT_Unprotect ( void );

 

STATUS           TMSE_Create_Timer (NU_TIMER *timer, CHAR *name, 
                         void  (*expiration_routine)(UNSIGNED), UNSIGNED id,
                        UNSIGNED initial_time, UNSIGNED reschedule_time,
                        OPTION enable);
STATUS           TMSE_Delete_Timer (NU_TIMER *timer);
STATUS           TMSE_Reset_Timer (NU_TIMER *timer, 
                         void  (*expiration_routine)(UNSIGNED), 
                        UNSIGNED initial_time, UNSIGNED reschedule_timer,
                        OPTION enable);
STATUS           TMSE_Control_Timer (NU_TIMER *timer, OPTION enable);
UNSIGNED         TMF_Established_Timers ( void );
STATUS           TMF_Timer_Information (NU_TIMER *timer, CHAR *name, 
                  OPTION *enable, UNSIGNED *expirations, UNSIGNED *id,
                  UNSIGNED *initial_time, UNSIGNED *reschedule_time);
UNSIGNED         TMF_Timer_Pointers (NU_TIMER **pointer_list, 
                                                UNSIGNED maximum_pointers);
 void              TMT_Set_Clock (UNSIGNED new_value);
UNSIGNED         TMT_Retrieve_Clock ( void );

 

CHAR           * RLC_Release_Information ( void );
CHAR           * LIC_License_Information ( void );
 void              HIC_Disable_History_Saving ( void );
 void              HIC_Enable_History_Saving ( void );
 void              HIC_Make_History_Entry_Service (UNSIGNED param1, UNSIGNED param2,
                                                UNSIGNED param3);
STATUS           HIC_Retrieve_History_Entry (DATA_ELEMENT *id, 
                        UNSIGNED *param1, UNSIGNED *param2, UNSIGNED *param3,
                        UNSIGNED *time, NU_TASK **task, NU_HISR **hisr);

 

STATUS           IOCE_Create_Driver (NU_DRIVER *driver, CHAR *name, 
                     void  (*driver_entry)(NU_DRIVER *, NU_DRIVER_REQUEST *));
STATUS           IOCE_Delete_Driver (NU_DRIVER *driver);
STATUS           IOCE_Request_Driver (NU_DRIVER *driver, 
                                                NU_DRIVER_REQUEST *request);
STATUS           IOCE_Resume_Driver (NU_TASK *task);
STATUS           IOCE_Suspend_Driver ( void  (*terminate_routine)( void  *),
                                         void  *information, UNSIGNED timeout);
UNSIGNED         IOF_Established_Drivers ( void );
UNSIGNED         IOF_Driver_Pointers (NU_DRIVER **pointer_list, 
                                                UNSIGNED maximum_pointers);









#line 383 "kal\include\kal_release.h"






#line 1 "config\include\stack_config.h"
 


































 






































































































































































































































































































































































































































































































































 










 





 





















 


typedef enum {
   INDX_NIL =   0x00,

    
   INDX_NVRAM,


   INDX_TST,
   INDX_TST_READER,


























    
   INDX_MM,
   INDX_CC,
   INDX_CISS,
   INDX_SMS,
   INDX_SIM,

   INDX_SIM_2,

   INDX_L4,
   INDX_RR,
   INDX_REASM,

    
   INDX_LLC,
   INDX_SNDCP,
   INDX_SM,

    
   INDX_DATA,

    
   INDX_MED,

    







    
   INDX_MMI,














   INDX_L1,

   INDX_L1_2,

   INDX_L1SP,
   INDX_IDLE,

   INDX_TP_TASK,





   INDX_DRVKBD,
   INDX_BMT,


   INDX_AUX,


    
   INDX_IRDA,
   INDX_OBEX,
   INDX_IRCOMM,

   INDX_USB,


   INDX_FMT,



   INDX_MED_V,







   INDX_SYSDEBUG,


   INDX_FLC,


   INDX_ABM,

   INDX_PPP,

   INDX_TCPIP,

   INDX_SOC,

   INDX_WAP,

   INDX_WPS,

   INDX_J2ME,
   INDX_JASYN,

   INDX_EMAIL,






   INDX_DT,



   INDX_GDC,
   INDX_GDD,


   INDX_IMPS,
   
   INDX_SIP,
   
   INDX_POC,

   INDX_BT,

   INDX_XDM,

   INDX_WNDRV,

   INDX_SUPC,

   INDX_DHCP,

   INDX_TFTP,

   INDX_SAF,

   INDX_VOIP,






   INDX_MED_C,


   INDX_IDLER,

   INDX_SYNCML, 

















   INDX_RTSP,

   INDX_DM,





   INDX_TDMB,













   INDX_CERTMAN,

   INDX_TLS,





   RPS_CUSTOM_TASKS_BEGIN,

   RPS_TOTAL_STACK_TASKS = (RPS_CUSTOM_TASKS_BEGIN - 1 +  16 )
} task_indx_type;

 


 


























     

 

























 










 












































































































































 













 


typedef enum {
    
   MOD_NIL = 0,

   MOD_NVRAM,

   MOD_TST,
   MOD_TST_READER,




























































   MOD_ATCI,

    
    
   MOD_MM,

   MOD_MM_2,

   MOD_CC,

   MOD_CC_2,

   MOD_CISS,

   MOD_CISS_2,

   MOD_SMS,

   MOD_SMS_2,

   MOD_SIM,

   MOD_SIM_2,


    
   MOD_L4C,

   MOD_L4C_2,

   MOD_TCM,

   MOD_TCM_2,

   MOD_SMSAL,

   MOD_SMSAL_2,

   MOD_UEM,
   MOD_RAC,

   MOD_RAC_2,

   MOD_SMU,

   MOD_SMU_2,

   MOD_USAT,
   MOD_CSM,

   MOD_CSM_2,

   MOD_ENG,

   MOD_ENG_2,

   MOD_PHB,

   MOD_PHB_2,


    
   MOD_RRM,

   MOD_RRM_2,






   MOD_AS,

   MOD_AS_2,

   MOD_RMPC = MOD_AS,

   MOD_RMPC_2 = MOD_AS_2,

   MOD_RMC,

   MOD_RMC_2,


   MOD_RLC,

   MOD_RLC_2,

   MOD_MAC,

   MOD_MAC_2,

   MOD_LAPDM,

   MOD_LAPDM_2,

   MOD_MPAL,

   MOD_MPAL_2,








   MOD_REASM,

   MOD_REASM_2,


    
   MOD_SNDCP,

   MOD_SNDCP_2,

   MOD_SM,

   MOD_SM_2,

   MOD_LLC,

   MOD_LLC_2,


    
   MOD_TDT,

   MOD_TDT_2,

   MOD_RLP,

   MOD_RLP_2,

   MOD_L2R,

   MOD_L2R_2,

   MOD_T30,

   MOD_T30_2,

   MOD_FA,

   MOD_FA_2,


    
   MOD_MED,
   MOD_AUD=MOD_MED,


   MOD_MED_V,











   MOD_MMI,

   MOD_L1,

   MOD_L1_2,

   MOD_L1HISR,
   MOD_L1SP,
   MOD_L1SPHISR,





   MOD_IDLE,

   MOD_TP_TASK,





   MOD_DRVKBD,
   MOD_BMT,

   MOD_AUX,


   MOD_OBEX,
   MOD_IRCOMM,
   MOD_LAP, 
   MOD_LMP,
   MOD_TTP,
   MOD_IRDA_HISR,

   MOD_USB,


   MOD_FMT, 


   MOD_DRV_HISR,

   MOD_EINT_HISR,

   MOD_UART1_HISR,
   MOD_UART2_HISR,
   MOD_UART3_HISR,

   MOD_KEYPAD_HISR,
   MOD_GPT_HISR,
   MOD_RTC_HISR,
   MOD_VISUAL_HISR,

   MOD_USB_HISR,

   MOD_JPEG_HISR,
   MOD_RESIZER_HISR,

   MOD_MSDC_HISR,


   MOD_ISP_HISR,











   MOD_TIMER,
   MOD_SYSTEM,
   MOD_SYSDEBUG,


   MOD_FLC,


   MOD_ABM,

   MOD_PPP,

   MOD_TCPIP,

   MOD_SOC,

   MOD_WAP,

   MOD_WPS,

   MOD_J2ME,
   MOD_JASYN,
   
   MOD_EMAIL,







   MOD_DT,



   MOD_GDC,
   MOD_GDD,


   MOD_IMPS,
   
   MOD_SIP,   
   MOD_POC,

   MOD_BT,

   MOD_XDM,

   MOD_WNDRV,
   MOD_WNDRV_HISR,
   MOD_SUPC,

   MOD_DHCP,
   MOD_TFTP,
   MOD_SAF,
   MOD_VOIP,

   MOD_IDLER,






   MOD_MED_C,


   MOD_SYNCML,

















   MOD_RTSP,
   MOD_DM,





   MOD_TDMB,













   MOD_CERTMAN,

   MOD_TLS,






   MOD_CUSTOM_BEGIN,
   LAST_MOD_ID = (MOD_CUSTOM_BEGIN - 1 +  16 ),

    
   MOD_LIBRARY_BEGIN,

   MOD_SST_COMMON,
   MOD_SST_INIT,
   MOD_SST_TASK,
   MOD_SST_ITC,
   MOD_SST_TIMER,
   MOD_SST_MEM,
   MOD_SST_BUFF,
   MOD_SST_MISC,
   MOD_EMS,
   MOD_DP_ENGINE,
   MOD_SDP,
   MOD_SSL,
   MOD_MMI_FW,
   MOD_MMI_COMMON_APP,
   MOD_MMI_MEDIA_APP,
   MOD_MMI_CONN_APP,
   MOD_MMI_INET_APP,

   END_OF_MOD_ID
} module_type;

 


 














#line 390 "kal\include\kal_release.h"
#line 1 "kal\include\kal_non_specific_general_types.h"
 


































 











































































































 










 


typedef unsigned char           kal_uint8;
typedef signed char             kal_int8;
typedef char                    kal_char;
typedef unsigned short          kal_wchar;

typedef unsigned short int      kal_uint16;
typedef signed short int        kal_int16;

typedef unsigned int            kal_uint32;
typedef signed int              kal_int32;







   typedef unsigned long long   kal_uint64;
   typedef signed long long     kal_int64;







   typedef int kal_jmpbuf[32];


typedef enum 
{
  KAL_FALSE,
  KAL_TRUE
} kal_bool;

typedef void (*kal_func_ptr)(void);

 









































#line 391 "kal\include\kal_release.h"


#line 1 "init\include\task_main_func.h"
 


































 






































 










 


typedef struct task_entry_struct
{
   task_indx_type task_indx;
} task_entry_struct;

 


extern void stack_generic_layer_task( task_entry_struct *task_entry_ptr);



#line 394 "kal\include\kal_release.h"


#line 1 "kal\common\include\kal_common_defs.h"
 


































 
























































































































































 










 




 


typedef enum {
    KAL_NO_WAIT,
    KAL_INFINITE_WAIT
} kal_wait_mode;

typedef enum {
    KAL_SUCCESS,
    KAL_ERROR,
    KAL_Q_FULL,
    KAL_Q_EMPTY,
    KAL_SEM_NOT_AVAILABLE,
    KAL_WOULD_BLOCK,
    KAL_MESSAGE_TOO_BIG,
    KAL_INVALID_ID,
    KAL_NOT_INITIALIZED,
    KAL_INVALID_LENGHT,
    KAL_NULL_ADDRESS,
    KAL_NOT_RECEIVE,
    KAL_NOT_SEND,
    KAL_MEMORY_NOT_VALID,
    KAL_NOT_PRESENT,
    KAL_MEMORY_NOT_RELEASE
} kal_status;

typedef enum {
    KAL_SEM_GIVEN,
    KAL_SEM_TAKEN
} kal_sem_state;

typedef enum {
    KAL_MUTEX_GIVEN,
    KAL_MUTEX_TAKEN
} kal_mutex_state;

typedef enum {
     
    KAL_ERROR_KAL_INTERNAL_FAIL                     = 0,

    KAL_ERROR_KAL_SUB_ERROR_CODE1                   = 1,
    KAL_ERROR_KAL_SUB_ERROR_CODE2                   = 2,
    KAL_ERROR_KAL_SUB_ERROR_CODE3                   = 3,
    KAL_ERROR_KAL_SUB_ERROR_CODE4                   = 4,
    KAL_ERROR_KAL_SUB_ERROR_CODE5                   = 5,
    KAL_ERROR_KAL_SUB_ERROR_CODE6                   = 6,
    KAL_ERROR_KAL_SUB_ERROR_CODE7                   = 7,
    KAL_ERROR_KAL_SUB_ERROR_CODE8                   = 8,

     
    KAL_ERROR_KALINIT_INIT_FAILED                   = 0x0101,
    KAL_ERROR_KALINIT_INIT_CREATE_SEM_FAILED,
    KAL_ERROR_KALINIT_INIT_CREATE_QU_MUTEX_FAILED,
    KAL_ERROR_KALINIT_INIT_CREATE_POOL_MUTEX_FAILED,
    KAL_ERROR_KALINIT_INIT_CREATE_TIMER_MUTEX_FAILED,
    KAL_ERROR_KALINIT_INIT_CREATE_MEM_MUTEX_FAILED,
    KAL_ERROR_KALINIT_INIT_MEMFAILED,
    KAL_ERROR_KALINIT_MEMINIT_FAILED,
    KAL_ERROR_KALINIT_CACHEINIT_FAILED,
    KAL_ERROR_KALINIT_CRCCHECK_FAILED,

     
    KAL_ERROR_TASKMNGT_CREATE_MEMFAILED             = 0x0201,
    KAL_ERROR_TASKMNGT_CREATE_STACKFAILED,
    KAL_ERROR_TASKMNGT_CREATE_FAILED,
    KAL_ERROR_TASKMNGT_DELETE_FAILED,
    KAL_ERROR_TASKMNGT_SLEEP_FAILED,
    KAL_ERROR_TASKMNGT_GETID_FAILED,
    KAL_ERROR_TASKMNGT_STACKOVERFLOW,

     
    KAL_ERROR_HISRMNGT_CREATE_MEMFAILED             = 0x0211,
    KAL_ERROR_HISRMNGT_CREATE_STACKFAILED,
    KAL_ERROR_HISRMNGT_CREATE_FAILED,
    KAL_ERROR_HISRMNGT_DELETE_FAILED,
    KAL_ERROR_HISRMNGT_SLEEP_FAILED,
    KAL_ERROR_HISRMNGT_ACTIVATE_FAILED,
    KAL_ERROR_HISRMNGT_GETID_FAILED,
    KAL_ERROR_HISRMNGT_STACKOVERFLOW,
    KAL_HISRMNGT_REG_FAILED,

     
    KAL_ERROR_ITC_QCREATE_MEMFAILED                 = 0x0301,
    KAL_ERROR_ITC_QCREATE_DATAMEMFAILED,
    KAL_ERROR_ITC_QCREATE_FAILED,    
    KAL_ERROR_ITC_QCREATE_FAILED_INT,
    KAL_ERROR_ITC_QDELETE_FAILED = KAL_ERROR_ITC_QCREATE_FAILED_INT,
    KAL_ERROR_ITC_QENQUE_FAILED,
    KAL_ERROR_ITC_QENQUE_MEMFAILED,
    KAL_ERROR_ITC_QDEQUE_FAILED,

    KAL_ERROR_ITC_MCREATE_MEMFAILED                 = 0x0401,
    KAL_ERROR_ITC_MDELETE_FAILED,
    KAL_ERROR_ITC_MCREATE_FAILED,
    KAL_ERROR_ITC_MTAKE_FAILED,
    KAL_ERROR_ITC_MGIVE_FAILED,
    KAL_ERROR_ITC_MTAKE_INTERNAL_FAILED,
    KAL_ERROR_ITC_MGIVE_INTERNAL_FAILED,

    KAL_ERROR_ITC_SCREATE_MEMFAILED                 = 0x0411,
    KAL_ERROR_ITC_SDELETE_FAILED,
    KAL_ERROR_ITC_SCREATE_FAILED,
    KAL_ERROR_ITC_STAKE_FAILED,
    KAL_ERROR_ITC_SGIVE_FAILED,

    KAL_ERROR_ITC_EGCREATE_MEMFAILED                = 0x0421,
    KAL_ERROR_ITC_EGDELETE_FAILED,
    KAL_ERROR_ITC_EGCREATE_FAILED,
    KAL_ERROR_ITC_EGSET_FAILED,
    KAL_ERROR_ITC_EGRETRIEVE_FAILED,

    KAL_ERROR_ITC_ILM_MULTIALLOC                    = 0x0431,
    KAL_ERROR_ITC_ILM_NOT_ALLOC,

    KAL_ERROR_ITC_MSGID_CODE_EXCEED                 = 0x441,

     
    KAL_ERROR_TIMER_CREATE_MEMFAILED                = 0x0601,
    KAL_ERROR_TIMER_CREATE_FAILED,
    KAL_ERROR_TIMER_DELETE_FAILED,
    KAL_ERROR_TIMER_SET_FAILED,
    KAL_ERROR_TIMER_CANCEL_FAILED,
    KAL_ERROR_TIMER_GETTIME_FAILED,
    KAL_ERROR_TIMER_GETTIMEREMAINING_FAILED,
    KAL_ERROR_TIMER_SCHED_FAILED,
    KAL_ERROR_TIMER_CONTROL_FAILED,

     
    KAL_ERROR_MEMMNGT_ALLOC_FAILED                  = 0x0701,
    KAL_ERROR_MEMMNGT_ALLOC_DEBUGMEM_FAILED,
    KAL_ERROR_MEMMNGT_DEALLOC_FAILED,
    KAL_ERROR_MEMMNGT_DEALLOC_DEBUGMEM_FAILED,
    KAL_ERROR_MEMMNGT_MEMCPY_FAILED,
    KAL_ERROR_MEMMNGT_MEMSET_FAILED,

     
    KAL_ERROR_BUFFMNGR_CREATE_MEMFAILED             = 0x0801,
    KAL_ERROR_BUFFMNGR_CREATE_FAILED,
    KAL_ERROR_BUFFMNGR_DELETE_FAILED,
    KAL_ERROR_BUFFMNGR_GETBUFF_FAILED,
    KAL_ERROR_BUFFMNGR_GETBUFF_SIZE_FAILED,
    KAL_ERROR_BUFFMNGR_GET_DATABUFF_FAILED,
    KAL_ERROR_BUFFMNGR_RELEASEBUFF_FAILED,
    KAL_ERROR_BUFFMNGR_RELEASE_DATABUFF_FAILED,
    KAL_ERROR_BUFFMNGR_ISVALID_FAILED,
    KAL_ERROR_BUFFMNGR_FOOTER_FAILED,
    KAL_ERROR_BUFFMNGR_HEADER_FAILED,
    KAL_ERROR_BUFFMNGR_FOOTER_FAILED_GET,
    KAL_ERROR_BUFFMNGR_HEADER_FAILED_GET,   
    KAL_ERROR_BUFFMNGR_STAMP_FAILED,
    KAL_ERROR_BUFFMNGR_GETBUFF_INTERNAL_FAILED,
    KAL_ERROR_BUFFMNGR_FREEBUFF_INTERNAL_FAILED,

     
    KAL_ERROR_ERRORMNGR_FATALHANDLER_FAILED         = 0x0901,
    KAL_ERROR_ERRORMNGR_REGISTERHANDLER_FAILED,

     
    KAL_ERROR_FILESYS_INTERNAL_FAILED               = 0x0a01,

     
    KAL_ERROR_NUCLEUS_INTERNAL_FAILED               = 0x0b01,
    KAL_ERROR_DIV_BY_0_FAILED,
    KAL_ERROR_ABNORMAL_RESET_FAILED,
    KAL_ERROR_NON_REGISTERED_LISR,
    KAL_ERROR_DEBUGJ2ME_INTERNAL_ALERT,
    KAL_ERROR_SHOULD_NOT_EXECUTE,

     
    KAL_ERROR_EVTSCH_CREATE_MEMFAILED               = 0x0c01,
    KAL_ERROR_EVTSCH_CREATE_FAILED,
    KAL_ERROR_EVTSCH_GETBUFF_FAILED,
    KAL_ERROR_EVTSCH_RELEASEBUFF_FAILED,
    KAL_ERROR_EVTSCH_CANCEL_FAILED,

     
    KAL_ERROR_DEBUGBUFFMNGR_GETPOOLSTAT_FAILED      = 0x1001,
    KAL_ERROR_DEBUGBUFFMNGR_RESETPOOLSTAT_FAILED,
    KAL_ERROR_DEBUGBUFFMNGR_GETBUFFSTAT_FAILED,
    KAL_ERROR_DEBUGBUFFMNGR_RESETBUFFSTAT_FAILED,
    KAL_ERROR_DEBUGBUFFMNGR_POOLID_VALIDATION_FALIED,
    KAL_ERROR_DEBUGBUFFMNGR_BUFF_OVERRUN_FAILED,

    KAL_ERROR_DEBUGERRORMNGR_REGISTERPRINT_FAILED   = 0x1101,
    KAL_ERROR_DEBUGERRORMNGR_PRINT_FAILED,

    KAL_ERROR_DEBUGITC_GETQSTAT_FAILED              = 0x1201,
    KAL_ERROR_DEBUGITC_RESETQSTAT_FAILED,

    KAL_ERROR_DEBUGTIMER_GETTIMERSTAT_FAILED        = 0x1301,
    KAL_ERROR_DEBUGTIMER_RESETTIMERSTAT_FAILED,

    KAL_ERROR_CUSTOMER_TASK_ID_EXCEED_UPPER_BOUND   = 0x1501,
    KAL_ERROR_CUSTOMER_MOD_ID_EXCEED_UPPER_BOUND,
    KAL_ERROR_CUSTOMER_MEESAGE_ID_EXCEED_UPPER_BOUND,
    KAL_ERROR_CUSTOMER_SAP_ID_EXCEED_UPPER_BOUND,

    KAL_ERROR_ESM_ADD_INSTANCE_FAILED                = 0x1601,
    KAL_ERROR_ESM_ADD_1stINSTANCEENTRY_FAILED,
    KAL_ERROR_ESM_DEL_INSTANCEENTRY_FAILED,
    KAL_ERROR_ESM_EXEC_CONTEXT_FAILED,
    KAL_ERROR_ESM_GET_INSTANCEPOINTER_FAILED,
    KAL_ERROR_ESM_POPULATE_FAILED,
    KAL_ERROR_ESM_INIT_INSTANCEARRAY_FAILED,
    KAL_ERROR_FSM_ADD_EVENTS2LIST_FAILED,
    KAL_ERROR_FSM_ADD_INSTANCEENTRY_FAILED,
    KAL_ERROR_FSM_DEL_INSTANCE_FAILED,
    KAL_ERROR_FSM_EXEC_TRANSITIONFUNC_FAILED,
    KAL_ERROR_FSM_GET_FREEINSTANCE_FAILED,
    KAL_ERROR_FSM_GET_INSTANCEDATA_FAILED,
    KAL_ERROR_FSM_HANDLE_SAVEDEVENTS_FAILED,
    KAL_ERROR_FSM_INIT_CONTEXT_FAILED,
    KAL_ERROR_FSM_PROCESS_EVENTS_FAILED,
    KAL_ERROR_LSM_DEL_EVENTLIST_FAILED,
    KAL_ERROR_LSM_UNDEL_LISTOBJ_FAILED,
    KAL_ERROR_MSM_TRANSITION_FAILED


} kal_error_type;

typedef struct
{
    kal_uint32 param1;
    kal_uint32 param2;
    kal_uint32 param3;
    kal_uint32 param4;
    kal_uint32 param5;
    kal_uint32 param6;
    kal_uint32 param7;
} kal_error_param;




typedef struct {
   kal_uint32	mutex_id;
   kal_uint8	priority;
   kal_uint8	index;
   kal_uint8	head;   
   kal_uint8	tail;   
} *kal_internal_enh_mutexid, kal_enh_mutex_type;


typedef void (* kal_task_func_ptr)(task_entry_struct *task_entry_ptr);
typedef void (* kal_hisr_func_ptr)(void);
typedef void (* kal_error_func_ptr)(kal_char *, kal_uint32, kal_uint32);
typedef void (* kal_timer_func_ptr)(void *);





#line 397 "kal\include\kal_release.h"
#line 1 "kal\common\include\kal_internal_macros.h"
 


































 







































 










 












#line 398 "kal\include\kal_release.h"






 
















 















 




typedef enum
{
    KAL_PRIORITY_CLASS0        =     0,
    KAL_PRIORITY_CLASS1        =     10,
    KAL_PRIORITY_CLASS2        =     20,
    KAL_PRIORITY_CLASS3        =     30,
    KAL_PRIORITY_CLASS4        =     40,
    KAL_PRIORITY_CLASS5        =     50,
    KAL_PRIORITY_CLASS6        =     60,
    KAL_PRIORITY_CLASS7        =     70,
    KAL_PRIORITY_CLASS8        =     80,
    KAL_PRIORITY_CLASS9        =     90,
    KAL_PRIORITY_CLASS10       =     100,
    KAL_PRIORITY_CLASS11       =     110,
    KAL_PRIORITY_CLASS12       =     120,
    KAL_PRIORITY_CLASS13       =     130,
    KAL_PRIORITY_CLASS14       =     140,
    KAL_PRIORITY_CLASS15       =     150,
    KAL_PRIORITY_CLASS16       =     160,
    KAL_PRIORITY_CLASS17       =     170,
    KAL_PRIORITY_CLASS18       =     180,
    KAL_PRIORITY_CLASS19       =     190,
    KAL_PRIORITY_CLASS20       =     200,
    KAL_PRIORITY_CLASS21       =     210,
    KAL_PRIORITY_CLASS22       =     220,
    KAL_PRIORITY_CLASS23       =     230,
    KAL_PRIORITY_CLASS24       =     240,
    KAL_PRIORITY_CLASS25       =     250
} kal_priority_type;


typedef void *kal_taskid;

typedef void *kal_hisrid;

typedef struct
{
    kal_uint8 unused;
} *kal_semid;

typedef struct 
{
    kal_uint8 unused;
} *kal_msgqid;

typedef struct
{
    kal_uint32 pending_msgs;
    kal_uint32 max_msgs;
} kal_msgq_info;

typedef struct
{
    kal_uint8 unused;
} *kal_mutexid;

typedef struct 
{
    kal_uint8 unused;
} *kal_eventgrpid;

typedef struct
{
    kal_uint8 unused;
} *kal_poolid;

typedef struct
{
    kal_uint8 unused;
} *kal_timerid;

typedef void *KAL_ADM_ID;

typedef enum
{
    INVAID_EXCEPTION                =  0,
    UNDEF_EXCEPTION                 =  1,
    SWI_EXCEPTION                   =  2,
    PREFETCH_EXCEPTION              =  3,
    DATAABORT_EXCEPTION             =  4,
    ASSERT_FAIL_EXCEPTION           =  5,
    SYS_FATALERR_EXT_TASK_EXCEPTION =  6,
    SYS_FATALERR_EXT_BUF_EXCEPTION  =  7,
    SYS_LOCKUP                      =  8,
    ASSERT_DUMP_EXTENDED_RECORD     =  9,
    NUM_EXCEPTION
} exception_type;

enum { ASSERT_DUMP_PARAM_MAX = 10 };

typedef struct ASSERT_DUMP_PARAM
{
    kal_uint32 addr[ASSERT_DUMP_PARAM_MAX];
    kal_uint32 len[ASSERT_DUMP_PARAM_MAX];   
} ASSERT_DUMP_PARAM_T;

typedef enum
{
    FACTORY_BOOT = 0,
    NORMAL_BOOT = 1,
    USBMS_BOOT =  2,
    NUM_OF_BOOT_MODE,
    UNKNOWN_BOOT_MODE = 0xff
} boot_mode_type;

typedef unsigned short WCHAR;


 
















 



__inline boot_mode_type stack_query_boot_mode(void)
{
	extern boot_mode_type system_boot_mode;
	return system_boot_mode;
} 

__inline void * kal_mem_cpy(void* dest, const void* src, kal_uint32 size)
{
    return memcpy ( dest, src, size );
}


__inline void * kal_mem_set(void* dest, kal_uint8 value, kal_uint32 size)
{
    return memset ( dest, value, size );
}

__inline kal_int32 kal_mem_cmp(const void* src1, const void* src2, kal_uint32 size)
{
    return memcmp ( src1, src2, size );
}


 



 



void kal_initialize(void);
void kal_initialize_mem(void);
kal_bool kal_query_systemInit(void);

 



kal_taskid kal_create_task(kal_char *task_name_ptr, kal_uint8 priority, kal_uint32 stack_size,                            kal_task_func_ptr entry_func_ptr, void *entry_param_ptr, kal_uint8 options);

void kal_delete_task(kal_taskid task_id);
void kal_sleep_task(kal_uint32 time_in_ticks);
kal_hisrid kal_create_hisr(kal_char* hisr_name, kal_uint8 priority, kal_uint32 stack_size,                            kal_hisr_func_ptr entry_func, kal_uint8 options);

void kal_activate_hisr(kal_hisrid ext_hisr_id);
kal_uint32 kal_change_priority(kal_taskid taskid, kal_uint32 new_priority);
kal_uint32 stack_change_priority_by_module_ID(module_type mod_ID, kal_uint32 new_priority);
kal_uint32 stack_change_default_priority_by_module_ID(module_type mod_ID, kal_uint32 new_priority);
void *kal_get_task_stack_ptr(kal_taskid taskid);
kal_uint32 kal_get_task_remain_stack_size(kal_taskid task);
kal_bool kal_if_hisr(void);
kal_taskid kal_get_task_self_id(void);
void kal_get_my_task_index(kal_uint32 *index);
kal_bool kal_if_lisr(void);


 



kal_msgqid kal_create_msg_q(kal_char* queue_name_ptr, kal_uint16 msg_size, kal_uint16 max_msgs);
void kal_delete_msg_q(kal_msgqid queue_id);
kal_status kal_enque_msg(kal_msgqid ext_msg_q_id, void *buffer_ptr, kal_uint16 msg_size, 
                         kal_wait_mode wait_mode, kal_bool message_to_head);
kal_status kal_deque_msg(kal_msgqid ext_msg_q_id, void* buffer_ptr, kal_uint16 *msg_size,
                         kal_wait_mode wait_mode);
kal_bool kal_get_queue_info(kal_msgqid task_ext_qid, kal_msgq_info *msgq_info);

 



kal_mutexid kal_create_mutex(kal_char* mutex_name_ptr);
void kal_take_mutex(kal_mutexid mutex_id);
void kal_give_mutex(kal_mutexid mutex_id);

kal_mutexid kal_create_enh_mutex( kal_char* mutex_name_ptr);
void kal_take_enh_mutex( kal_mutexid    mutex_id );
void kal_give_enh_mutex( kal_mutexid    mutex_id );

 



kal_semid kal_create_sem(kal_char *sem_name_ptr, kal_uint32 initial_count);
kal_status kal_take_sem(kal_semid sem_id, kal_wait_mode wait_mode);
void kal_give_sem(kal_semid sem_id);
kal_uint32 kal_query_sem_value(kal_semid ext_sem_id_ptr);

 



kal_eventgrpid kal_create_event_group(kal_char *eventgrp_name);
void kal_delete_eventgrp(kal_eventgrpid eg_id);
kal_status kal_set_eg_events(kal_eventgrpid eg_id, kal_uint32 events, kal_uint8 operation);
kal_status kal_retrieve_eg_events(kal_eventgrpid eg_id, kal_uint32 requested_events, kal_uint8 operation, 
                                  kal_uint32 *retrieved_events, kal_uint32 suspend);

 



void kal_evshed_create_pool(void);
void* kal_evshed_get_mem(kal_uint32 size);
void kal_evshed_free_mem(void* buff_ptr);

 



extern KAL_ADM_ID kal_adm_create(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_bool islogging);
extern void *kal_adm_internal_alloc(KAL_ADM_ID adm_id, kal_uint32 size, char *filename, kal_uint32 line);

extern void *kal_adm_internal_alloc_with_info(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);

extern void kal_adm_free(KAL_ADM_ID adm_id, void *mem_addr);
extern kal_status kal_adm_delete(KAL_ADM_ID adm_id);
extern kal_uint32 kal_adm_get_max_alloc_size(KAL_ADM_ID adm_id);
extern kal_uint32 kal_adm_get_total_left_size(KAL_ADM_ID adm_id);
extern void kal_adm_print_log(KAL_ADM_ID adm_id);
extern void *kal_adm_check_integrity(KAL_ADM_ID adm_id);

 



extern kal_uint32 kal_sys_mem_query_freesize(void);
extern kal_uint32 kal_debug_mem_query_freesize(void);


 



kal_poolid kal_create_buff_pool(kal_uint32 buff_size, kal_uint16 num_buffs);
void kal_delete_buff_pool(kal_poolid pool_id);
void *kal_get_buffer(kal_poolid ext_pool_id, kal_uint32 alloc_id, kal_uint32 size,
                     kal_uint32 *num_free_buffs_p, kal_char *alloc_file, kal_uint32 alloc_line,
                     kal_bool alloc_check);
void kal_release_buffer(void *usr_buff, kal_uint32 dealloc_id, kal_char *dealloc_file, 
                        kal_uint32 dealloc_line);
kal_poolid kal_get_poolid_from_usr_buff(void* usr_buff_p);
kal_uint32 kal_get_num_free_buffs( kal_poolid pool_id );
kal_bool kal_query_ctrlbuf_max_consumption(kal_uint32 *ptr);


 



kal_timerid kal_create_timer(kal_char* timer_name_ptr);
void kal_set_timer(kal_timerid timer_id, kal_timer_func_ptr handler_func_ptr, void* handler_param_ptr,                    kal_uint32 delay, kal_uint32 reschedule_time);

void kal_cancel_timer(kal_timerid timer_id);
void kal_get_time(kal_uint32* ticks_ptr);
kal_uint32 kal_get_time_remaining(kal_timerid timer_id);
kal_uint32 kal_secs_to_ticks(kal_uint32 secs);
kal_uint32 kal_milli_secs_to_ticks(kal_uint32 milli_secs);
kal_uint32 kal_ticks_to_secs(kal_uint32 ticks);
kal_uint32 kal_ticks_to_milli_secs(kal_uint32 ticks);
kal_uint32 kal_check_allowed_sleep_clock(kal_uint32 period_ticks);
void kal_recover_clock(kal_uint32 delayed_ticks);
void kal_invoke_expired_events(kal_uint32 delayed_ticks);







 



void kal_fatal_error_handler(kal_char* error_message_ptr, kal_uint32 error_code, kal_uint32 os_error_code);
void kal_register_fatal_error_handler(kal_error_func_ptr fatal_handler_ptr);
void kal_exit(void);















extern void kal_debug_print(kal_char* string_to_be_printed);
extern void dbg_print(char *fmt,...);













extern void stack_print(char* string);








 



extern kal_char *kal_str_dup(kal_char *string);
extern kal_char *kal_strtok_r(kal_char *string, const kal_char *seperators, kal_char **ppLast);

extern char *basename(char *file);


extern void kal_assert_fail(char* expr, char* file, kal_uint32 line, kal_bool isext, kal_uint32 ex1, kal_uint32 ex2, kal_uint32 ex3, ASSERT_DUMP_PARAM_T *dump_param);







 


























 


















 



 
int kal_wstrlen(const WCHAR *wstr);
WCHAR *kal_wstrcpy(WCHAR *to, const WCHAR *from);
WCHAR *kal_wstrncpy(WCHAR *to, const WCHAR *from, int n);
int kal_wstrcmp(const WCHAR *s1, const WCHAR *s2);
int kal_wstrncmp(const WCHAR *s1, const WCHAR *s2, int n);
WCHAR *kal_wstrcat(WCHAR *s1, const WCHAR *s2);
WCHAR *kal_wstrncat(WCHAR *s1, const WCHAR *s2, int n);
WCHAR *kal_wstrchr(const WCHAR *s, int c);
WCHAR *kal_wstrrchr(const WCHAR *str, int ch);

 
int kal_dchar_strlen(const char *wstr);
char *kal_dchar_strcpy(char *to, const char *from);
char *kal_dchar_strncpy(char *to, const char *from, int n);
int kal_dchar_strcmp(const char *s1, const char *s2);
int kal_dchar_strncmp(const char *s1, const char *s2, int n);
char *kal_dchar_strcat(char *s1, const char *s2);
char *kal_dchar_strncat(char *s1, const char *s2, int n);
char *kal_dchar_strchr(const char *s, int c);
char *kal_dchar_strrchr(const char *str, int ch);
void kal_dchar2char(WCHAR *outstr, char* tostr);

void kal_wsprintf(WCHAR *outstr, char *fmt,...);



 




#line 1 "kal\nucleus\include\kal_nucleus_common_defs.h"
 


































 
























































 












 


 





























 


 
typedef NU_TASK               kal_os_task_type;
typedef NU_HISR               kal_os_hisr_type;
typedef NU_QUEUE              kal_os_queue_type;
typedef NU_SEMAPHORE          kal_os_mutex_type;
typedef NU_SEMAPHORE          kal_os_sem_type;
typedef NU_EVENT_GROUP        kal_os_eventgrp_type;
typedef NU_TIMER              kal_os_timer_type;
typedef NU_PARTITION_POOL     kal_os_pool_type;

 
 
typedef  void  (*kal_nu_task_func_ptr) (UNSIGNED,  void  *);
typedef  void  (*kal_nu_hisr_func_ptr) ( void );
typedef  void  (*kal_nu_timer_func_ptr) (UNSIGNED);

typedef struct {
   struct kal_int_pool_struct*  pool_id;
   void *                       start_address;
   void *                      end_address;
} kal_buff_pool_info;

 



 




















#line 890 "kal\include\kal_release.h"
#line 1 "kal\nucleus\include\kal_nucleus.h"
 


































 




















































































 












 




















 










typedef struct kal_int_task_struct {
   kal_os_task_type task_id;
   kal_char *task_name;
   kal_uint32 task_index;
} *kal_internal_taskid, kal_task_type;


typedef struct kal_int_hisr_struct {
   kal_os_hisr_type hisr_id;
   kal_char *hisr_name;
} *kal_internal_hisrid, kal_hisr_type;

















 




typedef struct kal_int_queue_statistics_struct {
    



   kal_uint16    current_num_msgs;
   kal_uint16    max_num_msgs_enqued;
} *kal_internal_queue_statistics, kal_queue_stat_type;

typedef struct {
   kal_os_queue_type    queue_id;
   kal_uint16           max_msg_size;
   kal_internal_queue_statistics    q_stat;
} *kal_internal_msgqid, kal_queue_type;

typedef struct kal_int_mutex_statistics_struct {
    
   struct kal_int_task_struct    *owner_task;
   kal_mutex_state               mutex_state;
} *kal_internal_mutex_statistics, kal_mutex_stat_type;

typedef struct {
   kal_os_mutex_type                         mutex_id;
   kal_os_task_type                          *owner_task;
   kal_mutex_state                           mutex_state;
   struct kal_int_mutex_statistics_struct    *mutex_stat;
} *kal_internal_mutexid, kal_mutex_type;

typedef struct kal_int_sem_statistics {
    
   kal_uint16           current_value;
   kal_uint16           max_value;
   kal_uint16           min_value;
} *kal_internal_sem_statistics, kal_sem_stat_type;

typedef struct {
   kal_os_sem_type                           sem_id;
   kal_sem_state                             sem_state;
   struct kal_int_sem_statistics             *sem_stat;
}*kal_internal_semid, kal_sem_type;


















typedef kal_os_eventgrp_type *kal_internal_eventgrpid, kal_eventgrp_type;


 




























typedef struct {
   kal_os_timer_type       timer_id;
   kal_timer_func_ptr      func_ptr;
   void *                  timer_param_ptr;
   kal_uint32              set_time;
} * kal_internal_timerid, kal_timer_type;




 






typedef struct kal_int_pool_struct {
   kal_os_pool_type        pool_id;
   kal_bool          pool_debug_mask;



   kal_uint32              buff_size;


   struct kal_int_pool_statistics_struct    *pool_stat;
   kal_mutexid             protecting_mutex;

} *kal_internal_poolid, kal_pool_type;

typedef struct {
   kal_uint32 hdr_stamp;
   kal_internal_taskid task_id;
   kal_internal_poolid pool_id;
   kal_uint8 usr_buff[1];
} buff_hdr_t;










 


















 


extern kal_char sys_info_str[128];


 


kal_uint32 kal_milli_secs_to_ticks( kal_uint32 milli_secs );
kal_uint32 kal_secs_to_ticks ( kal_uint32 secs );





#line 891 "kal\include\kal_release.h"









#line 1 "kal\common\include\kal_internal.h"
 


































 











































 








   

 


extern void* kal_internal_allocate_buffer( void* pool_id, unsigned short buff_size);
extern void kal_internal_release_buffer( void* );


   void* kal_debug_mem_alloc(kal_uint32 size);
   void kal_debug_mem_free(void* mem_ptr);






   void* kal_int_mem_alloc( kal_uint32  size );
   void kal_int_mem_free( void* mem_ptr );





#line 901 "kal\include\kal_release.h"
#line 1 "stacklib\include\lcd_ip_cqueue.h"
 


































 






















































 









 










 



 



































    


 









































 


































 




































 





































 















































 






#line 902 "kal\include\kal_release.h"


#line 1 "kal\common\include\kal_debug_common_defs.h"
 


































 















































































 















 














 





 





typedef enum {
   KAL_BUFF_DEALLOCATED,
   KAL_BUFF_ALLOCATED,
   KAL_BUFF_CORRUPTED
} kal_buff_state;

typedef struct kal_history_node {
   kal_buff_state                 buffer_state;
   struct kal_int_task_struct*    owner_task;
   kal_char*                      file_name;
   kal_uint32                     line;
   kal_uint32                     alloc_id;



   kal_uint32                     size;

} kal_history_node_t;

typedef struct kal_int_buff_stats {
   kal_internal_taskid owner_task;
   kal_uint8 buffer_state;
    struct { unsigned int head; unsigned int tail; unsigned int multiple; unsigned int max_used_item; kal_bool is_full;  kal_history_node_t  queue[  3  ]; }  buff_history;




} *kal_internal_buff_statistics, kal_buff_stat_type;



 





extern void kal_debug_validate_poolid(kal_internal_poolid pool_id, kal_uint32* pool_index_p);

extern void kal_debug_update_buff_history(buff_hdr_t* buff_hdr_p,
                                          kal_buff_state buff_state,
                                          kal_uint32 size,
                                          kal_char* file,
                                          kal_uint32 line,
                                          kal_uint32 alloc_id);

extern kal_bool is_buff_over_run(void* dest_ptr, kal_uint32 size, kal_uint32 pool_index);

extern void kal_reset_pool(kal_internal_poolid pool_id);

extern void kal_debug_validate_buff_hdr(buff_hdr_t* buff_hdr);

extern kal_bool kal_debug_is_buff_footer_corrupted(kal_uint8* usr_buff,
                                                   kal_history_node_t* tail_node_p);

extern void kal_debug_get_last_history_node(void* buff_ptr, kal_history_node_t* tail_node_ptr);







extern kal_bool kal_debug_get_poolindex(void* buff_ptr, kal_uint32* index_p);


extern void * kal_nu_get_buff(kal_poolid pool_id_ptr);
extern void kal_nu_free_buff(void * buff_pt);


extern kal_uint16 kal_get_buff_num(void *buff_ptr);

extern void kal_debug_validate_buff_hdr( buff_hdr_t* buff_hdr );

extern void kal_debug_validate_buff_footer(kal_uint8* usr_buff, kal_history_node_t* tail_node_p);





extern void kal_uint_2_hex_str( kal_uint32 num, kal_char* string );

extern void kal_uint_2_str( kal_uint32 num, kal_char* string );

extern kal_bool kal_debug_is_history_empty( kal_internal_poolid pool_id, void*  buff_ptr );





extern void kal_validate_buff_footer(void *buff_ptr, kal_uint32 buff_size );

extern void kal_take_reentrant_mutex(kal_os_mutex_type *mutex_id);

extern void kal_give_reentrant_mutex(kal_os_mutex_type *mutex_id);

 






 


extern kal_buff_pool_info   pool_info_g [  40  ];
extern kal_uint8            num_buff_pools_created_g;







extern kal_internal_taskid  kal_task_ptrs_g [ RPS_TOTAL_STACK_TASKS ];
extern kal_internal_hisrid  kal_hisr_ptrs_g [  20  ];




#line 905 "kal\include\kal_release.h"



#line 1 "kal\nucleus\include\kal_debug_nucleus.h"
 


































 
















































 












 




















 





extern void kal_update_buff_footer(void *buff_ptr, kal_uint32 buff_size);


extern void kal_update_buff_header(void *buff_ptr, kal_taskid ext_task_id, kal_poolid ext_pool_id);
extern void kal_is_valid_buffer(void* buff_ptr, kal_bool *status);









#line 909 "kal\include\kal_release.h"




#line 1 "kal\include\kal_debug.h"
 


































 















































































 











 


struct ptr_node {
	void* ptr;
	kal_uint32 size;
	struct ptr_node* next_ptr;
};









typedef struct kal_pool_statistics_struct {
	kal_uint16 num_buffs;



	kal_uint32 buff_size;

	 
	kal_uint16 current_allocation;
	kal_uint16 max_num_allocated;
	kal_uint16 max_size_requested; 



} *kal_pool_statistics;





















extern kal_bool                  kal_buff_over_run_check_g;

typedef struct kal_ext_buff_stats {
	kal_buff_state  buffer_state;
	kal_char*       task_name;
} *kal_ext_buff_statistics, kal_ext_buff_stat_type;

typedef struct kal_buff_stats {
	kal_uint8   unused;
}* kal_buff_statistics;

typedef struct kal_int_pool_statistics_struct {
	struct kal_pool_statistics_struct   pool_info;
	struct kal_int_buff_stats*          buff_stat;
} *kal_internal_pool_statistics, kal_pool_stat_type;



typedef void(*kal_print_string_func_ptr)(kal_char*);

typedef enum {
	KAL_DEBUG_DISABLE,
	KAL_DEBUG_ENABLE
} kal_debug_state;

typedef enum {
	KAL_BUFFMGR     = 0x1,
	KAL_TIMERMGR    = 0x2,
	KAL_TASKMGR     = 0x4,
	KAL_ITC         = 0x8
} kal_module;









typedef struct kal_queue_statistics_struct {
	kal_uint8   unused;
}* kal_queue_statistics;

typedef struct kal_mutex_statistics_struct {
	kal_uint8   unused;
}* kal_mutex_statistics;

typedef struct kal_sem_statistics_struct {
	kal_uint8   unused;
}* kal_sem_statistics;









 




























 










void kal_debug_get_q_statistics( kal_msgqid  queue_id, kal_queue_statistics* stat_ptr );
void kal_debug_reset_q_statistics( kal_msgqid    queue_id );








 





void kal_debug_get_all_buff_statistics(kal_poolid pool_id, kal_ext_buff_statistics buff_stat_ptr);
void kal_debug_reset_pool_statistics(kal_poolid pool_id);
void kal_debug_get_buffer_statistics(void* buffer_ptr, kal_buff_statistics* stat_ptr);
void kal_debug_reset_buffer_statistics(void* buffer_ptr);
























void kal_debug_is_valid_buffer(void* buff_ptr, kal_bool* status_ptr);














 




 




















 











void kal_debug_register_print_string_function (kal_print_string_func_ptr func_ptr);
void kal_debug_print(kal_char* string_to_be_printed);
void kal_debug_print_int(kal_int32 int_to_be_printed);
void kal_debug_print_uint(kal_uint32 int_to_be_printed);
void kal_debug_print_uint_in_hex(kal_uint32 int_to_be_printed);
void kal_debug_enable_debug( kal_module debug_code, kal_debug_state    flag);
void kal_debug_abort( void );
void kal_debug_reset( void );




































#line 914 "kal\include\kal_release.h"
#line 1 "kal\include\kal_trace.h"
 


































 









































































































































#line 1 "c:\progra~1\arm\adsv1_2\include\stdarg.h"
 
 
 

 








  
  

    

    









      
    

 








 
 
typedef int *va_list[1];
    









    













    



















    









    







    



    


  

  







 
#line 175 "kal\include\kal_trace.h"
























   

   
   











typedef enum
{
   TRACE_FUNC,
   TRACE_STATE,
   TRACE_INFO,
   TRACE_WARNING,
   TRACE_ERROR,
   TRACE_GROUP_1,
   TRACE_GROUP_2,
   TRACE_GROUP_3,
   TRACE_GROUP_4,
   TRACE_GROUP_5,
   TRACE_GROUP_6,
   TRACE_GROUP_7,
   TRACE_GROUP_8,
   TRACE_GROUP_9,
   TRACE_GROUP_10,
   TRACE_PEER
}trace_class_enum;













extern void kal_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
extern void kal_trace_for_3rd_party( trace_class_enum, kal_uint32, const kal_char* , va_list);
extern void kal_lib_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
extern void kal_assert_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
extern void kal_wap_trace(module_type mod_id, trace_class_enum trc_class, const char *fmt,...);
extern void kal_buffer_trace(trace_class_enum trc_class, kal_uint32 msg_index, const kal_char* fmt, kal_uint32 buf_len, const kal_uint8* pData);
extern void kal_dev_trace(trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type,...);





















































extern void kal_prompt_trace(module_type, const kal_char *fmt,...);


























































typedef void (*TST_VC_CallBack)(const kal_uint8* pData, kal_uint32 nLen);

 



typedef enum
{
	TVCI_GPS_LOGGING,
	TVCI_LAST_ID
}
tst_virtual_channel_id;




#line 915 "kal\include\kal_release.h"



#line 1 "kal\common\include\kal_active_module.h"
 


































 













































 










 








 


extern module_type stack_int_get_active_module_id( void );

extern void stack_int_set_active_module_id( kal_uint32 task_index, module_type module_id );



#line 919 "kal\include\kal_release.h"





#line 131 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "adaptation\include\stack_common.h"
 


































 


















































































































































































































































































































































































































































 











 





 



 
 




typedef enum {

   MSG_ID_MM_CODE_BEGIN = 501,
   MSG_ID_MM_CODE_RANGE = 100,

   MSG_ID_CC_CODE_BEGIN = (MSG_ID_MM_CODE_BEGIN + MSG_ID_MM_CODE_RANGE),
   MSG_ID_CC_CODE_RANGE = 100,

   MSG_ID_DT_CODE_BEGIN = (MSG_ID_CC_CODE_BEGIN + MSG_ID_CC_CODE_RANGE),
   MSG_ID_DT_CODE_RANGE = 10,

   MSG_ID_CISS_CODE_BEGIN = (MSG_ID_DT_CODE_BEGIN + MSG_ID_DT_CODE_RANGE),
   MSG_ID_CISS_CODE_RANGE = 100,

   MSG_ID_SMS_CODE_BEGIN = (MSG_ID_CISS_CODE_BEGIN + MSG_ID_CISS_CODE_RANGE),
   MSG_ID_SMS_CODE_RANGE = 100,

   MSG_ID_SIM_CODE_BEGIN = (MSG_ID_SMS_CODE_BEGIN + MSG_ID_SMS_CODE_RANGE),
   MSG_ID_SIM_CODE_RANGE = 150,

   MSG_ID_L4C_CODE_BEGIN = (MSG_ID_SIM_CODE_BEGIN + MSG_ID_SIM_CODE_RANGE),
   MSG_ID_L4C_CODE_RANGE = 300,

   MSG_ID_TCM_CODE_BEGIN = (MSG_ID_L4C_CODE_BEGIN + MSG_ID_L4C_CODE_RANGE),
   MSG_ID_TCM_CODE_RANGE = 100,

   MSG_ID_CSM_CODE_BEGIN = (MSG_ID_TCM_CODE_BEGIN + MSG_ID_TCM_CODE_RANGE),
   MSG_ID_CSM_CODE_RANGE = 100,

   MSG_ID_SMSAL_CODE_BEGIN = (MSG_ID_CSM_CODE_BEGIN + MSG_ID_CSM_CODE_RANGE),
   MSG_ID_SMSAL_CODE_RANGE = 100,

   MSG_ID_SMU_CODE_BEGIN = (MSG_ID_SMSAL_CODE_BEGIN + MSG_ID_SMSAL_CODE_RANGE),
   MSG_ID_SMU_CODE_RANGE = 100,

   MSG_ID_UEM_CODE_BEGIN = (MSG_ID_SMU_CODE_BEGIN + MSG_ID_SMU_CODE_RANGE),
   MSG_ID_UEM_CODE_RANGE = 100,

   MSG_ID_RAC_CODE_BEGIN = (MSG_ID_UEM_CODE_BEGIN + MSG_ID_UEM_CODE_RANGE),
   MSG_ID_RAC_CODE_RANGE = 100,

   MSG_ID_USAT_CODE_BEGIN = (MSG_ID_RAC_CODE_BEGIN + MSG_ID_RAC_CODE_RANGE),
   MSG_ID_USAT_CODE_RANGE = 100,

   MSG_ID_PHB_CODE_BEGIN = (MSG_ID_USAT_CODE_BEGIN + MSG_ID_USAT_CODE_RANGE),
   MSG_ID_PHB_CODE_RANGE = 100,

   MSG_ID_ENG_CODE_BEGIN = (MSG_ID_PHB_CODE_BEGIN + MSG_ID_PHB_CODE_RANGE),
   MSG_ID_ENG_CODE_RANGE = 100,

   MSG_ID_L4A_CODE_BEGIN = (MSG_ID_ENG_CODE_BEGIN + MSG_ID_ENG_CODE_RANGE),
   MSG_ID_L4A_CODE_RANGE = 1300,

   MSG_ID_RLC_CODE_BEGIN = (MSG_ID_L4A_CODE_BEGIN + MSG_ID_L4A_CODE_RANGE),
   MSG_ID_RLC_CODE_RANGE = 100,

    
    
   MSG_ID_RRM_COMMON_CODE_BEGIN = (MSG_ID_RLC_CODE_BEGIN + MSG_ID_RLC_CODE_RANGE),
   MSG_ID_RRM_COMMON_CODE_RANGE = 100,
   MSG_ID_RRM_CODE_BEGIN = MSG_ID_RRM_COMMON_CODE_BEGIN,
   MSG_ID_RRM_CODE_RANGE = MSG_ID_RRM_COMMON_CODE_RANGE,

   MSG_ID_RCS_CODE_BEGIN = (MSG_ID_RRM_COMMON_CODE_BEGIN + MSG_ID_RRM_COMMON_CODE_RANGE),
   MSG_ID_RCS_CODE_RANGE = 100,

   MSG_ID_RMPC_CODE_BEGIN = (MSG_ID_RCS_CODE_BEGIN + MSG_ID_RCS_CODE_RANGE),
   MSG_ID_RMPC_CODE_RANGE = 200,
   
   MSG_ID_RRM_MPAL_DM_CODE_BEGIN = (MSG_ID_RMPC_CODE_BEGIN + MSG_ID_RMPC_CODE_RANGE),
   MSG_ID_RRM_MPAL_DM_CODE_RANGE = 100,

   MSG_ID_MAC_CODE_BEGIN = (MSG_ID_RRM_MPAL_DM_CODE_BEGIN + MSG_ID_RRM_MPAL_DM_CODE_RANGE),
   MSG_ID_MAC_CODE_RANGE = 100,
   
   MSG_ID_LAPDM_CODE_BEGIN = (MSG_ID_MAC_CODE_BEGIN + MSG_ID_MAC_CODE_RANGE),
   MSG_ID_LAPDM_CODE_RANGE = 100,
   
   MSG_ID_REASM_CODE_BEGIN = (MSG_ID_LAPDM_CODE_BEGIN + MSG_ID_LAPDM_CODE_RANGE),
   MSG_ID_REASM_CODE_RANGE = 100,
   
   MSG_ID_MPAL_CODE_BEGIN = (MSG_ID_REASM_CODE_BEGIN + MSG_ID_REASM_CODE_RANGE),
   MSG_ID_MPAL_CODE_RANGE = 100,
   
   MSG_ID_LLC_CODE_BEGIN = (MSG_ID_MPAL_CODE_BEGIN + MSG_ID_MPAL_CODE_RANGE),
   MSG_ID_LLC_CODE_RANGE = 100,
   
   MSG_ID_SND_CODE_BEGIN = (MSG_ID_LLC_CODE_BEGIN + MSG_ID_LLC_CODE_RANGE),
   MSG_ID_SND_CODE_RANGE = 100,
   
   MSG_ID_SM_CODE_BEGIN = (MSG_ID_SND_CODE_BEGIN + MSG_ID_SND_CODE_RANGE),
   MSG_ID_SM_CODE_RANGE = 100,
   
   MSG_ID_PPP_CODE_BEGIN = (MSG_ID_SM_CODE_BEGIN + MSG_ID_SM_CODE_RANGE),
   MSG_ID_PPP_CODE_RANGE = 100,
   
   MSG_ID_TDT_CODE_BEGIN = (MSG_ID_PPP_CODE_BEGIN + MSG_ID_PPP_CODE_RANGE),
   MSG_ID_T30_CODE_BEGIN = (MSG_ID_TDT_CODE_BEGIN + 9),
   MSG_ID_FA_CODE_BEGIN = (MSG_ID_T30_CODE_BEGIN + 50),
   MSG_ID_TDT_CODE_RANGE = 100,
   
   MSG_ID_L2R_CODE_BEGIN = (MSG_ID_TDT_CODE_BEGIN + MSG_ID_TDT_CODE_RANGE),
   MSG_ID_L2R_CODE_RANGE = 100,
   
   MSG_ID_RLP_CODE_BEGIN = (MSG_ID_L2R_CODE_BEGIN + MSG_ID_L2R_CODE_RANGE),
   MSG_ID_RLP_CODE_RANGE = 100,
   
   MSG_ID_MMIAPI_CODE_BEGIN = (MSG_ID_RLP_CODE_BEGIN + MSG_ID_RLP_CODE_RANGE),
   MSG_ID_MMIAPI_CODE_RANGE = 100,
   
   MSG_ID_MED_CODE_BEGIN = (MSG_ID_MMIAPI_CODE_BEGIN + MSG_ID_MMIAPI_CODE_RANGE),
   MSG_ID_MED_CODE_RANGE = 500,
   
   MSG_ID_VT_CODE_BEGIN = (MSG_ID_MED_CODE_BEGIN + MSG_ID_MED_CODE_RANGE),
   MSG_ID_VT_CODE_RANGE = 100,

   MSG_ID_F_CSR_CODE_BEGIN = (MSG_ID_VT_CODE_BEGIN + MSG_ID_VT_CODE_RANGE),
   MSG_ID_F_CSR_CODE_RANGE = 100,

   MSG_ID_ABM_CODE_BEGIN = (MSG_ID_F_CSR_CODE_BEGIN + MSG_ID_F_CSR_CODE_RANGE),
   MSG_ID_ABM_CODE_RANGE = 100,
   
   MSG_ID_SOC_CODE_BEGIN = (MSG_ID_ABM_CODE_BEGIN + MSG_ID_ABM_CODE_RANGE),
   MSG_ID_SOC_CODE_RANGE = 100,
   
   MSG_ID_TCPIP_CODE_BEGIN = (MSG_ID_SOC_CODE_BEGIN + MSG_ID_SOC_CODE_RANGE),
   MSG_ID_TCPIP_CODE_RANGE = 100,
   
   MSG_ID_WAP_CODE_BEGIN = (MSG_ID_TCPIP_CODE_BEGIN + MSG_ID_TCPIP_CODE_RANGE),
   MSG_ID_WAP_CODE_RANGE = 300,
   
   MSG_ID_EM_CODE_BEGIN = (MSG_ID_WAP_CODE_BEGIN + MSG_ID_WAP_CODE_RANGE),
   MSG_ID_EM_CODE_RANGE = 100,
   
   MSG_ID_IRDA_CODE_BEGIN = (MSG_ID_EM_CODE_BEGIN + MSG_ID_EM_CODE_RANGE),
   MSG_ID_IRDA_CODE_RANGE = 100,
   
   MSG_ID_OBEX_CODE_BEGIN = (MSG_ID_IRDA_CODE_BEGIN + MSG_ID_IRDA_CODE_RANGE),
   MSG_ID_OBEX_CODE_RANGE = 100,
   
   MSG_ID_IRCOMM_CODE_BEGIN = (MSG_ID_OBEX_CODE_BEGIN + MSG_ID_OBEX_CODE_RANGE),
   MSG_ID_IRCOMM_CODE_RANGE = 100,
   
   MSG_ID_MED_V_CODE_BEGIN = (MSG_ID_IRCOMM_CODE_BEGIN + MSG_ID_IRCOMM_CODE_RANGE),
   MSG_ID_MED_V_CODE_RANGE = 100,
   
   MSG_ID_J2ME_CODE_BEGIN = (MSG_ID_MED_V_CODE_BEGIN + MSG_ID_MED_V_CODE_RANGE),
   MSG_ID_J2ME_CODE_RANGE = 200,
   
   MSG_ID_EMAIL_CODE_BEGIN = (MSG_ID_J2ME_CODE_BEGIN + MSG_ID_J2ME_CODE_RANGE),
   MSG_ID_EMAIL_CODE_RANGE = 180,
   
   MSG_ID_FMT_MSG_CODE_BEGIN = (MSG_ID_EMAIL_CODE_BEGIN + MSG_ID_EMAIL_CODE_RANGE),
   MSG_ID_FMT_MSG_CODE_RANGE = 120,
   
   DRIVER_MSG_CODE_BEGIN = (MSG_ID_FMT_MSG_CODE_BEGIN + MSG_ID_FMT_MSG_CODE_RANGE),
   DRIVER_MSG_CODE_RANGE = 200,
   
   MSG_ID_NVRAM_CODE_BEGIN = (DRIVER_MSG_CODE_BEGIN + DRIVER_MSG_CODE_RANGE),
   MSG_ID_NVRAM_CODE_RANGE = 100,
   
   MSG_ID_DPS_MSG_START = (MSG_ID_NVRAM_CODE_BEGIN + MSG_ID_NVRAM_CODE_RANGE),
   MSG_ID_DPS_MSG_RANGE = 1000,
   
   MSG_ID_UDPS_MSG_START = (MSG_ID_DPS_MSG_START + MSG_ID_DPS_MSG_RANGE),
   MSG_ID_UDPS_MSG_RANGE = 1000,

   L1_MSG_CODE_BEGIN = (MSG_ID_UDPS_MSG_START + MSG_ID_UDPS_MSG_RANGE),
   L1_MSG_CODE_RANGE = 200,
   
   L1HISR_MSG_CODE_BEGIN = (L1_MSG_CODE_BEGIN + L1_MSG_CODE_RANGE),
   L1HISR_MSG_CODE_RANGE = 700,
   
   FT_MSG_CODE_BEGIN = (L1HISR_MSG_CODE_BEGIN + L1HISR_MSG_CODE_RANGE),
   FT_MSG_CODE_RANGE = 100,

   TST_MSG_CODE_BEGIN = (FT_MSG_CODE_BEGIN + FT_MSG_CODE_RANGE),
   TST_MSG_CODE_RANGE = 1200,
   
   SYSDEBUG_MSG_CODE_BEGIN = (TST_MSG_CODE_BEGIN + TST_MSG_CODE_RANGE),
   SYSDEBUG_MSG_CODE_RANGE = 100,
   
   CMUX_MSG_CODE_BEGIN = (SYSDEBUG_MSG_CODE_BEGIN + SYSDEBUG_MSG_CODE_RANGE),
   CMUX_MSG_CODE_RANGE = 1100,
   
   MSG_ID_IMPS_CODE_BEGIN = (CMUX_MSG_CODE_BEGIN + CMUX_MSG_CODE_RANGE),
   MSG_ID_IMPS_CODE_RANGE = 150,
   
   SIP_MSG_CODE_BEGIN = (MSG_ID_IMPS_CODE_BEGIN + MSG_ID_IMPS_CODE_RANGE),
   SIP_MSG_CODE_RANGE = 50,
   
   POC_MSG_CODE_BEGIN = (SIP_MSG_CODE_BEGIN + SIP_MSG_CODE_RANGE),
   POC_MSG_CODE_RANGE = 100,
   
   BCHS_MSG_CODE_BEGIN = (POC_MSG_CODE_BEGIN + POC_MSG_CODE_RANGE),
   BCHS_MSG_CODE_RANGE = 1000,
   
   BT_MSG_CODE_BEGIN = (BCHS_MSG_CODE_BEGIN + BCHS_MSG_CODE_RANGE),
   BT_MSG_CODE_RANGE = 600,
      
   XDM_MSG_CODE_BEGIN = (BT_MSG_CODE_BEGIN + BT_MSG_CODE_RANGE),
   XDM_MSG_CODE_RANGE = 50,
   
   WNDRV_MSG_CODE_BEGIN = (XDM_MSG_CODE_BEGIN + XDM_MSG_CODE_RANGE),
   WNDRV_MSG_CODE_RANGE = 100,

   SUPC_MSG_CODE_BEGIN = (WNDRV_MSG_CODE_BEGIN + WNDRV_MSG_CODE_RANGE),
   SUPC_MSG_CODE_RANGE  = 100,

   MSG_ID_DHCP_CODE_BEGIN = (SUPC_MSG_CODE_BEGIN + SUPC_MSG_CODE_RANGE),
   MSG_ID_DHCP_CODE_RANGE  = 50,
   
   MSG_ID_IPERF_CODE_BEGIN = (MSG_ID_DHCP_CODE_BEGIN + MSG_ID_DHCP_CODE_RANGE),
   MSG_ID_IPERF_CODE_RANGE  = 50,
   
   MSG_ID_TFTP_CODE_BEGIN = (MSG_ID_IPERF_CODE_BEGIN + MSG_ID_IPERF_CODE_RANGE),
   MSG_ID_TFTP_CODE_RANGE  = 50,
     
   SAF_MSG_CODE_BEGIN = (MSG_ID_TFTP_CODE_BEGIN + MSG_ID_TFTP_CODE_RANGE),
   SAF_MSG_CODE_RANGE = 50,
   
   VOIP_MSG_CODE_BEGIN = (SAF_MSG_CODE_BEGIN + SAF_MSG_CODE_RANGE),
   VOIP_MSG_CODE_RANGE = 100,
   
   VUART_MSG_CODE_BEGIN = (VOIP_MSG_CODE_BEGIN + VOIP_MSG_CODE_RANGE),
   VUART_MSG_CODE_RANGE  = 10,
 
   MSG_ID_MED_C_CODE_BEGIN = (VUART_MSG_CODE_BEGIN + VUART_MSG_CODE_RANGE),
   MSG_ID_MED_C_CODE_RANGE = 100,

   MSG_ID_SYNCML_CODE_BEGIN = (MSG_ID_MED_C_CODE_BEGIN + MSG_ID_MED_C_CODE_RANGE),
   MSG_ID_SYNCML_CODE_RANGE = 100,

   RTSP_MSG_CODE_BEGIN = (MSG_ID_SYNCML_CODE_BEGIN + MSG_ID_SYNCML_CODE_RANGE),
   RTSP_MSG_CODE_RANGE = 20,

   MSG_ID_MEXE_CODE_BEGIN = (RTSP_MSG_CODE_BEGIN + RTSP_MSG_CODE_RANGE),
   MSG_ID_MEXE_CODE_RANGE = 10,

   MSG_ID_DM_CODE_BEGIN = (MSG_ID_MEXE_CODE_BEGIN + MSG_ID_MEXE_CODE_RANGE),
   MSG_ID_DM_CODE_RANGE = 50,

   MSG_ID_DRMT_MSG_CODE_BEGIN = (MSG_ID_DM_CODE_BEGIN + MSG_ID_DM_CODE_RANGE),
   MSG_ID_DRMT_MSG_CODE_RANGE = 100,

   MSG_ID_GIS_MSG_CODE_BEGIN = (MSG_ID_DRMT_MSG_CODE_BEGIN + MSG_ID_DRMT_MSG_CODE_RANGE),
   MSG_ID_GIS_MSG_CODE_RANGE = 50,

   MSG_ID_CERTMAN_MSG_CODE_BEGIN = (MSG_ID_GIS_MSG_CODE_BEGIN + MSG_ID_GIS_MSG_CODE_RANGE),
   MSG_ID_CERTMAN_MSG_CODE_RANGE = 100,

   MSG_ID_MMI_CERTMAN_MSG_CODE_BEGIN = (MSG_ID_CERTMAN_MSG_CODE_BEGIN + MSG_ID_CERTMAN_MSG_CODE_RANGE),
   MSG_ID_MMI_CERTMAN_MSG_CODE_RANGE = 20,

   MSG_ID_TLS_CODE_BEGIN = (MSG_ID_MMI_CERTMAN_MSG_CODE_BEGIN + MSG_ID_MMI_CERTMAN_MSG_CODE_RANGE),
   MSG_ID_TLS_CODE_RANGE  = 20,

   MSG_ID_RATCM_CODE_BEGIN = (MSG_ID_TLS_CODE_BEGIN + MSG_ID_TLS_CODE_RANGE),
   MSG_ID_RATCM_CODE_RANGE = 200,

   MSG_ID_RATDM_CODE_BEGIN = (MSG_ID_RATCM_CODE_BEGIN + MSG_ID_RATCM_CODE_RANGE),
   MSG_ID_RATDM_CODE_RANGE = 100,

   MSG_ID_ADR_CODE_BEGIN = (MSG_ID_RATDM_CODE_BEGIN + MSG_ID_RATDM_CODE_RANGE),
   MSG_ID_ADR_CODE_RANGE = 100,

   MSG_ID_CSCE_CODE_BEGIN = (MSG_ID_ADR_CODE_BEGIN + MSG_ID_ADR_CODE_RANGE),
   MSG_ID_CSCE_CODE_RANGE = 100,

   MSG_ID_CSE_CODE_BEGIN = (MSG_ID_CSCE_CODE_BEGIN + MSG_ID_CSCE_CODE_RANGE),
   MSG_ID_CSE_CODE_RANGE = 100,

   MSG_ID_MEME_CODE_BEGIN = (MSG_ID_CSE_CODE_BEGIN + MSG_ID_CSE_CODE_RANGE),
   MSG_ID_MEME_CODE_RANGE = 100,

   MSG_ID_RRCE_CODE_BEGIN = (MSG_ID_MEME_CODE_BEGIN + MSG_ID_MEME_CODE_RANGE),
   MSG_ID_RRCE_CODE_RANGE = 100,

   MSG_ID_SIBE_CODE_BEGIN = (MSG_ID_RRCE_CODE_BEGIN + MSG_ID_RRCE_CODE_RANGE),
   MSG_ID_SIBE_CODE_RANGE = 100,

   MSG_ID_SLCE_CODE_BEGIN = (MSG_ID_SIBE_CODE_BEGIN + MSG_ID_SIBE_CODE_RANGE),
   MSG_ID_SLCE_CODE_RANGE = 200,

   MSG_ID_USIME_CODE_BEGIN = (MSG_ID_SLCE_CODE_BEGIN + MSG_ID_SLCE_CODE_RANGE),
   MSG_ID_USIME_CODE_RANGE = 100,

   MSG_ID_DBME_CODE_BEGIN = (MSG_ID_USIME_CODE_BEGIN + MSG_ID_USIME_CODE_RANGE),
   MSG_ID_DBME_CODE_RANGE = 20,

   MSG_ID_UMAC_CODE_BEGIN = (MSG_ID_DBME_CODE_BEGIN + MSG_ID_DBME_CODE_RANGE),
   MSG_ID_UMAC_CODE_RANGE = 100,

   MSG_ID_URLC_CODE_BEGIN = (MSG_ID_UMAC_CODE_BEGIN + MSG_ID_UMAC_CODE_RANGE),
   MSG_ID_URLC_CODE_RANGE = 100,

   MSG_ID_BMC_CODE_BEGIN = (MSG_ID_URLC_CODE_BEGIN + MSG_ID_URLC_CODE_RANGE),
   MSG_ID_BMC_CODE_RANGE = 100,

   MSG_ID_CSR_CODE_BEGIN = (MSG_ID_BMC_CODE_BEGIN + MSG_ID_BMC_CODE_RANGE),
   MSG_ID_CSR_CODE_RANGE = 100,

   MSG_ID_DRLC_CODE_BEGIN = (MSG_ID_CSR_CODE_BEGIN + MSG_ID_CSR_CODE_RANGE),
   MSG_ID_DRLC_CODE_RANGE = 100,

   MSG_ID_PDCP_CODE_BEGIN = (MSG_ID_DRLC_CODE_BEGIN + MSG_ID_DRLC_CODE_RANGE),
   MSG_ID_PDCP_CODE_RANGE = 100,

   MSG_ID_RABM_CODE_BEGIN = (MSG_ID_PDCP_CODE_BEGIN + MSG_ID_PDCP_CODE_RANGE),
   MSG_ID_RABM_CODE_RANGE = 100,

   MSG_ID_DM_CSCE_CODE_BEGIN = (MSG_ID_RABM_CODE_BEGIN + MSG_ID_RABM_CODE_RANGE),
   MSG_ID_DM_CSCE_CODE_RANGE = 100,

   MSG_ID_DM_GAS_CODE_BEGIN = (MSG_ID_DM_CSCE_CODE_BEGIN + MSG_ID_DM_CSCE_CODE_RANGE),
   MSG_ID_DM_GAS_CODE_RANGE = 200,

   MSG_ID_DM_MEME_CODE_BEGIN = (MSG_ID_DM_GAS_CODE_BEGIN + MSG_ID_DM_GAS_CODE_RANGE),
   MSG_ID_DM_MEME_CODE_RANGE = 100,

   MSG_ID_DM_RRCE_CODE_BEGIN = (MSG_ID_DM_MEME_CODE_BEGIN + MSG_ID_DM_MEME_CODE_RANGE),
   MSG_ID_DM_RRCE_CODE_RANGE = 100,

   MSG_ID_UL1_MSG_CODE_BEGIN = (MSG_ID_DM_RRCE_CODE_BEGIN + MSG_ID_DM_RRCE_CODE_RANGE),
   MSG_ID_UL1_MSG_CODE_RANGE = 200,

   MSG_ID_UL1HISR_MSG_CODE_BEGIN = (MSG_ID_UL1_MSG_CODE_BEGIN + MSG_ID_UL1_MSG_CODE_RANGE),
   MSG_ID_UL1HISR_MSG_CODE_RANGE = 5,

   MSG_ID_UL1C_MSG_CODE_BEGIN = (MSG_ID_UL1HISR_MSG_CODE_BEGIN + MSG_ID_UL1HISR_MSG_CODE_RANGE),
   MSG_ID_UL1C_MSG_CODE_RANGE = 10,

   MSG_ID_LL1_MSG_CODE_BEGIN = (MSG_ID_UL1C_MSG_CODE_BEGIN + MSG_ID_UL1C_MSG_CODE_RANGE),
   MSG_ID_LL1_MSG_CODE_RANGE = 100,

   MSG_ID_UL1TST_MSG_CODE_BEGIN = (MSG_ID_LL1_MSG_CODE_BEGIN + MSG_ID_LL1_MSG_CODE_RANGE),
   MSG_ID_UL1TST_MSG_CODE_RANGE = 50,

    
   CUSTOM_MSG_CODE_BEGIN = (MSG_ID_UL1TST_MSG_CODE_BEGIN + MSG_ID_UL1TST_MSG_CODE_RANGE + 1000)
} MSG_ID_CODE_BEGIN;


 


typedef void (*FSM_FUNCTION) (void*, void*);

typedef enum {
   INVALID_SAP = 0,
 
    
    
   GMMREG_SAP,
    
    
   MM_SMS_SAP,
   MM_CC_SAP,
   MM_SS_SAP,
   MM_AS_SAP,
   MM_SIM_SAP,
   GMM_SM_SAP,
   MNCC_SAP,
   MNSMS_SAP,
   MMREG_SAP,
   MNSS_SAP,
    
   CSM_TDT_SAP,
   CSM_L2R_SAP,
   CSM_T30_SAP,
   CSM_SIM_SAP,
   T30_L4C_SAP,
   CSM_L4C_SAP,
   SMSAL_L4C_SAP,
   UEM_L4C_SAP,
   PHB_L4C_SAP,
   SMU_L4C_SAP,
   TCM_L4C_SAP,
   RAC_L4C_SAP,
   UART_L4C_SAP,
    



   RRM_RMPC_SAP,
   RMC_LAPDM_SAP,
   RLC_RMPC_SAP,
   RMPC_MPAL_SAP,
   MAC_RMPC_SAP,
   RR_PRR_SAP,

   LAPDM_MPAL_SAP,
   RLC_MAC_SAP,
   RLC_RRM_SAP,
   RLC_MPAL_SAP,
   RLC_REASM_SAP,
   MAC_RRM_SAP,
   RRM_MPAL_SAP,
   MAC_MPAL_SAP,
   MMI_AS_SAP,
   SMSAL_AS_SAP,
    
   LLC_GMM_SAP,
   LLC_RLC_SAP,
   LLC_SNDCP_SAP,
   LLC_SMS_SAP,
   GMM_RLC_SAP,
   SNDCP_REG_SAP,
   SM_SNDCP_SAP,
   SMREG_SAP,
   PPP_L4C_SAP,
   TCM_PPP_SAP,
    
   L2R_RLP_SAP,
   RLP_RA_SAP,
   T30_FA_SAP,
   FA_RA_SAP,
   SNDCP_PPP_SAP,
   DATA_MPAL_SAP,
   L2R_SMU_SAP,

    
   PS_NVRAM_SAP,
   PS_SIM_SAP,

    
   CSM_VT_SAP,
   VT_CSR_SAP,
   VT_F_CSR_SAP,

    
   MED_SAP,
   L4_AUD_SAP=MED_SAP,


    
   MED_V_SAP,



    
   MED_C_SAP,


    
   MMI_L4C_SAP,
   ABM_MMI_SAP,
   MMI_ABM_SAP,
   MMI_MMI_SAP,
   MMI_FMT_SAP,
   MMI_WAP_SAP,
   MMI_JASYN_SAP,
   MMI_POC_SAP,
   MMI_SYNCML_SAP,
   SOC_MMI_SAP,

    
   ABM_SOC_SAP,
   L4C_ABM_SAP,
   TCPIP_SOC_SAP,
   TCPIP_DHCP_SAP,
   WAP_MMI_SAP,
   WPS_APP_SAP,
   TDT_PPP_SAP,
   L2R_PPP_SAP,
   PPP_TCPIP_SAP,
   TCM_TCPIP_SAP,
   SOC_APP_SAP,  
   SMSAL_SOC_SAP,
   EM_PS_SAP,

   MMI_J2ME_SAP,
   J2ME_MMI_SAP,
   WAP_J2ME_SAP,
   J2ME_WAP_SAP,
   J2ME_JASYN_SAP,

   EMAIL_MMI_SAP,
   IMPS_MMI_SAP,   
   SIP_APP_SAP,
   POC_MMI_SAP,

   XDM_APP_SAP,
   VOIP_MMI_SAP,
   SAF_APP_SAP,
   RTSP_APP_SAP,

    
   SME_SAP,
   SME_READER_SAP,
   SME_TIMER_SAP,
    

    
   OBEX_APP_SAP,
   IRCOMM_APP_SAP,
   IRDA_OBEX_SAP,
   IRDA_IRCOMM_SAP,   

    
   L1_MPAL_SAP,
   MPAL_L1_SAP,
   MAC_L1_SAP,
   L1_AS_SAP,
   L1HISR_AS_SAP,
   L1_GAS_SAP,
   L1HISR_GAS_SAP,
   L1_LAPDM_SAP,

   L1_L1_SAP,

   DRIVER_PS_SAP,
   DRIVER_L1_SAP,
   FT_TST_SAP,
   STACK_TIMER_SAP,
   STACK_SIM_TIMER_SAP,
   L4C_CMUX_SAP,
   CMUX_SAP,

   WNDRV_WNDRV_SAP,
   FT_WNDRV_SAP,
   WNDRV_SUPC_SAP,
   WNDRV_TCPIP_SAP,
   WNDRV_MMI_SAP,
   WNDRV_BT_SAP,
   
   SUPC_MMI_SAP,
   SUPC_ABM_SAP,

   DHCP_ABM_SAP,
   DHCP_SIP_SAP,

   IPERF_MMI_SAP,

   TFTP_APP_SAP,

   BCHS_L4C_SAP,
   BCHS_MMI_SAP,
   BT_A2DP_SAP,
   BT_APP_SAP,
   BT_AVRCP_SAP,
   BT_HFG_SAP,
   BT_BPP_SAP,
   BT_BIP_SAP,

   DT_L4C_SAP,

   GDC_SAP,
   GDD_SAP,

   DRMT_APP_SAP,
   DRMT_WAP_SAP,
   DRMT_MMI_SAP,

   GIS_SAP,

   CERTMAN_MMI_SAP,
   CERTMAN_APP_SAP,
   MMI_CERTMAN_APP_SAP,

   TLS_APP_SAP,

   RATCM_RRCE_SAP,
   RATCM_SLCE_SAP,
   RATCM_CSCE_SAP,
   RATCM_CSE_SAP,
   RATCM_USIME_SAP,
   RATCM_CSR_SAP,
   RATCM_BMC_SAP,
   RATCM_URLC_SAP,
   RATCM_LLC_SAP,
   RATCM_GAS_SAP,
   RATCM_RLC_SAP,
   MM_RATCM_SAP,
   SMSAL_RATCM_SAP,
   MM_RATDM_SAP,
   SM_RATDM_SAP,
   TCM_RATDM_SAP,
   RATCM_RATDM_SAP,
   RATDM_RATDM_SAP,
   RATDM_RABM_SAP,
   RATDM_SNDCP_SAP,
   RATDM_URLC_SAP,
   RAC_MEME_SAP,
   UAS_GAS_SAP,
   SLCE_URLC_SAP,
   RRCE_URLC_SAP,
   CSR_DRLC_SAP,
   BMC_DRLC_SAP,
   PDCP_DRLC_SAP,
   PDCP_URLC_SAP,
   RRCE_DRLC_SAP,
   MEME_DRLC_SAP,
   ADR_DRLC_SAP,
   ADR_UL1_SAP,
   DRLC_URLC_SAP,
   DRLC_UMAC_SAP,
   SLCE_PDCP_SAP,
   PDCP_RABM_SAP,
   SLCE_BMC_SAP,
   RRCE_BMC_SAP,
   SLCE_RABM_SAP,
   SLCE_CSR_SAP,
   SLCE_UMAC_SAP,
   RRCE_UMAC_SAP,
   MEME_UMAC_SAP,
   URLC_UMAC_SAP,
   URLC_URLC_SAP,
   CSR_UMAC_SAP,
   RRCE_CSCE_SAP,
   RRCE_MEME_SAP,
   CSCE_MEME_SAP,
   CSE_MEME_SAP,
   CSCE_SLCE_SAP,
   RRCE_SLCE_SAP,
   SIBE_SLCE_SAP,
   SIBE_UL1_SAP,
   MEME_SLCE_SAP,
   CSE_SLCE_SAP,
   SLCE_SLCE_SAP,
   CSCE_CSE_SAP,
   CSCE_SIBE_SAP,
   CSCE_USIME_SAP,
   CSE_SIBE_SAP,
   RRCE_SIBE_SAP,
   MEME_SIBE_SAP,
   RRCE_USIME_SAP,
   SLCE_UL1_SAP,
   MEME_UL1_SAP,
   RRCE_UL1_SAP,
   CSE_UL1_SAP,
   UMAC_UL1_SAP,
   UMAC_UMAC_SAP,
   UL1_L1_SAP,
   GAS_CSCE_SAP, 
   GAS_MEME_SAP,
   GAS_RRCE_SAP,
   CSR_L1AUD_SAP,
   UL1HISR_UL1_SAP,
   UL1C_SAP,
   UL1_UL1_SAP,
   UL1TST_FT_SAP,
   FT_UL1TST_SAP,
   VT_SAP,
   TCPIP_ABM_SAP,

   CUSTOM_SAP_BEGIN,

 




   LAST_SAP_CODE = CUSTOM_SAP_BEGIN +  10  
} sap_type;





#line 132 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "adaptation\include\stack_msgs.h"
 


































 













































































































































































































































































 










 



typedef enum {
   MSG_ID_INVALID_TYPE = 0,





   #line 1 "interface\ps\mm_sap.h"
 

































  









  











































 









 
	 
	 

	 
	MSG_ID_MMCC_PROMPT_REJ = MSG_ID_MM_CODE_BEGIN,
	MSG_ID_MMCC_PROMPT_RSP,
	MSG_ID_MMCC_REL_REQ,
	MSG_ID_MMCC_EST_REQ,
	MSG_ID_MMCC_REEST_REQ,
	MSG_ID_MMCC_DATA_REQ,

	 
	MSG_ID_MMSS_EST_REQ,
	MSG_ID_MMSS_DATA_REQ,
	MSG_ID_MMSS_REL_REQ,
	 
	MSG_ID_MMSMS_REL_REQ,
	MSG_ID_MMSMS_DATA_REQ,
	MSG_ID_MMSMS_EST_REQ,

	 
        MSG_ID_GMMREG_ATTACH_REQ, 
        MSG_ID_GMMREG_DETACH_REQ,                     
        MSG_ID_GMMREG_PLMN_SEARCH_REQ,
        MSG_ID_GMMREG_START_REG_REQ,
        MSG_ID_GMMREG_INIT_REQ,
        MSG_ID_GMMREG_BAND_SEL_REQ,
        MSG_ID_GMMREG_SEL_MODE_REQ, 
        MSG_ID_GMMREG_RFOFF_REQ,

        
        MSG_ID_GMMREG_ABORT_SEARCH_REQ,	
        




        
	 
        
        MSG_ID_GMMAS_SIG_EST_CNF,         
        MSG_ID_GMMAS_SIG_EST_REJ,         
        MSG_ID_GMMAS_SIG_REL_IND,          
        MSG_ID_GMMAS_PAGE_IND,   
        MSG_ID_GMMAS_DATA_IND,   
        MSG_ID_GMMAS_SYNC_IND,
	
        MSG_ID_GMMAS_NO_PLMN_IND,  
        MSG_ID_GMMAS_CELL_INFO_IND,       
        MSG_ID_GMMAS_STATE_CHANGE_IND,
        MSG_ID_GMMAS_SYS_INFO_IND,        
        MSG_ID_GMMAS_SIG_ERROR_IND,  
        MSG_ID_GMMAS_SIG_EST_IND,
        MSG_ID_GMMAS_SIG_ABORT_IND, 
        MSG_ID_GMMAS_PLMN_LIST_IND,
        MSG_ID_GMMAS_RFOFF_CNF,

	
        MSG_ID_GMMREG_SIM_STATUS_UPDATE_REQ, 
        MSG_ID_GMMSM_SESSION_BEGIN_REQ,
        MSG_ID_GMMSM_SESSION_END_REQ,
        MSG_ID_GMMAS_PS_SESSION_START_CNF,
        MSG_ID_GMMAS_PS_SESSION_STOP_CNF,
	
	
        MSG_ID_GMMAS_STOP_TEST_MODE_IND, 
        MSG_ID_LLGMM_AS_NAS_DATA_CNF,  
        MSG_ID_GMMAS_READY_TIMER_UPDATE_IND,  
        

	 
	 

	 
        




	 
        MSG_ID_GMMSM_ESTABLISH_REQ,          
        MSG_ID_GMMSM_UNITDATA_REQ,
        MSG_ID_GMMSM_SEQUENCE_IND,
        MSG_ID_GMMSM_NSAPI_STATUS_REQ,

        




	 
	 

	 
	 

	 
	 
	
        
         
	MSG_ID_LLGMM_TRIGGER_IND,
	MSG_ID_LLGMM_UNITDATA_IND,
	MSG_ID_LLGMM_STATUS_IND,
	MSG_ID_GMMAS_T3122_TIMEOUT_IND,
	MSG_ID_MM_CODE_END = MSG_ID_GMMAS_T3122_TIMEOUT_IND,
        






































 


#line 329 "adaptation\include\stack_msgs.h"
   MSG_ID_MM_CODE_CHECK_POINT,

   #line 1 "interface\ps\cc_sap.h"
 

































  









  



































 









	 
	MSG_ID_MNCC_SETUP_REQ = MSG_ID_CC_CODE_BEGIN,
	MSG_ID_MNCC_SETUP_RES,
	MSG_ID_MNCC_REJ_REQ,
	MSG_ID_MNCC_CALL_CONF_REQ,
	MSG_ID_MNCC_ALERT_REQ,
	MSG_ID_MNCC_NOTIFY_REQ,
	MSG_ID_MNCC_DISC_REQ,
	MSG_ID_MNCC_REL_REQ,
	MSG_ID_MNCC_REL_COMP_REQ,
	MSG_ID_MNCC_FACILITY_REQ,
	MSG_ID_MNCC_START_DTMF_REQ,
	MSG_ID_MNCC_STOP_DTMF_REQ,
	MSG_ID_MNCC_MODIFY_REQ,
	MSG_ID_MNCC_MODIFY_RES,
	MSG_ID_MNCC_HOLD_REQ,
	MSG_ID_MNCC_RETRIEVE_REQ,
	MSG_ID_MNCC_USER_INFO_REQ,
	MSG_ID_MNCC_CCBS_EST_RES,
	MSG_ID_MNCC_CCBS_SETUP_REQ,
	MSG_ID_MNCC_CCBS_REJ_REQ,
	MSG_ID_MNCC_ACM_UPDATE_REQ,
	MSG_ID_MMCC_DATA_IND,
	MSG_ID_MMCC_EST_CNF,
	MSG_ID_MMCC_EST_REJ,
	MSG_ID_MMCC_EST_INTR,
	MSG_ID_MMCC_EST_IND,
	MSG_ID_MMCC_REL_IND,
	MSG_ID_MMCC_ERR_IND,
	MSG_ID_MMCC_PROMPT_IND,
	MSG_ID_MMCC_REEST_CNF,
	MSG_ID_MMCC_REEST_START_IND,
	MSG_ID_MMCC_SYNC_IND,
	MSG_ID_MMCC_RAT_IND,
	MSG_ID_CC_TIMER_EXPIRY,
	MSG_ID_CC_CODE_END =  MSG_ID_CC_TIMER_EXPIRY,
	 

#line 332 "adaptation\include\stack_msgs.h"
   MSG_ID_CC_CODE_CHECK_POINT,

   #line 1 "interface\ps\dt_sap.h"
 

































  



































	 
	 
	MSG_ID_L4CDT_DOWNLOAD_REQ = MSG_ID_DT_CODE_BEGIN,
	MSG_ID_L4CDT_UPLOAD_REQ,
	MSG_ID_L4CDT_FILELIST_REQ,
	MSG_ID_L4CDT_UART_TRANSFER_REQ,
	MSG_ID_L4CDT_USB_PLUGOUT_REQ,
	
	 
	
	
	
	MSG_ID_DT_CODE_END =  MSG_ID_L4CDT_USB_PLUGOUT_REQ,
	 

#line 335 "adaptation\include\stack_msgs.h"
   MSG_ID_DT_CODE_CHECK_POINT,

   #line 1 "interface\ps\ciss_sap.h"
 

































  









  



























 









	 
	MSG_ID_MNSS_BEGIN_REQ = MSG_ID_CISS_CODE_BEGIN,
	MSG_ID_MNSS_FAC_REQ,
	MSG_ID_MNSS_END_REQ,
	MSG_ID_MMSS_DATA_IND,
	MSG_ID_MMSS_EST_CNF,
	MSG_ID_MMSS_EST_REJ,
	MSG_ID_MMSS_EST_INTR,
	MSG_ID_MMSS_EST_IND,
	MSG_ID_MMSS_REL_IND,
	MSG_ID_MMSS_ERR_IND,
	MSG_ID_CISS_TIMER_EXPIRY,
	MSG_ID_CISS_CODE_END = MSG_ID_CISS_TIMER_EXPIRY,
	 

#line 338 "adaptation\include\stack_msgs.h"
   MSG_ID_CISS_CODE_CHECK_POINT,

   #line 1 "interface\ps\sms_sap.h"
 

































  









  































 









	 
	MSG_ID_GMMSMS_REG_STATE_IND = MSG_ID_SMS_CODE_BEGIN,
	MSG_ID_LLSMS_UNITDATA_IND,
	MSG_ID_MMSMS_EST_IND,
	MSG_ID_MMSMS_EST_CNF,
	MSG_ID_MMSMS_DATA_IND,
	MSG_ID_MMSMS_REL_IND,
	MSG_ID_MMSMS_ERR_IND,
	MSG_ID_MMSMS_EST_REJ,
	MSG_ID_SMS_TIMER_EXPIRY,
	MSG_ID_MMSMS_EST_INTR,

	 
	MSG_ID_GMMSMS_EST_CNF,
	MSG_ID_GMMSMS_EST_REJ,
	MSG_ID_GMMSMS_ERR_IND,
	MSG_ID_GMMSMS_UNITDATA_IND,

	 
	MSG_ID_SMS_SUBMIT,
	MSG_ID_SMS_SUBMIT_ABORT,
	MSG_ID_SMS_COMMAND,
	MSG_ID_SMS_COMMAND_ABORT,
	MSG_ID_SMS_DELIVER_REPORT_ACK,
	MSG_ID_SMS_DELIVER_REPORT_NACK,
	MSG_ID_SMS_SERVICE_REQ,
	MSG_ID_SMS_MORE_MSG_SEND_REQ,
	MSG_ID_SMS_TRY_NEXT_BEARER_REQ,
	MSG_ID_SMS_MEM_AVL_NOTIF,
	MSG_ID_SMS_CODE_END = MSG_ID_SMS_MEM_AVL_NOTIF,
	 


#line 341 "adaptation\include\stack_msgs.h"
   MSG_ID_SMS_CODE_CHECK_POINT,

   #line 1 "interface\ps\sim_sap.h"
 

































  









  







































































    
   MSG_ID_GMMSIM_GSM_ALGO_REQ = MSG_ID_SIM_CODE_BEGIN,
   MSG_ID_SIM_START_REQ,
   MSG_ID_SIM_START_CNF,
   MSG_ID_SIM_ERROR_IND,
   MSG_ID_SIM_SMU_ERROR_IND,
   MSG_ID_SIM_MMI_READY_IND,
   MSG_ID_SIM_MMI_SECURITY_IND,  
   MSG_ID_SIM_MMRR_READY_IND,  
   MSG_ID_SIM_MM_READY_IND,
   MSG_ID_SIM_SUPC_READY_IND,
   MSG_ID_SIM_CC_READY_IND,
   MSG_ID_SIM_SMS_READY_IND,
   MSG_ID_SIM_RUN_ALGO_REQ,
   MSG_ID_SIM_RUN_ALGO_CNF,
   MSG_ID_SIM_READ_REQ,
   MSG_ID_SIM_READ_CNF,
   MSG_ID_SIM_WRITE_REQ,
   MSG_ID_USIM_URR_WRITE_REQ,
   MSG_ID_USIM_URR_WRITE_CNF,
   MSG_ID_SIM_WRITE_CNF,
   MSG_ID_SIM_INCREASE_REQ,
   MSG_ID_SIM_INCREASE_CNF,
   MSG_ID_SIM_SECURITY_REQ,
   MSG_ID_SIM_SECURITY_CNF,
   MSG_ID_SIM_FILE_INFO_REQ,
   MSG_ID_SIM_FILE_INFO_CNF,
   MSG_ID_SIM_SEEK_REQ,
   MSG_ID_SIM_SEEK_CNF,
   MSG_ID_SIM_DIAL_MODE_REQ,
   MSG_ID_SIM_DIAL_MODE_CNF,
   MSG_ID_SIM_STATUS_REQ,
   MSG_ID_SIM_STATUS_CNF,
   MSG_ID_SIM_POWEROFF_REQ,
   MSG_ID_SIM_POWEROFF_CNF,
   MSG_ID_SIM_TIMER_EXPIRY,
   MSG_ID_SIM_ERROR_TEST_REQ,
   MSG_ID_SIM_READ_PLMN_REQ,
   MSG_ID_SIM_READ_PLMN_CNF,
   MSG_ID_SIM_WRITE_PLMN_REQ,
   MSG_ID_SIM_WRITE_PLMN_CNF,
   MSG_ID_SAT_READY_REQ,		
   MSG_ID_SIM_STATUS_UPDATE_IND,        
    
   MSG_ID_SIM_L4C_VERIFY_PIN_RESULT_IND,
    
   MSG_ID_USIM_URR_READY_IND,
   MSG_ID_USIM_URR_UPDATE_NETPAR_REQ,
   MSG_ID_USIM_URR_UPDATE_NETPAR_CNF,
   MSG_ID_SIM_AUTHENTICATE_REQ,
   MSG_ID_SIM_AUTHENTICATE_CNF,
   MSG_ID_SIM_SEARCH_REC_REQ,
   MSG_ID_SIM_SEARCH_REC_CNF,
   MSG_ID_SIM_GET_CHALLENGE_REQ,
   MSG_ID_SIM_GET_CHALLENGE_CNF,
    
   MSG_ID_SAT_PROACTIVE_CMD_IND,
   MSG_ID_SAT_MORE_TIME_RES,          
   MSG_ID_SAT_DSPL_TEXT_RES,

   MSG_ID_SAT_GET_INKEY_RES,
   MSG_ID_SAT_GET_INPUT_RES,
   MSG_ID_SAT_PLAY_TONE_RES,
   MSG_ID_SAT_SETUP_MENU_RES,
   MSG_ID_SAT_SELECT_ITEM_RES,
   MSG_ID_SAT_MENU_SELECT_REQ,
   MSG_ID_SAT_CALL_CTRL_BY_SIM_REQ,
   MSG_ID_SAT_SS_CTRL_BY_SIM_REQ,
   MSG_ID_SAT_SEND_SMS_CTRL_BY_SIM_REQ,
   MSG_ID_SAT_SMS_DL_REQ,
   MSG_ID_SAT_CB_DL_REQ,

   MSG_ID_SAT_EVDL_MT_CALL_REQ,
   MSG_ID_SAT_EVDL_CALL_CONNECT_REQ,
   MSG_ID_SAT_EVDL_CALL_DISCONNECT_REQ,
   MSG_ID_SAT_EVDL_LOCATION_STATUS_REQ,
   MSG_ID_SAT_EVDL_USER_ACTIVITY_REQ,
   MSG_ID_SAT_EVDL_IDLE_SCREEN_AVAILABLE_REQ,
   MSG_ID_SAT_EVDL_LANGUAGE_SELECTION_REQ,
   MSG_ID_SAT_EVDL_CARD_READER_STATUS_REQ,
   MSG_ID_SAT_EVDL_BROWSER_TERMINATION_REQ,
   MSG_ID_SAT_EVDL_DATA_AVAILABLE_REQ,
   MSG_ID_SAT_EVDL_CHANNEL_STATUS_REQ,

   MSG_ID_SAT_SEND_SMS_RES,
   MSG_ID_SAT_SEND_SS_RES,
   MSG_ID_SAT_SEND_USSD_RES,
   MSG_ID_SAT_SETUP_CALL_RES,

   MSG_ID_SAT_SETUP_IDLE_DSPL_RES,
   MSG_ID_SAT_RUN_AT_COMMAND_RES,
   MSG_ID_SAT_SEND_DTMF_RES,
   MSG_ID_SAT_LANG_NOTIFY_RES,
   MSG_ID_SAT_LAUNCH_BROWSER_RES,

   MSG_ID_SAT_FILE_CHANGE_IND,
   MSG_ID_SAT_FILE_CHANGE_RES,
   MSG_ID_SAT_IMEI_INFO_REQ,
   MSG_ID_SAT_IMEI_INFO_CNF,  
   MSG_ID_SAT_LOCATION_INFO_IND,			 
   MSG_ID_SAT_PROVIDE_LOCATION_INFO_IND,   	 
   MSG_ID_SAT_TIME_ZONE_REQ,
   MSG_ID_SAT_TIME_ZONE_CNF, 
   MSG_ID_SAT_CURRENT_TIME_REQ,
   MSG_ID_SAT_CURRENT_TIME_CNF,     
   MSG_ID_SAT_ME_STATUS_REQ,
   MSG_ID_SAT_ME_STATUS_CNF,    
   MSG_ID_SAT_NMR_REQ,
   MSG_ID_SAT_NMR_CNF,   
   MSG_ID_SAT_LANGUAGE_REQ,
   MSG_ID_SAT_LANGUAGE_CNF, 
   MSG_ID_SAT_TIMING_ADVANCE_IND,  
   MSG_ID_SAT_CALL_STATUS_IND,   
    
   MSG_ID_SAT_PROFILE_DOWNLOAD_REQ,
   MSG_ID_SAT_PROFILE_DOWNLOAD_CNF,
   MSG_ID_SAT_TERMINAL_RSP,
   MSG_ID_SAT_MORETIME_IND,
   MSG_ID_SAT_POLL_INTERVAL_IND,
   MSG_ID_SAT_ENVELOPE_REQ,
   MSG_ID_SAT_ENVELOPE_CNF,
   MSG_ID_SAT_REFRESH_IND,
   MSG_ID_SAT_POLLING_OFF_IND,
   MSG_ID_SAT_PROVIDE_LOCAL_INFO_IND,
   MSG_ID_SAT_SETUP_EVENT_LIST_IND,
   MSG_ID_SAT_TIMER_MANAGEMENT_IND,
    
    
   MSG_ID_SAT_OPEN_GPRS_CHANNEL_IND,
   MSG_ID_SAT_OPEN_GPRS_CHANNEL_RES,
   MSG_ID_SAT_OPEN_CSD_CHANNEL_IND,
   MSG_ID_SAT_OPEN_CSD_CHANNEL_RES,
   MSG_ID_SAT_CLOSE_CHANNEL_IND,
   MSG_ID_SAT_CLOSE_CHANNEL_RES,
   MSG_ID_SAT_SEND_DATA_IND,
   MSG_ID_SAT_SEND_DATA_RES,
   MSG_ID_SAT_RECV_DATA_IND,
   MSG_ID_SAT_RECV_DATA_RES,
   MSG_ID_SMU_L2R_DATA_IND,
   MSG_ID_SAT_CH_STATUS_IND,
   MSG_ID_SAT_CH_STATUS_RES,
    
   MSG_ID_SIM_CODE_END = MSG_ID_SAT_CH_STATUS_RES,
    


#line 344 "adaptation\include\stack_msgs.h"
   MSG_ID_SIM_CODE_CHECK_POINT,

   #line 1 "interface\ps\l4_sap.h"
 

































  









  































































































































 









 
	 
	MSG_TAG_L4C_FIRST_CNF_MSG = MSG_ID_L4C_CODE_BEGIN,
	MSG_ID_L4CCSM_CC_STARTUP_CNF = MSG_TAG_L4C_FIRST_CNF_MSG,
	MSG_ID_L4CCSM_CC_ACM_RESET_CNF,
	MSG_ID_L4CCSM_CC_ACMMAX_SET_CNF,
	MSG_ID_L4CCSM_CC_CRSS_CNF,
	MSG_ID_L4CCSM_CC_CALL_DEFLECTION_CNF,
	MSG_ID_L4CCSM_CC_START_DTMF_CNF,
	MSG_ID_L4CCSM_CC_STOP_DTMF_CNF,
	MSG_ID_L4CCSM_CC_CALL_ACCEPT_CNF,
	MSG_ID_L4CCSM_CC_CALL_MODIFY_CNF,
	MSG_ID_L4CCSM_CC_CALL_SETUP_CNF,
	MSG_ID_L4CCSM_CC_CALL_DISC_CNF,
   MSG_ID_L4CCSM_CC_EMERGENCY_CALL_SETUP_CNF,  
   MSG_ID_L4CCSM_CC_SET_CSD_PROF_CNF,
   MSG_ID_L4CCSM_CC_SAT_SETUP_CNF,
   MSG_ID_L4CCSM_CC_SAT_SEND_DTMF_CNF,
   MSG_ID_L4CCSM_CC_UPDATE_ALS_CNF,

   MSG_ID_L4CCSM_CISS_STARTUP_CNF,
	MSG_ID_L4CCSM_CISS_SS_PARSE_CNF,
   MSG_ID_L4CCSM_CISS_CF_END_CNF,
   MSG_ID_L4CCSM_CISS_CW_END_CNF,
   MSG_ID_L4CCSM_CISS_CB_END_CNF,
   MSG_ID_L4CCSM_CISS_EMLPP_END_CNF,
   MSG_ID_L4CCSM_CISS_CLI_END_CNF,
   MSG_ID_L4CCSM_CISS_CCBS_END_CNF,
   MSG_ID_L4CCSM_CISS_PUSSR_END_CNF,
   MSG_ID_L4CCSM_CISS_USSR_END_CNF,            
   MSG_ID_L4CCSM_CISS_USSN_END_CNF,
   MSG_ID_L4CCSM_CISS_SIM_END_CNF,

   MSG_ID_L4CUEM_SET_PROFILE_CNF,
	MSG_ID_L4CUEM_STARTUP_CNF,
   MSG_ID_L4CUEM_SET_AUDIO_PROFILE_CNF,
   MSG_ID_L4CUEM_SET_AUDIO_PARAM_CNF,
   MSG_ID_L4CUEM_SET_HW_LEVEL_CNF,
   MSG_ID_L4CUEM_AUDIO_PLAY_BY_NAME_CNF,
   MSG_ID_L4CUEM_AUDIO_STOP_BY_NAME_CNF,
   MSG_ID_L4CUEM_AUDIO_PLAY_BY_STRING_CNF,
   MSG_ID_L4CUEM_AUDIO_STOP_BY_STRING_CNF,
   MSG_ID_L4CUEM_VM_RECORD_CNF,   
   MSG_ID_L4CUEM_VM_PLAY_CNF,
   MSG_ID_L4CUEM_VM_STOP_CNF,
   MSG_ID_L4CUEM_VM_DELETE_CNF,
   MSG_ID_L4CUEM_VM_ABORT_CNF,
   MSG_ID_L4CUEM_VM_PAUSE_CNF,
   MSG_ID_L4CUEM_VM_RESUME_CNF,
   MSG_ID_L4CUEM_VM_APPEND_CNF,
   MSG_ID_L4CUEM_VM_GET_INFO_CNF,
   MSG_ID_L4CUEM_VM_RENAME_CNF,


   MSG_ID_L4CRAC_ACT_CNF,
   MSG_ID_L4CRAC_REG_CNF,
   MSG_ID_L4CRAC_PS_REG_CNF,
   MSG_ID_L4CRAC_DEREG_CNF,
   MSG_ID_L4CRAC_PLMN_LIST_CNF,
   MSG_ID_L4CRAC_CLASS_CHANGE_CNF,
   MSG_ID_L4CRAC_SET_PREFERRED_BAND_CNF, 
   MSG_ID_L4CRAC_RFOFF_CNF,






	 MSG_ID_L4CRAC_PLMN_SEL_CNF,


   MSG_ID_L4CPHB_INIT_LN_CNF,
	MSG_ID_L4CPHB_STARTUP_CNF,
	MSG_ID_L4CPHB_SEARCH_CNF,
   MSG_ID_L4CPHB_READ_CNF,
   MSG_ID_L4CPHB_WRITE_CNF,
	MSG_ID_L4CPHB_DELETE_CNF,
	MSG_ID_L4CPHB_READ_LN_CNF,
	MSG_ID_L4CPHB_WRITE_LN_CNF,
	MSG_ID_L4CPHB_DELETE_LN_CNF,
	MSG_ID_L4CPHB_APPROVE_CNF,
	MSG_ID_L4CPHB_SYNC_CNF,
	MSG_ID_L4CPHB_READ_EMAIL_CNF,
	MSG_ID_L4CPHB_SET_GRP_CNF,
	MSG_ID_L4CPHB_WRITE_USIM_CNF,

	MSG_ID_L4CSMU_START_CNF,
	MSG_ID_L4CSMU_SECURITY_CNF,
	MSG_ID_L4CSMU_SET_PERSONALIZATION_CNF,  
	MSG_ID_L4CSMU_SML_STATUS_CNF,  
	MSG_ID_L4CSMU_PLMN_SEL_WRITE_CNF,
	MSG_ID_L4CSMU_SIM_ACCESS_CNF,
	MSG_ID_L4CSMU_PUCT_WRITE_CNF,
   MSG_ID_L4CSMU_CSP_READ_CNF,

   MSG_ID_L4CSMU_DIAL_MODE_CNF,
	MSG_ID_L4CSMU_PUCT_READ_CNF,
	MSG_ID_SAT_MENU_SELECT_CNF,
	 
	
	 




	MSG_ID_L4CSMU_SAT_OPEN_CHANNEL_CNF,
	
	 
   MSG_ID_L4CSMSAL_INIT_CNF,
   MSG_ID_L4CSMSAL_READ_CNF,
   MSG_ID_L4CSMSAL_SEND_CNF,
   MSG_ID_L4CSMSAL_WRITE_CNF,
   MSG_ID_L4CSMSAL_DELETE_CNF,
   MSG_ID_L4CSMSAL_SEND_FROM_STORAGE_CNF,
   
   MSG_ID_L4CSMSAL_SEND_ABORT_CNF,
   MSG_ID_L4CSMSAL_SAT_SEND_CNF,
   MSG_ID_L4CSMSAL_CB_UPDATE_CNF,
   MSG_ID_L4CSMSAL_SET_COMMON_PARA_CNF,
   MSG_ID_L4CSMSAL_SET_PROFILE_PARA_CNF,
   MSG_ID_L4CSMSAL_COPY_MSG_CNF,
   MSG_ID_L4CSMSAL_SET_STATUS_CNF,

	MSG_ID_TCM_PDP_ACTIVATE_CNF,
	MSG_ID_TCM_PDP_ACTIVATE_REJ,
	MSG_ID_TCM_PDP_DEACTIVATE_CNF,
	MSG_ID_TCM_PDP_MODIFY_CNF,
	MSG_ID_TCM_PDP_MODIFY_REJ,
	MSG_ID_L4CTCM_START_CNF,
	MSG_ID_L4CTCM_SET_PRI_PDP_INFO_CNF,
	MSG_ID_L4CTCM_SET_SEC_PDP_INFO_CNF,
	MSG_ID_L4CTCM_SET_QOS_INFO_CNF,
	MSG_ID_L4CTCM_SET_EQOS_INFO_CNF,  
	MSG_ID_L4CTCM_SET_TFT_INFO_CNF,
	MSG_ID_L4CTCM_SET_GPRS_STATISTICS_INFO_CNF,
	MSG_ID_L4CTCM_SET_PPP_AUTH_CNF, 
	MSG_ID_L4CTCM_UNDEFINE_PDP_INFO_CNF, 

	MSG_ID_L4CPPP_ACTIVATE_CNF,
	MSG_ID_L4CPPP_DEACTIVATE_CNF,
   MSG_ID_L4CPPP_RESUME_CNF,
   	MSG_ID_L4CABM_SET_GPRS_ACCOUNT_INFO_CNF, 
   	MSG_ID_L4CABM_GET_GPRS_ACCOUNT_INFO_CNF,
    	MSG_ID_L4CABM_START_CNF, 
    
   MSG_ID_L4CPPP_CSD_ACTIVATE_CNF,
   MSG_ID_L4CPPP_CSD_DEACTIVATE_CNF,

    



  MSG_ID_L4C_T30_TX_MSG_CNF, 
   MSG_ID_L4C_T30_RX_MSG_CNF,
   MSG_ID_L4C_T30_RW_PARAM_CNF,
   MSG_ID_L4C_T30_TX_BCS_CNF,
   MSG_ID_L4C_T30_RX_BCS_CNF,
   MSG_ID_L4C_T30_TX_SILENCE_CNF,
   MSG_ID_L4C_T30_RX_SILENCE_CNF,
   MSG_ID_L4C_T30_RW_STR_PARAM_CNF,
   MSG_ID_L4C_T30_TX_PPM_CNF, 

   MSG_ID_L4C_OPEN_UART_PORT_CNF,
   MSG_ID_L4C_CLOSE_UART_PORT_CNF,

   MSG_ID_L4CWAP_PROF_ACCESS_CNF, 

    
   MSG_ID_L4CDT_DOWNLOAD_CNF,
   MSG_ID_L4CDT_UPLOAD_CNF,
   MSG_ID_L4CDT_FILELIST_CNF,
   MSG_TAG_L4C_LAST_CNF_MSG = MSG_ID_L4CDT_FILELIST_CNF,


   MSG_TAG_L4C_FIRST_IND_MSG,
    




	MSG_ID_L4CCSM_CC_ATTACH_IND = MSG_TAG_L4C_FIRST_IND_MSG,
	MSG_ID_L4CCSM_CC_DETACH_IND,
	MSG_ID_L4CCSM_CC_CCM_IND,
	MSG_ID_L4CCSM_CC_CALL_MODIFY_IND,
	MSG_ID_L4CCSM_CC_CALL_SETUP_IND,
	MSG_ID_L4CCSM_CC_CALL_ALERT_IND,
	MSG_ID_L4CCSM_CC_CALL_CONNECT_IND,
	MSG_ID_L4CCSM_CC_CALL_DISC_IND,
	MSG_ID_L4CCSM_CC_CALL_REL_IND,
   MSG_ID_L4CCSM_CC_PROGRESS_IND,
	MSG_ID_L4CCSM_CC_CALL_PROC_IND,
	MSG_ID_L4CCSM_CC_NOTIFY_SS_IND,
	MSG_ID_L4CCSM_CC_AUTO_DTMF_START_IND,
	MSG_ID_L4CCSM_CC_AUTO_DTMF_COMPLETE_IND,
	MSG_ID_L4CCSM_CC_CCBS_CALL_DEACTIVATE_IND,
	MSG_ID_L4CCSM_CC_CALL_PREEMPT_IND,
	MSG_ID_L4CCSM_CC_UART_TRANSFER_IND,
	MSG_ID_L4CCSM_CC_CSD_EST_IND,
	MSG_ID_L4CCSM_CPHS_DISPLAY_ALS_IND,  
	MSG_ID_L4CCSM_CC_CALL_INFO_IND,  
	MSG_ID_L4CCSM_CC_CPI_IND, 
	MSG_ID_L4CCSM_CC_CALL_SYNC_IND,  
	MSG_ID_L4CCSM_CC_VIDEO_CALL_STATUS_IND,	
	MSG_ID_L4CCSM_CISS_USSR_BEGIN_IND,
	MSG_ID_L4CCSM_CISS_USSN_BEGIN_IND,
	MSG_ID_L4CCSM_CISS_USSR_FAC_IND,
	MSG_ID_L4CCSM_CISS_USSN_FAC_IND,
	MSG_ID_L4CCSM_CISS_CB_FAC_IND,
        MSG_ID_L4CCSM_CPHS_DISPLAY_CFU_IND,  

   MSG_ID_L4CUEM_VM_RECORD_FINISH_IND,
   MSG_ID_L4CUEM_VM_PLAY_FINISH_IND,


	
	MSG_ID_L4CRAC_REG_STATE_IND,
	MSG_ID_L4CRAC_RX_LEVEL_IND,
	MSG_ID_L4CRAC_NW_INFO_IND,
	MSG_ID_L4CRAC_CIPHER_IND,
	MSG_ID_L4CRAC_HZ_CELL_INFO_UPDATE_IND,  
	MSG_ID_L4CRAC_HZ_DEDICATED_MODE_IND,
	MSG_ID_L4CRAC_HZ_PKT_TRANSFER_MODE_IND,
	MSG_ID_L4CRAC_SEARCH_NORMAL_FINISH_IND,
	MSG_ID_L4CRAC_MMRR_SERVICE_STATUS_IND,	
 	
	MSG_ID_L4CSMU_SECURITY_IND,
	MSG_ID_L4CSMU_MMRR_READY_IND, 
	MSG_ID_L4CSMU_MMI_INFO_IND, 

 	
   MSG_ID_SAT_DSPL_TEXT_IND,
   MSG_ID_SAT_GET_INKEY_IND,
   MSG_ID_SAT_GET_INPUT_IND,
   MSG_ID_SAT_SETUP_MENU_IND,
   MSG_ID_SAT_SELECT_ITEM_IND,
   MSG_ID_SAT_PLAY_TONE_IND,
   MSG_ID_SAT_SETUP_CALL_IND,
   MSG_ID_SAT_SEND_SMS_IND,
   MSG_ID_SAT_SEND_SS_IND,
   MSG_ID_SAT_SEND_USSD_IND,
   MSG_ID_SAT_MMI_INFO_IND,
 
   MSG_ID_SAT_SETUP_IDLE_DSPL_IND, 
   MSG_ID_SAT_RUN_AT_COMMAND_IND,
   MSG_ID_SAT_SEND_DTMF_IND,
   MSG_ID_SAT_LANG_NOTIFY_IND,
   MSG_ID_SAT_LAUNCH_BROWSER_IND,
   MSG_ID_SAT_NO_OTHER_CMD_IND,
    
   	
 









    
 
MSG_ID_L4CSMU_SAT_SET_CSD_PROF_IND,
MSG_ID_L4CSMU_SAT_SET_GPRS_PROF_IND,
MSG_ID_L4CSMU_SAT_OPEN_CHANNEL_IND,
MSG_ID_L4CSMU_SAT_CLOSE_CHANNEL_IND,
MSG_ID_L4CSMU_SAT_SEND_DATA_IND,
MSG_ID_L4CSMU_SAT_RECV_DATA_IND,
MSG_ID_L4CSMU_SAT_NOTIFY_MMI_IND,
 

	MSG_ID_L4CSMSAL_CB_MSG_TEXT_IND,
	MSG_ID_L4CSMSAL_CB_MSG_PDU_IND,
	MSG_ID_L4CSMSAL_CB_DL_IND,
	MSG_ID_L4CSMSAL_MEM_FULL_IND,
   MSG_ID_L4CSMSAL_MEM_EXCEED_IND,
   MSG_ID_L4CSMSAL_MEM_AVAILABLE_IND,
   MSG_ID_L4CSMSAL_MSG_WAITING_IND,
   MSG_ID_L4CSMSAL_NEW_MSG_PDU_IND,
   MSG_ID_L4CSMSAL_NEW_MSG_TEXT_IND,
   MSG_ID_L4CSMSAL_NEW_MSG_INDEX_IND,
   MSG_ID_L4CSMSAL_APP_DATA_IND,
   MSG_ID_L4CSMSAL_SYNC_MSG_IND,
   MSG_ID_L4CSMSAL_STARTUP_READ_MSG_IND,
   MSG_ID_L4CSMSAL_STARTUP_BEGIN_IND,
   MSG_ID_L4CSMSAL_STARTUP_FINISH_IND,
   MSG_ID_L4CSMSAL_FDN_CHECK_IND,
   MSG_ID_L4CSMSAL_HZ_CB_MSG_IND,  
   MSG_ID_L4CSMSAL_CB_GS_CHANGE_IND,

	MSG_ID_L4C_T30_READY_IND, 
	MSG_ID_L4C_T30_TRANSFER_UART_IND,
	MSG_ID_L4C_T30_REPORT_PARAM_IND,
	MSG_ID_L4C_T30_TX_BCS_IND,
	MSG_ID_L4C_T30_VOICE_MODE_IND,

	MSG_ID_TCM_PDP_ACTIVATE_IND,
	MSG_ID_TCM_PDP_DEACTIVATE_IND,
	MSG_ID_TCM_MOBILITY_STATUS_IND,
	MSG_ID_TCM_EVENT_REP_IND,

	MSG_ID_L4CPPP_DEACTIVATE_IND,
   MSG_ID_L4CPPP_ESCAPE_IND,
   MSG_ID_L4CPPP_CSD_DEACTIVATE_IND,

  MSG_ID_L4CPHB_STARTUP_BEGIN_IND,
   MSG_ID_L4CPHB_STARTUP_READ_IND,
	MSG_ID_L4CPHB_STARTUP_PHASE1_IND,
	MSG_ID_L4CPHB_STARTUP_READ_ANR_IND,
	MSG_ID_L4CPHB_STARTUP_READ_EMAIL_IND,
        MSG_ID_L4CPHB_STARTUP_READ_GAS_IND,
        MSG_ID_L4CPHB_STARTUP_READ_GRP_IND,

   MSG_ID_FLC_STATUS_REPORT_IND,

    
   MSG_ID_L4CDT_UART_TRANSFER_IND,
	MSG_TAG_L4C_LAST_IND_MSG = MSG_ID_L4CDT_UART_TRANSFER_IND,

   MSG_TAG_L4C_FIRST_REQ_MSG,
   MSG_ID_L4C_PS_ABM_SETUP_REQ = MSG_TAG_L4C_FIRST_REQ_MSG,
   MSG_ID_L4C_PS_ABM_DISC_REQ,
   MSG_ID_L4C_CC_ABM_SETUP_REQ,
   MSG_ID_L4C_CC_ABM_DISC_REQ,
   MSG_ID_ABM_L4C_GET_CSD_CALL_NUM_REQ,
   MSG_ID_L4C_OPEN_UART_PORT_REQ,
   MSG_ID_L4C_CLOSE_UART_PORT_REQ,

   MSG_TAG_L4C_LAST_REQ_MSG = MSG_ID_L4C_CLOSE_UART_PORT_REQ,

	MSG_ID_L4C_CODE_END = MSG_TAG_L4C_LAST_REQ_MSG,
	 


	 
	MSG_TAG_FIRST_CNTXT_DATA_MSG = MSG_ID_TCM_CODE_BEGIN,
	MSG_ID_TAF_EXT_PDP_ACTIVATE_IND = MSG_TAG_FIRST_CNTXT_DATA_MSG,
	MSG_ID_TCM_PDP_ACTIVATE_REQ,
	MSG_ID_SMREG_PDP_ACTIVATE_IND,
	MSG_ID_SMREG_PDP_ACTIVATE_CNF,
	MSG_ID_SMREG_PDP_ACTIVATE_REJ,
	MSG_ID_SMREG_PDP_ACTIVATE_SEC_CNF,
	MSG_ID_SMREG_PDP_ACTIVATE_SEC_REJ,
	MSG_ID_TCM_PDP_ACTIVATE_REJ_RSP,
	MSG_ID_TCM_TIMER_EXPIRY,
	MSG_ID_TCM_PDP_MODIFY_REQ,
	MSG_ID_SMREG_PDP_MODIFY_IND,
	MSG_ID_SMREG_PDP_MODIFY_CNF,
	MSG_ID_SMREG_PDP_MODIFY_REJ,
	MSG_ID_TCM_PDP_DEACTIVATE_REQ,
	MSG_ID_TAF_EXT_PDP_DEACTIVATE_IND,
	MSG_ID_SMREG_PDP_DEACTIVATE_IND,
	MSG_ID_SMREG_PDP_DEACTIVATE_CNF,
	MSG_ID_TAF_LINK_FREE_IND,	



	MSG_ID_TAF_DATA_IND,
	MSG_ID_TCPIP_TCM_DATA_REQ,
	MSG_ID_SN_DATA_IND,
	MSG_ID_SN_UNITDATA_IND,	

	MSG_TAG_LAST_CNTXT_DATA_MSG = MSG_ID_SN_UNITDATA_IND,


	 
	MSG_ID_L4CTCM_START_REQ,
	MSG_ID_L4CTCM_SET_PRI_PDP_INFO_REQ,
	MSG_ID_L4CTCM_SET_SEC_PDP_INFO_REQ,
	MSG_ID_L4CTCM_SET_QOS_INFO_REQ,
	MSG_ID_L4CTCM_SET_EQOS_INFO_REQ,  
	MSG_ID_L4CTCM_SET_TFT_INFO_REQ,
	MSG_ID_L4CTCM_SET_GPRS_STATISTICS_INFO_REQ,
	MSG_ID_L4CTCM_SET_PPP_AUTH_INFO_REQ,
	MSG_ID_L4CTCM_UNDEFINE_PDP_INFO_REQ, 

       
	MSG_ID_SMREG_PDP_PRESERVE_IND,	
	MSG_ID_SMREG_PDP_REESTABLISH_IND,	
	MSG_ID_TCM_RATDM_DATA_IND,
	MSG_ID_TCM_CODE_END = MSG_ID_TCM_RATDM_DATA_IND,
	 

	 
	MSG_ID_MNCC_SETUP_IND = MSG_ID_CSM_CODE_BEGIN,
	MSG_ID_MNCC_SETUP_CNF,
	MSG_ID_MNCC_SETUP_COMPL_IND,
	MSG_ID_MNCC_REJ_IND,
	MSG_ID_MNCC_CALL_PROC_IND,
	MSG_ID_MNCC_PROGRESS_IND,
	MSG_ID_MNCC_ALERT_IND,
	MSG_ID_MNCC_NOTIFY_IND,
	MSG_ID_MNCC_DISC_IND,
	MSG_ID_MNCC_REL_IND,
	MSG_ID_MNCC_REL_CNF,
	MSG_ID_MNCC_FACILITY_IND,
	MSG_ID_MNCC_START_DTMF_CNF,
	MSG_ID_MNCC_STOP_DTMF_CNF,
	MSG_ID_MNCC_MODIFY_IND,
	MSG_ID_MNCC_MODIFY_CNF,
	MSG_ID_MNCC_SYNC_IND,
	MSG_ID_MNCC_RAT_IND,	
	MSG_ID_MNCC_HOLD_CNF,
	MSG_ID_MNCC_RETRIEVE_CNF,
	MSG_ID_MNCC_USER_INFO_IND,
	MSG_ID_MNCC_CONGESTION_CTRL_IND,
	MSG_ID_MNCC_CCBS_EST_IND,
	MSG_ID_MNCC_CCBS_RECALL_IND,
	MSG_ID_MNCC_AOC_IND,
	MSG_ID_MNCC_SIG_CON_REEST_IND,
	MSG_ID_MNCC_SIG_CON_REEST_CNF,

   	MSG_ID_L4CCSM_CC_STARTUP_REQ,
   	MSG_ID_L4CCSM_CC_ACM_RESET_REQ,
	MSG_ID_L4CCSM_CC_ACMMAX_SET_REQ,
	MSG_ID_L4CCSM_CC_CALL_DEFLECTION_REQ,
	MSG_ID_L4CCSM_CC_CRSS_REQ,
	MSG_ID_L4CCSM_CC_CALL_ACCEPT_REQ,
	MSG_ID_L4CCSM_CC_CALL_DISC_REQ,
	MSG_ID_L4CCSM_CC_CALL_MODIFY_REQ,
	MSG_ID_L4CCSM_CC_CALL_SETUP_REQ,
	MSG_ID_L4CCSM_CC_AUTO_DTMF_START_REQ,
	MSG_ID_L4CCSM_CC_EMERGENCY_CALL_SETUP_REQ,
	MSG_ID_L4CCSM_CC_START_DTMF_REQ,
	MSG_ID_L4CCSM_CC_STOP_DTMF_REQ,
	MSG_ID_L4CCSM_CC_SAT_SETUP_REQ,
	MSG_ID_L4CCSM_CC_SAT_SEND_DTMF_REQ,
	MSG_ID_L4CCSM_CC_SAT_ABORT_DTMF_REQ,
	MSG_ID_L4CCSM_CC_SET_CSD_PROF_REQ,
	MSG_ID_L4CCSM_CC_UPDATE_ALS_REQ,
	MSG_ID_L4CCSM_CC_UART_TRANSFER_REQ,
	MSG_ID_L4CCSM_CC_REL_COMP_REQ,

	MSG_ID_SAT_CALL_CTRL_BY_SIM_CNF,

	MSG_ID_CSM_TDT_ACTIVATE_CNF,
	MSG_ID_CSM_TDT_DEACTIVATE_CNF,
	MSG_ID_CSM_TDT_ESC_ON_IND,
	MSG_ID_CSM_TDT_DISC_IND,
	MSG_ID_CSM_L2R_ACTIVATE_CNF,
	MSG_ID_CSM_L2R_DEACTIVATE_CNF,
	MSG_ID_CSM_L2R_XID_IND,
	MSG_ID_CSM_L2R_DISC_IND,
	MSG_ID_CSM_L2R_ESC_ON_IND,

   MSG_ID_CSM_T30_ACTIVATE_CNF,
   MSG_ID_CSM_T30_DEACTIVATE_CNF,
   MSG_ID_CSM_T30_FAX_RATE_CNF,
   MSG_ID_CSM_T30_DISC_IND,

   MSG_ID_L4CCSM_CISS_STARTUP_REQ,
   MSG_ID_L4CCSM_CISS_SS_PARSE_REQ,
   MSG_ID_L4CCSM_CISS_CF_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CW_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CB_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_EMLPP_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CLI_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CCBS_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_PUSSR_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CB_FAC_RES,
   MSG_ID_L4CCSM_CISS_USSR_FAC_RES,
   MSG_ID_L4CCSM_CISS_USSN_FAC_RES,
   MSG_ID_L4CCSM_CISS_END_RES,
   MSG_ID_MNSS_BEGIN_IND,
   MSG_ID_MNSS_FAC_IND,
   MSG_ID_MNSS_END_IND,
   MSG_ID_SAT_SS_CTRL_BY_SIM_CNF,

   MSG_ID_CSM_TIMER_EXPIRY,
   MSG_ID_CSM_CODE_END  = MSG_ID_CSM_TIMER_EXPIRY,
	 

	 
	MSG_ID_L4CSMSAL_INIT_REQ = MSG_ID_SMSAL_CODE_BEGIN,
	MSG_ID_L4CSMSAL_DE_INIT_REQ,
	MSG_ID_L4CSMSAL_DELETE_REQ,
	MSG_ID_L4CSMSAL_DE_PERSONALIZATION_ACK,
	MSG_ID_L4CSMSAL_READ_REQ,
	MSG_ID_L4CSMSAL_WRITE_REQ,
	MSG_ID_L4CSMSAL_SEND_REQ,
	MSG_ID_L4CSMSAL_SEND_FROM_STORAGE_REQ,
	MSG_ID_L4CSMSAL_SEND_ABORT,
	MSG_ID_L4CSMSAL_SET_PARAMETER_REQ,
	MSG_ID_L4CSMSAL_SET_COMMON_PARA_REQ,
	MSG_ID_L4CSMSAL_SET_PROFILE_PARA_REQ,
        MSG_ID_L4CSMSAL_SAT_SEND_REQ,  
        MSG_ID_L4CSMSAL_STARTUP_READ_NEXT_REQ,
        MSG_ID_L4CSMSAL_FDN_CHECK_RSP,
        MSG_ID_L4CSMSAL_COPY_MSG_REQ,
        MSG_ID_L4CSMSAL_SET_STATUS_REQ,


	 
	MSG_ID_SMS_DELIVER,
	MSG_ID_SMS_SUBMIT_REPORT_ACK,
	MSG_ID_SMS_SUBMIT_REPORT_NACK,
	MSG_ID_SMS_STATUS_REPORT,
	MSG_ID_SMS_SUBMIT_ABORT_CNF,
	MSG_ID_SMS_MEM_AVL_NOTIF_CNF,
	MSG_ID_SMS_MORE_MSG_SEND_IND,
	MSG_ID_SMSAL_TST_DELIVER,

	 
	MSG_ID_SAT_SMS_DL_CNF,
	MSG_ID_SAT_CB_DL_CNF,
        MSG_ID_SAT_SEND_SMS_CTRL_BY_SIM_CNF,

	MSG_ID_L4CSMSAL_CBCH_REQ,
	MSG_ID_L4CSMSAL_CB_UPDATE_REQ,
        MSG_ID_L4CSMSAL_HZ_CB_ACT_REQ,
        MSG_ID_SMSAL_AS_CB_PAGE_IND,
        MSG_ID_SMSAL_AS_CB_GS_CHANGE_IND,





	
	 
	MSG_ID_SMSAL_SOC_REG_PORT_REQ,
	MSG_ID_SMSAL_CODE_END = MSG_ID_SMSAL_SOC_REG_PORT_REQ,
	 

	 
	MSG_ID_L4CSMU_START_REQ = MSG_ID_SMU_CODE_BEGIN,
	MSG_ID_L4CSMU_SECURITY_REQ,
	MSG_ID_L4CSMU_SET_PERSONALIZATION_REQ,  
	MSG_ID_L4CSMU_SML_STATUS_REQ,  
	MSG_ID_L4CSMU_PLMN_SEL_WRITE_REQ,
	MSG_ID_L4CSMU_SIM_ACCESS_REQ,
	MSG_ID_L4CSMU_PUCT_WRITE_REQ,
	MSG_ID_L4CSMU_PUCT_READ_REQ,
	MSG_ID_L4CSMU_CSP_READ_REQ,
	MSG_ID_L4CSMU_DIAL_MODE_REQ,
	 



        MSG_ID_FLC_STK_UL_APPDU_RESUME,
	MSG_ID_L4CSAT_SET_GPRS_DATA_ACCOUNT_RES,
	MSG_ID_L4CSAT_CSM_OPEN_CSD_RES,
	MSG_ID_L4CSAT_CC_CALL_DISC_RES,
	MSG_ID_L4CSAT_CSM_BEARER_INFO_IND_REQ,
	MSG_ID_L4CSAT_CC_CALL_DISC_IND_REQ,
	 	
        
       MSG_ID_L4CSMU_SAT_OPEN_CHANNEL_REQ,
       MSG_ID_L4CSMU_SAT_SEND_DATA_REQ,
       MSG_ID_L4CSMU_SAT_RECV_DATA_REQ,
       MSG_ID_L4CSMU_SAT_BEARER_PARA_REQ, 
       MSG_ID_L4CSMU_SAT_SET_CSD_PROF_RES,
       MSG_ID_L4CSMU_SAT_SET_GPRS_PROF_RES,
       

	MSG_ID_SMU_CODE_END = MSG_ID_L4CSAT_CC_CALL_DISC_RES,
	 

	 
	MSG_ID_DRVUEM_AUDIO_PLAY_FINISH_IND = MSG_ID_UEM_CODE_BEGIN,
	MSG_ID_DRVUEM_KEYPAD_IND,
	MSG_ID_DRVUEM_POWER_ON_IND,
	MSG_ID_DRVUEM_PMIC_IND,
	MSG_ID_DRVUEM_GPIO_DETECT_IND,
	MSG_ID_DRVUEM_RTC_PERIOD_IND,

    MSG_ID_DRVUEM_USBDETECT_IND,

	MSG_ID_L4CUEM_AUDIO_PLAY_BY_NAME_REQ,
	MSG_ID_L4CUEM_AUDIO_STOP_BY_NAME_REQ,
	MSG_ID_L4CUEM_AUDIO_PLAY_BY_STRING_REQ,
	MSG_ID_L4CUEM_AUDIO_STOP_BY_STRING_REQ,
	MSG_ID_L4CUEM_SET_PROFILE_REQ,
	MSG_ID_L4CUEM_STARTUP_REQ,
	MSG_ID_L4CUEM_SET_AUDIO_PROFILE_REQ,
	MSG_ID_L4CUEM_SET_AUDIO_PARAM_REQ,
	MSG_ID_L4CUEM_SET_HW_LEVEL_REQ,
   MSG_ID_L4CUEM_VM_RECORD_REQ,   
   MSG_ID_L4CUEM_VM_PLAY_REQ,
   MSG_ID_L4CUEM_VM_RENAME_REQ,
   MSG_ID_L4CUEM_VM_STOP_REQ,
   MSG_ID_L4CUEM_VM_DELETE_REQ,
   MSG_ID_L4CUEM_VM_ABORT_REQ,
   MSG_ID_L4CUEM_VM_PAUSE_REQ,
   MSG_ID_L4CUEM_VM_RESUME_REQ,
   MSG_ID_L4CUEM_VM_APPEND_REQ,
   MSG_ID_L4CUEM_VM_GET_INFO_REQ,
	MSG_ID_UEM_CODE_END = MSG_ID_L4CUEM_VM_GET_INFO_REQ,
	 

	 
   MSG_ID_L4CRAC_ACT_REQ = MSG_ID_RAC_CODE_BEGIN,
   MSG_ID_L4CRAC_REG_REQ,
   MSG_ID_L4CRAC_PS_REG_REQ,
   MSG_ID_L4CRAC_DEREG_REQ,
   MSG_ID_L4CRAC_PLMN_LIST_REQ,
   MSG_ID_L4CRAC_CLASS_CHANGE_REQ,
   MSG_ID_L4CRAC_ABORT_LIST_REQ,
   MSG_ID_L4CRAC_SET_PREFERRED_BAND_REQ, 
   MSG_ID_L4CRAC_RFOFF_REQ,  
   MSG_ID_L4CRAC_SIM_STATUS_UPDATE_REQ,






   MSG_ID_L4CRAC_PLMN_SEL_REQ ,


   MSG_ID_GMMREG_ATTACH_CNF,
   MSG_ID_GMMREG_ATTACH_REJ,
   MSG_ID_GMMREG_DETACH_CNF,
   MSG_ID_GMMREG_DETACH_IND,
   MSG_ID_GMMREG_PLMN_LIST_IND,
   MSG_ID_GMMREG_NW_INFO_IND,
   MSG_ID_GMMREG_STATUS_IND,
   MSG_ID_GMMREG_CELL_INFO_UPDATE_IND,
   MSG_ID_GMMREG_PS_SERVICE_INFO_IND,  
   MSG_ID_GMMREG_CIPHER_IND, 
   MSG_ID_GMMREG_RFOFF_CNF,  
   MSG_ID_GMMREG_DEDICATED_MODE_IND,  
   MSG_ID_GMMREG_SEARCH_NORMAL_FINISH_IND, 
   MSG_ID_GMMREG_RR_SERVICE_STATUS_IND,  
       
   MSG_ID_GMMREG_SET_RAT_MODE_CNF,  
   MSG_ID_GMMREG_PLMN_SEARCH_CNF,  
   MSG_ID_GMMREG_PLMN_LIST_CNF,  
   MSG_ID_GMMREG_PLMN_LIST_STOP_CNF,  
   MSG_ID_GMMREG_BAND_SEL_CNF,

   MSG_ID_MMIAS_CELL_POWER_LEVEL_IND,
   MSG_ID_MMIAS_PKT_TRANSFER_MODE_IND,  
   MSG_ID_RAC_CODE_END = MSG_ID_MMIAS_PKT_TRANSFER_MODE_IND,

	 
	 
	 
	 
	MSG_ID_L4CPHB_STARTUP_REQ = MSG_ID_PHB_CODE_BEGIN,
	MSG_ID_L4CPHB_INIT_LN_REQ,
	MSG_ID_L4CPHB_READ_REQ,
	MSG_ID_L4CPHB_ADD_REQ,
	MSG_ID_L4CPHB_UPDATE_REQ,
	MSG_ID_L4CPHB_DELETE_REQ,
	MSG_ID_L4CPHB_SEARCH_REQ,
	MSG_ID_L4CPHB_APPROVE_REQ,
	MSG_ID_L4CPHB_READ_LN_REQ,
	MSG_ID_L4CPHB_WRITE_LN_REQ,
	MSG_ID_L4CPHB_DELETE_LN_REQ,
	MSG_ID_L4CPHB_SYNC_REQ,
	MSG_ID_L4CPHB_STARTUP_READ_NEXT_REQ,
	MSG_ID_L4CPHB_WRITE_REQ,
	
	MSG_ID_L4CPHB_STARTUP_READ_NEXT_USIM_FIELD_REQ,
	MSG_ID_L4CPHB_READ_EMAIL_REQ,
	MSG_ID_L4CPHB_SET_GRP_REQ,	
        MSG_ID_L4CPHB_WRITE_USIM_REQ,

	MSG_ID_PHB_CODE_END = MSG_ID_L4CPHB_WRITE_USIM_REQ,
	 
	 
	 

    


#line 347 "adaptation\include\stack_msgs.h"
   MSG_ID_L4_CODE_CHECK_POINT,

   #line 1 "interface\mmi\mmi_sap.h"
 

































  









  




















































































































































































































































    
 
 

	MSG_ID_MMI_CC_RESET_ACM_REQ = MSG_ID_L4A_CODE_BEGIN ,
	MSG_ID_MMI_CC_RESET_ACM_RSP,
	MSG_ID_MMI_CC_GET_ACM_REQ,
	MSG_ID_MMI_CC_GET_ACM_RSP,
	MSG_ID_MMI_CC_SET_MAX_ACM_REQ,
	MSG_ID_MMI_CC_SET_MAX_ACM_RSP,
	MSG_ID_MMI_CC_GET_MAX_ACM_REQ,
	MSG_ID_MMI_CC_GET_MAX_ACM_RSP,
	MSG_ID_MMI_CC_GET_CCM_REQ,
	MSG_ID_MMI_CC_GET_CCM_RSP,
	MSG_ID_MMI_CC_SET_CUG_REQ,
	MSG_ID_MMI_CC_SET_CUG_RSP,
	MSG_ID_MMI_CC_GET_CUG_REQ,
	MSG_ID_MMI_CC_GET_CUG_RSP,
	MSG_ID_MMI_CC_CHLD_REQ,
	MSG_ID_MMI_CC_CHLD_RSP,
	MSG_ID_MMI_CC_HANGUP_REQ,
	MSG_ID_MMI_CC_HANGUP_RSP,
	MSG_ID_MMI_CC_ATH_REQ,
	MSG_ID_MMI_CC_ATH_RSP,
	MSG_ID_MMI_CC_GET_CALL_LIST_REQ,
	MSG_ID_MMI_CC_GET_CALL_LIST_RSP,
	MSG_ID_MMI_CC_CALL_DEFLECT_REQ,
	MSG_ID_MMI_CC_CALL_DEFLECT_RSP,
	MSG_ID_MMI_CC_START_DTMF_REQ,
	MSG_ID_MMI_CC_START_DTMF_RSP,
	MSG_ID_MMI_CC_STOP_DTMF_REQ,
	MSG_ID_MMI_CC_STOP_DTMF_RSP,
	MSG_ID_MMI_CC_START_AUTO_DTMF_REQ,
	MSG_ID_MMI_CC_START_AUTO_DTMF_RSP,
	MSG_ID_MMI_CC_START_AUTO_DTMF_IND,
	MSG_ID_MMI_CC_START_AUTO_DTMF_FINISH_IND,
	MSG_ID_MMI_CC_ATA_REQ,
	MSG_ID_MMI_CC_ATA_RSP,
	MSG_ID_MMI_CC_DISCONNECT_AUX_REQ,
	MSG_ID_MMI_CC_DISCONNECT_AUX_RSP,
	MSG_ID_MMI_CC_SET_LINE_REQ,
	MSG_ID_MMI_CC_SET_LINE_RSP,
	MSG_ID_MMI_CC_DIAL_REQ,
	MSG_ID_MMI_CC_DIAL_RSP,
	MSG_ID_MMI_CC_DIAL_REQ_IND,
	MSG_ID_MMI_CC_DIAL_IND,
	MSG_ID_MMI_CC_CALL_MODIFY_REQ,
	MSG_ID_MMI_CC_CALL_MODIFY_RSP,
	MSG_ID_MMI_CC_SET_SINGLE_NUM_REQ,
	MSG_ID_MMI_CC_SET_SINGLE_NUM_RSP,
	MSG_ID_MMI_CC_GET_SINGLE_NUM_REQ,
	MSG_ID_MMI_CC_GET_SINGLE_NUM_RSP,
	MSG_ID_MMI_CC_CCM_IND,
	MSG_ID_MMI_CC_INTERNAL_ALERT_IND,
	MSG_ID_MMI_CC_CALL_WAIT_IND,
	MSG_ID_MMI_CC_CALL_RING_IND,
	MSG_ID_MMI_CC_CALL_CONNECT_IND,
	MSG_ID_MMI_CC_CALL_DISCONNECT_IND,
	MSG_ID_MMI_CC_CALL_RELEASE_IND,
	MSG_ID_MMI_CC_SPEECH_IND,
	MSG_ID_MMI_CC_NAME_IND,
	MSG_ID_MMI_CC_NOTIFY_SS_IND,
	MSG_ID_MMI_CC_NOTIFY_SS_CUG_IND,
	MSG_ID_MMI_CC_NOTIFY_SS_ECT_IND,
	MSG_ID_MMI_CC_NOTIFY_SS_CNAP_IND,
	MSG_ID_MMI_CC_NOTIFY_SS_CCBS_IND,
	MSG_ID_MMI_CC_CALL_ACCEPT_REQ_IND,
	MSG_ID_MMI_CC_CALL_ABORT_REQ_IND,
	MSG_ID_MMI_CC_CALL_SYNC_REQ_IND,
	MSG_ID_MMI_CC_VIDEO_CALL_STATUS_IND,
	MSG_ID_MMI_CC_REL_COMP_REQ,
	MSG_ID_MMI_CC_REL_COMP_RSP,

	MSG_ID_MMI_CC_SET_BEARER_SERVICE_REQ,
	MSG_ID_MMI_CC_SET_BEARER_SERVICE_RSP,
	MSG_ID_MMI_CC_GET_BEARER_SERVICE_REQ,
	MSG_ID_MMI_CC_GET_BEARER_SERVICE_RSP,
	MSG_ID_MMI_CC_SET_CSD_PROFILE_REQ,
	MSG_ID_MMI_CC_SET_CSD_PROFILE_RSP,
	MSG_ID_MMI_CC_GET_CSD_PROFILE_REQ,
	MSG_ID_MMI_CC_GET_CSD_PROFILE_RSP,
	MSG_ID_MMI_CC_GET_FREE_CSD_PROFILE_NUM_REQ,
	MSG_ID_MMI_CC_GET_FREE_CSD_PROFILE_NUM_RSP,
	MSG_ID_MMI_SS_GET_EMLPP_PRIORITY_REQ,
	MSG_ID_MMI_SS_GET_EMLPP_PRIORITY_RSP,
	MSG_ID_MMI_SS_EMLPP_REQ,
	MSG_ID_MMI_SS_EMLPP_RSP,
	MSG_ID_MMI_SS_CALL_FORWARD_REQ,
	MSG_ID_MMI_SS_CALL_FORWARD_RSP,
	MSG_ID_MMI_SS_CALL_WAIT_REQ,
	MSG_ID_MMI_SS_CALL_WAIT_RSP,
	MSG_ID_MMI_SS_INTERROGATE_REQ,
	MSG_ID_MMI_SS_INTERROGATE_RSP,
	MSG_ID_MMI_SS_CDIP_INTERROGATE_IND,
	MSG_ID_MMI_SS_CLIP_INTERROGATE_IND,
	MSG_ID_MMI_SS_CLIR_INTERROGATE_IND,
	MSG_ID_MMI_SS_CNAP_INTERROGATE_IND,
	MSG_ID_MMI_SS_COLP_INTERROGATE_IND,
	MSG_ID_MMI_SS_COLR_INTERROGATE_IND,
	MSG_ID_MMI_SS_CALL_BARRING_REQ,
	MSG_ID_MMI_SS_CALL_BARRING_RSP,
	MSG_ID_MMI_SS_USSD_REQ,
	MSG_ID_MMI_SS_USSD_RSP,
	MSG_ID_MMI_SS_USSR_IND,
	MSG_ID_MMI_SS_USSN_IND,
	MSG_ID_MMI_SS_CHANGE_PASSWORD_REQ,
	MSG_ID_MMI_SS_CHANGE_PASSWORD_RSP,
	MSG_ID_MMI_SS_PARSING_STRING_REQ,
	MSG_ID_MMI_SS_PARSING_STRING_RSP,
	MSG_ID_MMI_SS_CB_PASSWORD_IND,
	MSG_ID_MMI_SMS_CB_GS_CHANGE_IND,
	MSG_ID_MMI_SS_CCBS_REQ,
	MSG_ID_MMI_SS_CCBS_RSP,
	MSG_ID_MMI_SS_ABORT_REQ,
	MSG_ID_MMI_SS_ABORT_RSP,
	MSG_ID_MMI_SS_SET_CLIR_FLAG_REQ,
	MSG_ID_MMI_SS_SET_CLIR_FLAG_RSP,
 

	MSG_ID_MMI_EQ_SET_VOLUME_REQ,
	MSG_ID_MMI_EQ_SET_VOLUME_RSP,
	MSG_ID_MMI_EQ_EXE_VOLUME_REQ_IND,
	MSG_ID_MMI_EQ_VOLUME_CHANGE_IND,
	MSG_ID_MMI_EQ_SET_MUTE_REQ,
	MSG_ID_MMI_EQ_SET_MUTE_RSP,
	MSG_ID_MMI_EQ_EXE_MUTE_REQ_IND,
	MSG_ID_MMI_EQ_MUTE_CHANGE_IND,
	MSG_ID_MMI_EQ_SET_SILENT_MODE_REQ,
	MSG_ID_MMI_EQ_SET_SILENT_MODE_RSP,
	MSG_ID_MMI_EQ_SET_SILENT_MODE_REQ_IND,
	MSG_ID_MMI_EQ_SET_GPIO_LEVEL_REQ,
	MSG_ID_MMI_EQ_SET_GPIO_LEVEL_RSP,
	MSG_ID_MMI_EQ_SET_GPIO_LEVEL_REQ_IND,
	MSG_ID_MMI_EQ_GET_GPIO_LEVEL_REQ,
	MSG_ID_MMI_EQ_GET_GPIO_LEVEL_RSP,
	MSG_ID_MMI_EQ_EXE_GPIO_LEVEL_REQ,
	MSG_ID_MMI_EQ_EXE_GPIO_LEVEL_RSP,
	MSG_ID_MMI_EQ_EXE_GPIO_LEVEL_REQ_IND,
	MSG_ID_MMI_EQ_PLAY_AUDIO_REQ,
	MSG_ID_MMI_EQ_PLAY_AUDIO_RSP,
	MSG_ID_MMI_EQ_PLAY_AUDIO_FINISH_IND,
	MSG_ID_MMI_EQ_STOP_AUDIO_REQ,
	MSG_ID_MMI_EQ_STOP_AUDIO_RSP,
	MSG_ID_MMI_EQ_PLAY_AUDIO_STREAM_REQ,
	MSG_ID_MMI_EQ_PLAY_AUDIO_STREAM_RSP,
	MSG_ID_MMI_EQ_STOP_AUDIO_STREAM_REQ,
	MSG_ID_MMI_EQ_STOP_AUDIO_STREAM_RSP,
	MSG_ID_MMI_EQ_PLAY_EXT_IMELODY_REQ,
	MSG_ID_MMI_EQ_PLAY_EXT_IMELODY_RSP,
	MSG_ID_MMI_EQ_GPIO_DETECT_IND,
	MSG_ID_MMI_EQ_GPIO_DETECT_RES_REQ,
	MSG_ID_MMI_EQ_GPIO_DETECT_RES_RSP,
	MSG_ID_MMI_EQ_SET_SPEECH_MODE_REQ,
	MSG_ID_MMI_EQ_SET_SPEECH_MODE_RSP,
	MSG_ID_MMI_EQ_PLAY_AUDIO_BY_NAME_REQ,
	MSG_ID_MMI_EQ_PLAY_AUDIO_BY_NAME_RSP,
	MSG_ID_MMI_EQ_STOP_AUDIO_BY_NAME_REQ,
	MSG_ID_MMI_EQ_STOP_AUDIO_BY_NAME_RSP,
	MSG_ID_MMI_EQ_SET_AUDIO_PROFILE_REQ,
	MSG_ID_MMI_EQ_SET_AUDIO_PROFILE_RSP,
	MSG_ID_MMI_EQ_GET_AUDIO_PROFILE_REQ,
	MSG_ID_MMI_EQ_GET_AUDIO_PROFILE_RSP,
	MSG_ID_MMI_EQ_SET_AUDIO_PARAM_REQ,
	MSG_ID_MMI_EQ_SET_AUDIO_PARAM_RSP,
	MSG_ID_MMI_EQ_GET_AUDIO_PARAM_REQ,
	MSG_ID_MMI_EQ_GET_AUDIO_PARAM_RSP,
	MSG_ID_MMI_EQ_START_ADC_ALL_CHANNEL_REQ,
	MSG_ID_MMI_EQ_START_ADC_ALL_CHANNEL_RSP,
	MSG_ID_MMI_EQ_STOP_ADC_ALL_CHANNEL_REQ,
	MSG_ID_MMI_EQ_STOP_ADC_ALL_CHANNEL_RSP,
	MSG_ID_MMI_EQ_ADC_ALL_CHANNEL_IND,
	MSG_ID_MMI_EQ_SET_AUDIO_MODE_REQ,
	MSG_ID_MMI_EQ_SET_AUDIO_MODE_RSP,
	MSG_ID_MMI_EQ_PLAY_PATTERN_REQ,
	MSG_ID_MMI_EQ_PLAY_PATTERN_RSP,
	MSG_ID_MMI_EQ_SET_HW_LEVEL_REQ,
	MSG_ID_MMI_EQ_SET_HW_LEVEL_RSP,
	MSG_ID_MMI_EQ_GET_HW_LEVEL_REQ,
	MSG_ID_MMI_EQ_GET_HW_LEVEL_RSP,
	MSG_ID_MMI_EQ_SET_SLEEP_MODE_REQ,
	MSG_ID_MMI_EQ_SET_SLEEP_MODE_RSP,
	MSG_ID_MMI_EQ_SET_SLEEP_MODE_REQ_IND,
	MSG_ID_MMI_EQ_GET_MS_IMEI_REQ,
	MSG_ID_MMI_EQ_GET_MS_IMEI_RSP,
	MSG_ID_MMI_EQ_SET_MS_IMEI_REQ,
	MSG_ID_MMI_EQ_SET_MS_IMEI_RSP,
	MSG_ID_MMI_EQ_RTC_POWERON_STATE_REQ,
	MSG_ID_MMI_EQ_RTC_POWERON_STATE_RSP,

 

	MSG_ID_MMI_EQ_SET_RTC_TIME_REQ,
	MSG_ID_MMI_EQ_SET_RTC_TIME_RSP,
	MSG_ID_MMI_EQ_SET_RTC_TIME_REQ_IND,
	MSG_ID_MMI_EQ_EXE_RTC_TIMER_REQ,
	MSG_ID_MMI_EQ_EXE_RTC_TIMER_RSP,
	MSG_ID_MMI_EQ_GET_RTC_TIME_REQ,
	MSG_ID_MMI_EQ_GET_RTC_TIME_RSP,
	MSG_ID_MMI_EQ_DEL_RTC_TIMER_REQ,
	MSG_ID_MMI_EQ_DEL_RTC_TIMER_RSP,
	MSG_ID_MMI_EQ_DEL_RTC_TIMER_REQ_IND,
	MSG_ID_MMI_EQ_EXE_DEL_RTC_TIMER_REQ,
	MSG_ID_MMI_EQ_EXE_DEL_RTC_TIMER_RSP,
	MSG_ID_MMI_EQ_EXE_DEL_RTC_TIMER_REQ_IND,
	MSG_ID_MMI_EQ_SET_DATE_TIME_FORMAT_REQ,
	MSG_ID_MMI_EQ_SET_DATE_TIME_FORMAT_RSP,
	MSG_ID_MMI_EQ_SET_DATE_TIME_FORMAT_REQ_IND,
	MSG_ID_MMI_EQ_START_TIMER_REQ,
	MSG_ID_MMI_EQ_START_TIMER_RSP,
	MSG_ID_MMI_EQ_STOP_TIMER_REQ,
	MSG_ID_MMI_EQ_STOP_TIMER_RSP,
	MSG_ID_MMI_EQ_CLOCK_TICK_IND,
	MSG_ID_MMI_EQ_ALARM_IND,
	MSG_ID_MMI_AT_ALARM_QUERY_REQ_IND,
	MSG_ID_MMI_AT_ALARM_QUERY_RES_REQ,
	MSG_ID_MMI_AT_ALARM_QUERY_RES_RSP,
	MSG_ID_MMI_AT_ALARM_SET_REQ_IND,
	MSG_ID_MMI_AT_ALARM_SET_RES_REQ,
	MSG_ID_MMI_AT_ALARM_SET_RES_RSP,
	MSG_ID_MMI_AT_ALARM_DELETE_REQ_IND,
	MSG_ID_MMI_AT_ALARM_DELETE_RES_REQ,
	MSG_ID_MMI_AT_ALARM_DELETE_RES_RSP,

 

	MSG_ID_MMI_EQ_SIMULATE_KEY_PRESS_REQ,
	MSG_ID_MMI_EQ_SIMULATE_KEY_PRESS_RSP,
	MSG_ID_MMI_EQ_SIMULATE_KEY_PRESS_REQ_IND,
	MSG_ID_MMI_EQ_SET_INDICATOR_REQ,
	MSG_ID_MMI_EQ_SET_INDICATOR_RSP,
	MSG_ID_MMI_EQ_SET_INDICATOR_REQ_IND,
	MSG_ID_MMI_EQ_GET_INDICATOR_REQ,
	MSG_ID_MMI_EQ_GET_INDICATOR_RSP,
	MSG_ID_MMI_EQ_DISPLAY_TEXT_REQ,
	MSG_ID_MMI_EQ_DISPLAY_TEXT_RSP,
	MSG_ID_MMI_EQ_DISPLAY_TEXT_REQ_IND,
	MSG_ID_MMI_EQ_KEYPAD_DETECT_IND,

 

	MSG_ID_MMI_EQ_SET_LANGUAGE_REQ,
	MSG_ID_MMI_EQ_SET_LANGUAGE_RSP,
	MSG_ID_MMI_EQ_SET_LANGUAGE_REQ_IND,
	MSG_ID_MMI_EQ_SET_GREETING_TEXT_REQ,
	MSG_ID_MMI_EQ_SET_GREETING_TEXT_RSP,
	MSG_ID_MMI_EQ_SET_GREETING_TEXT_REQ_IND,
	MSG_ID_MMI_EQ_SET_VIBRATOR_MODE_REQ_IND,
	MSG_ID_MMI_EQ_SET_VIBRATOR_MODE_REQ,
	MSG_ID_MMI_EQ_SET_VIBRATOR_MODE_RSP,
	MSG_ID_MMI_EQ_SET_COUNTRY_CODE_REQ,
	MSG_ID_MMI_EQ_SET_COUNTRY_CODE_RSP,
	MSG_ID_MMI_EQ_GET_COUNTRY_CODE_REQ,
	MSG_ID_MMI_EQ_GET_COUNTRY_CODE_RSP,
	MSG_ID_MMI_EQ_GET_BATTERY_STATUS_REQ,
	MSG_ID_MMI_EQ_GET_BATTERY_STATUS_RSP,
	MSG_ID_MMI_EQ_GET_EQUIP_ID_REQ,
	MSG_ID_MMI_EQ_GET_EQUIP_ID_RSP,
	MSG_ID_MMI_EQ_LOAD_DEFAULT_CONFIG_REQ,
	MSG_ID_MMI_EQ_LOAD_DEFAULT_CONFIG_RSP,
	MSG_ID_MMI_EQ_POWER_ON_REQ,
	MSG_ID_MMI_EQ_POWER_ON_RSP,
	MSG_ID_MMI_EQ_POWER_OFF_REQ,
	MSG_ID_MMI_EQ_POWER_OFF_RSP,
	MSG_ID_MMI_EQ_POWER_ON_IND,
	MSG_ID_MMI_EQ_BATTERY_STATUS_IND,
	MSG_ID_MMI_EQ_LEAVE_PRECHARGE_IND,
	MSG_ID_MMI_EQ_PMIC_CONFIG_REQ,
	MSG_ID_MMI_EQ_PMIC_CONFIG_RSP,
	MSG_ID_MMI_EQ_BATTERY_STATUS_RES_REQ,
	MSG_ID_MMI_EQ_BATTERY_STATUS_RES_RSP,
	MSG_ID_MMI_EQ_RF_TEST_GSM_REQ,
	MSG_ID_MMI_EQ_RF_TEST_GSM_RSP,
	MSG_ID_MMI_EQ_FM_RADIO_CONFIG_REQ,
	MSG_ID_MMI_EQ_FM_RADIO_CONFIG_RSP,
	MSG_ID_MMI_EQ_RF_TEST_WIFI_REQ,
	MSG_ID_MMI_EQ_RF_TEST_WIFI_RSP,
	MSG_ID_MMI_EQ_CALL_STATUS_REQ,
	MSG_ID_MMI_EQ_CALL_STATUS_RSP,

 

	MSG_ID_MMI_EQ_NVRAM_READ_REQ,
	MSG_ID_MMI_EQ_NVRAM_READ_RSP,
	MSG_ID_MMI_EQ_NVRAM_WRITE_REQ,
	MSG_ID_MMI_EQ_NVRAM_WRITE_RSP,
	MSG_ID_MMI_EQ_NVRAM_RESET_REQ,
	MSG_ID_MMI_EQ_NVRAM_RESET_RSP,
	MSG_ID_MMI_EQ_SET_UART_REQ,
	MSG_ID_MMI_EQ_SET_UART_RSP,
	MSG_ID_MMI_EQ_GET_UART_REQ,
	MSG_ID_MMI_EQ_GET_UART_RSP,
	MSG_ID_MMI_ATTACH_UART_PORT_REQ,
	MSG_ID_MMI_ATTACH_UART_PORT_RSP,
	MSG_ID_MMI_DETACH_UART_PORT_REQ,
	MSG_ID_MMI_DETACH_UART_PORT_RSP,
	MSG_ID_MMI_EQ_NVRAM_READY_IND,
	MSG_ID_MMI_EQ_DCM_ENABLE_REQ,
	MSG_ID_MMI_EQ_DCM_ENABLE_RSP,

 

	MSG_ID_MMI_NW_GET_IMEI_REQ,
	MSG_ID_MMI_NW_GET_IMEI_RSP,
	MSG_ID_MMI_NW_ABORT_PLMN_LIST_REQ,
	MSG_ID_MMI_NW_ABORT_PLMN_LIST_RSP,
	MSG_ID_MMI_NW_SET_ATTACH_REQ,
	MSG_ID_MMI_NW_SET_ATTACH_RSP,
	MSG_ID_MMI_NW_GET_ATTACH_REQ,
	MSG_ID_MMI_NW_GET_ATTACH_RSP,
	MSG_ID_MMI_NW_SET_MOBILE_CLASS_REQ,
	MSG_ID_MMI_NW_SET_MOBILE_CLASS_RSP,
	MSG_ID_MMI_NW_GET_MOBILE_CLASS_REQ,
	MSG_ID_MMI_NW_GET_MOBILE_CLASS_RSP,
	MSG_ID_MMI_NW_SET_PLMN_SELECT_MODE_REQ,
	MSG_ID_MMI_NW_SET_PLMN_SELECT_MODE_RSP,
	MSG_ID_MMI_NW_GET_PLMN_SELECT_MODE_REQ,
	MSG_ID_MMI_NW_GET_PLMN_SELECT_MODE_RSP,
	MSG_ID_MMI_NW_SET_PLMN_REQ,
	MSG_ID_MMI_NW_SET_PLMN_RSP,
	MSG_ID_MMI_NW_GET_PLMN_LIST_REQ,
	MSG_ID_MMI_NW_GET_PLMN_LIST_RSP,
	MSG_ID_MMI_NW_GET_CURRENT_PLMN_REQ,
	MSG_ID_MMI_NW_GET_CURRENT_PLMN_RSP,
	MSG_ID_MMI_NW_GET_SIGNAL_LEVEL_REQ,
	MSG_ID_MMI_NW_GET_SIGNAL_LEVEL_RSP,
	MSG_ID_MMI_NW_GET_BAND_REQ,
	MSG_ID_MMI_NW_GET_BAND_RSP,
	MSG_ID_MMI_NW_ATTACH_IND,
	MSG_ID_MMI_NW_REG_STATE_IND,
	MSG_ID_MMI_NW_RX_LEVEL_IND,
	MSG_ID_MMI_NW_TIME_ZONE_IND,
	MSG_ID_MMI_NW_SEL_MODE_IND,
	MSG_ID_MMI_NW_MMRR_SERVICE_STATUS_IND,
	MSG_ID_MMI_NW_SET_PREFERRED_BAND_REQ,
	MSG_ID_MMI_NW_SET_PREFERRED_BAND_RSP,
	MSG_ID_MMI_NW_SET_GPRS_CONNECT_TYPE_REQ,
	MSG_ID_MMI_NW_SET_GPRS_CONNECT_TYPE_RSP,
	MSG_ID_MMI_NW_GET_GPRS_CONNECT_TYPE_REQ,
	MSG_ID_MMI_NW_GET_GPRS_CONNECT_TYPE_RSP,
	MSG_ID_MMI_NW_PWROFF_DETACH_REQ,
	MSG_ID_MMI_NW_PWROFF_DETACH_RSP,
	MSG_ID_MMI_NW_CFUN_STATE_REQ,
	MSG_ID_MMI_NW_CFUN_STATE_RSP,
	MSG_ID_MMI_NW_GET_RAT_MODE_REQ,
	MSG_ID_MMI_NW_GET_RAT_MODE_RSP,
	MSG_ID_MMI_NW_SET_RAT_MODE_REQ,
	MSG_ID_MMI_NW_SET_RAT_MODE_RSP,
	MSG_ID_MMI_NW_GET_PREFER_RAT_REQ,
	MSG_ID_MMI_NW_GET_PREFER_RAT_RSP,
	MSG_ID_MMI_NW_SET_PREFER_RAT_REQ,
	MSG_ID_MMI_NW_SET_PREFER_RAT_RSP,

 

	MSG_ID_MMI_SMU_GET_IMSI_REQ,
	MSG_ID_MMI_SMU_GET_IMSI_RSP,
	MSG_ID_MMI_SMU_LOCK_REQ,
	MSG_ID_MMI_SMU_LOCK_RSP,
	MSG_ID_MMI_SMU_RESET_DATA_REQ,
	MSG_ID_MMI_SMU_RESET_DATA_RSP,
	MSG_ID_MMI_SMU_GET_DIAL_MODE_REQ,
	MSG_ID_MMI_SMU_GET_DIAL_MODE_RSP,
	MSG_ID_MMI_SMU_VERIFY_PIN_REQ,
	MSG_ID_MMI_SMU_VERIFY_PIN_RSP,
	MSG_ID_MMI_SMU_GET_PIN_TYPE_REQ,
	MSG_ID_MMI_SMU_GET_PIN_TYPE_RSP,
	MSG_ID_MMI_SMU_SET_PREFERRED_OPER_LIST_REQ,
	MSG_ID_MMI_SMU_SET_PREFERRED_OPER_LIST_RSP,
	MSG_ID_MMI_SMU_GET_PREFERRED_OPER_LIST_REQ,
	MSG_ID_MMI_SMU_GET_PREFERRED_OPER_LIST_RSP,
	MSG_ID_MMI_SMU_SET_PUC_REQ,
	MSG_ID_MMI_SMU_SET_PUC_RSP,
	MSG_ID_MMI_SMU_GET_PUC_REQ,
	MSG_ID_MMI_SMU_GET_PUC_RSP,
	MSG_ID_MMI_SMU_CHANGE_PASSWORD_REQ,
	MSG_ID_MMI_SMU_CHANGE_PASSWORD_RSP,
	MSG_ID_MMI_SMU_RESTRICTED_ACCESS_REQ,
	MSG_ID_MMI_SMU_RESTRICTED_ACCESS_RSP,
	MSG_ID_MMI_SMU_SET_DIAL_MODE_REQ,
	MSG_ID_MMI_SMU_SET_DIAL_MODE_RSP,
	MSG_ID_MMI_SMU_WRITE_SIM_REQ,
	MSG_ID_MMI_SMU_WRITE_SIM_RSP,
	MSG_ID_MMI_SMU_READ_SIM_REQ,
	MSG_ID_MMI_SMU_READ_SIM_RSP,
	MSG_ID_MMI_SMU_POWER_OFF_REQ,
	MSG_ID_MMI_SMU_POWER_OFF_RSP,
	MSG_ID_MMI_SMU_REMOVE_REQ,
	MSG_ID_MMI_SMU_REMOVE_RSP,
	MSG_ID_MMI_SMU_PASSWORD_REQUIRED_IND,
	MSG_ID_MMI_SMU_SUPPORT_PLMN_LIST_IND,
	MSG_ID_MMI_SMU_FAIL_IND,
	MSG_ID_MMI_SMU_READ_FILE_INFO_REQ,
	MSG_ID_MMI_SMU_READ_FILE_INFO_RSP,
	MSG_ID_MMI_SMU_CHECK_PIN_STATUS_REQ,
	MSG_ID_MMI_SMU_CHECK_PIN_STATUS_RSP,
	MSG_ID_MMI_SMU_STARTUP_INFO_IND,
	MSG_ID_MMI_SMU_CIPHER_IND,
	MSG_ID_MMI_SMU_SET_PERSONALIZATION_REQ,
	MSG_ID_MMI_SMU_SET_PERSONALIZATION_RSP,
	MSG_ID_MMI_SMU_SML_STATUS_REQ,
	MSG_ID_MMI_SMU_SML_STATUS_RSP,
	MSG_ID_MMI_SMU_VERIFY_PIN_RESULT_IND,

 

	MSG_ID_MMI_PHB_GET_ENTRY_BY_NAME_REQ,
	MSG_ID_MMI_PHB_GET_ENTRY_BY_NAME_RSP,
	MSG_ID_MMI_PHB_GET_ENTRY_BY_INDEX_REQ,
	MSG_ID_MMI_PHB_GET_ENTRY_BY_INDEX_RSP,
	MSG_ID_MMI_PHB_SET_PREFERRED_STORAGE_REQ,
	MSG_ID_MMI_PHB_SET_PREFERRED_STORAGE_RSP,
	MSG_ID_MMI_PHB_GET_PREFERRED_STORAGE_REQ,
	MSG_ID_MMI_PHB_GET_PREFERRED_STORAGE_RSP,
	MSG_ID_MMI_PHB_SET_ENTRY_REQ,
	MSG_ID_MMI_PHB_SET_ENTRY_RSP,
	MSG_ID_MMI_PHB_DEL_ENTRY_REQ,
	MSG_ID_MMI_PHB_DEL_ENTRY_RSP,
	MSG_ID_MMI_PHB_SET_VOICE_MAIL_SERVER_REQ,
	MSG_ID_MMI_PHB_SET_VOICE_MAIL_SERVER_RSP,
	MSG_ID_MMI_PHB_GET_ALPHA_LIST_REQ,
	MSG_ID_MMI_PHB_GET_ALPHA_LIST_RSP,
	MSG_ID_MMI_PHB_GET_TYPE_STATUS_REQ,
	MSG_ID_MMI_PHB_GET_TYPE_STATUS_RSP,
	MSG_ID_MMI_PHB_GET_LAST_NUMBER_REQ,
	MSG_ID_MMI_PHB_GET_LAST_NUMBER_RSP,
	MSG_ID_MMI_PHB_SET_LAST_NUMBER_REQ,
	MSG_ID_MMI_PHB_SET_LAST_NUMBER_RSP,
	MSG_ID_MMI_PHB_DEL_LAST_NUMBER_REQ,
	MSG_ID_MMI_PHB_DEL_LAST_NUMBER_RSP,
	MSG_ID_MMI_PHB_LAST_NUMBER_READY_IND,
	MSG_ID_MMI_PHB_STARTUP_FINISH_IND,
	MSG_ID_MMI_PHB_MEM_FULL_IND,
	MSG_ID_MMI_PHB_UPDATE_IND,
	MSG_ID_MMI_PHB_STARTUP_READ_IND,
	MSG_ID_MMI_PHB_STARTUP_BEGIN_IND,
	MSG_ID_MMI_PHB_STARTUP_READ_NEXT_REQ,
	MSG_ID_MMI_PHB_STARTUP_READ_NEXT_RSP,
	MSG_ID_MMI_PHB_STARTUP_PHASE1_IND,
	MSG_ID_MMI_PHB_STARTUP_READ_NEXT_USIM_FIELD_REQ,
	MSG_ID_MMI_PHB_STARTUP_READ_ANR_IND,
	MSG_ID_MMI_PHB_STARTUP_READ_EMAIL_IND,
	MSG_ID_MMI_PHB_READ_EMAIL_REQ,
	MSG_ID_MMI_PHB_READ_EMAIL_RSP,
	MSG_ID_MMI_PHB_STARTUP_READ_GAS_IND,
	MSG_ID_MMI_PHB_STARTUP_READ_GRP_IND,
	MSG_ID_MMI_PHB_SET_GRP_REQ,
	MSG_ID_MMI_PHB_SET_GRP_RSP,
	MSG_ID_MMI_PHB_WRITE_USIM_REQ,
	MSG_ID_MMI_PHB_WRITE_USIM_RSP,

	MSG_ID_MMI_SMS_SET_PROFILE_PARAMS_REQ,
	MSG_ID_MMI_SMS_SET_PROFILE_PARAMS_RSP,
	MSG_ID_MMI_SMS_GET_PROFILE_PARAMS_REQ,
	MSG_ID_MMI_SMS_GET_PROFILE_PARAMS_RSP,
	MSG_ID_MMI_SMS_SET_COMMON_PARAMS_REQ,
	MSG_ID_MMI_SMS_SET_COMMON_PARAMS_RSP,
	MSG_ID_MMI_SMS_GET_COMMON_PARAMS_REQ,
	MSG_ID_MMI_SMS_GET_COMMON_PARAMS_RSP,
	MSG_ID_MMI_SMS_SEND_COMMAND_REQ,
	MSG_ID_MMI_SMS_SEND_COMMAND_RSP,
	MSG_ID_MMI_SMS_DEL_MSG_REQ,
	MSG_ID_MMI_SMS_DEL_MSG_RSP,
	MSG_ID_MMI_SMS_GET_MSG_REQ,
	MSG_ID_MMI_SMS_GET_MSG_RSP,
	MSG_ID_MMI_SMS_SEND_MSG_REQ,
	MSG_ID_MMI_SMS_SEND_MSG_RSP,
	MSG_ID_MMI_SMS_SET_MSG_REQ,
	MSG_ID_MMI_SMS_SET_MSG_RSP,
	MSG_ID_MMI_SMS_SET_PREFERRED_STORAGE_REQ,
	MSG_ID_MMI_SMS_SET_PREFERRED_STORAGE_RSP,
	MSG_ID_MMI_SMS_GET_PREFERRED_STORAGE_REQ,
	MSG_ID_MMI_SMS_GET_PREFERRED_STORAGE_RSP,
	MSG_ID_MMI_SMS_REG_PORT_NUM_REQ,
	MSG_ID_MMI_SMS_REG_PORT_NUM_RSP,
	MSG_ID_MMI_SMS_DELIVER_MSG_IND,
	MSG_ID_MMI_SMS_STATUS_REPORT_IND,
	MSG_ID_MMI_SMS_MEM_AVAILABLE_IND,
	MSG_ID_MMI_SMS_MEM_EXCEED_IND,
	MSG_ID_MMI_SMS_MEM_FULL_IND,
	MSG_ID_MMI_SMS_READY_IND,
	MSG_ID_MMI_SMS_APP_DATA_IND,
	MSG_ID_MMI_SMS_GET_MSG_NUM_REQ,
	MSG_ID_MMI_SMS_GET_MSG_NUM_RSP,
	MSG_ID_MMI_SMS_GET_PROFILE_NUM_REQ,
	MSG_ID_MMI_SMS_GET_PROFILE_NUM_RSP,
	MSG_ID_MMI_SMS_ABORT_REQ,
	MSG_ID_MMI_SMS_ABORT_RSP,
	MSG_ID_MMI_SMS_MSG_WAITING_IND,
	MSG_ID_MMI_SMS_SET_MAILBOX_ADDRESS_REQ,
	MSG_ID_MMI_SMS_SET_MAILBOX_ADDRESS_RSP,
	MSG_ID_MMI_SMS_GET_MAILBOX_ADDRESS_REQ,
	MSG_ID_MMI_SMS_GET_MAILBOX_ADDRESS_RSP,
	MSG_ID_MMI_SMS_SYNC_MSG_IND,
	MSG_ID_MMI_SMS_SYNC_MSG_RES_REQ,
	MSG_ID_MMI_SMS_SYNC_MSG_RES_RSP,
	MSG_ID_MMI_SMS_SEND_ABORT_START_IND,
	MSG_ID_MMI_SMS_SEND_ABORT_FINISH_IND,
	MSG_ID_MMI_SMS_STARTUP_BEGIN_IND,
	MSG_ID_MMI_SMS_STARTUP_FINISH_IND,
	MSG_ID_MMI_SMS_STARTUP_READ_NEXT_REQ,
	MSG_ID_MMI_SMS_STARTUP_READ_NEXT_RSP,
	MSG_ID_MMI_SMS_STARTUP_READ_MSG_IND,
	MSG_ID_MMI_SMS_COPY_MSG_REQ,
	MSG_ID_MMI_SMS_COPY_MSG_RSP,
	MSG_ID_MMI_SMS_GET_MSG_LIST_REQ,
	MSG_ID_MMI_SMS_GET_MSG_LIST_RSP,
	MSG_ID_MMI_SMS_SEND_FROM_STORAGE_REQ,
	MSG_ID_MMI_SMS_SEND_FROM_STORAGE_RSP,
	MSG_ID_MMI_SMS_SET_STATUS_REQ,
	MSG_ID_MMI_SMS_SET_STATUS_RSP,
 






















	MSG_ID_MMI_DF_BACK_DATA_STATE_REQ,
	MSG_ID_MMI_DF_BACK_DATA_STATE_RSP,
 

	MSG_ID_MMI_PS_ACT_REQ,
	MSG_ID_MMI_PS_ACT_RSP,
	MSG_ID_MMI_PS_ACT_TEST_REQ,
	MSG_ID_MMI_PS_ACT_TEST_RSP,
	MSG_ID_MMI_PS_ANSWER_REQ,
	MSG_ID_MMI_PS_ANSWER_RSP,
	MSG_ID_MMI_PS_SET_AUTO_ANSWER_REQ,
	MSG_ID_MMI_PS_SET_AUTO_ANSWER_RSP,
	MSG_ID_MMI_PS_GET_AUTO_ANSWER_REQ,
	MSG_ID_MMI_PS_GET_AUTO_ANSWER_RSP,
	MSG_ID_MMI_PS_MODIFY_REQ,
	MSG_ID_MMI_PS_MODIFY_RSP,
	MSG_ID_MMI_PS_ENTER_DATA_STATE_REQ,
	MSG_ID_MMI_PS_ENTER_DATA_STATE_RSP,
	MSG_ID_MMI_PS_SET_DEFINITION_REQ,
	MSG_ID_MMI_PS_SET_DEFINITION_RSP,
	MSG_ID_MMI_PS_GET_DEFINITION_REQ,
	MSG_ID_MMI_PS_GET_DEFINITION_RSP,
	MSG_ID_MMI_PS_SET_SEC_DEFINITION_REQ,
	MSG_ID_MMI_PS_SET_SEC_DEFINITION_RSP,
	MSG_ID_MMI_PS_GET_SEC_DEFINITION_REQ,
	MSG_ID_MMI_PS_GET_SEC_DEFINITION_RSP,
	MSG_ID_MMI_PS_GET_PDP_ADDR_REQ,
	MSG_ID_MMI_PS_GET_PDP_ADDR_RSP,
	MSG_ID_MMI_PS_SET_TFT_REQ,
	MSG_ID_MMI_PS_SET_TFT_RSP,
	MSG_ID_MMI_PS_GET_TFT_REQ,
	MSG_ID_MMI_PS_GET_TFT_RSP,
	MSG_ID_MMI_PS_SET_QOS_REQ,
	MSG_ID_MMI_PS_SET_QOS_RSP,
	MSG_ID_MMI_PS_SET_EQOS_REQ,
	MSG_ID_MMI_PS_SET_EQOS_RSP,
	MSG_ID_MMI_PS_SEND_DATA_REQ,
	MSG_ID_MMI_PS_SEND_DATA_RSP,
	MSG_ID_MMI_PS_ACTIVE_IND,
	MSG_ID_MMI_PS_GPRS_STATUS_UPDATE_IND,
	MSG_ID_MMI_PS_GET_GPRS_EMPTY_PROFILE_REQ,
	MSG_ID_MMI_PS_GET_GPRS_EMPTY_PROFILE_RSP,
	MSG_ID_MMI_PS_GET_GPRS_DATA_COUNTER_REQ,
	MSG_ID_MMI_PS_GET_GPRS_DATA_COUNTER_RSP,
	MSG_ID_MMI_PS_SET_GPRS_DATA_ACCOUNT_REQ,
	MSG_ID_MMI_PS_SET_GPRS_DATA_ACCOUNT_RSP,
	MSG_ID_MMI_PS_GET_GPRS_DATA_ACCOUNT_REQ,
	MSG_ID_MMI_PS_GET_GPRS_DATA_ACCOUNT_RSP,
	MSG_ID_MMI_PS_RESET_GPRS_DATA_COUNTER_REQ,
	MSG_ID_MMI_PS_RESET_GPRS_DATA_COUNTER_RSP,

 

	MSG_ID_MMI_SAT_DISPLAY_TEXT_IND,
	MSG_ID_MMI_SAT_DISPLAY_TEXT_RES_REQ,
	MSG_ID_MMI_SAT_DISPLAY_TEXT_RES_RSP,
	MSG_ID_MMI_SAT_GET_INKEY_IND,
	MSG_ID_MMI_SAT_GET_INKEY_RES_REQ,
	MSG_ID_MMI_SAT_GET_INKEY_RES_RSP,
	MSG_ID_MMI_SAT_GET_INPUT_IND,
	MSG_ID_MMI_SAT_GET_INPUT_RES_REQ,
	MSG_ID_MMI_SAT_GET_INPUT_RES_RSP,
	MSG_ID_MMI_SAT_SETUP_MENU_IND,
	MSG_ID_MMI_SAT_SETUP_MENU_RES_REQ,
	MSG_ID_MMI_SAT_SETUP_MENU_RES_RSP,
	MSG_ID_MMI_SAT_SELECT_ITEM_IND,
	MSG_ID_MMI_SAT_SELECT_ITEM_RES_REQ,
	MSG_ID_MMI_SAT_SELECT_ITEM_RES_RSP,
	MSG_ID_MMI_SAT_PLAY_TONE_IND,
	MSG_ID_MMI_SAT_PLAY_TONE_RES_REQ,
	MSG_ID_MMI_SAT_PLAY_TONE_RES_RSP,
	MSG_ID_MMI_SAT_MENU_SELECT_REQ,
	MSG_ID_MMI_SAT_MENU_SELECT_RSP,
	MSG_ID_MMI_SAT_EVDL_IDLE_SCREEN_AVAILABLE_REQ,
	MSG_ID_MMI_SAT_EVDL_IDLE_SCREEN_AVAILABLE_RSP,
	MSG_ID_MMI_SAT_LANGUAGE_SELECTION_REQ,
	MSG_ID_MMI_SAT_LANGUAGE_SELECTION_RSP,
	MSG_ID_MMI_SAT_EVDL_BROWSER_TERMINATION_REQ,
	MSG_ID_MMI_SAT_EVDL_BROWSER_TERMINATION_RSP,
	MSG_ID_MMI_SAT_CALL_SETUP_IND,
	MSG_ID_MMI_SAT_CALL_SETUP_STAGE1_REQ,
	MSG_ID_MMI_SAT_CALL_SETUP_STAGE1_RSP,
	MSG_ID_MMI_SAT_CALL_SETUP_STAGE2_REQ,
	MSG_ID_MMI_SAT_CALL_SETUP_STAGE2_RSP,
	MSG_ID_MMI_SAT_SEND_SMS_IND,
	MSG_ID_MMI_SAT_SEND_SMS_STAGE1_REQ,
	MSG_ID_MMI_SAT_SEND_SMS_STAGE1_RSP,
	MSG_ID_MMI_SAT_SEND_SMS_STAGE2_REQ,
	MSG_ID_MMI_SAT_SEND_SMS_STAGE2_RSP,
	MSG_ID_MMI_SAT_SEND_SS_IND,
	MSG_ID_MMI_SAT_SEND_SS_STAGE1_REQ,
	MSG_ID_MMI_SAT_SEND_SS_STAGE1_RSP,
	MSG_ID_MMI_SAT_SEND_SS_STAGE2_REQ,
	MSG_ID_MMI_SAT_SEND_SS_STAGE2_RSP,
	MSG_ID_MMI_SAT_SEND_USSD_IND,
	MSG_ID_MMI_SAT_SEND_USSD_STAGE1_REQ,
	MSG_ID_MMI_SAT_SEND_USSD_STAGE1_RSP,
	MSG_ID_MMI_SAT_SEND_USSD_STAGE2_REQ,
	MSG_ID_MMI_SAT_SEND_USSD_STAGE2_RSP,
	MSG_ID_MMI_SAT_MMI_INFO_IND,
	MSG_ID_MMI_SAT_SETUP_IDLE_DISPLAY_RES_REQ,
	MSG_ID_MMI_SAT_SETUP_IDLE_DISPLAY_RES_RSP,
	MSG_ID_MMI_SAT_SETUP_IDLE_DISPLAY_IND,
	MSG_ID_MMI_SAT_RUN_AT_COMMAND_IND,
	MSG_ID_MMI_SAT_SEND_DTMF_IND,
	MSG_ID_MMI_SAT_SEND_DTMF_STAGE1_REQ,
	MSG_ID_MMI_SAT_SEND_DTMF_STAGE1_RSP,
	MSG_ID_MMI_SAT_SEND_DTMF_STAGE2_REQ,
	MSG_ID_MMI_SAT_SEND_DTMF_STAGE2_RSP,
	MSG_ID_MMI_SAT_ABORT_DTMF_REQ,
	MSG_ID_MMI_SAT_ABORT_DTMF_RSP,
	MSG_ID_MMI_SAT_LANG_NOTIFY_RES_REQ,
	MSG_ID_MMI_SAT_LANG_NOTIFY_RES_RSP,
	MSG_ID_MMI_SAT_LANG_NOTIFY_IND,
	MSG_ID_MMI_SAT_LAUNCH_BROWSER_RES_REQ,
	MSG_ID_MMI_SAT_LAUNCH_BROWSER_RES_RSP,
	MSG_ID_MMI_SAT_LAUNCH_BROWSER_IND,
	MSG_ID_MMI_SAT_NO_OTHER_CMD_IND,
	MSG_ID_MMI_SAT_SIM_FILE_CHANGE_IND,

 















	MSG_ID_MMI_CB_DOWNLOAD_IND,
	MSG_ID_MMI_CB_MSG_IND,
	MSG_ID_MMI_CB_SUBSCRIBE_REQ,
	MSG_ID_MMI_CB_SUBSCRIBE_RSP,
	MSG_ID_MMI_SMS_SET_CB_MODE_REQ,
	MSG_ID_MMI_SMS_SET_CB_MODE_RSP,
	MSG_ID_MMI_SMS_GET_CB_MODE_REQ,
	MSG_ID_MMI_SMS_GET_CB_MODE_RSP,
 

	MSG_ID_MMI_EM_SET_GAIN_REQ,
	MSG_ID_MMI_EM_SET_GAIN_RSP,

 

	MSG_ID_MMI_EM_STATUS_IND,
	MSG_ID_MMI_EM_START_REQ,
	MSG_ID_MMI_EM_START_RSP,
	MSG_ID_MMI_EM_STOP_REQ,
	MSG_ID_MMI_EM_STOP_RSP,
	MSG_ID_MMI_EM_SET_CELL_ID_LOCK_REQ,
	MSG_ID_MMI_EM_SET_CELL_ID_LOCK_RSP,

	MSG_ID_MMI_EM_KEYPAD_EVENT_OUTPUT_REQ,
	MSG_ID_MMI_EM_KEYPAD_EVENT_OUTPUT_RSP,
	MSG_ID_MMI_EM_LCM_TEST_IND,
	MSG_ID_MMI_EM_KEYPAD_EVENT_ACT_IND,
	MSG_ID_MMI_FACTORY_TEST_IND,
	MSG_ID_MMI_SET_MMI_DEFAULT_PROF_IND,
	MSG_ID_MMI_UPDATE_MMI_DEFAULT_PROF_VALUE_REQ,
	MSG_ID_MMI_UPDATE_MMI_DEFAULT_PROF_VALUE_RSP,
	MSG_ID_MMI_EM_CELL_RESEL_SUSPEND_REQ,
	MSG_ID_MMI_EM_CELL_RESEL_SUSPEND_RSP,
	MSG_ID_MMI_EM_CELL_RESEL_RESUME_REQ,
	MSG_ID_MMI_EM_CELL_RESEL_RESUME_RSP,
	MSG_ID_MMI_EM_GET_CELL_LOCK_REQ,
	MSG_ID_MMI_EM_GET_CELL_LOCK_RSP,
	MSG_ID_MMI_EM_SET_CELL_LOCK_REQ,
	MSG_ID_MMI_EM_SET_CELL_LOCK_RSP,
	MSG_ID_MMI_EM_RGB_TEST_REQ_IND,
	MSG_ID_MMI_EM_NW_EVENT_NOTIFY_REQ,
	MSG_ID_MMI_EM_NW_EVENT_NOTIFY_RSP,
	MSG_ID_MMI_EM_NW_EVENT_NOTIFY_IND,
	MSG_ID_MMI_EM_FEATURE_COMMAND_REQ,
	MSG_ID_MMI_EM_FEATURE_COMMAND_RSP,
 

	MSG_ID_MMI_VM_PLAY_REQ,
	MSG_ID_MMI_VM_PLAY_RSP,
	MSG_ID_MMI_VM_DEL_REQ,
	MSG_ID_MMI_VM_DEL_RSP,
	MSG_ID_MMI_VM_APPEND_REQ,
	MSG_ID_MMI_VM_APPEND_RSP,
	MSG_ID_MMI_VM_RENAME_REQ,
	MSG_ID_MMI_VM_RENAME_RSP,
	MSG_ID_MMI_VM_PLAY_FINISH_IND,
	MSG_ID_MMI_VM_GET_INFO_REQ,
	MSG_ID_MMI_VM_GET_INFO_RSP,
	MSG_ID_MMI_VM_STOP_REQ,
	MSG_ID_MMI_VM_STOP_RSP,
	MSG_ID_MMI_VM_ABORT_REQ,
	MSG_ID_MMI_VM_ABORT_RSP,
	MSG_ID_MMI_VM_PAUSE_REQ,
	MSG_ID_MMI_VM_PAUSE_RSP,
	MSG_ID_MMI_VM_RESUME_REQ,
	MSG_ID_MMI_VM_RESUME_RSP,
	MSG_ID_MMI_VM_RECORD_REQ,
	MSG_ID_MMI_VM_RECORD_RSP,
	MSG_ID_MMI_VM_RECORD_FINISH_IND,

	MSG_ID_MMI_CPHS_DISPLAY_CFU_IND,
	MSG_ID_MMI_CPHS_MMI_INFO_IND,
	MSG_ID_MMI_CPHS_UPDATE_ALS_REQ,
	MSG_ID_MMI_CPHS_UPDATE_ALS_RSP,
	MSG_ID_MMI_CPHS_DISPLAY_ALS_IND,
	MSG_ID_WAP_START_DTMF_REQ,
	MSG_ID_WAP_START_DTMF_RSP,
	MSG_ID_WAP_STOP_DTMF_REQ,
	MSG_ID_WAP_STOP_DTMF_RSP,
	MSG_ID_WAP_DIAL_REQ,
	MSG_ID_WAP_DIAL_RSP,
	MSG_ID_WAP_SET_ENTRY_REQ,
	MSG_ID_WAP_SET_ENTRY_RSP,
	MSG_ID_WAP_AUTO_DTMF_COMPLETE_IND,
 








 

	MSG_ID_MMI_EQ_USBCONFIG_REQ,
	MSG_ID_MMI_EQ_USBCONFIG_RSP,
	MSG_ID_MMI_EQ_USBDETECT_IND,
	MSG_ID_MMI_EQ_USBUART_SWITCH_PORT_REQ,
	MSG_ID_MMI_EQ_USBUART_SWITCH_PORT_RSP,
	MSG_ID_MMI_EQ_USBDETECT_RES_REQ,
	MSG_ID_MMI_EQ_USBDETECT_RES_RSP,

	MSG_ID_MMI_EQ_DATA_DL_FILELIST_INFO_REQ_IND,
	MSG_ID_MMI_EQ_DATA_DL_FILELIST_REPORT_REQ,
	MSG_ID_MMI_EQ_DATA_DL_FILELIST_REPORT_RSP,
	MSG_ID_MMI_EQ_DATA_DL_FILE_MODIFY_REQ_IND,
	MSG_ID_MMI_EQ_DATA_DL_FILE_MODIFY_REQ,
	MSG_ID_MMI_EQ_DATA_DL_FILE_MODIFY_RSP,
	MSG_ID_MMI_EQ_DATA_DL_EXECUTE_REQ_IND,
	MSG_ID_MMI_EQ_DATA_DL_EXECUTE_REQ,
	MSG_ID_MMI_EQ_DATA_DL_EXECUTE_RSP,
	MSG_ID_WAP_MMC_READ_FOLDER_STATUS_REQ_IND,
	MSG_ID_WAP_MMC_READ_FOLDER_STATUS_OUTPUT_REQ,
	MSG_ID_WAP_MMC_READ_FOLDER_STATUS_OUTPUT_RSP,
	MSG_ID_WAP_MMC_UPLOAD_MSG_REQ_IND,
	MSG_ID_WAP_MMC_UPLOAD_MSG_OUTPUT_REQ,
	MSG_ID_WAP_MMC_UPLOAD_MSG_OUTPUT_RSP,
	MSG_ID_WAP_MMC_DELETE_MSG_REQ_IND,
	MSG_ID_WAP_MMC_DELETE_MSG_OUTPUT_REQ,
	MSG_ID_WAP_MMC_DELETE_MSG_OUTPUT_RSP,
	MSG_ID_MMI_EQ_QUERY_GREETING_TEXT_REQ_IND,
	MSG_ID_MMI_EQ_QUERY_GREETING_TEXT_RES_REQ,
	MSG_ID_MMI_EQ_QUERY_GREETING_TEXT_RES_RSP,
	MSG_ID_MMI_EQ_QUERY_LANGUAGE_REQ_IND,
	MSG_ID_MMI_EQ_QUERY_LANGUAGE_RES_REQ,
	MSG_ID_MMI_EQ_QUERY_LANGUAGE_RES_RSP,
	MSG_ID_MMI_EQ_QUERY_SILENT_MODE_REQ_IND,
	MSG_ID_MMI_EQ_QUERY_SILENT_MODE_RES_REQ,
	MSG_ID_MMI_EQ_QUERY_SILENT_MODE_RES_RSP,
	MSG_ID_MMI_EQ_QUERY_VIBRATOR_MODE_REQ_IND,
	MSG_ID_MMI_EQ_QUERY_VIBRATOR_MODE_RES_REQ,
	MSG_ID_MMI_EQ_QUERY_VIBRATOR_MODE_RES_RSP,
	MSG_ID_MMI_EQ_QUERY_DATE_TIME_FORMAT_REQ_IND,
	MSG_ID_MMI_EQ_QUERY_DATE_TIME_FORMAT_RES_REQ,
	MSG_ID_MMI_EQ_QUERY_DATE_TIME_FORMAT_RES_RSP,
	MSG_ID_MMI_EQ_QUERY_MUTE_MODE_REQ_IND,
	MSG_ID_MMI_EQ_QUERY_MUTE_MODE_RES_REQ,
	MSG_ID_MMI_EQ_QUERY_MUTE_MODE_RES_RSP,
	MSG_ID_MMI_POWER_RESET_IND,
	MSG_ID_MMI_READY_NOTIFY_REQ,
	MSG_ID_MMI_READY_NOTIFY_RSP,
	MSG_ID_MMI_AT_GENERAL_RES_REQ,
	MSG_ID_MMI_AT_GENERAL_RES_RSP,
	MSG_ID_MMI_FACTORY_RESTORE_REQ_IND,
	MSG_ID_MMI_EQ_VCARD_REQ_IND,
	MSG_ID_MMI_EQ_VCARD_RES_REQ,
	MSG_ID_MMI_EQ_VCARD_RES_RSP,
	MSG_ID_MMI_EQ_VCALENDAR_REQ_IND,
	MSG_ID_MMI_EQ_VCALENDAR_RES_REQ,
	MSG_ID_MMI_EQ_VCALENDAR_RES_RSP,
	MSG_ID_MMI_EQ_STR_ENABLE_REQ_IND,
	MSG_ID_MMI_EQ_STR_REQ_IND,
	MSG_ID_MMI_EQ_STR_RES_REQ,
	MSG_ID_MMI_EQ_STR_RES_RSP,
	MSG_ID_MMI_UCM_AT_REQ_IND,
	MSG_ID_MMI_UCM_AT_RES_REQ,
	MSG_ID_MMI_UCM_AT_RES_RSP,
	MSG_ID_MMI_UCM_GENERAL_RCODE_REQ,
	MSG_ID_MMI_UCM_GENERAL_RCODE_RSP,
	MSG_ID_MMI_UCM_HF_CIEV_RCODE_REQ,
	MSG_ID_MMI_UCM_HF_CIEV_RCODE_RSP,
	MSG_ID_MMI_JAVA_LOCAL_INSTALL_REQ_IND,
	MSG_ID_MMI_JAVA_LOCAL_INSTALL_RES_REQ,
	MSG_ID_MMI_JAVA_LOCAL_INSTALL_RES_RSP,
 

	MSG_ID_MMI_L4_BT_FCTY_SET_PARAM_IND,
	MSG_ID_MMI_L4_BT_LOOPBACK_TEST_REQ_IND,
	MSG_ID_MMI_L4_BT_SET_VR_REQ_IND,
	MSG_ID_MMI_L4_BT_SET_VR_REQ,
	MSG_ID_MMI_L4_BT_SET_VR_RSP,

 



 


















 





 

	MSG_ID_MMI_EQ_PWNON_DUAL_SIM_IND,
	MSG_ID_MMI_SMU_SIM_STATUS_UPDATE_REQ,
	MSG_ID_MMI_SMU_SIM_STATUS_UPDATE_RSP,
	MSG_ID_MMI_SMU_SIM_STATUS_UPDATE_IND,
	MSG_ID_MMI_NW_RAC_ACTIVATED_IND,
	MSG_ID_MMI_SMU_DUAL_SIM_TO_FLIGHT_MODE_REQ,
	MSG_ID_MMI_SMU_DUAL_SIM_TO_FLIGHT_MODE_RSP,
	MSG_ID_MMI_NW_SEARCH_NORMAL_FINISH_IND,

	MSG_ID_L4A_CODE_END,

 
	  
 




    MSG_ID_MMI_MV_GET_USE_DETAILS_REQ,
    MSG_ID_MMI_MV_GET_USE_DETAILS_RSP,

 
	MSG_ID_MMI_THM_CONTENT_RCVD,
	MSG_ID_DA_GET_CONTENT_REQ,
	MSG_ID_DA_CONTINUE_DOWNLOAD,
	MSG_ID_MMI_DOWNLOAD_RES,
	MSG_ID_MMI_DOWNLOAD_COMPLETE_NOTIFY,
	MSG_ID_DA_ABORT_REQ,
 	 

     
    MSG_ID_MMI_CBM_APP_ENTRY_BEARER_DETAIL_INFO_IND,
    MSG_ID_MMI_CBM_ADD_BEARER_STATUS_NOTIFY_REQ,
    MSG_ID_MMI_CBM_ADD_BEARER_STATUS_NOTIFY_CNF,
    MSG_ID_MMI_CBM_DEL_BEARER_STATUS_NOTIFY_REQ,
    MSG_ID_MMI_CBM_DEL_BEARER_STATUS_NOTIFY_CNF,
    MSG_ID_MMI_CBM_BEARER_STATUS_NOTIFY_IND,
    MSG_ID_MMI_CBM_ALWAYS_ASK_SELECT_ACCOUNT_RESULT_IND,
    MSG_ID_MMI_CBM_ALWAYS_ASK_SELECT_ACCOUNT_RESULT_CNF,

    MSG_ID_MMI_INJECT_STRING_RSP,
    




     
    MSG_ID_MTE_MMI_RPC_REQ,

    


#line 350 "adaptation\include\stack_msgs.h"
   MSG_ID_MMI_CODE_CHECK_POINT,

   #line 1 "interface\ps\rr_sap.h"
 

































  









  



































































 









 

     
    MSG_ID_GRR_DATA_REQ = MSG_ID_RLC_CODE_BEGIN,
    MSG_ID_GRR_UNITDATA_REQ,
    MSG_ID_GRR_FLUSH_REQ,
    MSG_ID_MAC_RLC_UL_CON_IND,



    MSG_ID_MAC_RLC_ACK_IND,
    MSG_ID_MAC_RLC_SWITCH_TO_DL,
    MSG_ID_MAC_RLC_READY_IND,
    MSG_ID_MAC_RLC_PDCH_REL_IND,




    MSG_ID_GMMAS_READY_TIMER_UPDATE_REQ,

  
    MSG_ID_MAC_RLC_REL_CNF,

    MSG_ID_MAC_RLC_SWITCH_TO_UL,
    MSG_ID_RLC_DL_CODE_BEGIN = MSG_ID_MAC_RLC_SWITCH_TO_UL,
    MSG_ID_MAC_RLC_DL_CON_IND,






    MSG_ID_REASM_RLC_REASM_DONE_IND,





    MSG_ID_GMMAS_START_TEST_MODE_REQ,
    MSG_ID_GMMAS_CELL_UPDATED_REQ,


    MSG_ID_MAC_RLC_TBF_REL_IND,
    MSG_ID_RLC_COMMON_CODE_BEGIN = MSG_ID_MAC_RLC_TBF_REL_IND,
    MSG_ID_RLC_CODE_END = MSG_ID_MAC_RLC_TBF_REL_IND,

     















    MSG_ID_SIM_RR_READY_IND = MSG_ID_RRM_CODE_BEGIN,
    MSG_ID_GMMAS_SIM_INFO_RESET_REQ,
    MSG_ID_GMMAS_ACT_REQ,
    MSG_ID_GMMAS_ASSIGN_REQ,
    MSG_ID_GMMAS_ABORT_SEARCH_REQ,
    MSG_ID_GMMAS_PLMN_SRCH_REQ,
    MSG_ID_GMMAS_PLMN_SEL_REQ,
    MSG_ID_GMMAS_BAND_CHANGE_REQ,
    MSG_ID_GMMAS_PLMN_SEL_MODE_CHANGE_REQ,
    MSG_ID_GMMAS_SERVICE_CHANGE_REQ,
    MSG_ID_GMMAS_EQ_PLMNS_UPDATE_REQ,
  
    MSG_ID_GMMAS_PS_SESSION_START_REQ,  
    MSG_ID_GMMAS_PS_SESSION_STOP_REQ,  

    MSG_ID_GMMAS_INIT_REQ,


    MSG_ID_GMMAS_SIM_STATUS_UPDATE_REQ,


    MSG_ID_GMMAS_RFOFF_REQ,


    MSG_ID_MPAL_RR_BSIC_SYNC_CNF,
    MSG_ID_MPAL_RR_NEIGHBOR_BSIC_IND,
    MSG_ID_MPAL_RR_CELL_BSIC_IND,
    MSG_ID_MPAL_RR_DATA_IND,

  MSG_ID_RR_PRR_SUSPEND_SERVICE_REQ,  
  MSG_ID_RR_PRR_RESUME_SERVICE_REQ,  




    MSG_ID_RRM_RMPC_COMMON_CODE_END = MSG_ID_RR_PRR_RESUME_SERVICE_REQ,










    MSG_ID_RMPC_RRM_CELL_SEL_REQ,
    MSG_ID_RMPC_RRM_STATE_IND,
    MSG_ID_RMPC_RRM_HPLMN_SRCH_REQ,
    MSG_ID_RMPC_RRM_BA_CHANGE_IND,
    MSG_ID_RMPC_RRM_START_RECOVERY_TIMER_REQ,
    MSG_ID_MPAL_RR_SEARCH_RF_IND,
    MSG_ID_RMPC_RRM_STOP_SERV_CNF,
    MSG_ID_T_RECOVERY_EXPIRY,
    MSG_ID_MPAL_RR_DEACTIVATE_CNF,
    MSG_ID_RRM_CODE_END = MSG_ID_MPAL_RR_DEACTIVATE_CNF,


     










    MSG_ID_GMMAS_REGN_STATUS_UPDATE_REQ = MSG_ID_RMPC_CODE_BEGIN,
    MSG_ID_GMMAS_DATA_REQ,
    MSG_ID_GMMAS_SIG_ABORT_REQ,
    MSG_ID_GMMAS_SIG_EST_REQ,
    MSG_ID_SMSAL_AS_CBCH_REQ,
    MSG_ID_SMSAL_AS_CB_UPDATE_REQ,


    MSG_ID_MAC_RMPC_RESEL_REQ,
    MSG_ID_MAC_RMPC_PKT_ACCESS_REQ,
    MSG_ID_MAC_RMPC_ACCESS_RESULT_IND,
    MSG_ID_MAC_RMPC_MEAS_ORDER_IND,
    MSG_ID_MAC_RMPC_ENTER_IDLE_REQ,
    



    MSG_ID_MAC_RMPC_MEAS_MAP_IND,  


    MSG_ID_MAC_RMPC_DL_ASSIGN_RESULT_IND,
    MSG_ID_MAC_RMPC_TBF_STATUS_IND,
    
    MSG_ID_RLC_RMPC_RESEL_REQ,
    MSG_ID_RLC_RMPC_MS_STATE_CHANGE_IND,




    MSG_ID_RRM_RMPC_CELL_SEL_DONE_IND,
    MSG_ID_RRM_RMPC_START_PLMN_SRCH_REQ,
    MSG_ID_RRM_RMPC_START_HPLMN_SRCH_TIMER_REQ,
    MSG_ID_RRM_RMPC_STOP_SERV_REQ,


    MSG_ID_MPAL_RR_NEIGHBOR_MEAS_IND,
    MSG_ID_MPAL_RR_NC_MEASUREMENT_IND,
    MSG_ID_MPAL_RR_EXTENDED_MEAS_IND,
    MSG_ID_MPAL_RR_SERV_IDLE_MEAS_IND,
    MSG_ID_MPAL_RR_SERV_DEDI_MEAS_IND,
    MSG_ID_MPAL_RR_PKT_EXT_MEASUREMENT_IND,




    MSG_ID_MAC_RMPC_SUSPEND_DONE_IND,  


    MSG_ID_MPAL_RR_RACH_CNF,
    MSG_ID_MPAL_RR_HANDOVER_FAIL_IND,
    MSG_ID_MPAL_RR_HANDOVER_SUCCESS_IND,
    MSG_ID_MPAL_RR_HANDOVER_CONNECT_IND,
    MSG_ID_MPAL_RR_DEDICATED_CHANNEL_CONNECT_CNF,
    MSG_ID_MPAL_RR_DEDICATED_CHANNEL_DISCONNECT_CNF,
    MSG_ID_MPAL_RR_DEDICATED_CHANNEL_RECONNECT_CNF,
    MSG_ID_MPAL_RR_FREQUENCY_REDEFINITION_CNF,
    MSG_ID_MPAL_RR_CHANNEL_MODE_MODIFY_CNF,
    MSG_ID_MPAL_RR_CIPHERING_MODE_COMMAND_CNF,
    MSG_ID_MPAL_RR_CLOSE_TCH_LOOP_CNF,
    MSG_ID_MPAL_RR_OPEN_TCH_LOOP_CNF,
    MSG_ID_MAC_RMPC_CS_PAGE_IND,
    MSG_ID_RMP_MSG_CODE_END = MSG_ID_MAC_RMPC_CS_PAGE_IND,
  
    MSG_ID_LAPDM_RR_ESTB_CONF,
    MSG_ID_LAPDM_RR_ESTB_IND,
    MSG_ID_LAPDM_RR_REL_IND,
    MSG_ID_LAPDM_RR_REL_CONF,
    MSG_ID_LAPDM_RR_SUS_CONF,
    MSG_ID_LAPDM_RR_RESUME_CONF,
    MSG_ID_LAPDM_RR_RECON_CONF,
    MSG_ID_LAPDM_RR_DATA_IND,
    MSG_ID_LAPDM_RR_UNITDATA_IND,
    MSG_ID_LAPDM_RR_ERROR_IND,
    





    MSG_ID_RMPC_CODE_END = MSG_ID_LAPDM_RR_ERROR_IND,

  








     


     
    MSG_ID_RLC_MAC_RES_REQ = MSG_ID_MAC_CODE_BEGIN,
    MSG_ID_RLC_MAC_TBF_REL_REQ,
    MSG_ID_RLC_MAC_UL_DATA_IND,
    MSG_ID_RLC_MAC_ACK_RES,
    MSG_ID_RMPC_MAC_MEAS_REPORT_IND,
    MSG_ID_RMPC_MAC_PSI_STATUS_IND,
    MSG_ID_RMPC_MAC_RESEL_FAIL_IND,
    MSG_ID_RMPC_MAC_UL_ASSIGN_IND,
    MSG_ID_RMPC_MAC_DL_ASSIGN_IND,
    MSG_ID_RMPC_MAC_SUSPEND_TBF_REQ,
    MSG_ID_RMPC_MAC_RESUME_TBF_REQ,
    MSG_ID_RMPC_MAC_SI_INFO_READY_IND,
    MSG_ID_MPAL_RR_TRANSFER_DATA_IND,
    MSG_ID_MPAL_RR_EGPRS_TRANSFER_DATA_IND,
    MSG_ID_MPAL_RR_READY_TO_SEND_IND,
    MSG_ID_MPAL_RR_PDTCH_DISCONN_CNF,
    MSG_ID_MPAL_RR_CCCH_RRBP_CNF,
  

     




      MSG_ID_MPAL_RR_EGPRS_LOOP_CNF,
    MSG_ID_MPAL_RR_PDTCH_CONNECT_IND,
    
    MSG_ID_MAC_RMPC_COMMON_CODE_BEGIN = MSG_ID_MPAL_RR_PDTCH_CONNECT_IND,
    MSG_ID_MPAL_RR_INT_MEASUREMENT_IND,
    MSG_ID_MAC_RMPC_COMMON_CODE_END = MSG_ID_MPAL_RR_INT_MEASUREMENT_IND,
    
    MSG_ID_MAC_CODE_END = MSG_ID_MAC_RMPC_COMMON_CODE_END,
  
     
    MSG_ID_RR_LAPDM_DATA_REQ = MSG_ID_LAPDM_CODE_BEGIN,
    MSG_ID_RR_LAPDM_UNITDATA_REQ,
    MSG_ID_RR_LAPDM_ESTB_REQ,
    MSG_ID_RR_LAPDM_SUS_REQ,
    MSG_ID_RR_LAPDM_RESUME_REQ,
    MSG_ID_RR_LAPDM_RECON_REQ,
    MSG_ID_RR_LAPDM_REL_REQ,
    MSG_ID_RR_LAPDM_MDL_REL_REQ,
    MSG_ID_RR_LAPDM_DTX_REQ,
    MSG_ID_LAPDM_UL_DATA_REQ,
    MSG_ID_LAPDM_DOWNLINK_IND,





    MSG_ID_LAPDM_CODE_END = MSG_ID_LAPDM_DOWNLINK_IND,


    MSG_ID_RR_MPAL_DEDICATED_DATA_REQ,
    MSG_ID_MPAL_RR_DEDICATED_DATA_IND,
    MSG_ID_MPAL_RR_DEDICATED_READY_TO_SEND_IND,
  
     
    MSG_ID_RLC_REASM_BEGIN_REASM_IND = MSG_ID_REASM_CODE_BEGIN,
    MSG_ID_RLC_REASM_TBF_REL_IND,
    MSG_ID_FLC_REASM_RESUME_REQ,
    MSG_ID_REASM_CODE_END = MSG_ID_FLC_REASM_RESUME_REQ,
  
     
    MSG_ID_RR_MPAL_SEARCH_RF_REQ = MSG_ID_MPAL_CODE_BEGIN,
    MSG_ID_RR_MPAL_SEARCH_RF_STOP_REQ,
    MSG_ID_RR_MPAL_BSIC_SYNC_REQ,
    MSG_ID_RR_MPAL_SPECIFIC_SYNC_REQ,
    MSG_ID_RR_MPAL_SERV_BCCH_MONITOR_REQ,
    MSG_ID_RR_MPAL_CCCH_MONITOR_REQ,
    MSG_ID_RR_MPAL_PAGE_MODE_CHANGE_REQ,
    MSG_ID_RR_MPAL_RACH_REQ,
    MSG_ID_RR_MPAL_STOP_RACH_REQ,
    MSG_ID_RR_MPAL_DEDICATED_CHANNEL_CONNECT_REQ,
    MSG_ID_RR_MPAL_DEDICATED_CHANNEL_DISCONNECT_REQ,
    MSG_ID_RR_MPAL_HANDOVER_REQ,
    MSG_ID_RR_MPAL_HANDOVER_STOP_REQ,
    MSG_ID_RR_MPAL_DEDICATED_CHANNEL_RECONNECT_REQ,
    MSG_ID_RR_MPAL_FREQUENCY_REDEFINITION_REQ,
    MSG_ID_RR_MPAL_CHANNEL_MODE_MODIFY_REQ,
    MSG_ID_RR_MPAL_CIPHERING_MODE_COMMAND_REQ,
    MSG_ID_RR_MPAL_CLOSE_TCH_LOOP_REQ,
    MSG_ID_RR_MPAL_OPEN_TCH_LOOP_REQ,
    MSG_ID_RR_MPAL_DAI_TEST_REQ,
    MSG_ID_RR_MPAL_POWER_CLASS_REQ,
    MSG_ID_RR_MPAL_CELL_OPTION_UPDATE_REQ,
    MSG_ID_RR_MPAL_EXTENDED_MEAS_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_MEAS_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_BSIC_START_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_BSIC_STOP_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_SYS_INFO_READ_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_SYS_INFO_STOP_REQ,
    MSG_ID_RR_MPAL_CELL_BSIC_START_REQ,
    MSG_ID_RR_MPAL_CELL_BSIC_STOP_REQ,
    MSG_ID_RR_MPAL_CELL_SYS_INFO_READ_REQ,
    MSG_ID_RR_MPAL_CELL_SYS_INFO_STOP_REQ,



    MSG_ID_RR_MPAL_NET_LIST_START_REQ,
    MSG_ID_RR_MPAL_NET_LIST_STOP_REQ,

     
    MSG_ID_RR_MPAL_CBCH_CONFIG_REQ,
    MSG_ID_RR_MPAL_CBCH_START_REQ,
    MSG_ID_RR_MPAL_CBCH_STOP_REQ,
    MSG_ID_RR_MPAL_CBCH_SKIP_REQ,
    

    MSG_ID_RR_MPAL_SIM_STATUS_UPDATE_REQ,
    MSG_ID_RR_MPAL_SUSPEND_ALT_L1_REQ,
    MSG_ID_RR_MPAL_SUSPEND_REQ,
    MSG_ID_RR_MPAL_RESUME_REQ,


    MSG_ID_RR_MPAL_SIM_READY_NOTIFY_REQ,
    MSG_ID_RR_MPAL_DEACTIVATE_REQ,
    MSG_ID_T3124_EXPIRY,
  
    MSG_ID_RR_MPAL_MONITOR_PBCCH_REQ,
    MSG_ID_RR_MPAL_STOP_MONITOR_PBCCH_REQ,
    MSG_ID_RR_MPAL_MONITOR_PCCCH_REQ,
    MSG_ID_RR_MPAL_NCELL_PBCCH_REQ,
    MSG_ID_RR_MPAL_STOP_NCELL_PBCCH_REQ,
    MSG_ID_RR_MPAL_NC_MEASUREMENT_REQ,
    MSG_ID_RR_MPAL_STOP_NC_MEASUREMENT_REQ,
    MSG_ID_RR_MPAL_PKT_EXT_MEASUREMENT_REQ,
    MSG_ID_RR_MPAL_INT_MEASUREMENT_REQ,
    MSG_ID_RR_MPAL_PDTCH_CONNECT_REQ,
    MSG_ID_RR_MPAL_RRBP_REQ,
    MSG_ID_RR_MPAL_CTRL_REQ,
    MSG_ID_RR_MPAL_DATA_REQ,
    MSG_ID_RR_MPAL_PKT_TIMING_ADV_PWR_CTRL_REQ,
    MSG_ID_RR_MPAL_PDCH_RELEASE_REQ,
    MSG_ID_RR_MPAL_PDTCH_DISCONN_REQ,
    MSG_ID_RR_MPAL_PDCH_ASSIGNMENT_REQ,
    MSG_ID_RR_MPAL_UPDATE_IR_RESET_REQ,
    MSG_ID_RR_MPAL_EGPRS_LOOP_REQ,
    










    MSG_ID_MPAL_CODE_END = MSG_ID_RR_MPAL_EGPRS_LOOP_REQ,

  
 
#line 353 "adaptation\include\stack_msgs.h"
   MSG_ID_RR_CODE_CHECK_POINT,

   #line 1 "interface\ps\llc_sap.h"
 

































  









  































 









	 
	MSG_ID_LLSMS_UNITDATA_REQ = MSG_ID_LLC_CODE_BEGIN,
	MSG_ID_LLTOM_UNITDATA_REQ,
	MSG_ID_LLGMM_UNITDATA_REQ,
	MSG_ID_LLGMM_ASSIGN_REQ,
	MSG_ID_LLGMM_TRIGGER_REQ,
	MSG_ID_LLGMM_SUSPEND_REQ,
	MSG_ID_LLGMM_RESUME_REQ,
	MSG_ID_LLSND_UNITDATA_REQ,
	MSG_ID_LLSND_DATA_REQ,
	MSG_ID_LLSND_XID_REQ,
	MSG_ID_LLSND_XID_RES,
	MSG_ID_LLSND_ESTABLISH_REQ,
	MSG_ID_LLSND_ESTABLISH_RES,
	MSG_ID_LLSND_RELEASE_REQ,
	MSG_ID_LLSND_CREATE_REG_REQ,
	MSG_ID_LLSND_SAPI_MEM_XID,
	MSG_ID_LLSND_RNR_STOP,
	MSG_ID_GRR_DATA_IND,
	MSG_ID_GRR_UNITDATA_IND,
	MSG_ID_GRR_STATUS_IND,
	MSG_ID_GRR_FLUSH_CNF,

	 







	 

	MSG_ID_SAPI_MEM_FLOW_ON_REQ,
	MSG_ID_RLC_LLC_FLOW_CONTROL_OFF,
	MSG_ID_LL_TIMER_EXPIRY,
	MSG_ID_LL_CIPHER_RSP,
	MSG_ID_LL_DECIPHER_RSP,
	MSG_ID_RLC_LLC_RNR_TRIGGER,
	MSG_ID_LLSND_SAPI_ACT_REQ,
	MSG_ID_GRR_CIBUFF_AVAIL_IND,
	MSG_ID_AS_NAS_DATA_CNF,
	MSG_ID_LLSND_FLUSH_REQ,
	MSG_ID_LLSND_SAPI_DEACT_REQ,
	MSG_ID_LLC_CODE_END = MSG_ID_LLSND_SAPI_DEACT_REQ,
	 


#line 356 "adaptation\include\stack_msgs.h"
   MSG_ID_LLC_CODE_CHECK_POINT,

   #line 1 "interface\ps\sndcp_sap.h"
 

































  









  







































 









	 
	 
	MSG_ID_SN_DATA_REQ = MSG_ID_SND_CODE_BEGIN,
	MSG_ID_SN_UNITDATA_REQ,
	MSG_ID_SN_XID_REQ,
	MSG_ID_LLSND_UNITDATA_IND,
	MSG_ID_LLSND_XID_IND,
	MSG_ID_LLSND_XID_CNF,
	MSG_ID_LLSND_DATA_IND,
	MSG_ID_LLSND_DATA_CNF,
	MSG_ID_LLSND_RESET_IND,
	MSG_ID_LLSND_ESTABLISH_IND,
	MSG_ID_LLSND_ESTABLISH_CNF,
	MSG_ID_LLSND_RELEASE_IND,
	MSG_ID_LLSND_RELEASE_CNF,
	MSG_ID_LLSND_STATUS_IND,
	MSG_ID_LLSND_FLUSH_CNF,
	MSG_ID_SNSM_ACTIVATE_IND,
	MSG_ID_SNSM_DEACTIVATE_IND,
	MSG_ID_SNSM_MODIFY_IND,
	MSG_ID_SNSM_SEQUENCE_IND,
	MSG_ID_SNSM_CELL_INFO_UPDATE_IND,  
	MSG_ID_SND_SAPI_ACK_CH_TIMEOUT,
	MSG_ID_SND_FLC_SUSPEND_RESUME,
	MSG_ID_SND_ACTIVATE_IND,
	MSG_ID_SND_ACTIVATE_RSP,
	MSG_ID_SND_DEACTIVATE_IND,
	MSG_ID_SND_DEACTIVATE_RSP,
	MSG_ID_SND_MODIFY_EST,
	MSG_ID_SND_MODIFY_EST_RSP,
	MSG_ID_SND_MODIFY_REL,
	MSG_ID_SND_MODIFY_REL_RSP,
	MSG_ID_SND_UNITDATA_IND,
	MSG_ID_SND_UNITDATA_TX_REQ,
	MSG_ID_SND_DATA_IND,
	MSG_ID_SND_DATA_TX_REQ,
	MSG_ID_SND_RESET_IND,
	MSG_ID_SND_ALL_SAPI_RESET,
	MSG_ID_SND_ALL_MAP_NSAPI_RESET,
	MSG_ID_SND_DATA_ERROR,
	MSG_ID_SND_ALL_MAP_NSAPI_STATUS_REQ,
	MSG_ID_SND_COMPRESS_RSP,
	MSG_ID_SND_DECOMPRESS_RSP,
	MSG_ID_SND_FLC_DATA_RESUME_PPP,
    
     
    MSG_ID_RATDM_SNDCP_ACTIVATE_REQ,
    MSG_ID_RATDM_SNDCP_DATA_REQ,
    MSG_ID_RATDM_SNDCP_MODIFY_REQ,
    MSG_ID_RATDM_SNDCP_DEACTIVATE_REQ,
    MSG_ID_RATDM_SNDCP_SEQUENCE_REQ,
    
	MSG_ID_SOC_SND_DL_SRPDU_RESUME,
	MSG_ID_SND_NPDU_INQUEUE_IND, 
    MSG_ID_SND_CODE_END = MSG_ID_SND_NPDU_INQUEUE_IND,
	 

#line 359 "adaptation\include\stack_msgs.h"
   MSG_ID_SND_CODE_CHECK_POINT,

   #line 1 "interface\ps\sm_sap.h"
 

































  









  











































 









	 
	MSG_ID_SMREG_PDP_ACTIVATE_REQ = MSG_ID_SM_CODE_BEGIN,
	MSG_ID_SMREG_PDP_DEACTIVATE_REQ,
	MSG_ID_SMREG_PDP_MODIFY_REQ,
	MSG_ID_SMREG_PDP_ACTIVATE_SEC_REQ,







	MSG_ID_SNSM_ACTIVATE_RSP,
	MSG_ID_SNSM_MODIFY_RSP,
	MSG_ID_SNSM_DEACTIVATE_RSP,
	MSG_ID_SNSM_STATUS_REQ,
	MSG_ID_SM_NSAPI_MSG_CODE_END = MSG_ID_SNSM_STATUS_REQ,

	














	MSG_ID_SNSM_SEQUENCE_RSP,
	MSG_ID_GMMSM_ESTABLISH_REJ,
	MSG_ID_GMMSM_ESTABLISH_CNF,
	MSG_ID_GMMSM_RELEASE_IND,
	MSG_ID_GMMSM_SEQUENCE_REQ,

	MSG_ID_GMMSM_UNITDATA_IND,
	MSG_ID_GMMSM_SUSPEND_REQ,
	MSG_ID_GMMSM_RESUME_REQ,
	MSG_ID_GMMSM_NSAPI_STATUS_IND, 
	MSG_ID_SMREG_PDP_ACTIVATE_REJ_RSP,
	MSG_ID_GMMSM_CELL_INFO_UPDATE_IND,  
	MSG_ID_SM_CODE_END = MSG_ID_GMMSM_CELL_INFO_UPDATE_IND,
	 


#line 362 "adaptation\include\stack_msgs.h"
   MSG_ID_SM_CODE_CHECK_POINT,

   #line 1 "interface\ps\ppp_sap.h"
 

































  









  































	 
	 
	 
	MSG_TAG_PPP_FIRST_GPRS_MSG = MSG_ID_PPP_CODE_BEGIN,
	MSG_ID_L4CPPP_ACTIVATE_REQ = MSG_TAG_PPP_FIRST_GPRS_MSG,
	MSG_ID_L4CPPP_DEACTIVATE_REQ,
	MSG_ID_L4CPPP_RESUME_REQ,

     
	MSG_ID_TAF_EXT_PDP_ACTIVATE_ACK_RSP,
  	MSG_ID_TAF_EXT_PDP_ACTIVATE_REJ_RSP,
  	MSG_ID_TAF_EXT_PDP_DEACTIVATE_ACK_RSP,
  	MSG_ID_TAF_EXT_PDP_DEACTIVATE_REQ,
  	MSG_ID_TAF_DATA_REQ,
  	MSG_ID_TAF_EXT_UPDATE_PDP_ADDR_REQ,

	 
	MSG_ID_PPP_FLC_DATA_RESUME_IND,
	MSG_ID_PPP_STATUS_REPORT_IND,
	MSG_ID_PPP_PROCESS_PKT_IND,
	MSG_TAG_PPP_LAST_GPRS_MSG = MSG_ID_PPP_PROCESS_PKT_IND,

	
	 
	 
	MSG_TAG_PPP_FIRST_CSD_MSG,
	MSG_ID_L4CPPP_CSD_ACTIVATE_REQ = MSG_TAG_PPP_FIRST_CSD_MSG,
	MSG_ID_L4CPPP_CSD_DEACTIVATE_REQ,
	
	 
	MSG_ID_TCPIP_PPP_DATA_REQ,
	MSG_ID_SOC_PPP_DL_SRPDU_RESUME,
	
	 
	MSG_ID_FLC_PPP_UL_APPDU_RESUME,
	MSG_ID_PPP_TDT_DATA_IND,
	MSG_ID_PPP_L2R_DATA_IND,		
		
	MSG_TAG_PPP_LAST_CSD_MSG = MSG_ID_PPP_L2R_DATA_IND,
	MSG_ID_PPP_CODE_END = MSG_TAG_PPP_LAST_CSD_MSG,
	
	 


#line 365 "adaptation\include\stack_msgs.h"
   MSG_ID_PPP_CODE_CHECK_POINT,

   #line 1 "interface\ps\data_sap.h"
 

































  









  































 









 

	 
   MSG_ID_CSM_TDT_ACTIVATE_REQ = MSG_ID_TDT_CODE_BEGIN,
   MSG_ID_CSM_TDT_DEACTIVATE_REQ,
   MSG_ID_CSM_TDT_UART_SETOWNER_REQ,
   MSG_ID_CSM_TDT_ESC_OFF_REQ, 
   MSG_ID_PPP_TDT_DATA_REQ,
   MSG_ID_TDT_CODE_END = MSG_ID_PPP_TDT_DATA_REQ,
	
	 
   MSG_ID_CSM_L2R_ACTIVATE_REQ = MSG_ID_L2R_CODE_BEGIN,
   MSG_ID_CSM_L2R_DEACTIVATE_REQ,
   MSG_ID_CSM_L2R_UART_SETOWNER_REQ,
   MSG_ID_CSM_L2R_ESC_OFF_REQ,  
   MSG_ID_PPP_L2R_DATA_REQ,  
   MSG_ID_SMU_L2R_DATA_REQ,
  
   MSG_ID_L2R_RLP_CONN_CNF,
   MSG_ID_L2R_RLP_CONN_IND,
   MSG_ID_L2R_RLP_XID_IND,  
   MSG_ID_L2R_RLP_TEST_CNF,           
   MSG_ID_L2R_RLP_UNITDATA_IND,    
   MSG_ID_L2R_RLP_DISC_CNF,
   MSG_ID_L2R_RLP_DISC_IND,
   MSG_ID_L2R_RLP_DETACH_CNF,
   MSG_ID_L2R_RLP_ERROR_IND,
   MSG_ID_L2R_RLP_RESET_CNF,
   MSG_ID_L2R_RLP_RESET_IND,
   MSG_ID_L2R_RLP_DATA_IND,   
   MSG_ID_L2R_RLP_READY_IND,   
   MSG_ID_L2R_RLP_CHANGE_RATE_IND,
   MSG_ID_L2R_RLP_PREPARE_REMAP_IND,
   MSG_ID_L2R_RLP_REMAP_IND,       
   MSG_ID_FLC_CSD_DL_APPDU_RESUME,
   MSG_ID_L2R_CODE_END = MSG_ID_L2R_RLP_REMAP_IND,
   
    
	MSG_ID_L2R_RLP_ATTACH_REQ = MSG_ID_RLP_CODE_BEGIN,
   MSG_ID_L2R_RLP_DATA_REQ,
   MSG_ID_L2R_RLP_CONN_REQ,
   MSG_ID_L2R_RLP_CONN_RESP,
   MSG_ID_L2R_RLP_RESET_RESP,
   MSG_ID_L2R_RLP_RESET_REQ,
   MSG_ID_L2R_RLP_DISC_REQ,
   MSG_ID_L2R_RLP_UNITDATA_REQ,
   MSG_ID_L2R_RLP_XID_REQ,
   MSG_ID_L2R_RLP_TEST_REQ,
   MSG_ID_L2R_RLP_PREPARE_REMAP_RESP,
   MSG_ID_L2R_RLP_REMAP_RESP,
   MSG_ID_L2R_RLP_DETACH_REQ,
   MSG_ID_RLP_RA_DATA_REQ,  
   MSG_ID_RLP_RA_DATA_IND,      
	MSG_ID_FLC_RLP_RR_REQ,
	MSG_ID_FLC_RLP_RNR_REQ,
   MSG_ID_L2R_RLP_ABOVE_UP_THRESHOLD_IND,
   MSG_ID_L2R_RLP_BELOW_UP_THRESHOLD_IND,

   MSG_ID_CSD_UART_READY_TO_READ,
   MSG_ID_CSD_UART_READY_TO_WRITE,
   MSG_ID_CSD_UART_DATA_REQ,
   MSG_ID_CSD_UART_FULL_IND,
   MSG_ID_CSD_ACTIVATE_REQ,
   MSG_ID_CSD_DEACTIVATE_REQ,
   MSG_ID_CSD_RA_DATA_REQ,  
   MSG_ID_CSD_RA_DATA_IND,      
   MSG_ID_CSD_CEEL_CHANGE_START_IND,
   MSG_ID_CSD_CEEL_CHANGE_FINIDSH_IND,
   MSG_ID_CSD_UPLINK_TICK_IND,
   MSG_ID_CSD_DOWNLINK_TICK_IND,
   MSG_ID_RLP_CODE_END = MSG_ID_CSD_DOWNLINK_TICK_IND,

	 
   MSG_ID_CSM_T30_ACTIVATE_REQ = MSG_ID_T30_CODE_BEGIN,
   MSG_ID_CSM_T30_DEACTIVATE_REQ,
   MSG_ID_CSM_T30_FAX_RATE_REQ,

   MSG_ID_L4C_T30_RW_STR_PARAM_REQ,
   MSG_ID_L4C_T30_RW_PARAM_REQ,
   MSG_ID_L4C_T30_TX_MSG_REQ, 
   MSG_ID_L4C_T30_RX_MSG_REQ,
   MSG_ID_L4C_T30_TX_BCS_REQ,
   MSG_ID_L4C_T30_RX_BCS_REQ,
   MSG_ID_L4C_T30_TX_SILENCE_REQ,
   MSG_ID_L4C_T30_RX_SILENCE_REQ,
   MSG_ID_L4C_T30_TRANSFER_UART_REQ,
   MSG_ID_L4C_T30_TX_PPM_REQ,

   MSG_ID_FA_T30_ACTIVATE_CNF,
   MSG_ID_FA_T30_DEACTIVATE_CNF,
   MSG_ID_FA_T30_TX_DATA_CNF, 
   MSG_ID_FA_T30_RX_DATA_CNF, 
   MSG_ID_FA_T30_DISC_IND,
   MSG_ID_FA_T30_CMD_CNF,

   MSG_ID_FA_T30_CMD_IND,
   MSG_ID_FA_T30_DATA_IND,
   MSG_ID_FA_T30_GET_CMD_IND,
   MSG_ID_FA_T30_GET_DATA_IND,

   MSG_ID_FA_T30_TX_DATA_END_IND,
   MSG_ID_FA_T30_RX_DATA_END_IND,
   MSG_ID_FA_T30_TX_CMD_END_IND, 
   MSG_ID_FA_T30_RX_CMD_END_IND, 

   MSG_ID_FA_T30_GETMORE_DATA_IND,
   MSG_ID_FA_T30_OVERFLOW_IND,
   MSG_ID_FA_T30_DATA_AVAILABLE_IND,
   MSG_ID_FA_T30_RATE_CHANGE_IND,
   MSG_ID_FA_T30_HDLC_IND,
   MSG_ID_T30_CODE_END = MSG_ID_FA_T30_HDLC_IND,

	 
   MSG_ID_T30_FA_ACTIVATE_REQ = MSG_ID_FA_CODE_BEGIN,
   MSG_ID_T30_FA_DEACTIVATE_REQ, 
   MSG_ID_T30_FA_CMD_REQ, 
   MSG_ID_T30_FA_DATA_REQ,   
   MSG_ID_T30_FA_TX_DATA_REQ, 
   MSG_ID_T30_FA_RX_DATA_REQ, 
   MSG_ID_T30_FA_FAX_RATE_REQ,  
   MSG_ID_T30_FA_SEND_DATA_REQ, 
   MSG_ID_FA_T30_HDLC_REQ,

   MSG_ID_RA_FA_PROCESS_CMD_IND,

   MSG_ID_RA_FA_ACTIVATE_CNF, 
   MSG_ID_RA_FA_DL_Q_FULL_IND, 
   MSG_ID_RA_FA_DL_Q_OVERFLOW_IND, 
   MSG_ID_RA_FA_UL_Q_UNDERFLOW_IND, 
   MSG_ID_RA_FA_TX_DATA_CNF, 
   MSG_ID_RA_FA_RX_DATA_CNF, 
   MSG_ID_RA_FA_RX_DATA_END_IND, 
   MSG_ID_RA_FA_TX_DATA_END_IND, 
   MSG_ID_RA_FA_RX_CMD_END_IND, 
   MSG_ID_RA_FA_TX_CMD_END_IND, 
   MSG_ID_RA_FA_RX_MSG_REC_IND, 
   MSG_ID_RA_FA_RATE_CHANGE_IND,
   MSG_ID_FA_CODE_END = MSG_ID_RA_FA_RATE_CHANGE_IND,
  
 
	


#line 368 "adaptation\include\stack_msgs.h"
   MSG_ID_DATA_CODE_CHECK_POINT,

   #line 1 "interface\mmi\mmiapi_sap.h"
 


































 










































































































 	MSG_ID_MMIAPI_ACTION_REGISTER_IND = MSG_ID_MMIAPI_CODE_BEGIN,
	MSG_ID_MMIAPI_ACTION_NOTIFY_IND,
	MSG_ID_MMIAPI_UNREAD_PUSH_ICON_IND,
	MSG_ID_MMIAPI_MMS_IND,
	MSG_ID_MMIAPI_DEVICE_GET_CTRL_REQ,
	MSG_ID_MMIAPI_DEVICE_GET_CTRL_RSP,
	MSG_ID_MMIAPI_DEVICE_PLAY_REQ,
	MSG_ID_MMIAPI_DEVICE_PLAY_RSP,

	
	MSG_ID_MMIAPI_REMOTE_PROC_CALL_REQ,

	
	MSG_ID_MMIAPI_SMS_SEND_REQ,
	MSG_ID_MMIAPI_SMS_SEND_RSP,

	MSG_ID_MMIAPI_SMS_IND,
	
	MSG_ID_MMIAPI_SMS_REGISTER_PORT_REQ,
	MSG_ID_MMIAPI_SMS_REGISTER_PORT_RSP,

	MSG_ID_MMIAPI_SMS_CHECK_INCOMING_MSG_REQ,
	MSG_ID_MMIAPI_SMS_CHECK_INCOMING_MSG_RSP,

	MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_TIMESTAMP_REQ,
	MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_TIMESTAMP_RSP,

	MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_ADDRESS_REQ,
	MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_ADDRESS_RSP,

	MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_REQ,
	MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_RSP,
	
	MSG_ID_MMIAPI_SMS_GET_HOST_ADDRESS_REQ,
	MSG_ID_MMIAPI_SMS_GET_HOST_ADDRESS_RSP,

	
	MSG_ID_MMIAPI_UI_ENTER_FULLSCREEN_EDITOR_REQ,
	MSG_ID_MMIAPI_UI_ENTER_FULLSCREEN_EDITOR_RSP,
	MSG_ID_MMIAPI_UI_ENTER_IDLE_SCREEN_REQ,
	MSG_ID_MMIAPI_UI_ENTER_IDLE_SCREEN_RSP,
	MSG_ID_MMI_READY_TO_IDLE_SCREEN_IND,

	MSG_ID_MMIAPI_BACKLIGHT_CONTROL_REQ,
	MSG_ID_MMIAPI_BACKLIGHT_CONTROL_RSP,

	MSG_ID_MMIAPI_LED_CONTROL_REQ,
	MSG_ID_MMIAPI_LED_CONTROL_RSP,

	MSG_ID_MMI_SHOW_ASM_DIALOG_REQ,
	MSG_ID_MDI_MOTION_DATA_STATE_RSP,
	MSG_ID_MMI_VDOPLY_RTSP_URL_REQ,

	MSG_ID_MMI_UM_READY_IND,
	MSG_ID_MMI_UM_GET_MSG_NUM_REQ,
	MSG_ID_MMI_UM_GET_MSG_NUM_RSP,
	MSG_ID_MMI_UM_GET_LIST_REQ,
	MSG_ID_MMI_UM_GET_LIST_RSP,
	MSG_ID_MMI_UM_GET_MSG_INFO_REQ,
	MSG_ID_MMI_UM_GET_MSG_INFO_RSP,
	MSG_ID_MMI_UM_DELETE_FOLDER_REQ,
	MSG_ID_MMI_UM_DELETE_FOLDER_RSP,
	MSG_ID_MMI_UM_NEW_MSG_IND,
	MSG_ID_MMI_UM_DELETE_ALL_IND,
	MSG_ID_MMI_UM_DELETE_ALL_RES,
	MSG_ID_MMI_UM_HIGHLIGHT_MSG_IND,
	MSG_ID_MMI_UM_HIGHLIGHT_DECIDED_BY_UM_IND,
	MSG_ID_MMI_UM_REFRESH_IND,
	MSG_ID_MMI_UM_CANCEL_NEW_MSG_IND,
	MSG_ID_MMI_DA_GET_FILE_IND,
	MSG_ID_MMI_DA_GET_FILE_RSP,
    MSG_ID_MMI_DA_DISPATCH_FILE_REQ,
    MSG_ID_MMI_DA_DISPATCH_FILE_RSP,
    MSG_ID_MMI_DA_DOWNLOAD_INFO_IND,
    MSG_ID_MMI_DA_WAP_NOTIFY_IND,
	MSG_ID_MMI_JATAAYU_QUEUE_RECV_IND,    

	MSG_ID_MDI_SWFLASH_DL_SOCKET_IND,
	MSG_ID_MDI_SWFLASH_PL_AUDIO_IND,

    MSG_ID_MMI_GDD_IMG_CODEC_EVENT_IND,
    MSG_ID_MMI_GDC_IMG_CODEC_CALLBACK_IND,

	MSG_ID_MMI_MAKE_CALL_REQ_IND,

    MSG_ID_MMI_CCA_APP_CONFIGURE_IND,
    MSG_ID_MMI_CCA_APP_CONFIGURE_RSP,
    MSG_ID_MMI_CCA_SOURCE_NEW_DOC_IND,
    MSG_ID_MMI_CCA_SOURCE_NEW_DOC_RSP,
    MSG_ID_MMI_CCA_SOURCE_UI_INVALID_SETTING_IND,
    MSG_ID_MMI_CCA_SOURCE_UI_NEW_SETTING_IND,
    MSG_ID_MMI_CCA_SOURCE_UI_NEW_SETTING_RSP,
    MSG_ID_MMI_CCA_SOURCE_UI_AUTH_IND,
    MSG_ID_MMI_CCA_SOURCE_UI_AUTH_RSP,
    MSG_ID_MMI_CCA_NEW_DOC_CONTINUE_IND,
    MSG_ID_MMI_CCA_GET_PROF_IND,
    MSG_ID_MMI_CCA_GET_PROF_RSP,
    MSG_ID_MMI_CCA_APP_GET_PROF_IND,
    MSG_ID_MMI_CCA_APP_GET_PROF_RSP,
    MSG_ID_MMI_CCA_UPDATE_PROF_IND,
    MSG_ID_MMI_CCA_UPDATE_PROF_RSP,
    MSG_ID_MMI_CCA_APP_UPDATE_PROF_IND,
    MSG_ID_MMI_CCA_APP_UPDATE_PROF_RSP,

     
    MSG_ID_MMI_PICT_BRIDGE_PENDING_EVENT,

     
    MSG_ID_MMIAPI_GET_BATTERY_LEVEL_REQ,
    MSG_ID_MMIAPI_GET_BATTERY_LEVEL_RSP,

    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_START_REQ,
    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_START_RSP,

    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_IND,

    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_STOP_REQ,
    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_STOP_RSP,
    
    MSG_ID_MMI_PS_DTCNT_LIST_IND,
    MSG_ID_MMI_PS_DTCNT_LIST_RSP,

     
    MSG_ID_MDI_VT_LOOPBACK_ACTIVATE_REQ,
	MSG_ID_MDI_VT_LOOPBACK_DEACTIVATE_REQ,

	MSG_ID_MMIAPI_CODE_END,


#line 371 "adaptation\include\stack_msgs.h"
   MSG_ID_MMIAPI_CODE_CHECK_POINT,

   #line 1 "interface\media\med_sap.h"
 

































  









  











































































































































































































































































    
MSG_ID_MED_STARTUP_REQ = MSG_ID_MED_CODE_BEGIN,
    MSG_ID_L4AUD_STARTUP_REQ = MSG_ID_MED_STARTUP_REQ,
    MSG_ID_MED_STARTUP_CNF,
    MSG_ID_L4AUD_STARTUP_CNF = MSG_ID_MED_STARTUP_CNF,
    MSG_ID_MEDIA_GET_BUFFER_REQ,
    MSG_ID_MEDIA_FREE_BUFFER_REQ,
    MSG_ID_MEDIA_TEMP_1,
    MSG_ID_MEDIA_TEMP_2,
    MSG_ID_L4AUD_GET_AUDIO_MODE_REQ,
    MSG_ID_MED_AUD_CODE_BEGIN = MSG_ID_L4AUD_GET_AUDIO_MODE_REQ,
    MSG_ID_L4AUD_GET_AUDIO_MODE_CNF,
    MSG_ID_L4AUD_SET_AUDIO_MODE_REQ,
    MSG_ID_L4AUD_SET_AUDIO_MODE_CNF,
    MSG_ID_L4AUD_GPIO_DETECT_IND,
    MSG_ID_L4AUD_GET_AUDIO_PROFILE_REQ,
    MSG_ID_L4AUD_GET_AUDIO_PROFILE_CNF,
    MSG_ID_L4AUD_SET_AUDIO_PROFILE_REQ,
    MSG_ID_L4AUD_SET_AUDIO_PROFILE_CNF,
    MSG_ID_L4AUD_GET_AUDIO_PARAM_REQ,
    MSG_ID_L4AUD_GET_AUDIO_PARAM_CNF,
    MSG_ID_L4AUD_SET_AUDIO_PARAM_REQ,
    MSG_ID_L4AUD_SET_AUDIO_PARAM_CNF,
    MSG_ID_L4AUD_AUDIO_GET_VOLUME_REQ,
    MSG_ID_L4AUD_AUDIO_GET_VOLUME_CNF,
    MSG_ID_L4AUD_AUDIO_GET_GAIN_REQ,
    MSG_ID_L4AUD_AUDIO_GET_GAIN_CNF,
    MSG_ID_L4AUD_AUDIO_SET_VOLUME_REQ,
    MSG_ID_L4AUD_AUDIO_SET_VOLUME_CNF,
    MSG_ID_L4AUD_AUDIO_SET_GAIN_REQ,
    MSG_ID_L4AUD_AUDIO_SET_GAIN_CNF,
    MSG_ID_L4AUD_AUDIO_SET_DEVICE_REQ,
    MSG_ID_L4AUD_AUDIO_SET_DEVICE_CNF,
    MSG_ID_L4AUD_AUDIO_PLAY_REQ,
    MSG_ID_L4AUD_AUDIO_PLAY_CNF,
    MSG_ID_L4AUD_AUDIO_STOP_REQ,
    MSG_ID_L4AUD_AUDIO_STOP_CNF,
    MSG_ID_L4AUD_AUDIO_PLAY_BY_NAME_REQ,
    MSG_ID_L4AUD_AUDIO_PLAY_BY_NAME_CNF,
    MSG_ID_L4AUD_AUDIO_STOP_BY_NAME_REQ,
    MSG_ID_L4AUD_AUDIO_STOP_BY_NAME_CNF,
    MSG_ID_L4AUD_AUDIO_PLAY_BY_STRING_REQ,
    MSG_ID_L4AUD_AUDIO_PLAY_BY_STRING_CNF,
    MSG_ID_L4AUD_AUDIO_STOP_BY_STRING_REQ,
    MSG_ID_L4AUD_AUDIO_STOP_BY_STRING_CNF,
    MSG_ID_L4AUD_AUDIO_PLAY_TONE_SEQ_REQ,
    MSG_ID_L4AUD_AUDIO_PLAY_TONE_SEQ_CNF,
    MSG_ID_L4AUD_AUDIO_STOP_TONE_SEQ_REQ,
    MSG_ID_L4AUD_AUDIO_STOP_TONE_SEQ_CNF,
    MSG_ID_L4AUD_AUDIO_DEMO_IMY_REQ,
    MSG_ID_L4AUD_AUDIO_DEMO_IMY_CNF,
    MSG_ID_L4AUD_AUDIO_PLAY_FINISH_IND,
    MSG_ID_L4AUD_AUDIO_MUTE_REQ,
    MSG_ID_L4AUD_AUDIO_MUTE_CNF,
    MSG_ID_L4AUD_AUDIO_SET_FIR_REQ,
    MSG_ID_L4AUD_AUDIO_SET_FIR_CNF,
    MSG_ID_L4AUD_SP_SET_INPUT_MODE_REQ,
    MSG_ID_L4AUD_SP_SET_INPUT_MODE_CNF,
    MSG_ID_L4AUD_SP_SET_MODE_REQ,
    MSG_ID_L4AUD_SP_SET_MODE_CNF,
    MSG_ID_L4AUD_VM_RECORD_REQ,
    MSG_ID_L4AUD_VM_RECORD_CNF,
    MSG_ID_L4AUD_VM_PLAY_REQ,
    MSG_ID_L4AUD_VM_PLAY_CNF,
    MSG_ID_L4AUD_VM_STOP_REQ,
    MSG_ID_L4AUD_VM_STOP_CNF,
    MSG_ID_L4AUD_VM_DELETE_REQ,
    MSG_ID_L4AUD_VM_DELETE_CNF,
    MSG_ID_L4AUD_VM_ABORT_REQ,
    MSG_ID_L4AUD_VM_ABORT_CNF,
    MSG_ID_L4AUD_VM_PAUSE_REQ,
    MSG_ID_L4AUD_VM_PAUSE_CNF,
    MSG_ID_L4AUD_VM_RESUME_REQ,
    MSG_ID_L4AUD_VM_RESUME_CNF,
    MSG_ID_L4AUD_VM_APPEND_REQ,
    MSG_ID_L4AUD_VM_APPEND_CNF,
    MSG_ID_L4AUD_VM_GET_INFO_REQ,
    MSG_ID_L4AUD_VM_GET_INFO_CNF,
    MSG_ID_L4AUD_VM_RENAME_REQ,
    MSG_ID_L4AUD_VM_RENAME_CNF,
    MSG_ID_L4AUD_VM_RECORD_FINISH_IND,
    MSG_ID_L4AUD_VM_PLAY_FINISH_IND,
    MSG_ID_AUD_VM_READ_DATA_IND,
    MSG_ID_AUD_VM_WRITE_DATA_IND,
    MSG_ID_L4AUD_MEDIA_RECORD_REQ,
    MSG_ID_L4AUD_MEDIA_RECORD_CNF,
    MSG_ID_L4AUD_MEDIA_PLAY_REQ,
    MSG_ID_L4AUD_MEDIA_PLAY_CNF,
    MSG_ID_L4AUD_MEDIA_STOP_REQ,
    MSG_ID_L4AUD_MEDIA_STOP_CNF,
    MSG_ID_L4AUD_MEDIA_PAUSE_REQ,
    MSG_ID_L4AUD_MEDIA_PAUSE_CNF,
    MSG_ID_L4AUD_MEDIA_RESUME_REQ,
    MSG_ID_L4AUD_MEDIA_RESUME_CNF,
    MSG_ID_AUD_MEDIA_READ_DATA_IND,
    MSG_ID_AUD_MEDIA_WRITE_DATA_IND,
    MSG_ID_L4AUD_MEDIA_RECORD_FINISH_IND,
    MSG_ID_L4AUD_MEDIA_PLAY_FINISH_IND,
    MSG_ID_L4AUD_MEDIA_UPDATE_DUR_IND,
    MSG_ID_AUD_MEDIA_PLAY_EVENT_IND,
    MSG_ID_AUD_MEDIA_PLAY_STREAM_EVENT_IND,
    MSG_ID_MEDIA_AUD_BLOCK_REQ,
    MSG_ID_L4AUD_MEDIA_STORE_REQ,
    MSG_ID_L4AUD_MEDIA_RESTORE_REQ,
    MSG_ID_MEDIA_AUD_SET_MUTE_REQ,
    MSG_ID_MEDIA_AUD_MPLAY_REQ,
    MSG_ID_MEDIA_AUD_MSTOP_REQ,
    MSG_ID_MEDIA_AUD_START_CALC_SPECTRUM_REQ,
    MSG_ID_MEDIA_AUD_STOP_CALC_SPECTRUM_REQ,
    MSG_ID_MEDIA_AUD_GET_SPECTRUM_REQ,
    MSG_ID_MEDIA_AUD_SET_VIBRATOR_ENABLED_REQ,
    MSG_ID_MEDIA_AUD_GET_DURATION_REQ,
    MSG_ID_MEDIA_AUD_GET_PROGRESS_TIME_REQ,
    MSG_ID_MEDIA_AUD_SET_PROGRESS_TIME_REQ,
    MSG_ID_MEDIA_AUD_CHECK_IS_PURE_AUDIO_REQ,
    MSG_ID_MED_AUD_CODE_END = MSG_ID_MEDIA_AUD_CHECK_IS_PURE_AUDIO_REQ,
    MSG_ID_MEDIA_CAM_POWER_UP_REQ,
    MSG_ID_MED_CAM_CODE_BEGIN = MSG_ID_MEDIA_CAM_POWER_UP_REQ,
    MSG_ID_MEDIA_CAM_POWER_DOWN_REQ,
    MSG_ID_MEDIA_CAM_READY_IND,
    MSG_ID_MEDIA_CAM_PREVIEW_REQ,
    MSG_ID_MEDIA_CAM_PREVIEW_FAIL_IND,
    MSG_ID_MEDIA_CAM_STOP_REQ,
    MSG_ID_MEDIA_CAM_CAPTURE_REQ,
    MSG_ID_MEDIA_CAM_SET_PARAM_REQ,
    MSG_ID_MEDIA_CAM_SET_FLASH_REQ,
    MSG_ID_MEDIA_CAM_START_FAST_ZOOM_REQ,
    MSG_ID_MEDIA_CAM_STOP_FAST_ZOOM_REQ,
    MSG_ID_MEDIA_CAM_GET_FAST_ZOOM_FACTOR_REQ,
    MSG_ID_MEDIA_CAM_GET_FOCUS_STEPS_REQ,
    MSG_ID_MEDIA_CAM_CAPTURE_EVENT_IND,
    MSG_ID_MEDIA_CAM_CAL_MANUAL_WB_REQ,
    MSG_ID_MEDIA_CAM_MWB_OPERATION_REQ,
    MSG_ID_MEDIA_CAM_SET_OVERLAY_PALETTE_REQ,
    MSG_ID_MEDIA_CAM_AF_PROCESS_DONE_IND,
    MSG_ID_MEDIA_CAM_EVENT_IND,
    MSG_ID_MEDIA_CAM_XENON_FLASH_STATUS_IND,
    MSG_ID_MEDIA_CAM_BARCODE_PREVIEW_REQ,
    MSG_ID_MEDIA_CAM_BARCODE_STOP_REQ,
    MSG_ID_MEDIA_CAM_BARCODE_CAPTURE_REQ,
    MSG_ID_MEDIA_CAM_BARCODE_STOP_CAPTURE_REQ,
    MSG_ID_MEDIA_CAM_BARCODE_DECODE_DONE_IND,
    MSG_ID_MED_CAM_CODE_END = MSG_ID_MEDIA_CAM_BARCODE_DECODE_DONE_IND,
    MSG_ID_MEDIA_IMG_DECODE_REQ,
    MSG_ID_MED_IMG_CODE_BEGIN = MSG_ID_MEDIA_IMG_DECODE_REQ,
    MSG_ID_MEDIA_IMG_DECODE_FINISH_IND,
    MSG_ID_MEDIA_IMG_DECODE_EVENT_IND,
    MSG_ID_MEDIA_IMG_ENCODE_REQ,
    MSG_ID_MEDIA_IMG_ENCODE_FINISH_IND,
    MSG_ID_MEDIA_IMG_ENCODE_EVENT_IND,
    MSG_ID_MEDIA_IMG_STOP_REQ,
    MSG_ID_MEDIA_IMG_RESIZE_REQ,
    MSG_ID_MEDIA_IMG_RESIZE_DONE_IND,
    MSG_ID_MEDIA_IMG_EXIF_DECODE_REQ,
    MSG_ID_MEDIA_IMG_TEMP_1,
    MSG_ID_MEDIA_IMG_TEMP_2,
    MSG_ID_MED_IMG_CODE_END = MSG_ID_MEDIA_IMG_TEMP_2,
    MSG_ID_MEDIA_VID_PREVIEW_REQ,
    MSG_ID_MED_VID_CODE_BEGIN = MSG_ID_MEDIA_VID_PREVIEW_REQ,
    MSG_ID_MEDIA_VID_RECORD_REQ,
    MSG_ID_MEDIA_VID_STOP_REQ,
    MSG_ID_MEDIA_VID_RECORD_FINISH_IND,
    MSG_ID_MEDIA_VID_ENCODE_EVENT_IND,
    MSG_ID_MEDIA_VID_ENCODE_AUDIO_DATA_IND,
    MSG_ID_MEDIA_VID_FILE_MERGE_REQ,
    MSG_ID_MEDIA_VID_FILE_MERGE_DONE_IND,
    MSG_ID_MEDIA_VID_OPEN_REQ,
    MSG_ID_MEDIA_VID_CLOSE_REQ,
    MSG_ID_MEDIA_VID_FILE_READY_IND,
    MSG_ID_MEDIA_VID_PLAY_REQ,
    MSG_ID_MEDIA_VID_PLAY_FINISH_IND,
    MSG_ID_MEDIA_VID_DECODE_EVENT_IND,
    MSG_ID_MEDIA_VID_EDT_ENCODE_EVENT_IND,
    MSG_ID_MEDIA_VID_DECODE_AUDIO_DATA_IND,
    MSG_ID_MEDIA_VID_PAUSE_REQ,
    MSG_ID_MEDIA_VID_RESUME_REQ,
    MSG_ID_MEDIA_VID_SET_STOP_TIME,
    MSG_ID_MEDIA_VID_SEEK_REQ,
    MSG_ID_MEDIA_VID_SEEK_DONE_IND,
    MSG_ID_MEDIA_VID_EDT_SET_ACTIVE_REQ,  
    MSG_ID_MEDIA_VID_EDT_ENC_OPEN_REQ,      
    MSG_ID_MEDIA_VID_EDT_ENC_CLOSE_REQ,
    MSG_ID_MEDIA_VID_EDT_ENC_APPEND_REQ,
    MSG_ID_MEDIA_VID_EDT_ENC_MERGE_REQ,
    MSG_ID_MEDIA_VID_EDT_ENC_STOP_MERGE_REQ,
    MSG_ID_MEDIA_VID_EDT_ENC_MERGE_DONE_IND,    
    MSG_ID_MEDIA_VID_EDT_OPEN_BGM_REQ,    
    MSG_ID_MEDIA_VID_EDT_CLOSE_BGM_REQ,  
    MSG_ID_MEDIA_VID_EDT_OPEN_SILENCE_REQ,    
    MSG_ID_MEDIA_VID_EDT_CLOSE_SILENCE_REQ,
    MSG_ID_MEDIA_VID_EDT_INIT_REQ,
    MSG_ID_MEDIA_VID_EDT_DEINIT_REQ,
    MSG_ID_MEDIA_VID_GET_PDL_PRECENT_REQ,
    MSG_ID_MEDIA_VID_GET_PDL_MAX_TIME_REQ,  
    MSG_ID_MEDIA_VID_CHECK_IS_PDL_REQ,      
    MSG_ID_MEDIA_VID_GET_INFO_REQ,
    MSG_ID_MEDIA_VID_GET_IFRAME_REQ,
    MSG_ID_MEDIA_VID_IFRAME_READY_IND,
    MSG_ID_MEDIA_VID_ERROR_RECOVER_IND,
    MSG_ID_MEDIA_VID_PLAY_RESTART_IND,
    MSG_ID_MEDIA_VID_AUDIO_PLAY_FINISH_IND,
    MSG_ID_MEDIA_VID_MJPEG_ENCODE_IND,    
    MSG_ID_MEDIA_VID_SET_DISPLAY_REQ,
    MSG_ID_MEDIA_VID_UPDATE_BLT_PAUSE_REQ,
    MSG_ID_MEDIA_VID_UPDATE_BLT_RESUME_REQ,
    MSG_ID_MEDIA_VID_SET_OVERLAY_PALETTE_REQ,
    MSG_ID_MEDIA_VID_SET_PARAM_REQ,
    MSG_ID_MED_VID_CODE_END = MSG_ID_MEDIA_VID_SET_PARAM_REQ,
    MSG_ID_MEDIA_TVO_START_REQ,
    MSG_ID_MED_TVO_CODE_BEGIN = MSG_ID_MEDIA_TVO_START_REQ,
    MSG_ID_MEDIA_TVO_STOP_REQ,
    MSG_ID_MEDIA_TVO_SET_MODE_REQ,
    MSG_ID_MEDIA_TVO_TV_CONNECT_IND,
    MSG_ID_MEDIA_TVO_AV_CABLE_DETECT_IND,
    MSG_ID_MEDIA_TVO_SET_PARAM_REQ,
    MSG_ID_MEDIA_TVO_TEMP_2,
    MSG_ID_MED_TVO_CODE_END = MSG_ID_MEDIA_TVO_TEMP_2,
    MSG_ID_MEDIA_WEBCAM_START_REQ,
    MSG_ID_MED_WEBCAM_CODE_BEGIN = MSG_ID_MEDIA_WEBCAM_START_REQ,
    MSG_ID_MEDIA_WEBCAM_START_CNF,
    MSG_ID_MEDIA_WEBCAM_STOP_REQ,
    MSG_ID_MEDIA_WEBCAM_PAUSE_REQ,
    MSG_ID_MEDIA_WEBCAM_RESUME_REQ,
    MSG_ID_MEDIA_WEBCAM_CAPTURE_REQ,
    MSG_ID_MEDIA_WEBCAM_ROTATE_REQ,
    MSG_ID_MEDIA_WEBCAM_ABORT_IND,
    MSG_ID_MEDIA_WEBCAM_ENCODE_REQ,
    MSG_ID_MEDIA_WEBCAM_TEMP_2,
    MSG_ID_MED_WEBCAM_CODE_END = MSG_ID_MEDIA_WEBCAM_TEMP_2,
    MSG_ID_MEDIA_MMA_OPEN_REQ,
    MSG_ID_MED_MMA_CODE_BEGIN = MSG_ID_MEDIA_MMA_OPEN_REQ,
    MSG_ID_MEDIA_MMA_CLOSE_REQ,
    MSG_ID_MEDIA_MMA_PLAY_REQ,
    MSG_ID_MEDIA_MMA_STOP_REQ,
    MSG_ID_MEDIA_MMA_PAUSE_REQ,
    MSG_ID_MEDIA_MMA_RESUME_REQ,
    MSG_ID_MEDIA_MMA_GET_AUDIO_INFO_REQ,
    MSG_ID_MEDIA_MMA_GET_DURATION_REQ,
    MSG_ID_MEDIA_MMA_GET_CURRENT_TIME_REQ,
    MSG_ID_MEDIA_MMA_SET_START_TIME_REQ,
    MSG_ID_MEDIA_MMA_SET_STOP_TIME_REQ,
    MSG_ID_MEDIA_MMA_GET_VOLUME_REQ,
    MSG_ID_MEDIA_MMA_SET_VOLUME_REQ,
    MSG_ID_MEDIA_MMA_SET_RATE_REQ,
    MSG_ID_MEDIA_MMA_SET_TEMPO_REQ,
    MSG_ID_MEDIA_MMA_SET_PITCH_REQ,
    MSG_ID_MEDIA_MMA_SEND_LONG_MSG_REQ,
    MSG_ID_MEDIA_MMA_SEND_SHORT_MSG_REQ,
    MSG_ID_MEDIA_MMA_OPEN_DEVICE_REQ,
    MSG_ID_MEDIA_MMA_CLOSE_DEVICE_REQ,
    MSG_ID_MEDIA_MMA_SET_CHANNEL_VOLUME_REQ,
    MSG_ID_MEDIA_MMA_SET_PROGRAM_REQ,
    MSG_ID_MEDIA_MMA_SET_DATA_REQ,
    MSG_ID_MEDIA_MMA_WRITE_DATA_IND_REQ,    
    MSG_ID_MEDIA_MMA_PLAY_EVENT_IND,
    MSG_ID_MEDIA_MMA_PROCESS_EVENT_IND,
    MSG_ID_MEDIA_MMA_CALLBACK_IND,    
    MSG_ID_MEDIA_MMA_TEMP_1,
    MSG_ID_MEDIA_MMA_TEMP_2,
    MSG_ID_MEDIA_MMA_TEMP_3,
    MSG_ID_MED_MMA_CODE_END = MSG_ID_MEDIA_MMA_TEMP_3,
    MSG_ID_MEDIA_FMR_POWER_ON_REQ,
    MSG_ID_MEDIA_FMR_POWER_OFF_REQ,
    MSG_ID_MEDIA_FMR_SET_FREQ_REQ,
    MSG_ID_MEDIA_FMR_MUTE_REQ,
    MSG_ID_MEDIA_FMR_CHECK_IS_VALID_STOP_REQ,
    MSG_ID_MEDIA_FMR_CHECK_IS_VALID_STOP_CNF,
    MSG_ID_MEDIA_FMR_GET_SIGNAL_LEVEL_REQ,
    MSG_ID_MEDIA_FMR_GET_SIGNAL_LEVEL_CNF,
    MSG_ID_MEDIA_FMR_EVALUATE_THRESHOLD_REQ,

   
    MSG_ID_MEDIA_ANALOG_TV_POWER_UP_REQ,
    MSG_ID_MEDIA_ANALOG_TV_POWER_DOWN_REQ,
    MSG_ID_MEDIA_ANALOG_TV_OPEN_PATH_REQ,
    MSG_ID_MEDIA_ANALOG_TV_CLOSE_PATH_REQ,
    MSG_ID_MEDIA_ANALOG_TV_MUTE_REQ,
    MSG_ID_MEDIA_ANALOG_TV_SET_CHANNEL_REQ,
    MSG_ID_MEDIA_ANALOG_TV_SET_CHANNEL_CNF,
    MSG_ID_MEDIA_ANALOG_TV_GET_VALID_CHANNEL_REQ,
    MSG_ID_MEDIA_ANALOG_TV_GET_VALID_CHANNEL_CNF,
    
    
    MSG_ID_MEDIA_AUD_SET_HEADSET_MODE_OUTPUT_PATH,
    MSG_ID_MEDIA_SND_CHECK_BYTE_STREAM_FORMAT_REQ,
    MSG_ID_MEDIA_SND_CHECK_FILE_FORMAT_REQ,
    MSG_ID_MEDIA_SND_PLAY_BYTE_STREAM_REQ,
    MSG_ID_MEDIA_SND_PLAY_FILE_REQ,
    MSG_ID_MEDIA_SND_PLAY_EVENT_IND,
    MSG_ID_MEDIA_SND_PLAY_FINISH_IND,
    MSG_ID_MEDIA_SND_STOP_PLAY_REQ,
    MSG_ID_MEDIA_SND_SET_VOLUME_REQ,
    MSG_ID_MEDIA_AUD_STRETCH_CHECK_STREAM_FORMAT_REQ,
    MSG_ID_MEDIA_AUD_STRETCH_CHECK_FILE_FORMAT_REQ,
    MSG_ID_MEDIA_AUD_STRETCH_SET_SPEED_REQ,
    MSG_ID_MEDIA_AUD_STRETCH_CLOSE_REQ,
    MSG_ID_MEDIA_AUD_REVERB_SET_COEFF_REQ,
    MSG_ID_MEDIA_AUD_REVERB_TURN_ON_REQ,
    MSG_ID_MEDIA_AUD_REVERB_TURN_OFF_REQ,
    MSG_ID_MEDIA_AUD_SURROUND_TURN_ON_REQ,
    MSG_ID_MEDIA_AUD_SURROUND_TURN_OFF_REQ,
    MSG_ID_MEDIA_AUD_EQ_SET_MAGNITUDE_REQ,
    MSG_ID_MEDIA_AUD_EQ_TURN_ON_REQ,
    MSG_ID_MEDIA_AUD_EQ_TURN_OFF_REQ,
    MSG_ID_MEDIA_AUD_TTS_SET_ATTR_REQ,
    MSG_ID_MEDIA_AUD_TTS_PLAY_EVENT_IND,
    MSG_ID_MEDIA_AUD_TTS_PLAY_REQ,
    MSG_ID_MEDIA_AUD_TTS_STOP_REQ,
    MSG_ID_MEDIA_AUD_TTS_PAUSE_REQ,
    MSG_ID_MEDIA_AUD_TTS_RESUME_REQ,
    MSG_ID_MEDIA_AUD_TTS_UPDATE_INFO_IND,
    MSG_ID_MEDIA_VR_GET_VERSION_REQ,
    MSG_ID_MEDIA_VR_GET_PARAM_REQ,
    MSG_ID_MEDIA_VR_SET_PARAM_REQ,
    MSG_ID_MEDIA_VR_INIT_RCG_REQ,
    MSG_ID_MEDIA_VR_RCG_PROCESS_REQ,
    MSG_ID_MEDIA_VR_RCG_RESULT_IND,
    MSG_ID_MEDIA_VR_INIT_TRN_REQ,
    MSG_ID_MEDIA_VR_TRN_PROCESS_REQ,
    MSG_ID_MEDIA_VR_TRN_RESULT_IND,
    MSG_ID_MEDIA_VR_VOICE_IN_REQ,
    MSG_ID_MEDIA_VR_DEL_TAG_REQ,
    MSG_ID_MEDIA_VR_CHECK_TAG_REQ,
    MSG_ID_MEDIA_VR_SYNC_DB_REQ,
    MSG_ID_MEDIA_VR_PLAY_TAG_REQ,
    MSG_ID_MEDIA_VR_GET_DIR_REQ,
    MSG_ID_MEDIA_VR_ADD_TAG_REQ,
    MSG_ID_MEDIA_VR_ABORT_REQ,
    MSG_ID_MEDIA_VR_ABORT_IND,
    MSG_ID_MED_VR_CODE_END = MSG_ID_MEDIA_VR_ABORT_IND,
    MSG_ID_MEDIA_VRSI_INIT_REQ,
    MSG_ID_MEDIA_VRSI_ADD_TAGS_REQ,
    MSG_ID_MEDIA_VRSI_START_TRN_REQ,
    MSG_ID_MEDIA_VRSI_START_RCG_REQ,
    MSG_ID_MEDIA_VRSI_PLAY_TAG_REQ,
    MSG_ID_MEDIA_VRSI_PLAY_TTS_REQ,
    MSG_ID_MEDIA_VRSI_GET_TAGNUM_REQ,
    MSG_ID_MEDIA_VRSI_GET_TAGINFO_REQ,
    MSG_ID_MEDIA_VRSI_DEL_TAGS_REQ,
    MSG_ID_MEDIA_VRSI_RESET_TAGS_REQ,
    MSG_ID_MEDIA_VRSI_SYNC_DB_REQ,
    MSG_ID_MEDIA_VRSI_ABORT_REQ,
    MSG_ID_MEDIA_VRSI_CLOSE_REQ,
    MSG_ID_MEDIA_VRSI_PROCESS_IND,
    MSG_ID_MEDIA_VRSI_TRN_PROMPT_REQ,
    MSG_ID_MEDIA_VRSI_TRN_RESULT_IND,
    MSG_ID_MEDIA_VRSI_RCG_PROMPT_REQ,
    MSG_ID_MEDIA_VRSI_RCG_RESULT_IND,
    MSG_ID_MEDIA_VRSI_ERR_IND,
    MSG_ID_MEDIA_VRSI_PLAY_TAG_FINISH_IND,
    MSG_ID_MEDIA_VRSI_PLAY_TTS_FINISH_IND,
    MSG_ID_MED_VRSI_CODE_END = MSG_ID_MEDIA_VRSI_PLAY_TTS_FINISH_IND,
    MSG_ID_MEDIA_CTM_OPEN_REQ,
    MSG_ID_MED_CTM_CODE_BEGIN = MSG_ID_MEDIA_CTM_OPEN_REQ,
    MSG_ID_MEDIA_CTM_OPEN_CNF,
    MSG_ID_MEDIA_CTM_CLOSE_REQ,
    MSG_ID_MEDIA_CTM_CLOSE_CNF,
    MSG_ID_MEDIA_CTM_CONNECT_REQ,
    MSG_ID_MEDIA_CTM_CONNECT_CNF,
    MSG_ID_MEDIA_CTM_CONNECTED_IND,
    MSG_ID_MEDIA_CTM_SEND_TEXT_REQ,
    MSG_ID_MEDIA_CTM_SEND_TEXT_CNF,
    MSG_ID_MEDIA_CTM_RECV_TEXT_IND,
    MSG_ID_MEDIA_CTM_EVENT_IND,
    MSG_ID_MED_CTM_CODE_END = MSG_ID_MEDIA_CTM_EVENT_IND,
    MSG_ID_MEDIA_BT_AUDIO_OPEN_REQ,
    MSG_ID_MED_BT_AUDIO_CODE_START = MSG_ID_MEDIA_BT_AUDIO_OPEN_REQ,
    MSG_ID_MEDIA_BT_AUDIO_OPEN_CNF,
    MSG_ID_MEDIA_BT_AUDIO_OPEN_IND,
    MSG_ID_MEDIA_BT_AUDIO_CLOSE_REQ,
    MSG_ID_MEDIA_BT_AUDIO_CLOSE_CNF,
    MSG_ID_MEDIA_BT_AUDIO_CLOSE_IND,
    MSG_ID_MEDIA_BT_AUDIO_TURN_ON_REQ,
    MSG_ID_MEDIA_BT_AUDIO_TURN_OFF_REQ,
    MSG_ID_MED_BT_AUDIO_CODE_END = MSG_ID_MEDIA_BT_AUDIO_TURN_OFF_REQ,
    MSG_ID_MEDIA_IN_PROC_CALL_REQ,
    MSG_ID_MEDIA_BT_OPEN_CODEC_REQ,
    MSG_ID_MEDIA_BT_CLOSE_CODEC_REQ,
    MSG_ID_MEDIA_BT_CLOSE_CODEC_IND,
    MSG_ID_MED_RTP_CREATE_REQ,
    MSG_ID_MED_RTP_CODE_BEGIN = MSG_ID_MED_RTP_CREATE_REQ,   
    MSG_ID_MED_RTP_CLOSE_REQ,
    MSG_ID_MED_RTP_SET_REMOTE_ADDR_REQ,
    MSG_ID_MED_RTP_SET_NOTIFY_REQ,
    MSG_ID_MED_RTP_CLEAR_NOTIFY_REQ,
    MSG_ID_MED_RTP_SEND_REQ,
    MSG_ID_MED_RTP_RECV_REQ,
    MSG_ID_MED_RTP_SEND_RTCP_REQ,
    MSG_ID_MED_RTP_RECV_RTCP_REQ,
    MSG_ID_MED_RTP_SET_VALUE_REQ,
    MSG_ID_MED_RTP_GET_VALUE_REQ,
    MSG_ID_MED_RTP_SEND_DTMF_START_REQ,
    MSG_ID_MED_RTP_SEND_DTMF_STOP_REQ,
    MSG_ID_MED_RTP_CHECK_SRTP_PARAM_REQ,
    MSG_ID_MED_RTP_GET_SRTP_PARAM_REQ,
    MSG_ID_MED_RTP_SET_SRTP_PARAM_REQ,
    MSG_ID_MED_RTP_NOTIFY_IND,
    MSG_ID_MED_VOIP_INIT_REQ,
    MSG_ID_MED_VOIP_ENCODING_START_REQ,
    MSG_ID_MED_VOIP_ENCODING_STOP_REQ,
    MSG_ID_MED_VOIP_DECODING_START_REQ,
    MSG_ID_MED_VOIP_DECODING_STOP_REQ,
    MSG_ID_MED_VOIP_L1_ENCODING_CALLBACK_IND,
    MSG_ID_MED_VOIP_GET_VALUE_REQ,
    MSG_ID_MED_VOIP_SET_VALUE_REQ,
    MSG_ID_MED_VOIP_GET_CODEC_CAP_REQ,
    MSG_ID_MED_VOIP_MIXER_ADD_REQ,
    MSG_ID_MED_VOIP_MIXER_REMOVE_REQ,   
    MSG_ID_MED_VOIP_RTP_DISCONNECT_IND,
    MSG_ID_MED_RTP_CODE_END = MSG_ID_MED_VOIP_MIXER_REMOVE_REQ,
    MSG_ID_MEDIA_STREAM_INIT_REQ,
    MSG_ID_MED_STREAM_CODE_BEGIN = MSG_ID_MEDIA_STREAM_INIT_REQ,
    MSG_ID_MEDIA_STREAM_CONNECT_REQ,
    MSG_ID_MEDIA_STREAM_ABORT_REQ,
    MSG_ID_MEDIA_STREAM_FORCE_ABORT_REQ,
    MSG_ID_MEDIA_STREAM_SET_STOP_TIME_REQ,
    MSG_ID_MEDIA_STREAM_SEEK_REQ,
    MSG_ID_MEDIA_STREAM_GET_DL_PERCENTAGE_REQ,
    MSG_ID_MEDIA_STREAM_PLAY_REQ,
    MSG_ID_MEDIA_STREAM_STOP_REQ,
    MSG_ID_MEDIA_STREAM_DISCONNECT_REQ,
    MSG_ID_MEDIA_STREAM_DEINIT_REQ,
    MSG_ID_MEDIA_STREAM_GET_INFO_REQ,
    MSG_ID_MEDIA_STREAM_SET_INFO_REQ,
    MSG_ID_MEDIA_STREAM_SET_AUDIO_LEVEL_REQ,
    MSG_ID_MEDIA_STREAM_SWITCH_SCREEN_VIDEOSTOP_REQ,
    MSG_ID_MEDIA_STREAM_SWITCH_SCREEN_VIDEOSTART_REQ,
    MSG_ID_MEDIA_STREAM_SET_PARAM_REQ,
    MSG_ID_MEDIA_STREAM_GET_PLAYING_TIME_REQ,
    MSG_ID_MEDIA_STREAM_L1_CALLBACK_IND,
    MSG_ID_MEDIA_STREAM_CONNECTED_IND,
    MSG_ID_MEDIA_STREAM_SEEK_IND,
    MSG_ID_MEDIA_STREAM_PLAY_IND,
    MSG_ID_MED_STREAM_CODE_END = MSG_ID_MEDIA_STREAM_PLAY_IND,


    MSG_ID_MEDIA_VCALL_VIDEO_CODEC_OPEN_REQ,
    MSG_ID_MED_VCALL_CODE_BEGIN = MSG_ID_MEDIA_VCALL_VIDEO_CODEC_OPEN_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_CODEC_CLOSE_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_CODEC_REPORT_IND,
    MSG_ID_MEDIA_VCALL_CHANNEL_REPORT_IND,
 
    MSG_ID_MEDIA_VCALL_VIDEO_REPLENISH_DATA_READY_IND,
    MSG_ID_MEDIA_VCALL_VIDEO_ENCODE_DATA_READY_IND,
    MSG_ID_MEDIA_VCALL_VIDEO_DECODE_DATA_READY_IND,
    MSG_ID_MED_VCALL_CODE_END = MSG_ID_MEDIA_VCALL_VIDEO_DECODE_DATA_READY_IND,

     




     





    MSG_ID_MEDIA_MTV_OPEN_REQ, MSG_ID_MEDIA_MTV_CODE_BEGIN = MSG_ID_MEDIA_MTV_OPEN_REQ,

     





    MSG_ID_MEDIA_MTV_CONFIG_REQ,

     





    MSG_ID_MEDIA_MTV_FIND_UNSAVED_RECORDING_REQ,

     





    MSG_ID_MEDIA_MTV_RECOVER_RECORDING_REQ,

     





    MSG_ID_MEDIA_MTV_ABORT_RECOVERING_REQ,

     





    MSG_ID_MEDIA_MTV_DISCARD_UNSAVED_RECORDING_REQ,

     





    MSG_ID_MEDIA_MTV_COMPLETE_RECOVERING_IND,

     





    MSG_ID_MEDIA_MTV_SEARCH_SERVICES_REQ,

     





    MSG_ID_MEDIA_MTV_SEARCH_PROGRESS_IND,

     





    MSG_ID_MEDIA_MTV_ABORT_SEARCHING_REQ,

     







    MSG_ID_MEDIA_MTV_SERVICE_FOUND_IND,

     





    MSG_ID_MEDIA_MTV_START_SERVICE_REQ,

     





    MSG_ID_MEDIA_MTV_SERVICE_EVENT_IND,

     





    MSG_ID_MEDIA_MTV_PLAYER_PLAY_REQ,

     





    MSG_ID_MEDIA_MTV_PLAYER_PAUSE_REQ,

     





    MSG_ID_MEDIA_MTV_PLAYER_STOP_REQ,

     





    MSG_ID_MEDIA_MTV_PLAYER_SEEK_REQ,

     





    MSG_ID_MEDIA_MTV_PLAYER_SET_RATE_REQ,

     





    MSG_ID_MEDIA_MTV_PLAYER_SNAPSHOT_REQ,

     





    MSG_ID_MEDIA_MTV_PLAYER_GET_STATUS_REQ,

     





    MSG_ID_MEDIA_MTV_PLAYER_EVENT_IND,

     





    MSG_ID_MEDIA_MTV_RECORDER_START_REQ,

     





    MSG_ID_MEDIA_MTV_RECORDER_STOP_REQ,

     





    MSG_ID_MEDIA_MTV_RECORDER_SAVE_REQ,

     





    MSG_ID_MEDIA_MTV_RECORDER_ABORT_SAVING_REQ,

     





    MSG_ID_MEDIA_MTV_RECORDER_DISCARD_RECORDING_REQ,

     





    MSG_ID_MEDIA_MTV_RECORDER_GET_STATUS_REQ,

     





    MSG_ID_MEDIA_MTV_RECORDER_EVENT_IND,

     





    MSG_ID_MEDIA_MTV_SET_PARAM_REQ,

     





    MSG_ID_MEDIA_MTV_GET_PARAM_REQ,

     





    MSG_ID_MEDIA_MTV_SERVICE_GET_STATUS_REQ,

     





    MSG_ID_MEDIA_MTV_STOP_SERVICE_REQ,

     





    MSG_ID_MEDIA_MTV_CLOSE_REQ,

     


    MSG_ID_MEDIA_MTV_ASYNC_WRITE,

     


    MSG_ID_MEDIA_MTV_ASYNC_CALLBACK, MSG_ID_MEDIA_MTV_CODE_END = MSG_ID_MEDIA_MTV_ASYNC_CALLBACK,
    
     

    MSG_ID_MED_CODE_END = MSG_ID_MEDIA_MTV_CODE_END,

 

#line 374 "adaptation\include\stack_msgs.h"
   MSG_ID_MED_CODE_CHECK_POINT,






   #line 1 "interface\ps\abm_sap.h"
 

































  









  






















































	 
	 
   MSG_ID_SOC_ABM_ACTIVATE_REQ = MSG_ID_ABM_CODE_BEGIN,
   MSG_ID_SOC_ABM_DEACTIVATE_REQ,
   MSG_ID_SOC_ABM_IPADDR_CONFLICT_IND,

    
   MSG_ID_L4C_PS_ABM_SETUP_RSP,
   MSG_ID_L4C_PS_ABM_DISC_RSP,
   MSG_ID_L4C_PS_ABM_DISC_IND,

   MSG_ID_L4C_CC_ABM_SETUP_RSP,
   MSG_ID_L4C_CC_ABM_DISC_RSP,
   MSG_ID_L4C_CC_ABM_DISC_IND,

   MSG_ID_L4CABM_START_REQ,
   MSG_ID_L4CABM_GET_GPRS_ACCOUNT_INFO_REQ,
   MSG_ID_L4CABM_SET_GPRS_ACCOUNT_INFO_REQ,

    
   MSG_ID_MMI_ABM_WIFI_INIT_CNF,
   MSG_ID_MMI_ABM_WIFI_DEINIT_CNF,
   MSG_ID_MMI_ABM_WIFI_CONNECT_CNF,
   MSG_ID_MMI_ABM_WIFI_DISCONNECT_CNF,
   MSG_ID_MMI_ABM_WIFI_AP_LIST_CNF,
   MSG_ID_MMI_ABM_WIFI_ACTIVATE_REQ_IND,
   MSG_ID_MMI_ABM_WIFI_DEACTIVATE_REQ_IND,
   MSG_ID_MMI_ABM_WIFI_CONNECT_IND,
   MSG_ID_MMI_ABM_WIFI_DISCONNECT_IND,
   MSG_ID_MMI_ABM_IPADDR_UPDATE_IND,
   MSG_ID_MMI_ABM_IPADDR_CONFLICT_IND,
   MSG_ID_MMI_ABM_IPADDR_CHANGE_CNF,

    
   MSG_ID_MMI_ABM_WIFI_INIT_REQ,
   MSG_ID_MMI_ABM_WIFI_DEINIT_REQ,
   MSG_ID_MMI_ABM_WIFI_CONNECT_REQ,
   MSG_ID_MMI_ABM_WIFI_DISCONNECT_REQ,
   MSG_ID_MMI_ABM_WIFI_AP_LIST_REQ,
   MSG_ID_MMI_ABM_WIFI_ACTIVATE_REQ_REJ,
   MSG_ID_MMI_ABM_WIFI_DEACTIVATE_REQ_REJ,
   MSG_ID_MMI_ABM_IPADDR_CHANGE_REQ,
   
   
   MSG_ID_MMI_ABM_CSD_CALL_APPROVE_REQ,
   MSG_ID_MMI_ABM_CSD_CALL_APPROVE_CNF,
   MSG_ID_ABM_L4C_GET_CSD_CALL_NUM_RSP,
   

    
   MSG_ID_SUPC_ABM_WIFI_INIT_CNF,
   MSG_ID_SUPC_ABM_WIFI_DEINIT_CNF,
   MSG_ID_SUPC_ABM_WIFI_CONNECT_CNF,
   MSG_ID_SUPC_ABM_WIFI_CONNECT_IND,
   MSG_ID_SUPC_ABM_WIFI_DISCONNECT_CNF,
   MSG_ID_SUPC_ABM_WIFI_DISCONNECT_IND,
   MSG_ID_SUPC_ABM_WIFI_AP_LIST_CNF,


   MSG_ID_ABM_CODE_END = MSG_ID_SUPC_ABM_WIFI_AP_LIST_CNF,
	 


#line 382 "adaptation\include\stack_msgs.h"
   MSG_ID_ABM_CODE_CHECK_POINT,

   #line 1 "interface\ps\soc_sap.h"
 


































 

     
    MSG_ID_SOC_TCPIP_ACCEPT_IND = MSG_ID_SOC_CODE_BEGIN,
    MSG_ID_SOC_TCPIP_RECEIVE_IND,
    MSG_ID_SOC_TCPIP_ATTACH_CNF,
    MSG_ID_SOC_TCPIP_DETACH_CNF,
    MSG_ID_SOC_TCPIP_LISTEN_CNF,
    MSG_ID_SOC_TCPIP_BIND_CNF,
    MSG_ID_SOC_TCPIP_CONNECT_CNF,
    MSG_ID_SOC_TCPIP_DISCONNECT_CNF,
    MSG_ID_SOC_TCPIP_ERRMSG_IND, 
    MSG_ID_SOC_TCPIP_MTU_UPDATE_IND,
    MSG_ID_SOC_TCPIP_CLOSE_IND,
    MSG_ID_SOC_TCPIP_OPTION_CNF,
    MSG_ID_SOC_TCPIP_SHUTDOWN_CNF,
   
        
    MSG_ID_APP_SOC_NOTIFY_IND, 
    MSG_ID_APP_SOC_GET_HOST_BY_NAME_IND,
    MSG_ID_APP_SOC_GET_HOST_BY_ADDR_IND,
    MSG_ID_APP_SOC_GET_HOST_BY_SRV_IND,
    MSG_ID_APP_SOC_GET_HOST_BY_NAPTR_IND, 
    MSG_ID_APP_SOC_BEARER_INFO_IND, 
    MSG_ID_APP_SOC_DEACTIVATE_CNF,

     
    MSG_ID_APP_SOC_DEACTIVATE_REQ,   

     
    MSG_ID_SMSAL_SOC_REG_PORT_CNF, 
    MSG_ID_SMSAL_SOC_DATA_IND,

     
    MSG_ID_FLC_SOC_UL_SSPDU_RESUME,

        
    MSG_ID_SOC_ABM_ACTIVATE_CNF,
    MSG_ID_SOC_ABM_ACTIVATE_IND,
    MSG_ID_SOC_ABM_DEACTIVATE_CNF,
    MSG_ID_SOC_ABM_DEACTIVATE_IND,
    MSG_ID_SOC_ABM_IPADDR_UPDATE_IND, 
    
     

    MSG_ID_APP_SSL_DATA_INPUT_MSG,
    MSG_ID_APP_SSL_DATA_OUTPUT_MSG,
    

     
    MSG_ID_MMI_SOC_ASK_ACCT_IND,
    
     
    MSG_ID_MMI_SOC_ASK_ACCT_CNF,
        
    MSG_ID_SOC_CODE_END = MSG_ID_MMI_SOC_ASK_ACCT_CNF,
 

#line 385 "adaptation\include\stack_msgs.h"
   MSG_ID_SOC_CODE_CHECK_POINT,

   #line 1 "interface\ps\tcpip_sap.h"
 

































  









  

























 
    MSG_ID_SOC_TCPIP_BEARER_REQ = MSG_ID_TCPIP_CODE_BEGIN,
    MSG_ID_SOC_TCPIP_ATTACH_REQ,
    MSG_ID_SOC_TCPIP_BIND_REQ,
    MSG_ID_SOC_TCPIP_CONNECT_REQ,
    MSG_ID_SOC_TCPIP_DISCONNECT_REQ,
    MSG_ID_SOC_TCPIP_LISTEN_REQ,
    MSG_ID_SOC_TCPIP_ACCEPT_RES,
    MSG_ID_SOC_TCPIP_SEND_REQ,
    MSG_ID_SOC_TCPIP_DETACH_REQ,
    MSG_ID_SOC_TCPIP_SHUTDOWN_REQ,	
    MSG_ID_SOC_TCPIP_SRPDU_RELEASE_RES,
    MSG_ID_SOC_TCPIP_OPTION_REQ,
    MSG_ID_TCPIP_TCM_DATA_IND,
    MSG_ID_TCPIP_PPP_DATA_IND,
    MSG_ID_SOC_TCPIP_SET_ACCT_REQ, 

     
    MSG_ID_DHCP_TCPIP_ARP_PROBE_REQ,
    MSG_ID_DHCP_TCPIP_ARP_PROBE_CNF,
    MSG_ID_DHCP_TCPIP_ARP_QUERY_REQ,
    MSG_ID_DHCP_TCPIP_ARP_QUERY_CNF,
    MSG_ID_DHCP_TCPIP_GW_ARP_PROBE_REQ,
    MSG_ID_DHCP_TCPIP_GW_ARP_PROBE_CNF,


     
    MSG_ID_ABM_TCPIP_GET_BEARER_INFO_REQ,
    MSG_ID_ABM_TCPIP_GET_BEARER_INFO_CNF,
    
    
     
    MSG_ID_TCPIP_WNDRV_DATA_IND,

     
    MSG_ID_FLC_TCPIP_UL_TPDU_RESUME,
    MSG_ID_SOC_TCPIP_DL_SRPDU_RESUME,
    MSG_ID_SOC_DL_SRPDU_HIGH_THRESHOLD_HIT,
		
    MSG_ID_TCPIP_CODE_END = MSG_ID_SOC_DL_SRPDU_HIGH_THRESHOLD_HIT,
 

#line 388 "adaptation\include\stack_msgs.h"
   MSG_ID_TCPIP_CODE_CHECK_POINT,

   #line 1 "interface\wap\wap_sap.h"
 

































  









  




























































































































































































































    MSG_ID_WAP_STATUS_UPDATE_IND = MSG_ID_WAP_CODE_BEGIN,
    
    MSG_ID_WAP_PROF_ACCESS_REQ,
    MSG_ID_WAP_BROWSER_POWEROFF_REQ,
    MSG_ID_WAP_BROWSER_POWEROFF_RSP,	
    MSG_ID_WAP_BROWSER_STARTUP_REQ,
    MSG_ID_WAP_MMI_READY_IND,
    MSG_ID_WAP_INTERNAL_ERROR_IND,
    MSG_ID_WAP_BROWSER_SHUTDOWN_REQ,
    MSG_ID_WAP_RESTORE_FACTORY_SETTING_REQ,
    MSG_ID_WAP_RESTORE_FACTORY_SETTING_CNF,	
    MSG_ID_MEA_STARTUP_REQ,
    MSG_ID_MEA_STARTUP_NEW_MMS_REQ,
    MSG_ID_MEA_UM_ENTRY_REQ,
    MSG_ID_MEA_PHB_ADDR_INPUT_IND,
    MSG_ID_WAP_PHB_ADDR_INPUT_IND = MSG_ID_MEA_PHB_ADDR_INPUT_IND,
    MSG_ID_MEA_SHUTDOWN_REQ,
    MSG_ID_MMS_ENTER_USB_MODE_REQ,
    MSG_ID_MMS_ENTER_USB_MODE_RSP,
    MSG_ID_MMS_EXIT_USB_MODE_REQ,
    MSG_ID_MMS_EXIT_USB_MODE_RSP,
    MSG_ID_MMS_GET_ACTIVE_MMS_ATTACHMENT_REQ,
    MSG_ID_MMS_GET_ACTIVE_MMS_ATTACHMENT_RSP,
    MSG_ID_WAP_MMI_KEY_INDICATION,
    MSG_ID_WAP_MMI_LAUNCH_BROWSER_REQ,
    MSG_ID_WAP_MMI_LAUNCH_BROWSER_RSP,
    MSG_ID_WAP_MMI_BROWSER_TERMINATION_IND,
    MSG_ID_WAP_MMI_JAVA_INTALL_REQ,
    MSG_ID_WAP_GET_PROF_LIST_REQ,
    MSG_ID_WAP_GET_PROF_LIST_RSP,
    MSG_ID_WAP_GET_PROF_CONTENT_REQ,
    MSG_ID_WAP_GET_PROF_CONTENT_RSP,	
    MSG_ID_WAP_GET_BRA_PROF_ID_REQ,	
    MSG_ID_WAP_GET_BRA_PROF_ID_RSP,	
    MSG_ID_WAP_GET_USER_AGENT_REQ,
    MSG_ID_WAP_GET_USER_AGENT_RSP,
    MSG_ID_WAP_READY_IND,
    MSG_ID_WAP_BEARER_STATUS_IND,
    MSG_ID_WAP_SELECT_BOOKMARK_REQ,
    MSG_ID_WAP_SELECT_BOOKMARK_RSP,
    MSG_ID_WAP_SIM_INFO_NOTIFY_IND,
    
    MSG_ID_WAP_MMC_SEND_APPMMS_REQ,
    MSG_ID_WAP_MMC_SEND_APPMMS_RSP,
    MSG_ID_WAP_MMC_POST_APPMMS_MSG_PART_IND,
    MSG_ID_WAP_MMC_POST_APPMMS_MSG_PART_RES,
    MSG_ID_WAP_MMC_RECV_APPMMS_REQ,
    MSG_ID_WAP_MMC_RECV_APPMMS_RSP,
    MSG_ID_WAP_MMC_READ_APPMMS_MSG_PART_REQ,
    MSG_ID_WAP_MMC_READ_APPMMS_MSG_PART_RSP,
    MSG_ID_WAP_MMC_CFG_APPMMS_APPID_REQ,
    MSG_ID_WAP_MMC_CFG_APPMMS_APPID_RSP,
    MSG_ID_WAP_MMC_ABORT_APPMMS_REQ,
    MSG_ID_WAP_MMC_ABORT_APPMMS_RSP,
    MSG_ID_WAP_MMC_CHECK_APPMMS_COMING_REQ,
    MSG_ID_WAP_MMC_CHECK_APPMMS_COMING_RSP,	
    MSG_ID_WAP_MMC_GET_MMS_PROF_REQ,
    MSG_ID_WAP_MMC_GET_MMS_PROF_RSP,
    MSG_ID_WAP_MMC_APPMMS_NEW_MMS_IND,
    MSG_ID_WAP_MMA_TERMINATE_IND,
    MSG_ID_WAP_MMA_UM_ENTRY_REQ,
    MSG_ID_WAP_MMA_UC_START_REQ,
    MSG_ID_WAP_MMA_UC_START_RSP,
    MSG_ID_WAP_MMA_GET_SETTING_REQ,
    MSG_ID_WAP_MMA_GET_SETTING_RSP,
    MSG_ID_WAP_MMA_SET_SETTING_REQ,
    MSG_ID_WAP_MMA_SET_SETTING_RSP,
    MSG_ID_WAP_MMA_GET_PROFILE_REQ,
    MSG_ID_WAP_MMA_GET_PROFILE_RSP,    
    MSG_ID_WAP_MMA_GET_MEM_STATUS_REQ,
    MSG_ID_WAP_MMA_GET_MEM_STATUS_RSP,
    MSG_ID_WAP_MMA_SET_PROFILE_REQ,
    MSG_ID_WAP_MMA_SET_PROFILE_RSP,
    MSG_ID_WAP_MMA_GET_CONTENT_REQ,
    MSG_ID_WAP_MMA_GET_CONTENT_RSP,
    MSG_ID_WAP_MMA_CREATE_REQ,
    MSG_ID_WAP_MMA_CREATE_RSP,
    MSG_ID_WAP_MMA_DELETE_REQ,
    MSG_ID_WAP_MMA_DELETE_RSP,
    MSG_ID_WAP_MMA_SAVE_REQ,
    MSG_ID_WAP_MMA_SAVE_RSP,
    MSG_ID_WAP_MMA_PREVIEW_REQ,
    MSG_ID_WAP_MMA_PREVIEW_RSP,
    MSG_ID_WAP_MMA_SEND_REQ,
    MSG_ID_WAP_MMA_SEND_IND,
    MSG_ID_WAP_MMA_SEND_RSP,
    MSG_ID_WAP_MMA_CANCEL_SEND_REQ,
    MSG_ID_WAP_MMA_CANCEL_SEND_RSP,
    MSG_ID_WAP_MMA_DOWNLOAD_REQ,
    MSG_ID_WAP_MMA_DOWNLOAD_RSP,
    MSG_ID_WAP_MMA_DOWNLOAD_IND,
    MSG_ID_WAP_MMA_DOWNLOAD_RES,
    MSG_ID_WAP_MMA_CANCEL_DOWNLOAD_REQ,
    MSG_ID_WAP_MMA_CANCEL_DOWNLOAD_RSP,
    MSG_ID_WAP_MMA_GET_MSG_INFO_REQ,
    MSG_ID_WAP_MMA_GET_MSG_INFO_RSP,
    MSG_ID_WAP_MMA_SET_READMARK_REQ,
    MSG_ID_WAP_MMA_SET_READMARK_RSP,
    MSG_ID_WAP_MMA_START_IMMED_RETRIEVAL_IND,
    MSG_ID_WAP_MMA_STOP_IMMED_RETRIEVAL_IND,
    MSG_ID_WAP_MMA_SET_APP_DATA_REQ,
    MSG_ID_WAP_MMA_SET_APP_DATA_RSP,
    MSG_ID_WAP_MMA_GET_MSG_LIST_REQ,
    MSG_ID_WAP_MMA_GET_MSG_LIST_RSP,    
    MSG_ID_WAP_MMA_STORAGE_FULL_IND,
    MSG_ID_WAP_MMA_VIEW_MSG_IND,    
    MSG_ID_WAP_MMA_MSG_IS_VALID_REQ,
    MSG_ID_WAP_MMA_MSG_IS_VALID_RSP,
    
    #line 1 "interface\wap\bam_sap.h"




	MSG_ID_WAP_BAM_READY_IND,
	MSG_ID_WAP_BAM_CREATE_INSTANCE_REQ,
	MSG_ID_WAP_BAM_CREATE_INSTANCE_CNF,
	MSG_ID_WAP_BAM_DELETE_INSTANCE_REQ,
	MSG_ID_WAP_BAM_DELETE_INSTANCE_CNF,
	MSG_ID_WAP_BAM_RESIZE_WINDOW_REQ,
	MSG_ID_WAP_BAM_LOAD_URL_REQ,
	MSG_ID_WAP_BAM_LOAD_DATA_REQ,
	MSG_ID_WAP_BAM_ACTIVATE_DO_ELEMENT_REQ,
	MSG_ID_WAP_BAM_MOVE_REQ,
	MSG_ID_WAP_BAM_RELOAD_REQ,
	MSG_ID_WAP_BAM_STOP_REQ,
	MSG_ID_WAP_BAM_NAVIGATION_CHANGE_REQ,
	MSG_ID_WAP_BAM_SAVE_PAGE_REQ,
	MSG_ID_WAP_BAM_SAVE_PAGE_CNF,
	MSG_ID_WAP_BAM_GET_SAVED_PAGE_REQ,
	MSG_ID_WAP_BAM_LOAD_SAVED_PAGE_REQ,
	MSG_ID_WAP_BAM_DELETE_SAVED_PAGE_REQ,
	MSG_ID_WAP_BAM_DELETE_ALL_SAVED_PAGES_REQ,
	MSG_ID_WAP_BAM_RENAME_SAVED_PAGE_REQ,
	MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_START_REQ,
	MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_START_CNF,
	MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_CONTINUE_REQ,
	MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_CONTINUE_CNF,
	MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_END_REQ,
	MSG_ID_WAP_BAM_GET_RESOURCES_LIST_START_REQ,
	MSG_ID_WAP_BAM_GET_RESOURCES_LIST_START_CNF,
	MSG_ID_WAP_BAM_GET_RESOURCES_LIST_CONTINUE_REQ,
	MSG_ID_WAP_BAM_GET_RESOURCES_LIST_CONTINUE_CNF,
	MSG_ID_WAP_BAM_GET_RESOURCES_LIST_END_REQ,
	MSG_ID_WAP_BAM_GET_RESOURCE_REQ,
	MSG_ID_WAP_BAM_GET_RESOURCE_CNF,
	MSG_ID_WAP_BAM_ACTIVATE_RESOURCE_REQ,
	MSG_ID_WAP_BAM_NAVIGATE_TO_HOTSPOT_REQ,
	MSG_ID_WAP_BAM_STATUS_IND,
	MSG_ID_WAP_BAM_ERROR_IND,
	MSG_ID_WAP_BAM_DOCUMENT_INFO_IND,
	MSG_ID_WAP_BAM_DO_ELEMENTS_IND,
	MSG_ID_WAP_BAM_ELEMENT_FOCUSED_IND,
	MSG_ID_WAP_BAM_SET_SEC_CLASS_IND,
	MSG_ID_WAP_BAM_CHANGE_SETTING_VALUE_REQ,
	MSG_ID_WAP_BAM_CHANGE_SETTING_VALUE_IND,
	MSG_ID_WAP_BAM_SET_PROFILE_REQ,
	MSG_ID_WAP_BAM_SET_PROFILE_CNF,
	MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_START_REQ,
	MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_START_CNF,
	MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_CONTINUE_REQ,
	MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_CONTINUE_CNF,
	MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_END_REQ,
	MSG_ID_WAP_BAM_GET_RECENT_PAGE_REQ,
	MSG_ID_WAP_BAM_LOAD_RECENT_PAGE_REQ,
	MSG_ID_WAP_BAM_DELETE_RECENT_PAGE_REQ,
	MSG_ID_WAP_BAM_DELETE_ALL_RECENT_PAGES_REQ,
	MSG_ID_WAP_BAM_RECENT_PAGE_CNF,
	MSG_ID_WAP_BAM_WTAI_TEL_IND,
	MSG_ID_WAP_BAM_WTAI_TEL_RSP,
	MSG_ID_WAP_BAM_WTAI_PB_IND,
	MSG_ID_WAP_BAM_WTAI_PB_RSP,
	MSG_ID_WAP_BAM_URI_REQUEST_IND,
	MSG_ID_WAP_BAM_URI_REQUEST_RSP,
	MSG_ID_WAP_BAM_BEARER_INFO_IND,
	MSG_ID_WAP_BAM_REGISTER_KEYPAD_HANDLER_REQ,
	MSG_ID_WAP_BAM_HANDLE_PEN_EVENT_REQ,
	MSG_ID_WAP_BAM_SUSPEND_OWL_RENDERING_REQ,
	MSG_ID_WAP_BAM_RESUME_OWL_RENDERING_REQ,
	MSG_ID_WAP_BAM_NOTIFY_SCREEN_INFO_REQ,
	MSG_ID_WAP_BAM_WAIT_USER_ACTION_IND,
	MSG_ID_WAP_BAM_WAIT_USER_ACTION_RSP,
	MSG_ID_WAP_BAM_OBJECT_ACTION_REQ,
	MSG_ID_WAP_BAM_SHOW_AUTH_DIALOG_IND,
	MSG_ID_WAP_BAM_SHOW_AUTH_DIALOG_RSP,



#line 376 "interface\wap\wap_sap.h"
    #line 1 "interface\wap\pmg_sap.h"
    MSG_ID_WAP_PMG_CONFIG_REQ,
    MSG_ID_WAP_PMG_CONFIG_CNF,
    MSG_ID_WAP_PMG_TRUST_ADDR_LIST_REQ,
    MSG_ID_WAP_PMG_TRUST_ADDR_LIST_CNF,
    MSG_ID_WAP_PMG_NEW_MSG_IND,
    MSG_ID_WAP_PMG_NEW_MSG_RSP,
    MSG_ID_WAP_PMG_DELETE_IND,
    MSG_ID_WAP_PMG_REPLACE_IND,
    MSG_ID_WAP_PMG_MSG_COUNT_REQ,
    MSG_ID_WAP_PMG_MSG_COUNT_CNF,
    MSG_ID_WAP_PMG_MSG_LIST_REQ,
    MSG_ID_WAP_PMG_MSG_LIST_CNF,
    MSG_ID_WAP_PMG_GET_MSG_REQ,
    MSG_ID_WAP_PMG_GET_MSG_CNF,
    MSG_ID_WAP_PMG_GET_MSG_INFOTAG_REQ,
    MSG_ID_WAP_PMG_GET_MSG_INFOTAG_CNF,
    MSG_ID_WAP_PMG_DELETE_MSG_REQ,
    MSG_ID_WAP_PMG_DELETE_MSG_CNF,
    MSG_ID_WAP_PMG_DELETE_ALL_REQ,
    MSG_ID_WAP_PMG_DELETE_ALL_CNF,
    MSG_ID_WAP_PMG_UPDATE_MSG_REQ,
    MSG_ID_WAP_PMG_UPDATE_MSG_CNF,
    MSG_ID_WAP_PMG_DLG_SIA_CONFIRM_REQ,
    MSG_ID_WAP_PMG_DLG_SIA_CONFIRM_CNF,
    MSG_ID_WAP_PMG_DLG_UNKNOWN_ADDR_REQ,
    MSG_ID_WAP_PMG_DLG_UNKNOWN_ADDR_CNF,
    MSG_ID_WAP_PMG_DLG_PUSH_STORAGE_FULL_IND,
#line 377 "interface\wap\wap_sap.h"
    
    MSG_ID_WPS_SET_CHANNEL_REQ,	
    MSG_ID_WPS_SET_CHANNEL_RSP,
    MSG_ID_WPS_UNSET_CHANNEL_REQ,
    MSG_ID_WPS_UNSET_CHANNEL_RSP,
    MSG_ID_WPS_RECONFIG_CHANNEL_REQ,	
    MSG_ID_WPS_RECONFIG_CHANNEL_RSP,
    MSG_ID_WPS_HTTP_REQ,
    MSG_ID_WPS_HTTP_RSP,
    MSG_ID_WPS_READ_CONTENT_REQ,
    MSG_ID_WPS_READ_CONTENT_RSP,
    MSG_ID_WPS_POST_CONTENT_IND,
    MSG_ID_WPS_POST_CONTENT_RES,
    MSG_ID_WPS_DL_PROGRESS_IND,
    MSG_ID_WPS_DL_PROGRESS_RES,
    MSG_ID_WPS_CANCEL_REQ,
    MSG_ID_WPS_CANCEL_RSP,
    MSG_ID_WPS_PUSH_IND,
    MSG_ID_WPS_CLEAR_REQ,
    MSG_ID_WPS_CLEAR_RSP,
    MSG_ID_WPS_CREATE_STREAM_CONNECTION_REQ,
    MSG_ID_WPS_CREATE_STREAM_CONNECTION_RSP,
    MSG_ID_WPS_STREAM_CONNECTION_CLOSED_IND,
    MSG_ID_WPS_CLOSE_STREAM_CONNECTION_REQ,
    MSG_ID_WPS_CLOSE_STREAM_CONNECTION_RSP,
    MSG_ID_WPS_STREAM_DATA_SEND_REQ,
    MSG_ID_WPS_STREAM_DATA_SEND_RSP,
    MSG_ID_WPS_STREAM_DATA_READ_REQ,
    MSG_ID_WPS_STREAM_DATA_READ_RSP,
    MSG_ID_WPS_EXT_MSG_IND,
    MSG_ID_WPS_READY_IND,
    MSG_ID_WPS_SEC_GET_SESSION_INFO_REQ,
    MSG_ID_WPS_SEC_GET_SESSION_INFO_RSP,
    MSG_ID_WPS_SEC_GET_CURRENT_CERT_REQ,
    MSG_ID_WPS_SEC_GET_CURRENT_CERT_RSP,  
    MSG_ID_WPS_HTTP_AUTH_IND,
    MSG_ID_WPS_HTTP_AUTH_RES,
    MSG_ID_WPS_STATUS_QUERY_REQ,
    MSG_ID_WPS_STATUS_QUERY_RSP,          
    MSG_ID_WAP_MMI_FILE_DL_IND,
    MSG_ID_WAP_MMI_FILE_DL_RES,
    MSG_ID_WAP_MMI_FILE_DL_PROGRESS_IND,
    MSG_ID_WAP_MMI_FILE_DL_PROGRESS_RES,
    MSG_ID_WAP_MMI_FILE_DL_STOP_REQ,
    MSG_ID_WAP_MMI_FILE_DL_STOP_RSP,
    MSG_ID_WPS_JATAAYU_TRANSPORT_START_IND, 
    MSG_ID_WPS_JATAAYU_QUEUE_RECV_IND,    
    MSG_ID_MMS_BGSR_SEND_RSP,
    MSG_ID_MMS_BGSR_DOWNLOAD_RSP,
    MSG_ID_MMS_BGSR_CANCEL_SEND_RSP,
    MSG_ID_MMS_BGSR_CANCEL_DOWNLOAD_RSP,    
    MSG_ID_MMS_BGSR_NAV_ACTIVATE_BGSR_RSP,
    MSG_ID_MMS_BGSR_DELETE_MSG_RSP,
    MSG_ID_MMS_BGSR_DELETE_ALL_INBOX_RSP,
    MSG_ID_MMS_BGSR_CANCEL_ALL_INBOX_RSP,
    MSG_ID_MMS_BGSR_DELETE_ALL_OUTBOX_RSP,    
    MSG_ID_MMS_BGSR_MOVE_TO_FOLDER_RSP,
    MSG_ID_WPS_SEC_VERIFY_CERT_CHAIN_REQ,
    MSG_ID_WPS_SEC_VERIFY_CERT_CHAIN_RSP,   
    MSG_ID_WPS_SEC_DELETE_CA_CERT_REQ,
    MSG_ID_WPS_SEC_DELETE_CA_CERT_RSP,  
    MSG_ID_WPS_SEC_SHOW_CONFIRM_DIALOG_IND,
    MSG_ID_WPS_SEC_SHOW_CONFIRM_DIALOG_RES,  
    MSG_ID_WPS_SEC_GET_X509_CA_CERT_REQ,
    MSG_ID_WPS_SEC_GET_X509_CA_CERT_IND,
    MSG_ID_WPS_SEC_GET_X509_CA_CERT_RSP,   
    MSG_ID_WPS_SEC_GET_CERT_IDS_REQ,
    MSG_ID_WPS_SEC_GET_CERT_IDS_RSP,   
    MSG_ID_WPS_SEC_GET_CERT_REQ,   
    MSG_ID_WPS_SEC_GET_CERT_RSP,   
    MSG_ID_WAP_CODE_END = MSG_ID_WPS_SEC_GET_CERT_RSP,
    
    
#line 391 "adaptation\include\stack_msgs.h"
   MSG_ID_WAP_CODE_CHECK_POINT,

   #line 1 "interface\ps\em_sap.h"
 

































  









  
















































 








 
 	 
 	  	
 	MSG_ID_L4CPS_EM_START_REQ = MSG_ID_EM_CODE_BEGIN,
	MSG_ID_L4CPS_EM_STOP_REQ,
	
	 
	MSG_ID_L4CPS_EM_CELL_RESEL_SUSPEND_REQ,   
	MSG_ID_L4CPS_EM_CELL_RESEL_SUSPEND_CNF,   

	MSG_ID_L4CPS_EM_CELL_RESEL_RESUME_REQ,     
	MSG_ID_L4CPS_EM_CELL_RESEL_RESUME_CNF,     
	
        
	MSG_ID_L4CPS_EM_SET_CELL_LOCK_REQ,
       MSG_ID_L4CPS_EM_SET_CELL_LOCK_CNF,
       
	MSG_ID_L4CPS_EM_GET_CELL_LOCK_REQ,
       MSG_ID_L4CPS_EM_GET_CELL_LOCK_CNF,

	 
	MSG_ID_L4CPS_EM_FEATURE_COMMAND_REQ,
	MSG_ID_L4CPS_EM_FEATURE_COMMAND_CNF,

     

     	
   MSG_ID_L4CPS_EM_SET_CELL_ID_LOCK_REQ,
     	
   MSG_ID_L4CPS_EM_SET_CELL_ID_LOCK_CNF,

     

	 
	MSG_ID_TSTL4C_EM_START_REQ, 
	MSG_ID_TSTL4C_EM_STOP_REQ,
	
	 
	MSG_ID_L4CPS_EM_NW_EVENT_NOTIFY_REQ,
	MSG_ID_L4CPS_EM_NW_EVENT_NOTIFY_CNF,
	MSG_ID_L4CPS_EM_NW_EVENT_NOTIFY_IND,		
	
	  	
	MSG_ID_L4CPS_EM_START_CNF,
	MSG_ID_L4CPS_EM_STOP_CNF,
	MSG_ID_L4CPS_EM_STATUS_IND,		
	
	MSG_ID_EM_CODE_END = MSG_ID_L4CPS_EM_STATUS_IND,
	 

#line 394 "adaptation\include\stack_msgs.h"
   MSG_ID_EM_CODE_CHECK_POINT,

   #line 1 "interface\ps\irda_sap.h"
 

































 









  
















 
 
	 
	 

	 
	 
	MSG_ID_LAP_CONNECT_REQUEST=MSG_ID_IRDA_CODE_BEGIN,
	MSG_ID_LAP_DISCOVERY_REQUEST,
	MSG_ID_LAP_DATA_REQUEST,
	MSG_ID_LAP_DISCONNECT_REQUEST,
	MSG_ID_LAP_CONNECT_RESPONSE,

	
	 
	MSG_ID_LAP_DISCOVERY_INDICATION,
	MSG_ID_LAP_DISCOVERY_CONFIRM,
	MSG_ID_LAP_CONNECT_INDICATION,
	MSG_ID_LAP_CONNECT_CONFIRM,
	MSG_ID_LAP_DATA_INDICATION,
	MSG_ID_LAP_DISCONNECT_INDICATION,
	MSG_ID_LAP_DISCOVERY_MEDIA_BUSY_ERROR,
	
	 
	MSG_ID_TTP_DATA_REQUEST,
	MSG_ID_TTP_CONNECT_REQUEST,
	MSG_ID_TTP_CONNECT_RESPONSE,
	MSG_ID_TTP_DISCONNECT_REQUEST,

	 
	MSG_ID_LMP_DATA_REQUEST,
	MSG_ID_LMP_CONNECT_REQUEST,
	MSG_ID_LMP_CONNECT_RESPONSE,
	MSG_ID_LMP_DISCONNECT_REQUEST,			 
	MSG_ID_LMP_LINK_DISCONNECT_REQUEST,		 
	MSG_ID_IAS_GET_REMOTE_LSAP_SEL,			
	
	 
	MSG_ID_LMP_DATA_INDICATION,
	MSG_ID_LMP_CONNECT_INDICATION,
	MSG_ID_LMP_CONNECT_CONFIRM,
	MSG_ID_LMP_LSAP_DISCONNECT_INDICATION,		 
	MSG_ID_LMP_LINK_DISCONNECT_INDICATION,		 
	MSG_ID_IRDA_CLOSE_IND,
	
	MSG_ID_TTP_DATA_INDICATION,
	MSG_ID_TTP_CONNECT_INDICATION,
	MSG_ID_TTP_CONNECT_CONFIRM,
	MSG_ID_TTP_LSAP_DISCONNECT_INDICATION,		 
	
	MSG_ID_IAS_GET_REMOTE_LSAP_SEL_CONFIRM,	
	
	MSG_ID_IRDA_OPEN,
	MSG_ID_IRDA_CLOSE,
	 
   MSG_ID_IRDA_READY_TO_WRITE_IND,
   MSG_ID_IRDA_END_OF_DISCOVERY_IND,        
   MSG_ID_FLC_LMP_IRPDU_HIGH_THRESHOLD_HIT,
	MSG_ID_IRAP_LMP_DL_IRPDU_RESUME,        
 

#line 397 "adaptation\include\stack_msgs.h"
   MSG_ID_IRDA_CODE_CHECK_POINT,

   #line 1 "interface\ps\obex_sap.h"
 

































  









  






































 
  
	MSG_ID_OBEX_CONNECT_REQ = MSG_ID_OBEX_CODE_BEGIN,
      
   MSG_ID_OBEX_CONNECT_CNF,
   MSG_ID_OBEX_CONNECT_IND,
   MSG_ID_OBEX_CONNECT_RSP,
   MSG_ID_OBEX_DISCONNECT_REQ,
   MSG_ID_OBEX_DISCONNECT_IND,
   MSG_ID_OBEX_PUT_OBJECT_REQ,
   MSG_ID_OBEX_PUT_OBJECT_CNF,
   MSG_ID_OBEX_PUT_OBJECT_IND,
   MSG_ID_OBEX_PUT_OBJECT_RSP,
   MSG_ID_OBEX_GET_OBJECT_REQ,
   MSG_ID_OBEX_GET_OBJECT_CNF,
   MSG_ID_OBEX_GET_OBJECT_IND,
   MSG_ID_OBEX_GET_OBJECT_RSP,

   MSG_ID_OBEX_CODE_END = MSG_ID_OBEX_GET_OBJECT_RSP,   

#line 400 "adaptation\include\stack_msgs.h"
   MSG_ID_OBEX_CODE_CHECK_POINT,

   #line 1 "interface\ps\ircomm_sap.h"
 

































  









  






































 
  
	MSG_ID_IRCOMM_CONNECT_REQ = MSG_ID_IRCOMM_CODE_BEGIN,
	MSG_ID_IRCOMM_CONNECT_CNF,
	MSG_ID_IRCOMM_CONNECT_RSP,
   MSG_ID_IRCOMM_CONNECT_IND,
   MSG_ID_IRCOMM_DISCONNECT_REQ,
   MSG_ID_IRCOMM_DISCONNECT_IND,   
   MSG_ID_IRCOMM_OPEN,
   MSG_ID_IRCOMM_CLOSE,   
   MSG_ID_LAP_IRAP_UL_IRPDU_RESUME,
   MSG_ID_IRCOMM_CODE_END = MSG_ID_LAP_IRAP_UL_IRPDU_RESUME,

#line 403 "adaptation\include\stack_msgs.h"
   MSG_ID_IRCOMM_CODE_CHECK_POINT,


   #line 1 "interface\media\med_v_sap.h"
 

































  









  















































    
MSG_ID_MEDIA_VISUAL_RECORD_REQ = MSG_ID_MED_V_CODE_BEGIN,
    MSG_ID_MEDIA_VISUAL_RECORD_CNF,
    MSG_ID_MEDIA_ENCODE_VISUAL_DATA_IND,
    MSG_ID_MEDIA_ENCODE_META_DATA_IND,
    MSG_ID_MEDIA_VISUAL_RECORD_FINISH_IND,
    MSG_ID_MEDIA_VISUAL_STOP_REQ,
    MSG_ID_MEDIA_VISUAL_STOP_CNF,
    MSG_ID_MEDIA_VISUAL_PLAY_REQ,
    MSG_ID_MEDIA_VISUAL_PLAY_CNF,
    MSG_ID_MEDIA_DECODE_VISUAL_DATA_IND,
    MSG_ID_MEDIA_VISUAL_PLAY_FINISH_IND,
    MSG_ID_MEDIA_VISUAL_SEEK_REQ,
    MSG_ID_MEDIA_VISUAL_SEEK_CNF,
    MSG_ID_MEDIA_VISUAL_FILE_MERGE_REQ,
    MSG_ID_MEDIA_VISUAL_FILE_MERGE_CNF,
    MSG_ID_MEDIA_VISUAL_TEMP_1, MSG_ID_MEDIA_VISUAL_TEMP_2, 
    MSG_ID_MEDIA_AUDIO_START_BUILD_CACHE_REQ,
    MSG_ID_MEDIA_AUDIO_STOP_BUILD_CACHE_REQ,
    MSG_ID_MEDIA_AUDIO_CLOSE_BUILD_CACHE_REQ,
    MSG_ID_MEDIA_AUDIO_PROCESS_BUILD_CACHE_REQ,
    MSG_ID_MEDIA_AUDIO_RESET_BUILD_CACHE_VARS_REQ,
    MSG_ID_MEDIA_AUDIO_BUILD_CACHE_FAIL_IND,
    MSG_ID_MEDIA_V_AUDIO_START_RECORD_REQ,
    MSG_ID_MEDIA_V_AUDIO_STOP_RECORD_REQ,
    MSG_ID_MEDIA_V_AUDIO_STOP_RECORD_CNF,
    MSG_ID_MEDIA_V_AUDIO_PAUSE_RECORD_REQ,
    MSG_ID_MEDIA_V_AUDIO_PAUSE_RECORD_CNF,
    MSG_ID_MEDIA_V_AUDIO_RESUME_RECORD_REQ,
    MSG_ID_MEDIA_V_AUDIO_RESUME_RECORD_CNF,    
    MSG_ID_MEDIA_V_AUDIO_READ_DATA_IND,
    MSG_ID_MEDIA_V_AUDIO_RECORD_ERROR_IND,    
    MSG_ID_MED_V_CODE_END = MSG_ID_MEDIA_V_AUDIO_RECORD_ERROR_IND,
    

#line 407 "adaptation\include\stack_msgs.h"
   MSG_ID_MED_V_CODE_CHECK_POINT,


   #line 1 "j2me\interface\j2me_sap.h"
 


































 

































































































    




    



    
MSG_ID_MMI_JAVA_MIDS_GETLIST_REQ = MSG_ID_J2ME_CODE_BEGIN, 
MSG_ID_MMI_JAVA_MID_GETLIST_REQ,
     
    MSG_ID_MMI_JAVA_MID_START_REQ, 
    MSG_ID_MMI_JAVA_MID_STOP_RES,
     
    MSG_ID_MMI_JAVA_MIDS_GETINFO_REQ,
     
    MSG_ID_MMI_JAVA_MIDS_GET_SETTING_REQ, 
    MSG_ID_MMI_JAVA_MIDS_SET_SETTING_REQ,
     
    MSG_ID_MMI_JAVA_MIDS_UPDATE_REQ,
     
    MSG_ID_MMI_JAVA_MIDS_REMOVE_REQ, 
    MSG_ID_MMI_JAVA_MIDS_REMOVE_CONFIRM_RES,
     
    MSG_ID_JAVA_WAP_INSTALL_MIDS_IND,
    MSG_ID_MMI_JAVA_INSTALL_MIDS_REQ,
    MSG_ID_MMI_JAVA_INSTALL_MIDS_RES,
    MSG_ID_MMI_JAVA_INSTALL_CONFIRM_RES,
    MSG_ID_JAVA_WAP_GET_FILE_AND_SAVE_CNF,
    MSG_ID_MMI_JAVA_GET_FILE_AND_SAVE_RES,
    MSG_ID_MMI_JAVA_INSTALL_RESET_RMS_RES,
    MSG_ID_JAVA_WAP_POST_DATA_CNF,
    MSG_ID_JAVA_WAP_DATA_ACCOUNT_IND,
    MSG_ID_MMI_JAVA_GET_FILE_AND_SAVE_PROGRESS_RES, 
    MSG_ID_MMI_JAVA_GET_INSTALL_DRV_RES,
     
    MSG_ID_MMI_JAVA_LOCAL_INSTALL_REQ,
     
    MSG_ID_MMI_JAVA_ABORT_REQ, 
    MSG_ID_JAVA_WAP_ABORT_CNF, 
    MSG_ID_MMI_WAP_ABORT_REQ,
     
    MSG_ID_JAVA_MMI_TIMEALARM_PUSH_RES,
     
     
    MSG_ID_MMI_JAVA_GET_CONFIRM_RES,
     
    MSG_ID_MMI_JAVA_GET_AUTH_RES,
     
    MSG_ID_MMI_JAVA_GET_DOMAIN_LIST_REQ,
    MSG_ID_MMI_JAVA_GET_DEFAULT_DOMAIN_REQ, 
    MSG_ID_MMI_JAVA_SET_DEFAULT_DOMAIN_REQ,
    MSG_ID_MMI_JAVA_RESET_DEFAULT_DOMAIN_REQ,
     
    MSG_ID_MMI_JAVA_GET_IMSI_RES,    
    


     
    MSG_ID_MMI_JAVA_MIDS_GETLIST_CNF, 
    MSG_ID_MMI_JAVA_MID_GETLIST_CNF,
     
    MSG_ID_MMI_JAVA_MID_START_CNF, 
    MSG_ID_MMI_JAVA_MID_STOP_IND,
     
    MSG_ID_MMI_JAVA_MIDS_GETINFO_CNF,
     
    MSG_ID_MMI_JAVA_MIDS_GET_SETTING_CNF, 
    MSG_ID_MMI_JAVA_MIDS_SET_SETTING_CNF,
     
    MSG_ID_MMI_JAVA_MIDS_UPDATE_CNF,
     
    MSG_ID_MMI_JAVA_MIDS_REMOVE_CONFIRM_IND, 
    MSG_ID_MMI_JAVA_MIDS_REMOVE_CNF,
     
    MSG_ID_JAVA_WAP_INSTALL_MIDS_RES,
    MSG_ID_MMI_JAVA_INSTALL_MIDS_CNF,
    MSG_ID_MMI_JAVA_INSTALL_MIDS_IND,
    MSG_ID_MMI_JAVA_INSTALL_CONFIRM_IND,
    MSG_ID_JAVA_WAP_GET_FILE_AND_SAVE_REQ,
    MSG_ID_MMI_WAP_GET_FILE_AND_SAVE_RES,
    MSG_ID_MMI_JAVA_GET_FILE_AND_SAVE_IND,
    MSG_ID_MMI_JAVA_INSTALL_RESET_RMS_IND,
    MSG_ID_JAVA_WAP_POST_DATA_REQ, 
    MSG_ID_MMI_JAVA_GET_FILE_AND_SAVE_PROGRESS_IND, 
    MSG_ID_MMI_JAVA_GET_INSTALL_DRV_IND,
    MSG_ID_MMI_JAVA_SHOW_PERCENTAGE_IND,
     
    MSG_ID_MMI_JAVA_LOCAL_INSTALL_CNF,
     
    MSG_ID_MMI_JAVA_ABORT_CNF, 
    MSG_ID_JAVA_WAP_ABORT_REQ, 
    MSG_ID_MMI_WAP_ABORT_CNF,
     
    MSG_ID_MMI_JAVA_TIMEALARM_PUSH_IND, 
    MSG_ID_JAVA_JAVA_MID_START_REQ,
     
    MSG_ID_MMI_JAVA_GET_PERMISSION_IND,  
     
    MSG_ID_MMI_JAVA_GET_CONFIRM_IND,
     
    MSG_ID_MMI_JAVA_GET_AUTH_IND,

    MSG_ID_MMI_J2ME_EXIT_SCREEN_REQ,
     
    MSG_ID_MMI_JAVA_SET_MODE_REQ, 
    MSG_ID_MMI_JAVA_SET_MODE_CNF,
     
    MSG_ID_MMI_JAM_UT_GETLIST_REQ,
     
    MSG_ID_JAM_JASYN_PUSHUT_REQ,
    MSG_ID_MMI_JAVA_SHOW_ALERT_USER_DIALOG_REQ,
    MSG_ID_JAVA_MMA_EVENT_CALLBACK, 
    MSG_ID_JAVA_KEYPAD_NOTIFY_IND,
     
    MSG_ID_MMI_PHB_JAVA_SET_ENTRY_REQ,
    MSG_ID_MMI_PHB_JAVA_SET_ENTRY_RSP,
    MSG_ID_MMI_PHB_JAVA_GET_ENTRY_REQ,
    MSG_ID_MMI_PHB_JAVA_GET_ENTRY_RSP, 
    MSG_ID_MMI_PHB_JAVA_SEARCH_ENTRY_REQ, 
    MSG_ID_MMI_PHB_JAVA_SEARCH_ENTRY_RSP,
    MSG_ID_MMI_PHB_JAVA_GET_GROUP_INFO_REQ,
    MSG_ID_MMI_PHB_JAVA_GET_GROUP_INFO_RSP,
    MSG_ID_MMI_PHB_JAVA_SET_GROUP_INFO_REQ,
    MSG_ID_MMI_PHB_JAVA_SET_GROUP_INFO_RSP,
    MSG_ID_MMI_EVTDB_JAVA_SET_ENTRY_REQ,
    MSG_ID_MMI_EVTDB_JAVA_SET_ENTRY_RSP,
    MSG_ID_MMI_EVTDB_JAVA_GET_ENTRY_REQ,
    MSG_ID_MMI_EVTDB_JAVA_GET_ENTRY_RSP,
     
    MSG_ID_MMI_JAVA_GET_DOMAIN_LIST_CNF,
    MSG_ID_MMI_JAVA_GET_DEFAULT_DOMAIN_CNF,
    MSG_ID_MMI_JAVA_SET_DEFAULT_DOMAIN_CNF,
    MSG_ID_MMI_JAVA_RESET_DEFAULT_DOMAIN_CNF,
     
    MSG_ID_MMI_JAVA_GET_IMSI_IND,    
    MSG_ID_WAP_MMI_EUREKA_START_REQ,    
    MSG_ID_MMI_WAP_EUREKA_START_RES,
    MSG_ID_JAVA_JAVA_ENQUEUE_SMS_REQ,

     
    MSG_ID_MMI_JAVA_PAUSE_IND,   

     

		
    MSG_ID_MMI_JAVA_JBLENDIA_ACTION_CMD,
    MSG_ID_J2ME_JASYN_PAUSE_VM_REQ,  
    MSG_ID_J2ME_JASYN_RESUME_VM_REQ,
    MSG_ID_J2ME_JASYN_STOP_VM_REQ,
#line 411 "adaptation\include\stack_msgs.h"
   MSG_ID_J2ME_CODE_CHECK_POINT,

   #line 1 "interface\ps\email_sap.h"
 



































	MSG_ID_MMI_EMAIL_LIST_ACCT_PROFILE_REQ=MSG_ID_EMAIL_CODE_BEGIN,			   
 	MSG_ID_MMI_EMAIL_LIST_ACCT_PROFILE_RSP,	
 	MSG_ID_MMI_EMAIL_SET_ACCT_PROFILE_REQ,	   
 	MSG_ID_MMI_EMAIL_SET_ACCT_PROFILE_RSP,	
 	MSG_ID_MMI_EMAIL_GET_ACCT_PROFILE_REQ,	  
 	MSG_ID_MMI_EMAIL_GET_ACCT_PROFILE_RSP,	
 	MSG_ID_MMI_EMAIL_ACTIVATE_ACCT_REQ,	  
 	MSG_ID_MMI_EMAIL_ACTIVATE_ACCT_RSP,	
 	MSG_ID_MMI_EMAIL_DELETE_ACCT_REQ,   
 	MSG_ID_MMI_EMAIL_DELETE_ACCT_RSP,	

	MSG_ID_MMI_EMAIL_SET_MODE_REQ,
	MSG_ID_MMI_EMAIL_SET_MODE_RSP,

	MSG_ID_MMI_EMAIL_LIST_FOLDERS_REQ,	   
 	MSG_ID_MMI_EMAIL_LIST_FOLDERS_RSP,	

 	MSG_ID_MMI_EMAIL_SEND_RECV_REQ,	   
 	MSG_ID_MMI_EMAIL_SEND_RECV_RSP,	

 	MSG_ID_MMI_EMAIL_NUM_MSGS_SENT_IND,	
 	MSG_ID_MMI_EMAIL_SERVER_CONNECT_IND,	
 	MSG_ID_MMI_EMAIL_AUTHVERIFY_IND,	
 	MSG_ID_MMI_EMAIL_RECV_MAILS_IND,	
 	MSG_ID_MMI_EMAIL_NEW_MSGS_IND,	

 	MSG_ID_MMI_EMAIL_FOLDER_SELECT_REQ,	   
 	MSG_ID_MMI_EMAIL_FOLDER_SELECT_RSP,	

	MSG_ID_MMI_EMAIL_FOLDER_COMMIT_REQ,
	MSG_ID_MMI_EMAIL_FOLDER_COMMIT_RSP,

 	MSG_ID_MMI_EMAIL_FOLDER_MSG_SELECT_REQ,	   
 	MSG_ID_MMI_EMAIL_FOLDER_MSG_SELECT_RSP,	

 	MSG_ID_MMI_EMAIL_FOLDER_MSG_DELETE_REQ, 	
 	MSG_ID_MMI_EMAIL_FOLDER_MSG_DELETE_RSP,	

	MSG_ID_MMI_EMAIL_FOLDER_MSG_SET_FLAG_REQ,
	MSG_ID_MMI_EMAIL_FOLDER_MSG_SET_FLAG_RSP,

	MSG_ID_MMI_EMAIL_COMPOSE_SIZE_REQ,
	MSG_ID_MMI_EMAIL_COMPOSE_SIZE_RSP,

	MSG_ID_MMI_EMAIL_MSG_MOVE_REQ, 	
	MSG_ID_MMI_EMAIL_MSG_MOVE_RSP,	
	MSG_ID_MMI_EMAIL_PARTIAL_FETCH_REQ,    
	MSG_ID_MMI_EMAIL_PARTIAL_FETCH_RSP,   
	MSG_ID_MMI_EMAIL_SEARCH_REQ,    
	MSG_ID_MMI_EMAIL_SEARCH_RSP,   
	MSG_ID_MMI_EMAIL_SEARCH_LIST_REQ,    
	MSG_ID_MMI_EMAIL_SEARCH_LIST_RSP,   
	MSG_ID_MMI_EMAIL_SEND_REQ,    
	MSG_ID_MMI_EMAIL_SEND_RSP,   
	MSG_ID_MMI_EMAIL_SEND_NOW_REQ,    
	MSG_ID_MMI_EMAIL_SEND_NOW_RSP,   
	MSG_ID_MMI_EMAIL_SEND_ONLY_REQ,
	MSG_ID_MMI_EMAIL_SEND_ONLY_RSP,  
	MSG_ID_MMI_EMAIL_SEND_FROM_MAILBOX_REQ,
	MSG_ID_MMI_EMAIL_SEND_FROM_MAILBOX_RSP,
	MSG_ID_MMI_EMAIL_SAVE_DRAFTS_REQ, 	
	MSG_ID_MMI_EMAIL_SAVE_DRAFTS_RSP,	

	MSG_ID_MMI_EMAIL_ABORT_REQ,   
	MSG_ID_MMI_EMAIL_ABORT_RSP,   

	MSG_ID_MMI_EMAIL_ERR_IND,	
	MSG_ID_MMI_EMAIL_START_REQ,
	MSG_ID_MMI_EMAIL_START_RSP,
	MSG_ID_MMI_EMAIL_STOP_REQ,
	MSG_ID_MMI_EMAIL_STOP_RSP,
	MSG_ID_MMI_EMAIL_MSG_SENT_IND,
	MSG_ID_MMI_EMAIL_AUTOCHECK_EXPIRY_IND,
	MSG_ID_MMI_EMAIL_RECV_MSGS_IND,

	MSG_ID_MMI_EMAIL_INIT_REQ,
	MSG_ID_MMI_EMAIL_INIT_RSP,
	MSG_ID_MMI_EMAIL_DEINIT_REQ,
	MSG_ID_MMI_EMAIL_DEINIT_RSP,
	MSG_ID_MMI_EMAIL_BEARER_INFO_IND,
	MSG_ID_MMI_EMAIL_DEACTIVATE_REQ,
	MSG_ID_MMI_EMAIL_DEACTIVATE_RSP,

	MSG_ID_MMI_EMAIL_MSG_FULL_IND,
	MSG_ID_MMI_EMAIL_UIDL_FULL_IND,
	MSG_ID_MMI_EMAIL_MSG_AVAILABLE_IND,  



#line 414 "adaptation\include\stack_msgs.h"
   MSG_ID_EMAIL_CODE_CHECK_POINT,


   #line 1 "interface\ps\fmt_sap.h"
 

































 









  

























	 
   MSG_ID_FMT_STARTUP_REQ = MSG_ID_FMT_MSG_CODE_BEGIN,
   MSG_ID_FMT_MMI_CARD_PLUG_IN_IND,
   MSG_ID_FMT_MMI_CARD_PLUG_OUT_IND,
   MSG_ID_FMT_MMI_OTG_DISPLAY_IND,
   MSG_ID_MMI_FMT_GET_MSDC_STATUS_REQ,
   MSG_ID_MMI_FMT_GET_MSDC_STATUS_RSP,
   MSG_ID_MMI_FMT_COPY_REQ,
   MSG_ID_MMI_FMT_COPY_RSP,
   MSG_ID_MMI_FMT_DELETE_REQ,
   MSG_ID_MMI_FMT_DELETE_RSP,
   MSG_ID_MMI_FMT_DELETE_RO_REQ,
   MSG_ID_MMI_FMT_DELETE_RO_RSP,   
   MSG_ID_FMT_PROCESS_DRM_REQ,
   MSG_ID_MMI_FMT_FORMAT_REQ,
   MSG_ID_MMI_FMT_FORMAT_RSP,
   MSG_ID_MMI_FMT_CHECK_DRIVE_REQ,
   MSG_ID_MMI_FMT_CHECK_DRIVE_RSP,
   MSG_ID_MMI_FMT_UNMOUNT_REQ,
   MSG_ID_MMI_FMT_UNMOUNT_RSP,
   MSG_ID_FMT_MMI_SIM_PLUS_DETECT_IND,
   MSG_ID_MMI_FMT_FOTA_INIT_REQ,
   MSG_ID_MMI_FMT_FOTA_INIT_RSP,   
   MSG_ID_MMI_FMT_FOTA_WRITE_DATA_REQ,
   MSG_ID_MMI_FMT_FOTA_WRITE_DATA_RSP,   
   MSG_ID_MMI_FMT_FOTA_FINALIZE_REQ,
   MSG_ID_MMI_FMT_FOTA_FINALIZE_RSP,   
   MSG_ID_FMT_MSG_CODE_END = MSG_ID_MMI_FMT_UNMOUNT_RSP,
    
   

#line 418 "adaptation\include\stack_msgs.h"
   MSG_ID_FMT_CODE_CHECK_POINT,




   #line 1 "interface\hwdrv\drv_sap.h"
 


































 
































































































































































































 
MSG_ID_UART_READY_TO_READ_IND = DRIVER_MSG_CODE_BEGIN,
MSG_ID_UART_READY_TO_WRITE_IND,
MSG_ID_UART_DSR_CHANGE_IND,
MSG_ID_UART_ESCAPE_DETECTED_IND,
MSG_ID_UART_PLUGIN_IND,
MSG_ID_UART_PLUGOUT_IND,
 
MSG_ID_BMT_CHARGER_IND,
MSG_ID_BMT_ADC_DATA_REQ,
MSG_ID_BMT_ADC_DATA_CONF,
MSG_ID_BMT_LEAVE_PRECHARGE_IND,

MSG_ID_BMT_ADC_MEASURE_DONE_CONF,
MSG_ID_BMT_ADC_ADD_ITEM_REQ,
MSG_ID_BMT_ADC_REMOVE_ITEM_REQ,
MSG_ID_BMT_ADC_MODIFY_PARAMETERS_REQ,

 
MSG_ID_AUX_PLUGIN,
MSG_ID_AUX_PLUGOUT,
MSG_ID_AUX_DETECT,    
MSG_ID_AUX_CALL_SETUP_REQ_IND, 
MSG_ID_AUX_CALL_CONNECT_REQ_IND,
MSG_ID_AUX_CALL_DISCONNECT_REQ_IND,
MSG_ID_AUX_ID,
MSG_ID_READ_ALL_ADC_CHANNEL_REQ,
MSG_ID_ADC_ALL_CHANNEL_CONF,

 
MSG_ID_USB_A_PLUGIN_IND,
MSG_ID_USB_A_PLUGOUT_IND,
MSG_ID_USB_B_PLUGIN_IND,
MSG_ID_USB_B_PLUGOUT_IND,
MSG_ID_DRVUEM_USBCFG_REQ,
MSG_ID_DRVUEM_USBCFG_CNF,
MSG_ID_USBD_START_HNP,
MSG_ID_SRP_INIT,
MSG_ID_OTG_DISPLAY_IND,



MSG_ID_USB_MSDRV_RESET_IND,				 
MSG_ID_USB_MSDRV_REC_DONE_CONF,
MSG_ID_USB_MSDRV_TRX_DONE_CONF,
MSG_ID_USB_MSDRV_CLEAR_STALL_REQ,
MSG_ID_USB_MSHOST_START_IND,
MSG_ID_USB_MSHOST_QUERY_IND,
MSG_ID_OTG_MS_INSERT_IND,
MSG_ID_OTG_MS_REMOVE_IND,
MSG_ID_OTG_CARD_DETECT_IND,
MSG_ID_OTG_HDLR_IND,
MSG_ID_USB_FT_IND,					 
MSG_ID_USB_FT_START_REQ,
MSG_ID_USB_FT_TX_DONE_IND,
MSG_ID_USB_FT_RX_DATA_IND,
MSG_ID_USB_IRDGB_START_IND,                                

 
MSG_ID_USB_MED_SET_CAMERA_ATTR_REQ,
MSG_ID_USB_MED_SET_CAMERA_ATTR_CNF,
MSG_ID_MED_USB_START_VIDEO_REQ, 
MSG_ID_USB_MED_START_VIDEO_CNF,
MSG_ID_USB_MED_CHANGE_VIDEO_IND,
MSG_ID_USB_MED_START_STILL_IND,
MSG_ID_USB_MED_START_VIDEO_IND,
MSG_ID_MED_USB_DEVICE_STILL_REQ,
MSG_ID_USB_MED_DEVICE_STILL_CNF,
MSG_ID_MED_USB_PAUSE_REQ,
MSG_ID_USB_MED_PAUSE_CNF,
MSG_ID_MED_USB_RESUME_VIDEO_REQ,
MSG_ID_USB_MED_RESUME_VIDEO_CNF,
MSG_ID_USB_MED_STOP_IND,
MSG_ID_USB_MED_ABORT_IND,
MSG_ID_MED_USB_STOP_REQ,
MSG_ID_USB_MED_STOP_CNF,

 
MSG_ID_USB_ENUM_DONE,
MSG_ID_USB_VIDEO_COMPLETE,
MSG_ID_USB_VIDEO_DMA_DONE,
MSG_ID_USB_VIDEO_CHANGE_SIZE,
MSG_ID_USB_STILL_CAPTURE,
MSG_ID_USB_STILL_COMPLETE,
MSG_ID_USB_VIDEO_STILL_DMA_DONE,
MSG_ID_USB_VIDEO_STILL_DMA_PARTIAL,
MSG_ID_USB_VIDEO_INCALL_DMA_DONE,
MSG_ID_USB_VIDEO_INCALL_TIMEOUT,
MSG_ID_USB_VIDEO_INCALL_CHANGE_SIZE,
MSG_ID_USB_VIDEO_ABORT,

 
MSG_ID_USB_MMI_DPS_DISCOVERY_IND,
MSG_ID_USB_MMI_DPS_HREQUEST_IND,
MSG_ID_MMI_USB_DPS_HREQUEST_CONF,
MSG_ID_USB_MMI_DPS_HRESPONSE_IND,
MSG_ID_MMI_USB_DPS_HRESPONSE_CONF,
MSG_ID_MMI_USB_DPS_DREQUEST_REQ,
MSG_ID_USB_MMI_DPS_DREQUEST_CONF,
MSG_ID_MMI_USB_DPS_DRESPONSE_REQ,
MSG_ID_USB_MMI_DPS_DRESPONSE_CONF,
MSG_ID_USB_MMI_PTP_CONNECT_TO_PC_IND,
MSG_ID_USB_MMI_PTP_OPEN_FILE_FAIL_IND,
MSG_ID_USB_MMI_PTP_HOST_RESET_IND,
MSG_ID_MMI_USB_PTP_HOST_RESET_CNF,
MSG_ID_MMI_USB_START_JOB_REQ,
MSG_ID_MMI_USB_CLOSE_JOB_REQ,

 
MSG_ID_USB_PTPIMAGE_DATA_RX_DONE_CONF,
MSG_ID_USB_PTPIMAGE_DMA_TX_DONE_CONF,
MSG_ID_USB_PTPIMAGE_RESET_IND,

 
MSG_ID_MSDC_CARD_DETECT_IND,
MSG_ID_SIM_PLUS_DETECT_IND,
MSG_ID_MSDC2_CARD_DETECT_IND,

 
MSG_ID_BMT_USB_IND,
MSG_ID_BMT_USB_READ_CALI_DONE_IND,

 
MSG_ID_TP_EVENT_IND,
MSG_ID_TP_CALI_DONE,
MSG_ID_TP_PEN_DOWN_IND,

 
MSG_ID_TDMB_TURN_ON_REQUEST, MSG_ID_TDMB_CODE_BEGIN = MSG_ID_TDMB_TURN_ON_REQUEST,
MSG_ID_TDMB_TURN_ON_CONFIRM,
MSG_ID_TDMB_TURN_OFF_REQUEST,
MSG_ID_TDMB_TURN_OFF_CONFIRM,
MSG_ID_TDMB_SET_BAND_REQUEST,
MSG_ID_TDMB_SET_BAND_CONFIRM,
MSG_ID_TDMB_AUTO_SCAN_REQUEST,
MSG_ID_TDMB_AUTO_SCAN_CONFIRM,
MSG_ID_TDMB_SET_FREQUENCY_REQUEST,
MSG_ID_TDMB_SET_FREQUENCY_CONFIRM,
MSG_ID_TDMB_SELECT_SERVICE_REQUEST,
MSG_ID_TDMB_SELECT_SERVICE_CONFIRM,
MSG_ID_TDMB_GET_SIGNAL_REQUEST,
MSG_ID_TDMB_GET_SIGNAL_CONFIRM,
MSG_ID_TDMB_START_ANNOUNCEMENT_REQUEST,
MSG_ID_TDMB_START_ANNOUNCEMENT_CONFIRM,
MSG_ID_TDMB_END_ANNOUNCEMENT_REQUEST,
MSG_ID_TDMB_END_ANNOUNCEMENT_CONFIRM,
MSG_ID_TDMB_SET_IDLE_REQUEST,
MSG_ID_TDMB_SET_IDLE_CONFIRM,
MSG_ID_TDMB_MCI_RECONFIG_INDICATION,
MSG_ID_TDMB_GET_ENSEMBLE_INFO_REQUEST,
MSG_ID_TDMB_GET_ENSEMBLE_INFO_CONFIRM,
MSG_ID_TDMB_DEMOD_MCI_RECONFIG_INDICATION,
MSG_ID_TDMB_DEMOD_ANNOUNCEMENT_INDICATION,
MSG_ID_TDMB_ANNOUNCEMENT_INDICATION,
MSG_ID_TDMB_SET_ANNOUNCEMENT_REQUEST,
MSG_ID_TDMB_SET_ANNOUNCEMENT_CONFIRM,
MSG_ID_TDMB_DATA_INDICATION,
MSG_ID_TDMB_SERVICE_END_INDICATION,
MSG_ID_TDMB_FIC_IND_INDICATION,
MSG_ID_TDMB_MSC_IND_INDICATION,
MSG_ID_TDMB_STOP_AUTO_SCAN_REQUEST, MSG_ID_TDMB_CODE_END = MSG_ID_TDMB_STOP_AUTO_SCAN_REQUEST,
MSG_ID_TDMB_INT_ARRIVE,

#line 424 "adaptation\include\stack_msgs.h"
   MSG_ID_DRV_CODE_CHECK_POINT,

   #line 1 "interface\ps\nvram_sap.h"
 

































  









  





















































    
MSG_ID_NVRAM_STARTUP_REQ = MSG_ID_NVRAM_CODE_BEGIN,
    MSG_ID_NVRAM_STARTUP_CNF,
    MSG_ID_NVRAM_READ_IND,
    MSG_ID_NVRAM_RESET_REQ,
    MSG_ID_NVRAM_RESET_CNF,
    MSG_ID_NVRAM_READ_REQ,
    MSG_ID_NVRAM_READ_CNF,
    MSG_ID_NVRAM_WRITE_REQ,
    MSG_ID_NVRAM_WRITE_CNF,
    MSG_ID_NVRAM_SET_LOCK_REQ, MSG_ID_NVRAM_SET_LOCK_CNF, MSG_ID_NVRAM_CODE_END = MSG_ID_NVRAM_SET_LOCK_CNF,
    

#line 427 "adaptation\include\stack_msgs.h"
   MSG_ID_NVRAM_CODE_CHECK_POINT,
   














   #line 1 "interface\l1interface\l1_sap.h"
 


































 


























































































































































 

 

 

MSG_ID_MPHC_POWER_SCAN_REQ = L1_MSG_CODE_BEGIN,
MSG_ID_MPHC_MANUSEL_PWRSCAN_REQ,
MSG_ID_MPHC_MANUSEL_PWRSCAN_STOP_REQ,
MSG_ID_MPHC_BSIC_SYNC_REQ,
MSG_ID_MPHC_SPECIFIC_SYNC_REQ,
MSG_ID_MPHC_SERV_BCCH_MONITOR_REQ,
MSG_ID_MPHC_IDLE_CCCH_START_REQ,
MSG_ID_MPHC_CCCH_UPDATE_REQ,
MSG_ID_MPHC_PAGE_MODE_CHANGE_REQ,
MSG_ID_MPHC_RANDOM_ACCESS_REQ,
MSG_ID_MPHC_RACH_ABORT_REQ,
MSG_ID_MPHC_IMMED_ASSIGN_REQ,
MSG_ID_MPHC_CHANNEL_ASSIGN_REQ,
MSG_ID_MPHC_CHANNEL_RELEASE_REQ,
MSG_ID_MPHC_HANDOVER_REQ,
MSG_ID_MPHC_HANDOVER_ACCESS_STOP_REQ,
MSG_ID_MPHC_CHANNEL_RECONNECT_REQ,
MSG_ID_MPHC_FREQUENCY_REDEFINITION_REQ,
MSG_ID_MPHC_CHANNEL_MODE_MODIFY_REQ,
MSG_ID_MPHC_CIPHERING_MODE_COMMAND_REQ,
MSG_ID_MPHC_CLOSE_TCH_LOOP_REQ,
MSG_ID_MPHC_OPEN_TCH_LOOP_REQ,
MSG_ID_MPHC_DAI_TEST_REQ,
MSG_ID_MPHC_POWER_CLASS_REQ,
MSG_ID_MPHC_CELL_OPTION_UPDATE_REQ,
MSG_ID_MPHC_EXTENDED_MEAS_REQ,
MSG_ID_MPHC_NEIGHBOR_MEAS_REQ,
MSG_ID_MPHC_NEIGHBOR_BSIC_START_REQ,
MSG_ID_MPHC_NEIGHBOR_BSIC_STOP_REQ,
MSG_ID_MPHC_NEIGHBOR_SYS_INFO_READ_REQ,
MSG_ID_MPHC_NEIGHBOR_SYS_INFO_STOP_REQ,
MSG_ID_MPHC_CELL_BSIC_START_REQ,
MSG_ID_MPHC_CELL_BSIC_STOP_REQ,
MSG_ID_MPHC_CELL_SYS_INFO_READ_REQ,
MSG_ID_MPHC_CELL_SYS_INFO_STOP_REQ,
MSG_ID_MPHC_CBCH_CONFIG_REQ,
MSG_ID_MPHC_CBCH_START_REQ,
MSG_ID_MPHC_CBCH_STOP_REQ,
MSG_ID_MPHC_CBCH_SKIP_REQ,
MSG_ID_MPHC_DEACTIVATE_REQ,
MSG_ID_MPHC_SIM_READY_NOTIFY_REQ,

 

MSG_ID_MPHP_DOWNLINK_SINGLE_BLOCK_REQ,
MSG_ID_MPHP_INTERFERENCE_MEAS_REQ,
MSG_ID_MPHP_NEIGHBOR_PBCCH_START_REQ,
MSG_ID_MPHP_NEIGHBOR_PBCCH_STOP_REQ,
MSG_ID_MPHP_PACKET_IDLE_CCCH_START_REQ,
MSG_ID_MPHP_PACKET_CCCH_CONFIG_REQ,
MSG_ID_MPHP_PACKET_IDLE_PCCCH_START_REQ,
MSG_ID_MPHP_PACKET_DOWNLINK_ASSIGNMENT_REQ,
MSG_ID_MPHP_PACKET_EXTENDED_MEAS_REQ, 
MSG_ID_MPHP_PACKET_NC_MEAS_START_REQ,
MSG_ID_MPHP_PACKET_NC_MEAS_STOP_REQ,
MSG_ID_MPHP_PACKET_PAGE_MODE_UPDATE_REQ,
MSG_ID_MPHP_PACKET_PDCH_RELEASE_REQ,
MSG_ID_MPHP_PACKET_RANDOM_ACCESS_REQ,
MSG_ID_MPHP_PACKET_UNASSIGNMENT_REQ,
MSG_ID_MPHP_PACKET_UPLINK_ASSIGNMENT_REQ,
MSG_ID_MPHP_PACKET_TIMESLOT_RECONFIGURE_REQ,
MSG_ID_MPHP_PBCCH_START_REQ,
MSG_ID_MPHP_PBCCH_STOP_REQ,
MSG_ID_MPHP_PCCCH_CONFIG_REQ,
MSG_ID_MPHP_PDCH_FAIL_RECONNECT_REQ,
MSG_ID_MPHP_POLL_RESPONSE_REQ,
MSG_ID_MPHP_POWER_CONTROL_UPDATE_REQ,
MSG_ID_MPHP_PRACH_ABORT_REQ,
MSG_ID_MPHP_REPEAT_ALLOCATION_REQ,
MSG_ID_MPHP_TIMING_ADVANCE_UPDATE_REQ,
MSG_ID_MPHP_UPLINK_SINGLE_BLOCK_REQ,


















MSG_ID_MPHC_SIM_STATUS_UPDATE_REQ,
MSG_ID_MPHC_SUSPEND_ALT_L1_REQ,
MSG_ID_MPHC_RESUME_REQ,


 

MSG_ID_MPHC_POWER_SCAN_CNF,
MSG_ID_MPHC_MANUSEL_PWRSCAN_CNF,
MSG_ID_MPHC_BSIC_SYNC_CNF,
MSG_ID_MPHC_UNITDATA_IND,
MSG_ID_MPHC_RANDOM_ACCESS_CNF,
MSG_ID_MPHC_IMMED_ASSIGN_CNF,
MSG_ID_MPHC_CHANNEL_ASSIGN_CNF,
MSG_ID_MPHC_CHANNEL_RELEASE_CNF,
MSG_ID_MPHC_HANDOVER_CNF,
MSG_ID_MPHC_HANDOVER_ACCESS_START_IND,
MSG_ID_MPHC_HANDOVER_CONNECTED_IND,
MSG_ID_MPHC_HANDOVER_ACCESS_STOP_CNF,
MSG_ID_MPHC_CHANNEL_RECONNECT_CNF,
MSG_ID_MPHC_FREQUENCY_REDEFINITION_CNF,
MSG_ID_MPHC_CHANNEL_MODE_MODIFY_CNF,
MSG_ID_MPHC_CIPHERING_MODE_COMMAND_CNF,
MSG_ID_MPHC_CLOSE_TCH_LOOP_CNF,
MSG_ID_MPHC_OPEN_TCH_LOOP_CNF,
MSG_ID_MPHC_EXTENDED_MEAS_IND,
MSG_ID_MPHC_BLOCK_QUALITY_IND,
MSG_ID_MPHC_SERV_IDLE_MEAS_IND,
MSG_ID_MPHC_SERV_DEDI_MEAS_IND,
MSG_ID_MPHC_NEIGHBOR_MEAS_IND,
MSG_ID_MPHC_NEIGHBOR_BSIC_IND,
MSG_ID_MPHC_CELL_BSIC_IND,
MSG_ID_MPHC_DEACTIVATE_CNF,


 

MSG_ID_MPHP_DOWNLINK_SINGLE_BLOCK_CNF,
MSG_ID_MPHP_INTERFERENCE_MEAS_IND,
MSG_ID_MPHP_PACKET_BLOCK_QUALITY_IND,
MSG_ID_MPHP_PACKET_DATA_IND,
MSG_ID_MPHP_PACKET_DOWNLINK_ASSIGNMENT_CNF,
MSG_ID_MPHP_PACKET_EXTENDED_MEAS_IND,
MSG_ID_MPHP_PACKET_NC_MEAS_IND,
MSG_ID_MPHP_PACKET_RANDOM_ACCESS_CNF,
MSG_ID_MPHP_PACKET_SERV_MEAS_IND,
MSG_ID_MPHP_PACKET_UNASSIGNMENT_CNF,
MSG_ID_MPHP_PACKET_UPLINK_ASSIGNMENT_CNF,
MSG_ID_MPHP_PACKET_TIMESLOT_RECONFIGURE_CNF,
MSG_ID_MPHP_PDCH_FAIL_RECONNECT_CNF,
MSG_ID_MPHP_POLL_RESPONSE_CNF,
MSG_ID_MPHP_REPEAT_ALLOCATION_IND,
MSG_ID_MPHP_UPLINK_SINGLE_BLOCK_CNF,
















#line 444 "adaptation\include\stack_msgs.h"
   MSG_ID_L1_CODE_CHECK_POINT,

   #line 1 "interface\l1interface\l1hisr_sap.h"
 


































 






































 

MSG_ID_L1TASK_WAKEUP,

#line 447 "adaptation\include\stack_msgs.h"
   MSG_ID_L1HISR_CODE_CHECK_POINT,

   #line 1 "interface\l1interface\ft_sap.h"
 


































 










































 

MSG_ID_FT_TO_TST = FT_MSG_CODE_BEGIN,
MSG_ID_TST_TO_FT,

#line 450 "adaptation\include\stack_msgs.h"
   MSG_ID_FT_CODE_CHECK_POINT,



   #line 1 "tst\include\tstsap.h"
 

































MSG_ID_TST_INJECT_STRING = TST_MSG_CODE_BEGIN,
MSG_ID_TST_GET_GPRS_POOL_STATUS,
MSG_ID_TST_POOL_QUERY_TIME_EXPIRY,

#line 455 "adaptation\include\stack_msgs.h"
   MSG_ID_TST_CODE_CHECK_POINT,
  

  
   #line 1 "interface\os\sysservice_sap.h"
 

































MSG_ID_TIMER_EXPIRY =  SYSDEBUG_MSG_CODE_BEGIN,





MSG_ID_STACK_SIM_TIMER_START,
MSG_ID_STACK_SIM_TIMER_STOP,
MSG_ID_STACK_SIM_TIMER_EXPIRY,


#line 460 "adaptation\include\stack_msgs.h"
   MSG_ID_SYSSERVICE_CODE_CHECK_POINT,
   

   
   #line 1 "interface\ps\cmux_sap.h"
 


































 




























 
MSG_ID_CMUX_STARTUP_REQ=CMUX_MSG_CODE_BEGIN,
MSG_ID_CMUX_CLOSE_DOWN_REQ,

MSG_ID_CMUX_DLC_CONNECT_IND, 

MSG_ID_CMUX_CLOSE_DOWN_IND,
MSG_ID_CMUX_DLC_DATA_READY_REQ,
MSG_ID_CMUX_READY_TO_SEND_IND,
MSG_ID_CMUX_UART_DATA_IND,
MSG_ID_CMUX_UART_DATA_REQ,
MSG_ID_CMUX_DLC_READY_TO_RECEIVE_REQ,
MSG_ID_CMUX_UART_CLOSE_DOWN_REQ,
MSG_ID_CMUX_UART_CLOSE_DOWN_CNF,


#line 465 "adaptation\include\stack_msgs.h"
   MSG_ID_CMUX_CODE_CHECK_POINT,
   
   #line 1 "interface\ps\imps_sap.h"
 

































  









  

























 
	MSG_ID_MMI_IMPS_LOGIN_REQ = MSG_ID_IMPS_CODE_BEGIN,
	MSG_ID_MMI_IMPS_LOGIN_RSP,
	
	MSG_ID_MMI_IMPS_LOGOUT_REQ,
	MSG_ID_MMI_IMPS_LOGOUT_RSP,
	
	MSG_ID_MMI_IMPS_DISCONNECT_IND,
	
	MSG_ID_MMI_IMPS_ABORT_LOGIN_REQ,
	MSG_ID_MMI_IMPS_ABORT_LOGIN_RSP,
	MSG_ID_MMI_IMPS_ABORT_SEARCH_REQ,
	MSG_ID_MMI_IMPS_ABORT_SEARCH_RSP,
	
	MSG_ID_MMI_IMPS_SEARCH_REQ,
	MSG_ID_MMI_IMPS_SEARCH_RSP,
	
	MSG_ID_MMI_IMPS_INVITE_REQ,
	MSG_ID_MMI_IMPS_INVITE_RSP,	
	MSG_ID_MMI_IMPS_INVITE_IND,	
	MSG_ID_MMI_IMPS_INVITE_REPLY_REQ,
	MSG_ID_MMI_IMPS_INVITE_REPLY_RSP,	
	MSG_ID_MMI_IMPS_INVITE_RESPONSE_IND,
	MSG_ID_MMI_IMPS_SEND_MESSAGE_REQ,
	MSG_ID_MMI_IMPS_SEND_MESSAGE_RSP,	
	MSG_ID_MMI_IMPS_SEND_MESSAGE_RESULT_IND,	
	MSG_ID_MMI_IMPS_NEWMESSAGE_IND,
	MSG_ID_MMI_IMPS_GET_BLOCK_LIST_REQ,
	MSG_ID_MMI_IMPS_GET_BLOCK_LIST_RSP,
	MSG_ID_MMI_IMPS_BLOCK_ENTITY_REQ,
	MSG_ID_MMI_IMPS_BLOCK_ENTITY_RSP,
	MSG_ID_MMI_IMPS_CREATE_GROUP_REQ,
	MSG_ID_MMI_IMPS_CREATE_GROUP_RSP,
	MSG_ID_MMI_IMPS_DELETE_GROUP_REQ,
	MSG_ID_MMI_IMPS_DELETE_GROUP_RSP,
	MSG_ID_MMI_IMPS_JOIN_GROUP_REQ,
	MSG_ID_MMI_IMPS_JOIN_GROUP_RSP,
	MSG_ID_MMI_IMPS_LEAVE_GROUP_REQ,
	MSG_ID_MMI_IMPS_LEAVE_GROUP_RSP,
	MSG_ID_MMI_IMPS_LEAVE_GROUP_IND,
	MSG_ID_MMI_IMPS_GROUP_CHANGE_NOTIFY_IND,
   MSG_ID_MMI_IMPS_ADD_CONTACT_LIST_REQ,
   MSG_ID_MMI_IMPS_ADD_CONTACT_LIST_RSP,   
   MSG_ID_MMI_IMPS_GET_CONTACT_LIST_REQ,
   MSG_ID_MMI_IMPS_GET_CONTACT_LIST_RSP,
   MSG_ID_MMI_IMPS_ABORT_GET_CONTACT_LIST_REQ,
   MSG_ID_MMI_IMPS_ABORT_GET_CONTACT_LIST_RSP,   
   MSG_ID_MMI_IMPS_VIEW_CONTACT_LIST_REQ,
   MSG_ID_MMI_IMPS_VIEW_CONTACT_LIST_RSP,
   MSG_ID_MMI_IMPS_ABORT_VIEW_CONTACT_LIST_REQ,
   MSG_ID_MMI_IMPS_ABORT_VIEW_CONTACT_LIST_RSP,
   MSG_ID_MMI_IMPS_EDIT_CONTACT_LIST_REQ,
   MSG_ID_MMI_IMPS_EDIT_CONTACT_LIST_RSP,   
   MSG_ID_MMI_IMPS_DEL_CONTACT_LIST_REQ,
   MSG_ID_MMI_IMPS_DEL_CONTACT_LIST_RSP,   
   MSG_ID_MMI_IMPS_SUBS_PA_REQ,
   MSG_ID_MMI_IMPS_SUBS_PA_RSP,
   MSG_ID_MMI_IMPS_ABORT_SUBS_PA_REQ,
   MSG_ID_MMI_IMPS_ABORT_SUBS_PA_RSP,   
   MSG_ID_MMI_IMPS_UNSUBS_PA_REQ,
   MSG_ID_MMI_IMPS_UNSUBS_PA_RSP,
   MSG_ID_MMI_IMPS_GET_PA_REQ,
   MSG_ID_MMI_IMPS_GET_PA_RSP,
   MSG_ID_MMI_IMPS_ABORT_GET_PA_REQ,
   MSG_ID_MMI_IMPS_ABORT_GET_PA_RSP,
   MSG_ID_MMI_IMPS_PA_NOTIFY_IND,   
   MSG_ID_MMI_IMPS_UPDATE_PA_REQ,
   MSG_ID_MMI_IMPS_UPDATE_PA_RSP,   
   MSG_ID_MMI_IMPS_PA_AUTH_IND,
   MSG_ID_MMI_IMPS_PA_AUTH_USER_REQ,
   MSG_ID_MMI_IMPS_PA_AUTH_USER_RSP,
   MSG_ID_MMI_IMPS_PA_CANCEL_AUTH_REQ,
   MSG_ID_MMI_IMPS_PA_CANCEL_AUTH_RSP,   
   MSG_ID_MMI_IMPS_GET_WATCHER_LIST_REQ,
   MSG_ID_MMI_IMPS_GET_WATCHER_LIST_RSP,
   MSG_ID_MMI_IMPS_ABORT_GET_WATCHER_LIST_REQ,
   MSG_ID_MMI_IMPS_ABORT_GET_WATCHER_LIST_RSP,
   MSG_ID_MMI_IMPS_PUSH_IND,
   MSG_ID_MMI_IMPS_READY_IND,
   MSG_ID_MMI_IMPS_GET_GROUP_MEMBER_REQ,
   MSG_ID_MMI_IMPS_GET_GROUP_MEMBER_RSP,
   MSG_ID_MMI_IMPS_GET_JOINED_USER_REQ,   
   MSG_ID_MMI_IMPS_GET_JOINED_USER_RSP,
   MSG_ID_MMI_IMPS_ADD_GROUP_MEMBER_REQ,
   MSG_ID_MMI_IMPS_ADD_GROUP_MEMBER_RSP,   
   MSG_ID_MMI_IMPS_REMOVE_GROUP_MEMBER_REQ,   
   MSG_ID_MMI_IMPS_REMOVE_GROUP_MEMBER_RSP,
   MSG_ID_MMI_IMPS_MEMBER_ACCESS_REQ,   
   MSG_ID_MMI_IMPS_MEMBER_ACCESS_RSP,
   MSG_ID_MMI_IMPS_REJECT_GROUP_USER_REQ,   
   MSG_ID_MMI_IMPS_REJECT_GROUP_USER_RSP,
   MSG_ID_MMI_IMPS_ABORT_GET_GROUP_MEMBER_REQ,    
   MSG_ID_MMI_IMPS_ABORT_GET_GROUP_MEMBER_RSP,  
   MSG_ID_MMI_IMPS_ABORT_GET_JOINED_USER_REQ,    
   MSG_ID_MMI_IMPS_ABORT_GET_JOINED_USER_RSP,     
   MSG_ID_MMI_IMPS_ABORT_GET_REJECTED_USER_REQ,
   MSG_ID_MMI_IMPS_ABORT_GET_REJECTED_USER_RSP,
   MSG_ID_MMI_IMPS_SYSTEM_MSG_IND,    
   MSG_ID_MMI_IMPS_SYSTEM_MSG_USER_REQ, 
   MSG_ID_MMI_IMPS_SYSTEM_MSG_USER_RSP,  
   MSG_ID_MMI_IMPS_SUBS_NOTIFY_REQ,
   MSG_ID_MMI_IMPS_SUBS_NOTIFY_RSP,
   MSG_ID_MMI_IMPS_UNSUBS_NOTIFY_REQ,
   MSG_ID_MMI_IMPS_UNSUBS_NOTIFY_RSP,  
   MSG_ID_MMI_IMPS_NOTIFY_REQUEST_IND,
   MSG_ID_MMI_IMPS_GET_PP_REQ,
   MSG_ID_MMI_IMPS_GET_PP_RSP, 
   MSG_ID_MMI_IMPS_UPDATE_PP_REQ,
   MSG_ID_MMI_IMPS_UPDATE_PP_RSP,
   MSG_ID_MMI_IMPS_DL_FILE_REQ,   
   MSG_ID_MMI_IMPS_DL_FILE_RSP,
   MSG_ID_MMI_IMPS_CREATE_ATTRIBUTE_LIST_REQ,   
   MSG_ID_MMI_IMPS_CREATE_ATTRIBUTE_LIST_RSP,
   MSG_ID_MMI_IMPS_HTTP_AUTH_IND,   
   MSG_ID_MMI_IMPS_HTTP_AUTH_RES,
   MSG_ID_IMPS_CODE_END = MSG_ID_MMI_IMPS_HTTP_AUTH_RES,
 
#line 468 "adaptation\include\stack_msgs.h"
   MSG_ID_IMPS_CODE_CHECK_POINT,
   
   #line 1 "interface\ps\sip_sap.h"
 


































 

        
    MSG_ID_SIP_CREATE_UA_REQ = SIP_MSG_CODE_BEGIN,
    MSG_ID_SIP_DELETE_UA_REQ,
    MSG_ID_SIP_ACTIVATE_UA_REQ,
    MSG_ID_SIP_DEACTIVATE_UA_REQ,
    MSG_ID_SIP_ABORT_UA_REQ,
    MSG_ID_SIP_UPDATE_UA_REQ,
    MSG_ID_SIP_MSG_REQ,
    MSG_ID_SIP_ABORT_MSG_REQ,
    
        
    MSG_ID_SIP_CREATE_UA_RSP,
    MSG_ID_SIP_DELETE_UA_RSP,
    MSG_ID_SIP_ACTIVATE_UA_RSP,
    MSG_ID_SIP_DEACTIVATE_UA_RSP,
    MSG_ID_SIP_ABORT_UA_RSP,
    MSG_ID_SIP_UPDATE_UA_RSP,
    MSG_ID_SIP_MSG_IND,
    MSG_ID_SIP_ABORT_MSG_RSP,
    MSG_ID_SIP_UA_STATUS_IND,
    MSG_ID_SIP_CODE_END = MSG_ID_SIP_UA_STATUS_IND,
   
 
#line 471 "adaptation\include\stack_msgs.h"
   MSG_ID_SIP_CODE_CHECK_POINT,

   #line 1 "interface\ps\poc_sap.h"
 


































 

       
   MSG_ID_POC_REGISTER_REQ = POC_MSG_CODE_BEGIN,
   MSG_ID_POC_SETTING_REQ,
   MSG_ID_POC_TALK_INVITE_REQ,
   MSG_ID_POC_TALK_ANSWER_REQ,
   MSG_ID_POC_TALK_DISCONNECT_REQ,
   MSG_ID_POC_TALK_STATUS_SUBSCRIBE_REQ,  
   MSG_ID_POC_TALK_STATUS_NOTIFY_RES,
   MSG_ID_POC_FLOOR_TAKE_REQ,
   MSG_ID_POC_FLOOR_RELEASE_REQ,
   MSG_ID_POC_GROUP_INIT_REQ,
   MSG_ID_POC_GROUP_DEINIT_REQ,
   MSG_ID_POC_GET_GROUP_LIST_REQ,
   MSG_ID_POC_CREATE_GROUP_LIST_REQ,
   MSG_ID_POC_DEL_GROUP_LIST_REQ,
   MSG_ID_POC_UPDATE_GROUP_ENTRY_REQ,
   MSG_ID_POC_DEL_GROUP_ENTRY_REQ,
   MSG_ID_POC_GET_TALK_GROUP_LIST_REQ,
   MSG_ID_POC_CREATE_TALK_GROUP_LIST_REQ,
   MSG_ID_POC_DEL_TALK_GROUP_LIST_REQ,
   MSG_ID_POC_UPDATE_TALK_GROUP_ENTRY_REQ,
   MSG_ID_POC_DEL_TALK_GROUP_ENTRY_REQ,
   MSG_ID_POC_UPDATE_TALK_GROUP_PARAM_REQ,
   MSG_ID_POC_MEDIA_START_ENCODE_REQ,
   MSG_ID_POC_MEDIA_STOP_ENCODE_REQ,
   MSG_ID_POC_MEDIA_START_DECODE_REQ,
   MSG_ID_POC_MEDIA_STOP_DECODE_REQ,
   MSG_ID_POC_SEND_PERSONAL_ALERT_REQ,
   MSG_ID_POC_PRESENCE_SUBSCRIBE_REQ,
   MSG_ID_POC_PRESENCE_NOTIFY_RES,
   MSG_ID_POC_PRESENCE_PUBLISH_REQ,
      
       
   MSG_ID_POC_REGISTER_RSP,
   MSG_ID_POC_REGISTER_IND,
   MSG_ID_POC_SETTING_RSP,
   MSG_ID_POC_TALK_PROGRESS_IND,   
   MSG_ID_POC_TALK_INVITE_RSP,   
   MSG_ID_POC_TALK_CONNECT_IND,
   MSG_ID_POC_TALK_RING_IND,
   MSG_ID_POC_TALK_ANSWER_RSP,               
   MSG_ID_POC_TALK_DISCONNECT_RSP,
   MSG_ID_POC_TALK_DISCONNECT_IND,
   MSG_ID_POC_TALK_STATUS_SUBSCRIBE_RSP,
   MSG_ID_POC_TALK_STATUS_NOTIFY_IND,   
   MSG_ID_POC_FLOOR_GRANT_IND,
   MSG_ID_POC_FLOOR_TAKEN_IND,
   MSG_ID_POC_FLOOR_DENY_IND,
   MSG_ID_POC_FLOOR_IDLE_IND,
   MSG_ID_POC_FLOOR_REVOKE_IND,
   MSG_ID_POC_GROUP_INIT_RSP,
   MSG_ID_POC_GROUP_DEINIT_RSP,
   MSG_ID_POC_GET_GROUP_LIST_RSP,
   MSG_ID_POC_CREATE_GROUP_LIST_RSP,
   MSG_ID_POC_DEL_GROUP_LIST_RSP,
   MSG_ID_POC_UPDATE_GROUP_ENTRY_RSP,
   MSG_ID_POC_DEL_GROUP_ENTRY_RSP,
   MSG_ID_POC_GET_TALK_GROUP_LIST_RSP,
   MSG_ID_POC_CREATE_TALK_GROUP_LIST_RSP,
   MSG_ID_POC_DEL_TALK_GROUP_LIST_RSP,
   MSG_ID_POC_UPDATE_TALK_GROUP_ENTRY_RSP,
   MSG_ID_POC_DEL_TALK_GROUP_ENTRY_RSP,
   MSG_ID_POC_UPDATE_TALK_GROUP_PARAM_RSP,
   MSG_ID_POC_MEDIA_START_ENCODE_RSP,
   MSG_ID_POC_MEDIA_STOP_ENCODE_RSP,
   MSG_ID_POC_MEDIA_START_DECODE_RSP,
   MSG_ID_POC_MEDIA_STOP_DECODE_RSP,   
   MSG_ID_POC_NEW_PERSONAL_ALERT_IND,
   MSG_ID_POC_PRESENCE_SUBSCRIBE_RSP,
   MSG_ID_POC_PRESENCE_NOTIFY_IND,
   MSG_ID_POC_PRESENCE_PUBLISH_RSP,
   MSG_ID_POC_PRESENCE_PUBLISH_IND,
   MSG_ID_POC_SEND_PERSONAL_ALERT_RSP,
   
    
   MSG_ID_POC_MEDIA_ENCODED_IND,
 
#line 474 "adaptation\include\stack_msgs.h"
   MSG_ID_POC_CODE_CHECK_POINT,
  
   #line 1 "interface\bt\bluetooth_sap.h"
 


































 










































































































































































































































   MSG_ID_BT_NOTIFY_EVM_IND = BT_MSG_CODE_BEGIN,
   MSG_ID_BT_POWERON_REQ,
   MSG_ID_BT_POWERON_CNF,
   MSG_ID_BT_ENGINEER_MODE_POWERON_REQ,
   MSG_ID_BT_ENGINEER_MODE_POWERON_CNF,
   MSG_ID_BT_POWEROFF_REQ,
   MSG_ID_BT_POWEROFF_CNF,
   MSG_ID_BT_ENGINEER_MODE_POWEROFF_REQ,
   MSG_ID_BT_ENGINEER_MODE_POWEROFF_CNF,   
   MSG_ID_BT_RESET_REQ_IND,
   MSG_ID_BT_MMI_RESET_REQ,
   MSG_ID_BT_MMI_RESET_CNF,
   MSG_ID_BT_L4C_RESET_REQ,
   MSG_ID_BT_L4C_RESET_CNF,   
   MSG_ID_BT_RESTART_REQ,
   MSG_ID_BT_READY_IND,
   MSG_ID_BT_DATA_TO_READ_IND,
   MSG_ID_BT_HOST_WAKE_UP_IND,
   MSG_ID_BT_WIFI_SET_CHNL_REQ,   
   MSG_ID_BT_JSR_ACTIVE_REQ,   
   MSG_ID_BT_JSR_ACTIVE_CNF,      
   MSG_ID_BT_JSR_DEACTIVE_REQ,   
   MSG_ID_BT_JSR_DEACTIVE_CNF,      
   MSG_ID_BT_JSR_TEST_INIF_REQ,   
   MSG_ID_BT_JSR_TEST_CMD1_REQ,   
   MSG_ID_BT_JSR_TEST_CMD2_REQ,      
   MSG_ID_BT_JSR_TEST_CMD3_REQ,   
   MSG_ID_BT_JSR_TEST_CMD4_REQ,      
   MSG_ID_BT_JSR_TEST_CMD5_REQ,      
   
    
   MSG_ID_BT_TEST_MODE_REQ,      
   MSG_ID_BT_TEST_CMD_REQ,
   MSG_ID_BT_L4C_TEST_CMD_CNF,
   MSG_ID_BT_PCM_LB_REQ,
   MSG_ID_BT_PCM_LB_CNF,
   MSG_ID_BT_SET_BD_ADDR_REQ,
   MSG_ID_BT_SET_POWER_TABLE_REQ,
   MSG_ID_BT_SET_ANA_TRIM_REQ,
   MSG_ID_BT_L4C_AT_GENERAL_CNF,
   MSG_ID_BT_GET_BD_ADDR_REQ,
   MSG_ID_BT_GET_BD_ADDR_CNF,
   MSG_ID_BT_GET_BT_VERSION_REQ,
   MSG_ID_BT_GET_BT_VERSION_CNF,   
   MSG_ID_BT_ENGINEER_MODE_CNF,   
   MSG_ID_BT_ENGINEER_MODE_TXRX_TEST_REQ,
   MSG_ID_BT_ENGINEER_MODE_TXRX_TEST_CNF,
   MSG_ID_BT_ENGINEER_MODE_POWER_TEST_REQ,
   MSG_ID_BT_ENGINEER_MODE_POWER_TEST_CNF,
    MSG_TAG_BT_SAP_START_MSG,
    
   MSG_TAG_BT_SPP_FIRST_REQ_MSG,
   MSG_ID_BT_SPP_ACTIVATE_REQ = MSG_TAG_BT_SPP_FIRST_REQ_MSG,
   MSG_ID_BT_SPP_CONNECT_REQ,  
   MSG_ID_BT_SPP_SCO_CONNECT_REQ, 
   MSG_ID_BT_SPP_SEND_DATA_REQ,
   MSG_ID_BT_SPP_GET_DATA_REQ,   
   MSG_ID_BT_SPP_DEACTIVATE_REQ,
   MSG_ID_BT_SPP_DISCONNECT_REQ,
   MSG_ID_BT_SPP_AUDIO_CONNECT_REQ,
   MSG_ID_BT_SPP_AUDIO_DISCONNECT_REQ, 
   MSG_ID_BT_SPP_AUTH_RSP, 
    
   MSG_ID_BT_SPP_UART_OWNER_CNF,
    
   MSG_ID_BT_SPP_UART_PLUGOUT_CNF,
   MSG_ID_BT_DUN_ACTIVATE_REQ,
   MSG_ID_BT_DUN_DEACTIVATE_REQ,
   MSG_ID_BT_DUN_DISCONNECT_REQ,
   MSG_ID_BT_DUN_AUTH_RSP,
   
    
   MSG_ID_BT_FAX_ACTIVATE_REQ,
   MSG_ID_BT_FAX_DEACTIVATE_REQ,
   MSG_ID_BT_FAX_DISCONNECT_REQ,
   MSG_ID_BT_FAX_AUTH_RSP,
   MSG_TAG_BT_SPP_LAST_REQ_MSG = MSG_ID_BT_FAX_AUTH_RSP,  

    
   MSG_ID_BT_SPP_CONNECT_IND,
   MSG_ID_BT_SPP_SCO_CONNECT_IND,   
   MSG_ID_BT_SPP_DISCONNECT_IND,
   MSG_ID_BT_SPP_ACTIVATE_CNF,
   MSG_ID_BT_SPP_DEACTIVATE_CNF,
   MSG_ID_BT_SPP_DISCONNECT_CNF,
   MSG_ID_BT_SPP_AUTH_REQ, 
   MSG_ID_BT_SPP_AUDIO_CONNECT_CNF,
   MSG_ID_BT_SPP_AUDIO_CONNECT_IND,
   MSG_ID_BT_SPP_AUDIO_DISCONNECT_CNF,
   MSG_ID_BT_SPP_AUDIO_DISCONNECT_IND, 
   MSG_ID_BT_SPP_SCO_RSSI_IND, 
   MSG_ID_BT_SPP_CONNECT_CNF,   

   MSG_ID_BT_SPP_UART_OWNER_IND,  

    
   MSG_ID_BT_DUN_CONNECT_IND,
   MSG_ID_BT_DUN_DISCONNECT_IND,
   MSG_ID_BT_DUN_ACTIVATE_CNF,
   MSG_ID_BT_DUN_DEACTIVATE_CNF,
   MSG_ID_BT_DUN_DISCONNECT_CNF,
   MSG_ID_BT_DUN_AUTH_REQ,

    
   MSG_ID_BT_FAX_CONNECT_IND,
   MSG_ID_BT_FAX_DISCONNECT_IND,
   MSG_ID_BT_FAX_ACTIVATE_CNF,
   MSG_ID_BT_FAX_DEACTIVATE_CNF,
   MSG_ID_BT_FAX_DISCONNECT_CNF,
   MSG_ID_BT_FAX_AUTH_REQ,

     
    MSG_TAG_BT_BM_FIRST_REQ_MSG,
    MSG_ID_BT_BM_DISCOVERY_REQ = MSG_TAG_BT_BM_FIRST_REQ_MSG,
    MSG_ID_BT_BM_DISCOVERY_CANCEL_REQ,
    MSG_ID_BT_BM_WRITE_LOCAL_NAME_REQ,
    MSG_ID_BT_BM_READ_LOCAL_NAME_REQ,
    MSG_ID_BT_BM_READ_REMOTE_NAME_REQ,
    MSG_ID_BT_BM_WRITE_SCANENABLE_MODE_REQ,
    MSG_ID_BT_BM_READ_SCANENABLE_MODE_REQ,
    MSG_ID_BT_BM_READ_LOCAL_ADDR_REQ,
    MSG_ID_BT_BM_READ_LOCAL_COD_REQ,
    MSG_ID_BT_BM_WRITE_LOCAL_COD_REQ,
    MSG_ID_BT_BM_READ_PROPERTY_REQ,
    MSG_ID_BT_BM_WRITE_AUTHENTICATION_MODE_REQ,
    MSG_ID_BT_BM_PIN_CODE_RSP,
    MSG_ID_BT_BM_BONDING_REQ,
    MSG_ID_BT_BM_DELETE_TRUST_REQ,
    MSG_ID_BT_BM_DELETE_TRUST_ALL_REQ,
    MSG_ID_BT_BM_BONDING_CANCEL_REQ,
    MSG_ID_BT_BM_PAIRING_CANCEL_REQ,
    MSG_ID_BT_BM_SAVE_SETTING_REQ,
    MSG_ID_BT_BM_RESTORE_SETTING_REQ,
    MSG_ID_BT_BM_SERVICE_SEARCH_REQ,
    MSG_ID_BT_BM_SEARCH_ATTRIBUTE_REQ,
    MSG_ID_BT_BM_SEARCH_RAW_REQ,
    MSG_ID_BT_BM_LINK_ALLOW_REQ,
    MSG_ID_BT_BM_LINK_DISALLOW_REQ,
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_NOT_AUTO_REQ,
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_RSP,    
    MSG_ID_BT_BM_GET_LINK_STATE_REQ,
    MSG_ID_BT_BM_SET_LINK_STATE_REQ,   
    MSG_TAG_BT_BM_LAST_REQ_MSG = MSG_ID_BT_BM_SET_LINK_STATE_REQ,

     
    MSG_TAG_BT_BMAPP_FIRST_REQ_MSG,
    MSG_ID_BT_BM_DISCOVERY_RESULT_IND = MSG_TAG_BT_BMAPP_FIRST_REQ_MSG,
    MSG_ID_BT_BM_DISCOVERY_CNF,
    MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF,
    MSG_ID_BT_BM_WRITE_LOCAL_NAME_CNF,
    MSG_ID_BT_BM_READ_LOCAL_NAME_CNF,
    MSG_ID_BT_BM_READ_REMOTE_NAME_CNF,
    MSG_ID_BT_BM_WRITE_SCANENABLE_MODE_CNF,
    MSG_ID_BT_BM_READ_SCANENABLE_MODE_CNF,
    MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF,
    MSG_ID_BT_BM_READ_LOCAL_COD_CNF,
    MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF,
    MSG_ID_BT_BM_READ_PROPERTY_CNF,
    MSG_ID_BT_BM_WRITE_AUTHENTICATION_MODE_CNF,
    MSG_ID_BT_BM_PIN_CODE_IND,
    MSG_ID_BT_BM_BONDING_CNF,
    MSG_ID_BT_BM_BONDING_RESULT_IND,
    MSG_ID_BT_BM_DELETE_TRUST_CNF,
    MSG_ID_BT_BM_DELETE_TRUST_ALL_CNF,
    MSG_ID_BT_BM_BONDING_CANCEL_CNF,
    MSG_ID_BT_BM_PAIRING_CANCEL_CNF,
    MSG_ID_BT_BM_SAVE_SETTING_CNF,
    MSG_ID_BT_BM_RESTORE_SETTING_CNF,
    MSG_ID_BT_BM_SERVICE_SEARCH_RESULT_IND,
    MSG_ID_BT_BM_SERVICE_SEARCH_CNF,
    MSG_ID_BT_BM_SEARCH_ATTRIBUT_RESULT_IND,
    MSG_ID_BT_BM_SEARCH_ATTRIBUTE_CNF,
    MSG_ID_BT_BM_SEARCH_RAW_RESULT,    
    MSG_ID_BT_BM_SEARCH_RAW_CNF,
    MSG_ID_BT_BM_LINK_STATE_IND,
    MSG_ID_BT_BM_LINK_ALLOW_CNF,
    MSG_ID_BT_BM_LINK_DISALLOW_CNF,    
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_IND,    
    MSG_ID_BT_BM_GET_LINK_STATE_CNF,   
    MSG_ID_BT_BM_SET_LINK_STATE_CNF,   
    MSG_TAG_BT_BMAPP_LAST_REQ_MSG = MSG_ID_BT_BM_SET_LINK_STATE_CNF,


     
    MSG_TAG_BT_HSG_FIRST_REQ_MSG,
    MSG_ID_BT_HSG_ACTIVATE_REQ = MSG_TAG_BT_HSG_FIRST_REQ_MSG,
    MSG_ID_BT_HSG_DEACTIVATE_REQ,
    MSG_ID_BT_HSG_CONNECT_REQ,
	MSG_ID_BT_HSG_CONNECT_IND_RES,
    MSG_ID_BT_HSG_DISCONNECT_REQ,    
    MSG_ID_BT_HSG_BUTTONPRESS_REQ,
    MSG_ID_BT_HSG_MVOLUMEDOWN_REQ,
    MSG_ID_BT_HSG_MVOLUMEUP_REQ,
    MSG_ID_BT_HSG_SVOLUMEDOWN_REQ,
    MSG_ID_BT_HSG_SVOLUMEUP_REQ,  
    MSG_ID_BT_HSG_SPEAKER_GAIN_REQ,
    MSG_ID_BT_HSG_MIC_GAIN_REQ,
    MSG_TAG_BT_HSG_LAST_REQ_MSG = MSG_ID_BT_HSG_MIC_GAIN_REQ,
	
     
    MSG_ID_BT_HSG_ACTIVATE_CNF,
    MSG_ID_BT_HSG_DEACTIVATE_CNF,    
    MSG_ID_BT_HSG_CONNECT_CNF,
    MSG_ID_BT_HSG_CONNECT_IND,
	MSG_ID_BT_HSG_CONNECT_IND_REQ,
    MSG_ID_BT_HSG_DISCONNECT_CNF,
    MSG_ID_BT_HSG_DISCONNECT_IND,
    MSG_ID_BT_HSG_SPEAKER_GAIN_CNF,
    MSG_ID_BT_HSG_SPEAKER_GAIN_IND,
    MSG_ID_BT_HSG_MIC_GAIN_IND,
    MSG_ID_BT_HSG_MIC_GAIN_CNF,

    
   MSG_TAG_BT_HFG_FIRST_REQ_MSG,
   MSG_ID_BT_HFG_ACTIVATE_REQ = MSG_TAG_BT_HFG_FIRST_REQ_MSG,   
   MSG_ID_BT_HFG_DEACTIVATE_REQ,
   MSG_ID_BT_HFG_DISCONNECT_REQ,
   MSG_ID_BT_HFG_CONNECT_REQ,
   MSG_ID_BT_HFG_CONNECT_IND_RES,
   MSG_ID_BT_HFG_SCO_CONNECT_REQ,
   MSG_ID_BT_HFG_SCO_DISCONNECT_REQ,
   MSG_ID_BT_HFG_SPEAKER_GAIN_REQ,
   MSG_ID_BT_HFG_MIC_GAIN_REQ,
   MSG_ID_BT_HFG_SEND_DATA_REQ,
   MSG_TAG_BT_HFG_LAST_REQ_MSG = MSG_ID_BT_HFG_SEND_DATA_REQ,

    
   MSG_ID_BT_HFG_ACTIVATE_CNF,
   MSG_ID_BT_HFG_DEACTIVATE_CNF,   
   MSG_ID_BT_HFG_CONNECT_CNF,   
   MSG_ID_BT_HFG_CONNECT_IND,
   MSG_ID_BT_HFG_SLC_FINISH_IND,
   MSG_ID_BT_HFG_CONNECT_IND_REQ,
   MSG_ID_BT_HFG_DISCONNECT_CNF,   
   MSG_ID_BT_HFG_DISCONNECT_IND,
   MSG_ID_BT_HFG_SCO_CONNECT_CNF,
   MSG_ID_BT_HFG_SCO_CONNECT_IND,
   MSG_ID_BT_HFG_SCO_DISCONNECT_CNF,
   MSG_ID_BT_HFG_SCO_DISCONNECT_IND,
   MSG_ID_BT_HFG_SPEAKER_GAIN_CNF,
   MSG_ID_BT_HFG_SPEAKER_GAIN_IND,
   MSG_ID_BT_HFG_MIC_GAIN_IND,
   MSG_ID_BT_HFG_MIC_GAIN_CNF,

    
   MSG_TAG_BT_HIDD_FIRST_REQ_MSG,
   MSG_ID_BT_HIDD_ACTIVATE_REQ = MSG_TAG_BT_HIDD_FIRST_REQ_MSG,   
   MSG_ID_BT_HIDD_DEACTIVATE_REQ,
   MSG_ID_BT_HIDD_CONNECT_REQ,
   MSG_ID_BT_HIDD_CONNECTION_AUTHORIZE_RSP,
   MSG_ID_BT_HIDD_CONTROL_REQ,
   MSG_ID_BT_HIDD_DISCONNECT_REQ,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_REQ,
   MSG_ID_BT_HIDD_GET_REPORT_RSP,
   MSG_ID_BT_HIDD_SET_REPORT_RSP,
   MSG_ID_BT_HIDD_GET_PROTOCOL_RSP,
   MSG_ID_BT_HIDD_SET_PROTOCOL_RSP,
   MSG_ID_BT_HIDD_GET_IDLE_RATE_RSP,
   MSG_ID_BT_HIDD_SET_IDLE_RATE_RSP,
   MSG_TAG_BT_HIDD_LAST_REQ_MSG = MSG_ID_BT_HIDD_SET_IDLE_RATE_RSP,

    
   MSG_ID_BT_HIDD_ACTIVATE_CNF,
   MSG_ID_BT_HIDD_DEACTIVATE_CNF,   
   MSG_ID_BT_HIDD_CONNECT_CNF,   
   MSG_ID_BT_HIDD_CONNECT_IND,
   MSG_ID_BT_HIDD_CONNECTION_AUTHORIZE_IND,
   MSG_ID_BT_HIDD_DISCONNECT_CNF,   
   MSG_ID_BT_HIDD_DISCONNECT_IND,
   MSG_ID_BT_HIDD_CONTROL_CNF,
   MSG_ID_BT_HIDD_CONTROL_IND,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_CNF,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_IND,
   MSG_ID_BT_HIDD_GET_REPORT_IND,
   MSG_ID_BT_HIDD_SET_REPORT_IND,
   MSG_ID_BT_HIDD_GET_PROTOCOL_IND,
   MSG_ID_BT_HIDD_SET_PROTOCOL_IND,
   MSG_ID_BT_HIDD_GET_IDLE_RATE_IND,
   MSG_ID_BT_HIDD_SET_IDLE_RATE_IND,

    
   MSG_TAG_BT_AVCTP_FIRST_REQ_MSG,
   MSG_ID_BT_AVCTP_ACTIVATE_REQ = MSG_TAG_BT_AVCTP_FIRST_REQ_MSG,   
   MSG_ID_BT_AVCTP_INIT_REQ,
   MSG_ID_BT_AVCTP_CONNECT_REQ,
   MSG_ID_BT_AVCTP_CONNECT_RSP,            
   MSG_ID_BT_AVCTP_DISCONNECT_REQ,     
   MSG_ID_BT_AVCTP_DATA_REQ,    
   MSG_TAG_BT_AVCTP_LAST_REQ_MSG = MSG_ID_BT_AVCTP_DATA_REQ,

   
    
   
   MSG_ID_BT_A2DP_ACTIVATE_REQ,
   MSG_ID_BT_A2DP_ACTIVATE_CNF,
   MSG_ID_BT_A2DP_DEACTIVATE_REQ,
   MSG_ID_BT_A2DP_DEACTIVATE_CNF,
   MSG_ID_BT_A2DP_SIGNAL_CONNECT_REQ,
   MSG_ID_BT_A2DP_SIGNAL_CONNECT_CNF,
   MSG_ID_BT_A2DP_SIGNAL_CONNECT_IND,
   MSG_ID_BT_A2DP_SIGNAL_DISCONNECT_REQ,
   MSG_ID_BT_A2DP_SIGNAL_DISCONNECT_CNF,
   MSG_ID_BT_A2DP_SIGNAL_DISCONNECT_IND,
   
   MSG_ID_BT_A2DP_SEP_DISCOVER_REQ,
   MSG_ID_BT_A2DP_SEP_DISCOVER_CNF,
   MSG_ID_BT_A2DP_SEP_DISCOVER_IND,
   MSG_ID_BT_A2DP_SEP_DISCOVER_RES,
   MSG_ID_BT_A2DP_CAPABILITIES_GET_REQ,
   MSG_ID_BT_A2DP_CAPABILITIES_GET_CNF,
   MSG_ID_BT_A2DP_CAPABILITIES_GET_IND,
   MSG_ID_BT_A2DP_CAPABILITIES_GET_RES,
   MSG_ID_BT_A2DP_STREAM_CONFIG_REQ,
   MSG_ID_BT_A2DP_STREAM_CONFIG_CNF,
   MSG_ID_BT_A2DP_STREAM_CONFIG_IND,
   MSG_ID_BT_A2DP_STREAM_CONFIG_RES,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_REQ,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_CNF,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_IND,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_RES,
   MSG_ID_BT_A2DP_STREAM_OPEN_REQ,
   MSG_ID_BT_A2DP_STREAM_OPEN_CNF,
   MSG_ID_BT_A2DP_STREAM_OPEN_IND,
   MSG_ID_BT_A2DP_STREAM_OPEN_RES,
   MSG_ID_BT_A2DP_STREAM_START_REQ,
   MSG_ID_BT_A2DP_STREAM_START_CNF,
   MSG_ID_BT_A2DP_STREAM_START_IND,
   MSG_ID_BT_A2DP_STREAM_START_RES,
   MSG_ID_BT_A2DP_STREAM_PAUSE_REQ,
   MSG_ID_BT_A2DP_STREAM_PAUSE_CNF,
   MSG_ID_BT_A2DP_STREAM_PAUSE_IND,
   MSG_ID_BT_A2DP_STREAM_PAUSE_RES,
   MSG_ID_BT_A2DP_STREAM_QOS_IND,
   MSG_ID_BT_A2DP_STREAM_DATA_SEND_REQ,
   MSG_ID_BT_A2DP_STREAM_CLOSE_REQ,
   MSG_ID_BT_A2DP_STREAM_CLOSE_CNF,
   MSG_ID_BT_A2DP_STREAM_CLOSE_IND,
   MSG_ID_BT_A2DP_STREAM_CLOSE_RES,
   MSG_ID_BT_A2DP_STREAM_ABORT_REQ,
   MSG_ID_BT_A2DP_STREAM_ABORT_CNF,
   MSG_ID_BT_A2DP_STREAM_ABORT_IND,
   MSG_ID_BT_A2DP_STREAM_ABORT_RES,

       
   MSG_ID_BT_AVRCP_ACTIVATE_REQ,
   MSG_ID_BT_AVRCP_ACTIVATE_CNF,
   MSG_ID_BT_AVRCP_DEACTIVATE_REQ,
   MSG_ID_BT_AVRCP_DEACTIVATE_CNF,
   MSG_ID_BT_AVRCP_CONNECT_REQ,
   MSG_ID_BT_AVRCP_CONNECT_CNF,
   MSG_ID_BT_AVRCP_CONNECT_IND,
   MSG_ID_BT_AVRCP_CONNECT_IND_RES,
   MSG_ID_BT_AVRCP_DISCONNECT_REQ,
   MSG_ID_BT_AVRCP_DISCONNECT_CNF, 
   MSG_ID_BT_AVRCP_DISCONNECT_IND,
   
   MSG_ID_BT_AVRCP_CMD_FRAME_REQ,
   MSG_ID_BT_AVRCP_CMD_FRAME_CNF,
   MSG_ID_BT_AVRCP_CMD_FRAME_IND,
   MSG_ID_BT_AVRCP_CMD_FRAME_IND_RES,


   MSG_TAG_BT_TEST_FIRST_REQ_MSG,

   MSG_ID_BT_SDP_TEST_ACTIVATE_REQ = MSG_TAG_BT_TEST_FIRST_REQ_MSG,
   MSG_ID_BT_SDP_TEST_CLOSE_REQ,
   MSG_ID_BT_RFCOMM_TEST_ACTIVATE_REQ,
   MSG_ID_BT_L2CAP_TEST_CMD_REQ,
   MSG_ID_BT_GAP_TEST_CMD_REQ,
   MSG_ID_BT_AVDTP_TEST_CMD_REQ,
   MSG_ID_BT_JBT_TEST_CMD_REQ,
   MSG_ID_BT_SIMAP_TEST_ACTIVATE_REQ,
   MSG_TAG_BT_TEST_LAST_REQ_MSG = MSG_ID_BT_SIMAP_TEST_ACTIVATE_REQ,
   
   MSG_TAG_BT_SDPDB_FIRST_REQ_MSG,
   MSG_ID_BT_SDPDB_REGISTER_REQ = MSG_TAG_BT_SDPDB_FIRST_REQ_MSG,
   MSG_ID_BT_SDPDB_DEREGISTER_REQ,
   MSG_TAG_BT_SDPDB_LAST_REQ_MSG = MSG_ID_BT_SDPDB_DEREGISTER_REQ,
   MSG_ID_BT_SDPDB_REGISTER_CNF,
   MSG_ID_BT_SDPDB_DEREGISTER_CNF,
   
    
   MSG_TAG_BT_APP_SDPDB_FIRST_MSG,
   MSG_ID_BT_APP_SDPDB_GET_HANDLE_REQ = MSG_TAG_BT_APP_SDPDB_FIRST_MSG,
   MSG_ID_BT_APP_SDPDB_REGISTER_REQ,
   MSG_ID_BT_APP_SDPDB_RETRIEVE_RECOED_REQ,
   MSG_ID_BT_APP_SDPDB_DEREGISTER_REQ,
   MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF,
   MSG_ID_BT_APP_SDPDB_REGISTER_CNF,
   MSG_ID_BT_APP_SDPDB_RETRIEVE_RECOED_CNF,
   MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF,
   MSG_TAG_BT_APP_SDPDB_LAST_MSG = MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF,

    
   MSG_TAG_BT_JSR82_SEC_FIRST_MSG,
   MSG_ID_BT_JSR82_AUTHENTICATION_REQ = MSG_TAG_BT_JSR82_SEC_FIRST_MSG,
   MSG_ID_BT_JSR82_AUTHORIZATION_REQ,
   MSG_ID_BT_JSR82_ENCRYPTION_REQ,
   MSG_ID_BT_JSR82_AUTHENTICATION_CNF,
   MSG_ID_BT_JSR82_AUTHORIZATION_CNF,
   MSG_ID_BT_JSR82_ENCRYPTION_CNF,
   MSG_TAG_BT_SEC_LAST_MSG = MSG_ID_BT_JSR82_ENCRYPTION_CNF,

    
   MSG_ID_GOEP_REGISTER_SERVER_REQ,
   MSG_ID_GOEP_REGISTER_SERVER_RSP,
   MSG_ID_GOEP_DEREGISTER_SERVER_REQ,
   MSG_ID_GOEP_DEREGISTER_SERVER_RSP,
   MSG_ID_GOEP_CONNECT_IND,
   MSG_ID_GOEP_CONNECT_RES,
   MSG_ID_GOEP_PUSH_IND,
   MSG_ID_GOEP_PUSH_RES,
   MSG_ID_GOEP_PULL_IND,
   MSG_ID_GOEP_PULL_RES,
   MSG_ID_GOEP_SET_FOLDER_IND,
   MSG_ID_GOEP_SET_FOLDER_RES,
   MSG_ID_GOEP_ABORT_IND,
   MSG_ID_GOEP_ABORT_RES,
   MSG_ID_GOEP_AUTH_REQ,
   MSG_ID_GOEP_AUTH_RSP,
   MSG_ID_GOEP_REGISTER_CLIENT_REQ,
   MSG_ID_GOEP_REGISTER_CLIENT_RSP,
   MSG_ID_GOEP_DEREGISTER_CLIENT_REQ,
   MSG_ID_GOEP_DEREGISTER_CLIENT_RSP,
   MSG_ID_GOEP_CONNECT_REQ,
   MSG_ID_GOEP_CONNECT_RSP,
   MSG_ID_GOEP_PUSH_REQ,
   MSG_ID_GOEP_PUSH_RSP,
   MSG_ID_GOEP_PULL_REQ,
   MSG_ID_GOEP_PULL_RSP,
   MSG_ID_GOEP_SET_FOLDER_REQ,
   MSG_ID_GOEP_SET_FOLDER_RSP,
   MSG_ID_GOEP_ABORT_REQ,
   MSG_ID_GOEP_ABORT_RSP,
   MSG_ID_GOEP_DISCONNECT_REQ,
   MSG_ID_GOEP_DISCONNECT_RSP,
   MSG_ID_GOEP_DISCONNECT_IND,
   MSG_ID_GOEP_DISCONNECT_RES,
   MSG_ID_GOEP_TPDISCONNECT_REQ,
   MSG_ID_GOEP_AUTH_IND,
   MSG_ID_GOEP_AUTH_RES,
   MSG_ID_GOEP_AUTHORIZE_IND,
   MSG_ID_GOEP_AUTHORIZE_RES,
      
   MSG_TAG_BT_APP_REG_SERVICE_FIRST_REQ_MSG,
   MSG_ID_BT_RECORD_REG_REQ = MSG_TAG_BT_APP_REG_SERVICE_FIRST_REQ_MSG,
   MSG_ID_BT_RECORD_UNREQ_REQ,
   MSG_ID_BT_RECORD_REQ_CNF,
   MSG_ID_BT_RECORD_UNREQ_CNF,
   MSG_TAG_BT_APP_REG_SERVICE_LAST_REQ_MSG = MSG_ID_BT_RECORD_UNREQ_CNF,

      
    

    
   MSG_TAG_BT_SIMAP_FIRST_REQ_MSG,
   MSG_ID_BT_SIMAP_ACTIVATE_REQ = MSG_TAG_BT_SIMAP_FIRST_REQ_MSG,
   MSG_ID_BT_SIMAP_DEACTIVATE_REQ,
   MSG_ID_BT_SIMAP_AUTH_RSP,
    
   MSG_ID_BT_SIMAP_DISCONNECT_REQ,
   MSG_TAG_BT_SIMAP_LAST_REQ_MSG = MSG_ID_BT_SIMAP_DISCONNECT_REQ,
   
    
   
    
   MSG_ID_BT_SIMAP_ACTIVATE_CNF,
   MSG_ID_BT_SIMAP_DEACTIVATE_CNF, 
   MSG_ID_BT_SIMAP_AUTH_REQ,
   MSG_ID_BT_SIMAP_CONNECT_CNF,
   MSG_ID_BT_SIMAP_CONNECT_IND,
   MSG_ID_BT_SIMAP_DISCONNECT_CNF,
      
   MSG_ID_BT_SIMAP_DISCONNECT_IND,
   
   

 
    
   MSG_ID_BT_SIM_CONNECT_REQ,
   MSG_ID_BT_SIM_RESET_REQ,
   MSG_ID_BT_SIM_APDU_REQ,
   MSG_ID_BT_SIM_DISCONNECT_REQ,
   MSG_ID_BT_SIM_POWER_OFF_REQ,
   
    
   MSG_TAG_BT_SIM_FIRST_REQ_MSG,
   MSG_ID_BT_SIM_CONNECT_CNF = MSG_TAG_BT_SIM_FIRST_REQ_MSG,
   MSG_ID_BT_SIM_RESET_CNF,
   MSG_ID_BT_SIM_APDU_CNF,
   MSG_ID_BT_SIM_DISCONNECT_CNF,
   MSG_ID_BT_SIM_POWER_OFF_CNF,   
   MSG_TAG_BT_SIM_LAST_REQ_MSG = MSG_ID_BT_SIM_POWER_OFF_CNF,

  
   MSG_TAG_BT_JSR82_SECTION_FIRST_MSG,
   MSG_ID_BT_JSR82_CONNECT_REQ = MSG_TAG_BT_JSR82_SECTION_FIRST_MSG,
   MSG_ID_BT_JSR82_CONNECT_CFN,
   MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ,
   MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF,
   MSG_ID_BT_JSR82_TURNON_SERVICE_REQ,
   MSG_ID_BT_JSR82_TURNON_SERVICE_CNF,
   MSG_ID_BT_JSR82_DISABLE_SERVICE_REQ,
   MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF,   
   MSG_ID_BT_JSR82_CONNECT_IND,
   MSG_ID_BT_JSR82_CONNECT_RSP,
   MSG_ID_BT_JSR82_DISCONNECT_REQ,
   MSG_ID_BT_JSR82_DISCONNECT_IND,
   MSG_ID_BT_JSR82_TX_DATA_REQ,
   MSG_ID_BT_JSR82_TX_DATA_CFN,   
   MSG_ID_BT_JSR82_RX_DATA_IND,
   MSG_ID_BT_JSR82_RX_DATA_RSP,   
   MSG_TAG_BT_JSR82_SECTION_LAST_MSG = MSG_ID_BT_JSR82_RX_DATA_RSP,   
   
    
   MSG_ID_BT_BPP_CONNECT_REQ,
   MSG_ID_BT_BPP_CONNECT_CNF,
   MSG_ID_BT_BPP_AUTHENTICATION_IND,
   MSG_ID_BT_BPP_AUTHENTICATION_RSP,
   MSG_ID_BT_BPP_DISCONNECT_REQ,
   MSG_ID_BT_BPP_DISCONNECT_IND,
   MSG_ID_BT_BPP_GET_PRINTER_ATTR_REQ,
   MSG_ID_BT_BPP_GET_PRINTER_ATTR_CNF,
   MSG_ID_BT_BPP_CREATE_JOB_REQ,
   MSG_ID_BT_BPP_CREATE_JOB_CNF,
   MSG_ID_BT_BPP_EVENT_IND,
   MSG_ID_BT_BPP_SEND_DOC_REQ,
   MSG_ID_BT_BPP_SEND_DOC_CNF,
   MSG_ID_BT_BPP_PROG_UPDATE_IND,
   MSG_ID_BT_BPP_PROG_UPDATE_RSP,
   
    
   MSG_ID_BT_BIP_CONNECT_REQ,
   MSG_ID_BT_BIP_CONNECT_CNF,
   MSG_ID_BT_BIP_DISCONNECT_REQ,
   MSG_ID_BT_BIP_GET_CAPABILITIES_REQ,
   MSG_ID_BT_BIP_GET_CAPABILITIES_CNF,
   MSG_ID_BT_BIP_PUT_IMG_REQ,
   MSG_ID_BT_BIP_PUT_IMG_CNF,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_REQ,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_CNF,
   MSG_ID_BT_BIP_GET_IMG_LIST_REQ,
   MSG_ID_BT_BIP_GET_IMG_LIST_CNF,
   MSG_ID_BT_BIP_GET_IMG_PROP_REQ,
   MSG_ID_BT_BIP_GET_IMG_PROP_CNF,
   MSG_ID_BT_BIP_GET_IMG_REQ,
   MSG_ID_BT_BIP_GET_IMG_CNF,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_REQ,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_CNF,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_REQ,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_CNF,
   MSG_ID_BT_BIP_ABORT_REQ,
   MSG_ID_BT_BIP_ABORT_CNF,
   MSG_ID_BT_BIP_ACTIVATE_REQ,
   MSG_ID_BT_BIP_ACTIVATE_CNF,
   MSG_ID_BT_BIP_DEACTIVATE_REQ,
   MSG_ID_BT_BIP_DEACTIVATE_CNF,
   MSG_ID_BT_BIP_CONNECT_IND,
   MSG_ID_BT_BIP_CONNECT_RSP,
   MSG_ID_BT_BIP_GET_CAPABILITIES_IND,
   MSG_ID_BT_BIP_GET_CAPABILITIES_RSP,
   MSG_ID_BT_BIP_PUT_IMG_IND,
   MSG_ID_BT_BIP_PUT_IMG_RSP,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_IND,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_RSP,
   MSG_ID_BT_BIP_GET_IMG_LIST_IND,
   MSG_ID_BT_BIP_GET_IMG_LIST_RSP,
   MSG_ID_BT_BIP_GET_IMG_PROP_IND,
   MSG_ID_BT_BIP_GET_IMG_PROP_RSP,
   MSG_ID_BT_BIP_GET_IMG_IND,
   MSG_ID_BT_BIP_GET_IMG_RSP,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_IND,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_RSP,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_IND,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_RSP,
   MSG_ID_BT_BIP_CONTINUE_IND,
   MSG_ID_BT_BIP_CONTINUE_RSP,
   MSG_ID_BT_BIP_ABORT_IND,
   MSG_ID_BT_BIP_COMPLETE_IND,
   MSG_ID_BT_BIP_DISCONNECT_IND,

   MSG_TAG_BT_SAP_END_MSG,

#line 477 "adaptation\include\stack_msgs.h"
   MSG_ID_BT_CODE_CHECK_POINT,
   
   #line 1 "interface\ps\xdm_sap.h"
 

































  









  

































 
	MSG_ID_XDM_CREATE_SESSION_REQ = XDM_MSG_CODE_BEGIN,
	MSG_ID_XDM_CREATE_SESSION_RSP,
	MSG_ID_XDM_DELETE_SESSION_REQ,
	MSG_ID_XDM_DELETE_SESSION_RSP,
	MSG_ID_XDM_GET_DOC_REQ,
	MSG_ID_XDM_GET_DOC_RSP,
	MSG_ID_XDM_PUT_DOC_REQ,
	MSG_ID_XDM_PUT_DOC_RSP,
	MSG_ID_XDM_DEL_DOC_REQ,
	MSG_ID_XDM_DEL_DOC_RSP,
	MSG_ID_XDM_GET_ELEMENT_REQ,
	MSG_ID_XDM_GET_ELEMENT_RSP,
	MSG_ID_XDM_PUT_ELEMENT_REQ,
	MSG_ID_XDM_PUT_ELEMENT_RSP,
	MSG_ID_XDM_DEL_ELEMENT_REQ,
	MSG_ID_XDM_DEL_ELEMENT_RSP,
	MSG_ID_XDM_GET_ATTR_REQ,
	MSG_ID_XDM_GET_ATTR_RSP,
	MSG_ID_XDM_PUT_ATTR_REQ,
	MSG_ID_XDM_PUT_ATTR_RSP,
	MSG_ID_XDM_DEL_ATTR_REQ,
	MSG_ID_XDM_DEL_ATTR_RSP,
	MSG_ID_XDM_CANCEL_REQUEST_REQ,
	MSG_ID_XDM_CANCEL_REQUEST_RSP,
	MSG_ID_XDM_GET_DIRECTORY_REQ,
	MSG_ID_XDM_GET_DIRECTORY_RSP,

	MSG_ID_XDM_CODE_END = MSG_ID_XDM_GET_DIRECTORY_RSP,
 
#line 480 "adaptation\include\stack_msgs.h"
   MSG_ID_XDM_CODE_CHECK_POINT,
   
   #line 1 "interface\wifi\wndrv_sap.h"
 


































 































































 



















 

   
 
MSG_ID_WNDRV_TEST_SET_REQ = WNDRV_MSG_CODE_BEGIN,
MSG_ID_WNDRV_TEST_QUERY_REQ,
MSG_ID_WNDRV_SUPC_DATA_REQ,
MSG_ID_WNDRV_SUPC_INIT_REQ,
MSG_ID_WNDRV_SUPC_DEINIT_REQ,
MSG_ID_WNDRV_SUPC_SITE_SURVEY_REQ,
MSG_ID_WNDRV_SUPC_JOIN_NETWORK_REQ,
MSG_ID_WNDRV_SUPC_DISJOIN_NETWORK_REQ,
MSG_ID_WNDRV_SUPC_COUNTRY_SETTING_REQ,
MSG_ID_WNDRV_SUPC_REMOVE_KEY_REQ,
MSG_ID_WNDRV_SUPC_ADD_KEY_REQ,
MSG_ID_WNDRV_SUPC_PMKID_UPDATE_REQ,
MSG_ID_WNDRV_SUPC_AUTH_STATE_UPDATE_REQ,
MSG_ID_WNDRV_SUPC_BLACKLIST_UPDATE_REQ, 
MSG_ID_WNDRV_SUPC_CHIP_POWERON_REQ,
MSG_ID_WNDRV_SUPC_CHIP_POWEROFF_REQ,
MSG_ID_TCPIP_WNDRV_DATA_REQ,
MSG_ID_TCPIP_WNDRV_SETBEARER_REQ,

 

   
MSG_ID_WNDRV_TEST_SET_CNF,
MSG_ID_WNDRV_TEST_QUERY_CNF,

 

   
MSG_ID_WNDRV_SCAN_INDICATION,
MSG_ID_WNDRV_STATISTIC_INDICATION,

 

   
MSG_ID_WNDRV_INTERRUPT_IND,

 

  
MSG_ID_SOC_WNDRV_DL_SRPDU_RESUME,

 

  
MSG_ID_WNDRV_MMI_POWEROFF_REQ,
MSG_ID_WNDRV_MMI_POWEROFF_RSP,
#line 483 "adaptation\include\stack_msgs.h"
   MSG_ID_WNDRV_CODE_CHECK_POINT,
   
   #line 1 "interface\wifi\supc_sap.h"
 


































 









































 


















 

   

MSG_ID_SUPC_ABM_WIFI_INIT_REQ = SUPC_MSG_CODE_BEGIN,
MSG_ID_SUPC_ABM_WIFI_DEINIT_REQ,
MSG_ID_SUPC_ABM_WIFI_CONNECT_REQ,
MSG_ID_SUPC_ABM_WIFI_DISCONNECT_REQ,
MSG_ID_SUPC_ABM_WIFI_AP_LIST_REQ,

MSG_ID_SUPC_MMI_WIFI_CURR_AP_INFO_IND,


 

   

MSG_ID_WNDRV_SUPC_DATA_IND,
MSG_ID_WNDRV_SUPC_INIT_CNF,
MSG_ID_WNDRV_SUPC_DEINIT_CNF,
MSG_ID_WNDRV_SUPC_SITE_SURVEY_IND,
MSG_ID_WNDRV_SUPC_NETWORK_CONNECT_IND,
MSG_ID_WNDRV_SUPC_NETWORK_CONNECT_FAIL_IND,
MSG_ID_WNDRV_SUPC_NETWORK_DISCONNECT_IND,
MSG_ID_WNDRV_SUPC_NETWORK_STATISTICS_IND,
MSG_ID_WNDRV_SUPC_PMKID_CANDIDATE_IND,
MSG_ID_WNDRV_SUPC_STATUS_IND,



#line 486 "adaptation\include\stack_msgs.h"
   MSG_ID_SUPC_CODE_CHECK_POINT,

   #line 1 "interface\ps\dhcp_sap.h"
 

































  









  

























 
	MSG_ID_ABM_DHCP_GET_IP_REQ = MSG_ID_DHCP_CODE_BEGIN,
	MSG_ID_ABM_DHCP_GET_IP_CNF,
	MSG_ID_ABM_DHCP_RELEASE_REQ,
	MSG_ID_ABM_DHCP_RELEASE_CNF,
	MSG_ID_ABM_DHCP_NOTIFY_IND,
	MSG_ID_SIP_DHCP_NOTIFY_IND,
    
	MSG_ID_DHCP_CODE_END = MSG_ID_SIP_DHCP_NOTIFY_IND,
 

#line 489 "adaptation\include\stack_msgs.h"
   MSG_ID_DHCP_CODE_CHECK_POINT,

   #line 1 "interface\ps\iperf_sap.h"
 

































  









  

























 
	MSG_ID_MMI_IPERF_RUN_REQ = MSG_ID_IPERF_CODE_BEGIN,
	MSG_ID_MMI_IPERF_RUN_CNF,
	MSG_ID_MMI_IPERF_REPORT_IND,

	MSG_ID_IPERF_CODE_END = MSG_ID_MMI_IPERF_REPORT_IND,
 

#line 492 "adaptation\include\stack_msgs.h"
   MSG_ID_IPERF_CODE_CHECK_POINT,

   #line 1 "interface\ps\tftp_sap.h"
 

































  









  

























 
    MSG_ID_APP_TFTP_RUN_REQ = MSG_ID_TFTP_CODE_BEGIN,
    MSG_ID_APP_TFTP_RUN_CNF,
    MSG_ID_APP_TFTP_CLOSE_REQ,
    MSG_ID_APP_TFTP_CLOSE_CNF,
    MSG_ID_APP_TFTP_RECV_IND,
    MSG_ID_APP_TFTP_RECV_RSP,
    MSG_ID_APP_TFTP_RESULT_IND,
    MSG_ID_TFTP_CODE_END = MSG_ID_APP_TFTP_RESULT_IND,
 

#line 495 "adaptation\include\stack_msgs.h"
   MSG_ID_TFTP_CODE_CHECK_POINT,
   
   #line 1 "interface\ps\saf_sap.h"
 


































 

       
   MSG_ID_APP_SAF_OPEN_CHANNEL_REQ = SAF_MSG_CODE_BEGIN,
   MSG_ID_APP_SAF_ABORT_OPEN_CHANNEL_REQ,
   MSG_ID_APP_SAF_CLOSE_CHANNEL_REQ,
   MSG_ID_APP_SAF_GET_DERIVED_ADDR_REQ,
   MSG_ID_APP_SAF_ABORT_GET_DERIVED_ADDR_REQ,
   MSG_ID_APP_SAF_GET_NAT_TYPE_REQ,
   MSG_ID_APP_SAF_ABORT_GET_NAT_TYPE_REQ,
   MSG_ID_APP_SAF_GET_NAT_BINDING_LIFETIME_REQ,
   MSG_ID_APP_SAF_ABORT_GET_NAT_BINDING_LIFETIME_REQ,

       
   MSG_ID_APP_SAF_OPEN_CHANNEL_CNF,
   MSG_ID_APP_SAF_ABORT_OPEN_CHANNEL_CNF,
   MSG_ID_APP_SAF_CLOSE_CHANNEL_CNF,
   MSG_ID_APP_SAF_GET_DERIVED_ADDR_CNF,
   MSG_ID_APP_SAF_ABORT_GET_DERIVED_ADDR_CNF,
   MSG_ID_APP_SAF_GET_NAT_TYPE_CNF,
   MSG_ID_APP_SAF_ABORT_GET_NAT_TYPE_CNF,
   MSG_ID_APP_SAF_GET_NAT_BINDING_LIFETIME_CNF,
   MSG_ID_APP_SAF_ABORT_GET_NAT_BINDING_LIFETIME_CNF,
   MSG_ID_APP_SAF_CODE_END = MSG_ID_APP_SAF_ABORT_GET_NAT_BINDING_LIFETIME_CNF,
       
 
#line 498 "adaptation\include\stack_msgs.h"
   MSG_ID_SAF_CODE_CHECK_POINT,
   
   #line 1 "interface\ps\voip_sap.h"
 


































 


























































   MSG_ID_MMI_VOIP_REGISTER_REQ=VOIP_MSG_CODE_BEGIN,
   MSG_ID_MMI_VOIP_REGISTER_RSP,
   MSG_ID_MMI_VOIP_DEREGISTER_REQ,
   MSG_ID_MMI_VOIP_DEREGISTER_RSP,
   MSG_ID_MMI_VOIP_DEREGISTER_IND,

   MSG_ID_MMI_VOIP_SETTING_REQ,
   MSG_ID_MMI_VOIP_SETTING_RSP,

   MSG_ID_MMI_VOIP_PROGRESSING_IND,
   MSG_ID_MMI_VOIP_CALL_RING_IND,
   MSG_ID_MMI_VOIP_CALL_REPLACE_IND,
   MSG_ID_MMI_VOIP_CALL_REPLACE_CNF,
   MSG_ID_MMI_VOIP_CALL_REPLACE_COMPLETE_IND,
   MSG_ID_MMI_VOIP_CALL_END_IND,
   MSG_ID_MMI_VOIP_CALL_STATE_IND,
   MSG_ID_MMI_VOIP_CALL_ACT_REQ,
   MSG_ID_MMI_VOIP_CALL_ACT_RSP,

   MSG_ID_MMI_VOIP_WAITING_MSG_IND,
   MSG_ID_MMI_VOIP_RESET_IND,
   MSG_ID_MMI_VOIP_OPTION_REQ,
   MSG_ID_MMI_VOIP_OPTION_RSP,
   MSG_ID_MMI_VOIP_CONFERENCE_STATE_IND,
   MSG_ID_MMI_VOIP_TRANSFEREE_CNF,
   MSG_ID_MMI_VOIP_ACT_BK_REJ_RSP,
#line 501 "adaptation\include\stack_msgs.h"
   MSG_ID_VOIP_CODE_CHECK_POINT,

   #line 1 "interface\ps\uart_sim_sap.h"
 


































MSG_ID_UART_DATA_IND = VUART_MSG_CODE_BEGIN,
MSG_ID_UART_PUTBYTES_REQ,
MSG_ID_UART_SET_CONFIG_IND,

#line 504 "adaptation\include\stack_msgs.h"
   MSG_ID_VUART_CODE_CHECK_POINT,


   #line 1 "interface\media\med_c_sap.h"
 

































  









  



































	 
   MSG_ID_MEDIA_C_CAM_EVENT_IND=MSG_ID_MED_C_CODE_BEGIN,
   MSG_ID_MEDIA_C_CAM_TEMP_1,
	MSG_ID_MED_C_CODE_END=MSG_ID_MEDIA_C_CAM_TEMP_1,
	 


#line 508 "adaptation\include\stack_msgs.h"
   MSG_ID_MED_C_CODE_CHECK_POINT,


   #line 1 "interface\ps\syncml_sap.h"
 

































 




































 
    MSG_ID_MMI_SYNCML_SET_RECORD_REQ_IND = MSG_ID_SYNCML_CODE_BEGIN,
    MSG_ID_MMI_SYNCML_SET_RECORD_RES_REQ,
    MSG_ID_MMI_SYNCML_GET_RECORD_REQ_IND,
    MSG_ID_MMI_SYNCML_GET_RECORD_RES_REQ,
    MSG_ID_MMI_SYNCML_QUERY_LUID_LIST_REQ_IND,
    MSG_ID_MMI_SYNCML_QUERY_LUID_LIST_RES_REQ,
    MSG_ID_MMI_SYNCML_CLEAN_LUID_LIST_REQ_IND,
    MSG_ID_MMI_SYNCML_CLEAN_LUID_LIST_RES_REQ,
    MSG_ID_MMI_SYNCML_START_SYNC_REQ,
    MSG_ID_MMI_SYNCML_ABORT_SYNC_REQ,
    MSG_ID_MMI_SYNCML_FINISH_SYNC_IND,
    MSG_ID_MMI_SYNCML_PROGRESS_INFO_IND,
    MSG_ID_MMI_SYNCML_WAP_PUSH_REQ,
    MSG_ID_MMI_SYNCML_WAP_PUSH_RSP,
    MSG_ID_MMI_SYNCML_SAS_REQ,
    MSG_ID_MMI_SYNCML_SAS_RSP,
    MSG_ID_SYNCML_NOTIFY_EVM_IND,
 
#line 512 "adaptation\include\stack_msgs.h"
   MSG_ID_SYNCML_CODE_CHECK_POINT,

   #line 1 "interface\ps\rtsp_sap.h"
 

































  









  

































 
    
    MSG_ID_RTSP_SET_CHANNEL_REQ = RTSP_MSG_CODE_BEGIN,
    MSG_ID_RTSP_SET_CHANNEL_RSP,
    MSG_ID_RTSP_REMOVE_CHANNEL_REQ,
    MSG_ID_RTSP_REMOVE_CHANNEL_RSP,
    MSG_ID_RTSP_REQUEST_REQ,
    MSG_ID_RTSP_REQUEST_RSP,
    MSG_ID_RTSP_DISCONNECT_IND,
    MSG_ID_RTSP_CODE_END = MSG_ID_RTSP_DISCONNECT_IND,	
	
 
#line 515 "adaptation\include\stack_msgs.h"
   MSG_ID_RTSP_CODE_CHECK_POINT,

   #line 1 "interface\ps\mexe_sap.h"
 

































 
































 
    MSG_ID_MMI_GET_SIM_CERTIFICATE_REQ = MSG_ID_MEXE_CODE_BEGIN,
    MSG_ID_MMI_SEND_SIM_CERTIFICATE_RECORD_IND,
    MSG_ID_MMI_SEND_SIM_CERTIFICATE_RECORD_RES,
    MSG_ID_MMI_GET_SIM_CERTIFICATE_RSP,
 
#line 518 "adaptation\include\stack_msgs.h"
   MSG_ID_MEXE_CODE_CHECK_POINT,

   #line 1 "interface\ps\dm_sap.h"
 

































 












































 
MSG_ID_DM_ADD_ACCOUNT_REQ = MSG_ID_DM_CODE_BEGIN,
MSG_ID_DM_ADD_ACCOUNT_RSP,
MSG_ID_DM_DEL_ACCOUNT_REQ,
MSG_ID_DM_DEL_ACCOUNT_RSP,
MSG_ID_DM_GET_ACCOUNT_REQ,
MSG_ID_DM_GET_ACCOUNT_RSP,
MSG_ID_DM_LIST_SERVERID_REQ,
MSG_ID_DM_LIST_SERVERID_RSP,
MSG_ID_DM_GET_PSERVERID_REQ,
MSG_ID_DM_GET_PSERVERID_RSP,
MSG_ID_DM_SET_PSERVERID_REQ,
MSG_ID_DM_SET_PSERVERID_RSP,
MSG_ID_DM_NOTIFICATION_INIT_SESSION_REQ_IND,
MSG_ID_DM_NOTIFICATION_INIT_SESSION_RES,
MSG_ID_DM_GET_BOOTSTRAP_USERPIN_REQ_IND,
MSG_ID_DM_GET_BOOTSTRAP_USERPIN_RES,
MSG_ID_DM_DL_REQ_IND,
MSG_ID_DM_DL_RES,
MSG_ID_DM_UPDATE_REQ_IND,
MSG_ID_DM_UPDATE_RES,
MSG_ID_DM_ALERT_REQ_IND,
MSG_ID_DM_ALERT_RES,
MSG_ID_DM_RESET_IND,
MSG_ID_DM_DL_PROGRESS_IND,
MSG_ID_DM_EXEC_COMPLETE_IND,
MSG_ID_DM_SESSION_START_IND,
MSG_ID_DM_SESSION_FINISH_IND,
MSG_ID_DM_ERROR_IND,
MSG_ID_DM_INTERNAL,
MSG_ID_DM_NETWORK_SERVICE_AVAILABLE_IND,
MSG_ID_DM_NETWORK_SERVICE_NOT_AVAILABLE_IND,
MSG_ID_DM_PUSH_IND,
MSG_ID_DM_CHANGE_IND,
MSG_ID_DM_CCA_TEST,
 
#line 521 "adaptation\include\stack_msgs.h"
   MSG_ID_DM_CODE_CHECK_POINT,






   #line 1 "interface\GIS\gis_sap.h"
 

































  









  































    MSG_ID_GIS_CODE_BEGIN,

    MSG_ID_GIS_SAMPLE_ACTION_REQ,
    MSG_ID_GIS_SAMPLE_ACTION_CNF,    
    
    MSG_ID_GIS_CODE_END,
   

#line 529 "adaptation\include\stack_msgs.h"
   MSG_ID_GIS_CODE_CHECK_POINT,
















   #line 1 "interface\ps\ratcm_sap.h"
 


































 




















MSG_ID_RATCM_RRCE_CONN_EST_CNF = MSG_ID_RATCM_CODE_BEGIN,
MSG_ID_RATCM_RRCE_CONN_REL_CNF,
MSG_ID_RATCM_RRCE_CONN_REL_IND,
MSG_ID_RATCM_RRCE_DATA_TRANSFER_IND,
MSG_ID_RATCM_RRCE_DATA_TRANSFER_CNF,
MSG_ID_RATCM_RRCE_SECURITY_MODE_COMPLETE_IND,
MSG_ID_RATCM_RRCE_SECURITY_MODE_CHANGE_IND,
MSG_ID_RATCM_RRCE_CONN_LOSS_IND,
MSG_ID_RATCM_RRCE_RESET_KEYS_IND,
MSG_ID_RATCM_RRCE_RB_RE_ESTABLISHMENT_IND,

MSG_ID_RATCM_RRCE_PAGE_IND,

MSG_ID_RATCM_UAS_SYS_INFO_IND,
MSG_ID_RATCM_CSCE_INIT_CNF,
MSG_ID_RATCM_CSCE_PLMN_SEARCH_CNF,
MSG_ID_RATCM_CSCE_PLMN_LOSS_IND,
MSG_ID_RATCM_CSE_PLMN_LIST_CNF,
MSG_ID_RATCM_CSE_PLMN_LIST_UPDATE_IND,
MSG_ID_RATCM_CSE_PLMN_LIST_STOP_CNF, 
MSG_ID_RATCM_CSCE_RRC_DEACTIVATE_CNF,
MSG_ID_RAC_UAS_CELL_POWER_LEVEL_IND,
MSG_ID_RATCM_RRCE_CELL_CHANGE_START_IND,
MSG_ID_RATCM_CSCE_START_TIMER_OUT_OF_SERVICE_IND,
MSG_ID_RATCM_CSCE_RFON_CNF,
MSG_ID_RATCM_CSCE_RFOFF_CNF,


MSG_ID_RATCM_SLCE_MONITORING_CLOSE_LOOP_CNF,
MSG_ID_RATCM_SLCE_MONITORING_CLOSE_LOOP_IND,
MSG_ID_RATCM_SLCE_RAB_ESTABLISHMENT_IND,
MSG_ID_RATCM_SLCE_RAB_MODIFY_IND,
MSG_ID_RATCM_SLCE_RAB_RELEASE_IND,

 
MSG_ID_RATCM_LLC_STATUS_IND,
MSG_ID_RATCM_LLC_UNITDATA_IND,
MSG_ID_RATCM_LLC_AS_NAS_DATA_CNF,

 
MSG_ID_RATCM_URLC_UTEST_OPEN_LOOP_CNF,
MSG_ID_RATCM_URLC_UTEST_CLOSE_LOOP_M1_CNF,
MSG_ID_RATCM_URLC_UTEST_CLOSE_LOOP_M2_CNF,

 
MSG_ID_RATCM_BMC_DATA_IND,

 
MSG_ID_RATCM_GAS_CELL_CHANGE_START_IND,
MSG_ID_RATCM_GAS_CONN_ABORT_IND,
MSG_ID_RATCM_GAS_CONN_LOSS_IND,
MSG_ID_RATCM_GAS_CONN_EST_CNF,
MSG_ID_RATCM_GAS_CONN_EST_IND,
MSG_ID_RATCM_GAS_CONN_REL_CNF,
MSG_ID_RATCM_GAS_CONN_REL_IND,
MSG_ID_RATCM_GAS_DATA_CNF,
MSG_ID_RATCM_GAS_DATA_IND,
MSG_ID_RATCM_GAS_DEACTIVATE_CNF,
MSG_ID_RATCM_GAS_INIT_CNF,
MSG_ID_RATCM_GAS_PLMN_LIST_CNF,
MSG_ID_RATCM_GAS_PLMN_LIST_STOP_CNF,
MSG_ID_RATCM_GAS_PLMN_LOSS_IND,
MSG_ID_RATCM_GAS_PAGE_IND,
MSG_ID_RATCM_GAS_PLMN_SEARCH_CNF,
MSG_ID_RATCM_GAS_READY_TIMER_UPDATE_IND,
MSG_ID_RATCM_GAS_RFOFF_CNF,
MSG_ID_RATCM_GAS_RFON_CNF,
MSG_ID_RATCM_GAS_SET_RAT_MODE_CNF,
MSG_ID_RATCM_GAS_STOP_TEST_MODE_IND,
MSG_ID_RATCM_GAS_SYNC_IND,
MSG_ID_RATCM_GAS_SYS_INFO_IND,
MSG_ID_RATCM_GAS_CB_PAGE_IND,
MSG_ID_RATCM_GAS_T3122_TIMEOUT_IND,
 
MSG_ID_RATCM_GAS_CCO_ACTIVATION_TIME_TIMEOUT_IND,

 
MSG_ID_SMSAL_RATCM_CBCH_REQ,
MSG_ID_SMSAL_RATCM_CB_UPDATE_REQ,

 
MSG_ID_RATCM_RATDM_RAT_CHANGE_CNF,

 
MSG_ID_MM_RATCM_SET_RAT_MODE_REQ,
MSG_ID_MM_RATCM_INIT_REQ,
MSG_ID_MM_RATCM_SIM_INFO_RESET_REQ,
MSG_ID_MM_RATCM_RFOFF_REQ,
MSG_ID_MM_RATCM_PLMN_SEARCH_REQ,
MSG_ID_MM_RATCM_EQ_PLMN_LIST_UPDATE_REQ,
MSG_ID_MM_RATCM_ADD_FORBIDDEN_LA_REQ,
MSG_ID_MM_RATCM_DEL_FORBIDDEN_LA_REQ,
MSG_ID_MM_RATCM_PLMN_LIST_REQ,
MSG_ID_MM_RATCM_PLMN_LIST_STOP_REQ,
MSG_ID_MM_RATCM_TLLI_ASSIGN_REQ,
MSG_ID_MM_RATCM_PAGING_PARAM_ASSIGN_REQ,
MSG_ID_MM_RATCM_SECURITY_MODE_REQ,
MSG_ID_MM_RATCM_CONN_EST_REQ,
MSG_ID_MM_RATCM_CONN_REL_REQ,
MSG_ID_MM_RATCM_REGN_STATUS_REQ,
MSG_ID_MM_RATCM_CELL_UPDATED_REQ,
MSG_ID_MM_RATCM_READY_TIMER_UPDATE_REQ,
MSG_ID_MM_RATCM_SERVICE_CHANGE_REQ,
MSG_ID_MM_RATCM_CS_DATA_REQ,
MSG_ID_MM_RATCM_PS_DATA_REQ,
MSG_ID_MM_RATCM_LLC_ASSIGN_REQ,
MSG_ID_MM_RATCM_LLC_RESUME_REQ,
MSG_ID_MM_RATCM_LLC_SUSPEND_REQ,
MSG_ID_MM_RATCM_LLC_TRIGGER_REQ,
MSG_ID_MM_RATCM_START_TEST_MODE_REQ,
MSG_ID_RATCM_CODE_END = MSG_ID_MM_RATCM_START_TEST_MODE_REQ,

#line 547 "adaptation\include\stack_msgs.h"
   MSG_ID_RATCM_CODE_CHECK_POINT,

   #line 1 "interface\ps\ratdm_sap.h"
 


































 




















 
MSG_ID_TCM_RATDM_DATA_REQ = MSG_ID_RATDM_CODE_BEGIN,

 
MSG_ID_SM_RATDM_RAB_ACTIVATE_REQ,
MSG_ID_SM_RATDM_RAB_ACTIVATE_RSP,
MSG_ID_SM_RATDM_ACTIVATE_REQ,
MSG_ID_SM_RATDM_DEACTIVATE_REQ,
MSG_ID_SM_RATDM_MODIFY_REQ,

 
MSG_ID_MM_RATDM_REESTABLISH_RAB_RSP,
MSG_ID_MM_RATDM_SEQUENCE_REQ,
MSG_ID_MM_RATDM_SEND_USER_DATA_RSP,

 
MSG_ID_RATCM_RATDM_RAT_CHANGE_REQ,
MSG_ID_RATCM_RATDM_REGAIN_COVERAGE_REQ,

 
MSG_ID_RATDM_RABM_ACTIVATE_CNF,
MSG_ID_RATDM_RABM_ACTIVATE_IND,
MSG_ID_RATDM_RABM_DEACTIVATE_CNF,
MSG_ID_RATDM_RABM_DEACTIVATE_IND,
MSG_ID_RATDM_RABM_MODIFY_CNF,
MSG_ID_RATDM_RABM_REESTABLISH_IND,
MSG_ID_RATDM_RABM_DATA_CNF,
MSG_ID_RATDM_RABM_DATA_IND,
MSG_ID_RATDM_RABM_SUSPEND_DATA_PLANE_IND,
MSG_ID_RATDM_RABM_RESUME_DATA_PLANE_IND,
MSG_ID_RATDM_RABM_PDCP_RELOC_IND,
MSG_ID_RATDM_RABM_RETRANSMIT_IND,

 
MSG_ID_RATDM_URLC_DEACTIVATE_PS_RAB_CNF,

 
MSG_ID_RATDM_SNDCP_DATA_IND,
MSG_ID_RATDM_SNDCP_DATA_CNF,
MSG_ID_RATDM_SNDCP_ACTIVATE_CNF,
MSG_ID_RATDM_SNDCP_MODIFY_CNF,
MSG_ID_RATDM_SNDCP_DEACTIVATE_CNF,
MSG_ID_RATDM_SNDCP_STATUS_IND,
MSG_ID_RATDM_SNDCP_SUSPEND_DATA_PLANE_IND,
MSG_ID_RATDM_SNDCP_RESUME_DATA_PLANE_IND,
MSG_ID_RATDM_SNDCP_FLUSH_IND,  
MSG_ID_RATDM_SNDCP_TRANSMIT_IND,
MSG_ID_RATDM_SNDCP_SEQUENCE_CNF,
MSG_ID_RATDM_SNDCP_RESET_NPDU_SEQ_IND,  

 
MSG_ID_RATDM_PROCESS_TX_QUEUE_IND,
MSG_ID_RATDM_CODE_END = MSG_ID_RATDM_PROCESS_TX_QUEUE_IND,

#line 550 "adaptation\include\stack_msgs.h"
   MSG_ID_RATDM_CODE_CHECK_POINT,






































 



   #line 1 "custom\system\UNIRISE25_GEMINI_BB\custom_sap.h"
 


































 






























 
MSG_ID_CUSTOM1_CUSTOM2  =  CUSTOM_MSG_CODE_BEGIN,
MSG_ID_CUSTOM2_CUSTOM1,
















































MSG_ID_GSENSOR_OFF,
MSG_ID_GSENSOR_ON,
MSG_ID_GSENSOR_WORK,
MSG_ID_GSENSOR_UP,
MSG_ID_GSENSOR_DOWN,
MSG_ID_GSENSOR_LEFT,
MSG_ID_GSENSOR_RIGHT,
MSG_ID_GSENSOR_FRONT,
MSG_ID_GSENSOR_BACK,














 
 





 


#line 594 "adaptation\include\stack_msgs.h"
   


MSG_ID_END
} msg_type;

 




   




#line 133 "tst\database\msglog_db\custom_parse_db.c"


#line 1 "custom\system\UNIRISE25_GEMINI_BB\custom_config.h"
 


































 

































#line 1 "kal\include\kal_non_specific_general_types.h"
#line 71 "custom\system\UNIRISE25_GEMINI_BB\custom_config.h"



 

















 





typedef enum {
   INDX_CUSTOM1 = RPS_CUSTOM_TASKS_BEGIN,
   INDX_CUSTOM2,
   INDX_CUSTCMS,
   RPS_CUSTOM_TASKS_END
} custom_task_indx_type;

 





typedef enum {
   MOD_CUSTOM1 = MOD_CUSTOM_BEGIN,
   MOD_CUSTOM2,
   MOD_CMSMMS,
   MOD_CMSWAP,
   MOD_CMSMAP,
   MOD_CUSTOM_END
} custom_module_type;

 


extern custom_task_indx_type custom_mod_task_g[  16  ];



#line 136 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "adaptation\include\app_ltlcom.h"
 


































 











































































 










 













 


typedef enum {
   TD_UL = 0x01 << 0,    
   TD_DL = 0x01 << 1,    
   TD_CTRL = 0x01 << 2,  
   TD_RESET = 0x01 << 3  
} transfer_direction;

 












typedef struct peer_buff_struct {
    kal_uint16 pdu_len; kal_uint8 ref_count; kal_uint8 pb_resvered; kal_uint16 free_header_space; kal_uint16 free_tail_space;   
} peer_buff_struct;

 








typedef struct local_para_struct {
    kal_uint8 ref_count; kal_uint16 msg_len;     
} local_para_struct;

 




















typedef struct ilm_struct {
   module_type       src_mod_id;
   module_type       dest_mod_id;
   sap_type          sap_id;
   msg_type          msg_id;
   local_para_struct *local_para_ptr;
   peer_buff_struct  *peer_buff_ptr;
} ilm_struct;

 


extern void* construct_int_peer_buff(kal_uint16 pdu_len, kal_uint16 header_len,                                      kal_uint16 tail_len, kal_char* file_name_ptr,                                      kal_uint32 line);



 





extern void* construct_int_local_para(kal_uint16 local_para_size, kal_uint32 auto_reset,
                                      kal_char* file_ptr, kal_uint32 line);




extern void free_int_peer_buff(peer_buff_struct *pdu_ptr, kal_char* file,
                               kal_uint32 line);

extern void free_int_local_para(local_para_struct *local_para_ptr,
                                kal_char* file, kal_uint32 line);

extern void free_int_peer_buff_r(peer_buff_struct *pdu_ptr, kal_char* file, kal_uint32 line);

extern void free_int_local_para_r(local_para_struct *local_para_ptr, kal_char* file, kal_uint32 line);

extern void* get_pdu_ptr(peer_buff_struct *peer_buff_ptr, kal_uint16 *length_ptr);



 




















 





















 



























 
















 
























 
















 











































extern void free_int_ilm(ilm_struct *ilm_ptr, kal_char* file_name, kal_uint32 line);

 



#line 1 "adaptation\include\stack_ltlcom.h"
 


































 














































































 










 


typedef void (* fsm_func_ptr)(local_para_struct *,
                              peer_buff_struct *);

 















__inline void
free_ilm(ilm_struct* ilm_ptr)
{
   if (ilm_ptr->src_mod_id != MOD_TIMER)
      free_int_ilm(ilm_ptr, (kal_char*) "adaptation\\include\\stack_ltlcom.h" ,  152  );
}

















 



extern kal_bool msg_send_ext_queue(ilm_struct *ilm_ptr);





extern kal_bool msg_send_ext_queue_to_head(ilm_struct *ilm_ptr);




extern kal_bool msg_send_int_queue(ilm_struct *ilm_ptr);

extern ilm_struct *allocate_ilm(module_type module_id);

extern kal_bool cancel_ilm(module_type module_id);

extern kal_bool hold_peer_buff( peer_buff_struct *peer_buff_ptr);

extern kal_bool hold_local_para( local_para_struct *local_para_ptr );










extern void append_to_peer_buff( peer_buff_struct *peer_buff_ptr,
                                 void *tail_data_ptr,
                                 kal_uint16 tail_len);

extern void prepend_to_peer_buff( peer_buff_struct *peer_buff_ptr,
                                  void *header_data_ptr,
                                  kal_uint16 header_len);


extern void* get_local_para_ptr( local_para_struct *local_para_ptr,
                                 kal_uint16 *local_para_len_ptr);

extern kal_status receive_msg_ext_q( kal_msgqid task_ext_qid,
                                     ilm_struct *ilm_ptr);

extern kal_bool msg_get_ext_queue_info(kal_msgqid task_ext_qid,
                                       kal_uint32 *messages);

extern kal_bool msg_get_ext_queue_length(kal_msgqid task_ext_qid, kal_uint32 *length);


extern kal_bool receive_msg_int_q(task_indx_type task_indx, ilm_struct *ilm_ptr);














extern void remove_hdr_of_peer_buff( peer_buff_struct *peer_buff_ptr,
                                     kal_uint16 hdr_len);

extern void remove_tail_of_peer_buff( peer_buff_struct *peer_buff_ptr,
                                      kal_uint16 tail_len);

extern void update_peer_buff_hdr(peer_buff_struct *peer_buff_ptr,
                                 kal_uint16        new_hdr_len,
                                 kal_uint16        new_pdu_len,
                                 kal_uint16        new_tail_len);


extern kal_bool hold_peer_buff_r(peer_buff_struct *peer_buff_ptr);

extern kal_bool hold_local_para_r(local_para_struct *local_para_ptr);




#line 421 "adaptation\include\app_ltlcom.h"





#line 137 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "ps\interfaces\local_inc\l4c2uem_struct.h"
 


































 



























 









 



















typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
} l4cuem_startup_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_startup_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 type;
    kal_uint8 data1;
    kal_uint8 data2;
    kal_uint8 data3;
} l4cuem_set_profile_req_struct;

typedef struct {

   kal_uint8 mode;
   kal_uint8 melody[7];
   kal_uint8 keytone[7];
   kal_uint8 speech[7];
   kal_uint8 mic;
   kal_uint8 sidetone;
   
} l4cuem_audio_profile_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8	mode;
	kal_uint8	melody[7];
	kal_uint8	keytone[7];
	kal_uint8	speech[7];
	kal_uint8	mic;
	kal_uint8	sidetone;

} l4cuem_set_audio_profile_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 type;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_set_profile_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_set_audio_profile_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_set_audio_param_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 type;
    kal_uint8 index;
    kal_uint16 length;
    kal_uint8 imelody[300];
} l4cuem_store_imelody_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_store_imelody_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 index;
} l4cuem_delete_imelody_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_delete_imelody_cnf_struct;

typedef struct {
    kal_uint8 rtc_sec;
    kal_uint8 rtc_min;
    kal_uint8 rtc_hour;
    kal_uint8 rtc_day;
    kal_uint8 rtc_mon;
    kal_uint8 rtc_wday;
    kal_uint8 rtc_year;
} rtc_format_struct;

typedef struct {
    kal_uint8 alarm_format;
    kal_uint8 alarm_index;
    kal_uint8 type;
    kal_uint8 text[30];
    kal_uint8 recurr;
    rtc_format_struct data_time;
} rtc_alarm_info_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8  src_id;
   kal_uint16  file_name[ 50 ];
   kal_uint8   play_style;
   kal_uint16  identifier;
} 
l4cuem_audio_play_by_name_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8  src_id;
    kal_uint16  file_name[ 50 ];
} 
l4cuem_audio_stop_by_name_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8  src_id;
    kal_uint8   result;
} 
l4cuem_audio_play_by_name_cnf_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8  src_id;
   kal_uint8   result;
} 
l4cuem_audio_stop_by_name_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;

	kal_uint32 PWM1_freq_Level_Info[5];
	kal_uint32 PWM1_duty_Level_Info[5]; 
	kal_uint32 PWM2_freq_Level_Info[5]; 
	kal_uint32 PWM2_duty_Level_Info[5];
	kal_uint32 PWM3_freq_Level_Info[5]; 
	kal_uint32 PWM3_duty_Level_Info[5]; 

	kal_uint8   MainLCD_Contrast_Level_Info[15];
	kal_uint8   MainLCD_Bias_Level_Info[5];
	kal_uint8   MainLCD_Linerate_Level_Info[5];
	kal_uint8   MainLCD_Temp_Level_Info[5];
   
	kal_uint8   SubLCD_Contrast_Level_Info[15];
	kal_uint8   SubLCD_Bias_Level_Info[5];
	kal_uint8   SubLCD_Linerate_Level_Info[5];
	kal_uint8   SubLCD_Temp_Level_Info[5];

	kal_uint32   Battery_Level_Info[10];
} l4cuem_set_hw_level_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_set_hw_level_cnf_struct;























#line 138 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "interface\hwdrv\adc.h"
 


































 











































































































































#line 1 "interface\drv_def\drv_features.h"
 


































 











































































































   #line 1 "interface\drv_def\drv_features_6225.h"
 


































 














































































 









 









 



 

 




 



 









 


 


 


 


 


 


 


 


 


 


 


 




 


 




    


#line 145 "interface\drv_def\drv_features.h"
    





































#line 1 "interface\drv_def\drv_features_option.h"
 


































 








































































































































 

	
	
	
	 
	
	
	














 

	











 

	
	
	
	
	















 
 

 


 

 


 

















 






	
	











 





	






 





























   
   
   
   
   
   
   




















































 








   
   


 

   





 







   
   
   












 

   
   




 

































   
   
   
   
   
   
   



































 










   
   
   


 


































































   
   
   
   
   
   
   
   
   


 






   






 






















   
   
   

























 

















   
   
   
   
   



















 





   
   
   


 


 













    




    










 




 

   


   









   




 






 





#line 184 "interface\drv_def\drv_features.h"


#line 177 "interface\hwdrv\adc.h"
#line 1 "custom\drv\misc_drv\UNIRISE25_GEMINI_BB\adc_channel.h"
 


































 






























































































extern const kal_uint8 ADC_VBAT;
extern const kal_uint8 ADC_VISENSE;
extern const kal_uint8 ADC_VBATTMP;
extern const kal_uint8 ADC_VCHARGER;
extern const kal_uint8 ADC_PCBTMP;
extern const kal_uint8 ADC_ACCESSORYID;

extern const kal_uint8 ADC_CHR_USB;  




#line 178 "interface\hwdrv\adc.h"




















 

   
   
   
   
   
   
   
   
   












   
   


   
   
    
   
   
    
   
   
    
   
   
    
   
   
   
   
   
   
   

    
   
   

   


   
   
      
   
   
   



   typedef struct
   {
      kal_int32 ADCSlope[ 7 ];
      kal_int32 ADCOffset[ 7 ];
   }ADC_CALIDATA;







 
extern kal_uint16 ADC_GetData(kal_uint8 sel);


#line 139 "tst\database\msglog_db\custom_parse_db.c"


#line 1 "interface\ps\nvram.h"
 


































 











































 



























#line 1 "kal\include\kal_release.h"
#line 109 "interface\ps\nvram.h"



#line 1 "interface\ps\nvram_enums.h"
 


































 





























typedef enum
{
    NVRAM_POWERON_NORMAL,
    NVRAM_POWERON_CHARGER,
    NVRAM_POWERON_ALARM,
    NVRAM_POWERON_INVALID
} nvram_poweron_mode_enum;

typedef enum
{
    NVRAM_LOCK_DISABLE,
    NVRAM_LOCK_ENABLE,
    NVRAM_LOCK_TEMP_DISABLE,
    NVRAM_LOCK_OTP,
    NVRAM_LOCK_INVALID
} nvram_lock_state_enum;

typedef enum
{
    NVRAM_RESET_ALL,
    NVRAM_RESET_USER,
    NVRAM_RESET_SYSTEM,
    NVRAM_RESET_CERTAIN,
    NVRAM_RESET_FACTORY,
    NVRAM_RESET_DIFFERENCE,
    NVRAM_RESET_CUSTPACK,
    NVRAM_RESET_BRANCH,
    NVRAM_RESET_SHADOW,
    NVRAM_RESET_INVALID
} nvram_reset_category_enum;

typedef enum
{
     
    NVRAM_ERRNO_SUCCESS,
    NVRAM_ERRNO_FAIL,
    NVRAM_ERRNO_INVALID,

     
    NVRAM_IO_ERRNO_OK = NVRAM_ERRNO_SUCCESS,
    NVRAM_IO_ERRNO_INVALID_LID,
    NVRAM_IO_ERRNO_INVALID_SIZE,
    NVRAM_IO_ERRNO_INVALID_RECORD,
    NVRAM_IO_ERRNO_UNINIT,
    NVRAM_IO_ERRNO_INIT,
    NVRAM_IO_ERRNO_CHK,
    NVRAM_IO_ERRNO_BUSY,
    NVRAM_IO_ERRNO_LOCKED,
    NVRAM_IO_ERRNO_WRONG_RINGLID,
    
     
    NVRAM_ERRNO_OTP_UNKNOW,     
    NVRAM_ERRNO_OTP_OVERSCOPE,  
    NVRAM_ERRNO_OTP_WRITEFAIL,  
    NVRAM_ERRNO_OTP_LOCKED,     
    NVRAM_ERRNO_OTP_INVALID_INPUT,
    NVRAM_ERRNO_OTP_INVALID_RANGE,
    NVRAM_ERRNO_OTP_WRITETWICE,

    
    NVRAM_ERRNO_MAX
} nvram_errno_enum;

typedef nvram_errno_enum nvram_io_errno_enum;

typedef kal_uint32 nvram_software_change_status_enum;








#line 112 "interface\ps\nvram.h"
#line 1 "interface\ps\aud_nvram_enums.h"
 


































 






























typedef enum 
{
  NVRAM_VM_WRITE_CREATE,
  NVRAM_VM_WRITE_APPEND,
  NVRAM_VM_WRITE_CONTI,
  NVRAM_VM_WRITE_FINAL
} nvram_vm_write_enum;


typedef enum 
{
  NVRAM_VM_ERRNO_SUCCES,
  NVRAM_VM_ERRNO_CREATE,
  NVRAM_VM_ERRNO_APPEND,
  NVRAM_VM_ERRNO_FAIL,
  NVRAM_VM_ERRNO_DISKFULL,
  NVRAM_VM_ERRNO_INVALID_ID,
  NVRAM_VM_ERRNO_INVALID_OFFSET,
  NVRAM_VM_ERRNO_OUT_OF_SEQ
} nvram_vm_errno_enum;



#line 113 "interface\ps\nvram.h"

#line 1 "interface\ps\nvram_struct.h"
 


































 


































































 





















typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 access_id;
    kal_uint8 poweron_mode;
} nvram_startup_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 access_id;
    kal_uint8 result;
     
    kal_uint8 data[8];
     
} nvram_startup_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 access_id;
    nvram_reset_category_enum reset_category;
    kal_uint8 LID;
     
    kal_uint16 rec_index;
    kal_uint16 rec_amount;
     
} nvram_reset_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 access_id;
    kal_uint8 result;
} nvram_reset_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 access_id;
    kal_uint8 file_idx;
    kal_uint16 para;
    kal_uint16 rec_amount;
} nvram_read_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 access_id;
    kal_uint8 file_idx;
    kal_uint16 para;
    kal_uint16 length;
    kal_uint8 result;
} nvram_read_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 access_id;
    kal_uint8 file_idx;
    kal_uint16 para;
} nvram_write_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 access_id;
    kal_uint8 file_idx;
    kal_uint16 para;
    kal_uint8 result;
} nvram_write_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 lock_en;
    kal_uint32 reserved;
} nvram_set_lock_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 result;
} nvram_set_lock_cnf_struct;



#line 115 "interface\ps\nvram.h"
#line 1 "interface\ps\aud_nvram_struct.h"
 


































 






































 


















 
typedef struct {

    kal_uint32   vmid_idx_bmp;
    kal_uint32   reserved;
    kal_uint32	 free_size;

} nvram_vm_info_struct;


 

 
typedef struct {

    kal_uint8 	 ref_count;
    kal_uint16 	 msg_len;

} nvram_vm_getinfo_req_struct;


 
typedef struct {

    kal_uint8 	 ref_count;
    kal_uint16 	 msg_len;

	nvram_vm_info_struct vminfo;
    nvram_vm_errno_enum	 status;

} nvram_vm_getinfo_cnf_struct;


 
typedef struct{

    kal_uint8 	 ref_count;
    kal_uint16	 msg_len;

    kal_uint8    vmid;
    kal_uint16	 *pbuf;
    kal_uint16	 buf_len;
    nvram_vm_write_enum	 write_flag;

} nvram_vm_write_req_struct;



 
typedef struct{
    kal_uint8 	 ref_count;
    kal_uint16	 msg_len;

    kal_uint8    vmid;
    kal_uint16   written_len;
    nvram_vm_errno_enum	 status;

} nvram_vm_write_cnf_struct;



 
typedef struct{

    kal_uint8	 ref_count;
    kal_uint16	 msg_len;

    kal_uint8    vmid;
    kal_uint16	 *pbuf;
    kal_uint16 	 buf_len;
    kal_uint32 	 offset;

} nvram_vm_read_req_struct;


 
typedef struct{

    kal_uint8 	 ref_count;
    kal_uint16 	 msg_len;

    kal_uint8    vmid;
    kal_uint16	 read_len;
    nvram_vm_errno_enum	 status;

} nvram_vm_read_cnf_struct;


 
typedef struct{

    kal_uint8	 ref_count;
    kal_uint16	 msg_len;

    kal_uint8    vmid;
    kal_uint16	 reserved;

} nvram_vm_delete_req_struct;


 
typedef struct{

    kal_uint8 	 ref_count;
    kal_uint16 	 msg_len;

    kal_uint8    vmid;
    nvram_vm_errno_enum	 status;

} nvram_vm_delete_cnf_struct;




#line 116 "interface\ps\nvram.h"











#line 142 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "custom\common\PLUTO_MMI\nvram_common_defs.h"
 


































 


































































































































































































































































































































































































































































































#line 1 "kal\include\kal_release.h"
#line 520 "custom\common\PLUTO_MMI\nvram_common_defs.h"

#line 1 "plutommi\mmi\Inc\MMI_features.h"
 

































 









































































































































































































































































































































































































































































































































































































































































































































































































































#line 1 "plutommi\mmi\Inc\MMI_features_switch.h"
 

































 






























































































































































































































































































































































































 


#line 1 "plutommi\mmi\Inc\MMI_features_type.h"
 

































 























































 




 









 






 






 




 




 



 




#line 422 "plutommi\mmi\Inc\MMI_features_switch.h"

 



 



 






 



 






 



 






 






 



 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 



 






 






 



 






 



 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 


 


 










 










 










 










 










 










 










 










 











 










 










 











 












 










 










 











 


  
 






 






 






 






 






 







 






 






 












 






 






 







 






 






 







 






 






 






 






 







 







 






 







 






 






 



 






 



 






 



 






 



 






 






 



 






 






 






 






 






 



 






 






 



 






 






 






 






 






 



 






 






 






 






 






 






 






 






 



 






 



 






 






 






 






 



 






 






 






 






 






 






 






 






 






 






 






 






 






 



 






 



 






 



 






 



 






 






 






 






 






 






 






 






 



 






 






 



 






 






 






 






 






 






 






 






 






 






 



 






 






 






 






 






 






 






 






 






 






 



 






 



 






 






 






 



 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 



 






 



 






 



 






 



 






 






 






 






 






 






 



 






 



 






 



 






 






 






 






 






 






 






 






 






 






 






 






 



 






 



 






 






 






 






 






 






 






 



 






 






 






 






 






 






 



 






 






 





	







 






 






 






 






 






 






 






 






 



 






 






 



 






 






 






 



 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 



 






 






 






 






 






 






 



 






 



 






 






 






 






 






 






 






 






 



 






 






 



 






 



 






 






 






 



 






 



 






 






 






 






 






 






 






 






 



 






 






 



 






 



 






 



 






 



 






 






 






 



 






 






 






 






 






 






 






 






 






 






 



 






 






 






 



 






 






 






 



 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 



 






 



 






 



 






 






 






 



 






 






 



 






 






 






 






 






 



 






 






 



 






 






 






 



 






 






 



 






 






 






 






 



 






 



 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 



 






 






 






 






 






 



 






 






 



 






 



 






 



 






 



 






 



 






 



 






 



 






 



 






 



 






 



 






 






 






 






 



 






 



 






 






 






 






 






 



 






 






 



 






 



 






 






 






 






 






 



 






 






 






 



 






 






 






 



 








#line 846 "plutommi\mmi\Inc\MMI_features.h"

 










 














	


	
	
	




	


	
	
	














	
	
	


























































	
	
	
















	
	
	

















































	
	
	











	
	
	











	
	
	



























































































	
	
	




	
	
	




	
	
	












	
	
	


























	
	
	





	
	
	





	
	
	




	
	
	




	
	
	











	
	
	




	
	
	













	
	
	





	
	
	





	
	
	





















	
	
	





	
	
	





	
	
	





	
	
	




















	
	
	










































	
	
	












	
	
	


















	
	
	



















	
	
	




	
	
	




	
	
	




	
	
	











	
	
	











	
	
	


















	
	
	




	
	
	




	
	
	




	
	
	











	
	
	









































	
	
	




	
	
	




	
	
	





	
	
	





	
	
	




	
	
	




	
	
	




	
	
	





	
	
	















































	
	
	





	
	
	


















	
	
	









































	
	
	















































	
	
	





	
	
	












	
	
	




	
	
	





	
	
	





	
	
	



































	
	
	












	
	
	











	
	
	












	
	
	



















	
	
	











	
	
	




	
	
	


































	
	
	




	
	
	












	
	
	































































































	
	
	




























	
	
	












































	
	
	











	
	
	




	
	
	





	
	
	
























	
	
	




































































































































	
	
	









	
	
	




	
	
	











	
	
	





	
	
	




	
	
	





	
	
	













	
	
	





	
	
	

































































































































	
	
	




	
	
	











	
	
	




	
	
	











	
	
	


























































	
	
	





	
	
	













	
	
	




	
	
	













	
	
	





	
	
	



















	
	
	





	
	
	




	
	
	





























	
	
	





































































































































































	
	
	




	
	
	



































































































































	
	
	





	
	
	




















































































































	
	
	


















	
	
	












	
	
	



















	
	
	












	
	
	





	
	
	





	
	
	




	
	
	

































	
	
	



































































































































































	
	
	





	
	
	




























































	
	
	

























































































	
	
	













	
	
	












	
	
	





	
	
	






















	
	
	





















	
	
	




























	
	
	

































	
	
	




	
	
	












	
	
	





	
	
	





	
	
	





	
	
	





	
	
	




















	
	
	





	
	
	





	
	
	




	
	
	





	
	
	













	
	
	





	
	
	





	
	
	





	
	
	





	
	
	





	
	
	




	
	
	











	
	
	











































	
	
	











































	
	
	





































































	
	
	




























	
	
	




























































































	
	
	













	
	
	





















	
	
	





















	
	
	





























	
	
	





	
	
	





























	
	
	




	
	
	












	
	
	





	
	
	











	
	
	



















	
	
	












	
	
	





	
	
	











	
	
	











	
	
	



















	
	
	


















	
	
	



























	
	
	





	
	
	





	
	
	




	
	
	



















	
	
	









































































	
	
	




























	
	
	



















	
	
	











	
	
	












	
	
	






	
	
	




	
	
	


















	
	
	




	
	
	






















	
	
	








	
	
	






	
	
	








	
	
	










	
	
	




	
	
	










	
	
	












	
	
	






	
	
	












	
	
	

















	
	
	








	
	
	












	
	
	













































	
	
	





	
	
	




























	
	
	













	
	
	











	
	
	












	
	
	





	
	
	





































	
	
	












	
	
	




	
	
	




	
	
	




	
	
	





	
	
	




	
	
	





	
	
	












	
	
	



















































	
	
	


























































































































































































































































































































	
	
	





	
	
	





	
	
	





	
	
	









































	
	
	
































	
	
	











	
	
	





	
	
	












	
	
	





	
	
	































	


	
	
	










































































	
	
	




































































	
	
	




	
	
	




	
	
	












	


	
	
	





	


	
	
	





	
	
	













	
	
	




	
	
	



















	
	
	

























































































	
	
	




	
	
	





	
	
	





	
	
	





	
	
	




	
	
	





	
	
	

































	
	
	





























































































































































	
	
	





























	
	
	





































































	
	
	





	
	
	









































































































	
	
	












	
	
	




	
	
	












	
	
	













	
	
	





	
	
	





	
	
	














#line 521 "custom\common\PLUTO_MMI\nvram_common_defs.h"
#line 1 "interface\ps\nvram_data_items.h"
 


































 






































     







#line 1 "kal\include\kal_release.h"
#line 84 "interface\ps\nvram_data_items.h"

#line 1 "sst\include\ex_item.h"
 


































 












































































































































































 



typedef enum
{
    Healthy = 0,
    InternalSRAMCorrupted = 1,
    SystemStackCorrupted = 2,
    TaskStackCorrupted = 3,
    HISRStackCorrupted = 4,
    VectorTableCorrupted = 5
} EX_DIAGNOSIS_T;


 








 
typedef struct ex_exception_record_header_t
{
    exception_type ex_type;
    kal_uint8 ex_nvram;
    kal_uint16 ex_serial_num;
} EX_HEADER_T;

 
typedef struct _ex_rtc_struct
{
    kal_uint8 rtc_sec;     
    kal_uint8 rtc_min;     
    kal_uint8 rtc_hour;    
    kal_uint8 rtc_day;     
    kal_uint8 rtc_mon;     
    kal_uint8 rtc_wday;    
    kal_uint8 rtc_year;    
    kal_uint8 rtc_pad;     
} ex_rtc_struct;

 
typedef struct ex_environment_info_t
{
    boot_mode_type boot_mode;
    ex_rtc_struct rtc;
    kal_char execution_unit[ 8 ];
    kal_uint8 status;
    kal_uint8 pad[2];
    kal_uint32 stack_ptr;
    kal_uint32 stack_dump[ 10 ];
    kal_uint16 ext_queue_pending_cnt;
    kal_uint32 ext_queue_pending[ 20 ];
    kal_uint32 interrupt_mask[2];
    kal_uint32 processing_lisr;
    kal_uint32 lr;
} EX_ENVINFO_T;

 
typedef struct ex_diagnosis_info_t
{
    EX_DIAGNOSIS_T diagnosis;
    kal_char owner[ 8 ];
    kal_uint8 pad[3];
    kal_uint32 timing_check[ 6 ];
} EX_DIAGNOSISINFO_T;


 













 







 
typedef struct ex_fatalerror_code_t
{
    kal_uint32 code1;
    kal_uint32 code2;
} EX_FATALERR_CODE_T;

typedef struct ex_description_t
{
    kal_uint32 trace;
    kal_uint8 param[ 16 ];
} EX_DESCRIPTION_T;

typedef struct ex_analysis_t
{
    kal_uint32 trace;
    kal_uint8 param[ 48 ];
} EX_ANALYSIS_T;

typedef struct ex_guideline_t
{
    kal_uint32 trace;
    kal_uint8 param[ 16 ];
} EX_GUIDELINE_T;


 



typedef struct
{
    kal_char ex_his_owner[8];    
    kal_char ex_his_source[16];  
    kal_uint32 ex_his_line;  
    kal_uint32 ex_his_count;     
} EX_CTRLBUFF_HISTORY_T;

typedef struct
{
    kal_uint32 ex_buf_RTOS_header1;   
    kal_uint32 ex_buf_RTOS_header2;   
    kal_uint32 ex_buf_KAL_header1;  
    kal_uint32 ex_buf_KAL_header2;  
    kal_uint32 ex_buf_KAL_header3;  
    kal_uint32 ex_buf_poolID;       
    kal_uint32 ex_buf_KAL_footer1;  
    kal_uint32 ex_buf_KAL_footer2;  
} EX_CTRLBUFF_COMMON_T;

typedef struct
{
    kal_char ex_buf_source[12];   
    kal_uint32 ex_buf_line;         
} EX_CTRLBUFF_OWNER_T;

typedef union
{
    EX_CTRLBUFF_HISTORY_T history;
    EX_CTRLBUFF_COMMON_T common;
} EX_CTRLBUFF_INFO_T;

typedef struct
{
    kal_uint32 ex_ctrlbuf_size;  
    kal_uint32 ex_ctrlbuf_num;   
    EX_CTRLBUFF_INFO_T ex_ctrlbuf_top;  
    EX_CTRLBUFF_INFO_T ex_ctrlbuf_second;   
    EX_CTRLBUFF_INFO_T ex_ctrlbuf_third;    
    EX_CTRLBUFF_OWNER_T ex_monitor[3];
    kal_uint32 ex_reserved[2];   
} EX_CTRLBUFF_T;

typedef struct
{
    kal_uint8 ex_q_src_mod;         
    kal_uint8 ex_q_count;           
    kal_uint16 ex_q_msg_id;          
    kal_uint16 ex_q_cur_mes_no;      
    kal_uint16 ex_q_config_entry;    
} EX_QUEUE_T;

typedef struct
{
    kal_char ex_task_name[8];        
    kal_char ex_task_stack_gp[8];    
    kal_uint32 ex_task_cur_status;     
    EX_QUEUE_T ex_task_external_q;     
    EX_QUEUE_T ex_task_internal_q;     
    kal_uint32 ex_reserved;            
} EX_TASKINFO_T;

 





typedef struct ex_fatalerror_t
{
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    union
    {
        EX_CTRLBUFF_T ctrl_buff;
        EX_TASKINFO_T task_info[ 4 ];
    } info;
} EX_FATALERR_T;


 










typedef struct ex_assert_fail_t
{
    kal_char filename[ 24 ];
    kal_uint32 linenumber;
    kal_uint32 parameters[3];
    kal_uint8 dump[  512  - ( sizeof(EX_HEADER_T)  +  12  +  sizeof(EX_ENVINFO_T)  +  sizeof(EX_DIAGNOSISINFO_T)  +   24  + sizeof(kal_uint32) * 4 +  4  ) ];
    kal_uint8 guard[ 4 ];
} EX_ASSERTFAIL_T;


 



typedef union
{
    EX_FATALERR_T fatalerr;
    EX_ASSERTFAIL_T assert;
} EX_CONTENT_T;

 
typedef struct ex_exception_log_t
{
    EX_HEADER_T header;
    kal_char sw_version[ 12 ];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_CONTENT_T content;
} EX_LOG_T;

 
typedef struct ex_assertfail_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[ 12 ];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_ASSERTFAIL_T assert;
} ex_assertfail_record;

 
typedef struct ex_assertdumpextended_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[ 512  -  sizeof(EX_HEADER_T) ];
} ex_assertdumpextended_record;

 
typedef struct ex_exception_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[ 12 ];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    EX_TASKINFO_T task_info[ 4 ];
} ex_exception_record;

 
typedef struct ex_stackfatalerr_task_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[ 12 ];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    EX_TASKINFO_T task_info[ 4 ];
} ex_stackfatalerr_task_record;

 
typedef struct ex_stackfatalerr_ctrlbuf_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[ 12 ];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    EX_CTRLBUFF_T ctrl_buff;
} ex_stackfatalerr_ctrlbuf_record;

 
typedef struct
{
    exception_type type;
    kal_bool ext;
    kal_uint32 *code1;
    kal_uint32 *code2;
    kal_uint32 e1;
    kal_uint32 e2;
    kal_uint32 e3;
    kal_uint32 interrupt_mask1;
    kal_uint32 interrupt_mask2;
    ASSERT_DUMP_PARAM_T *dump_param;
} EX_INIT_LOG_PARAM_T;


 


























 




   











   











   











 



extern void ex_init_log(EX_INIT_LOG_PARAM_T *param);
extern void ex_save_log(EX_INIT_LOG_PARAM_T *param);

extern void ex_reset_hw(void);
extern void ex_reboot(void);

extern void ex_output_log(void);

extern void ex_query_bbreg_info(kal_uint32 **addr, kal_uint32 *cnt);


extern kal_int8 ex_init_ctrl_buff_log(kal_uint32 *target_ptr, kal_uint32 code1, kal_uint32 code2);


 



extern kal_uint32 INT_MemoryDumpFlag;
extern EX_LOG_T *ex_log_ptr;




#line 85 "interface\ps\nvram_data_items.h"

#line 1 "config\include\stack_config.h"
#line 87 "interface\ps\nvram_data_items.h"


#line 1 "adaptation\include\stack_buff_pool.h"
 


































 











































 










 


typedef struct buff_pool_info_struct {
   kal_poolid pool_id;
   kal_uint32 size;
   kal_uint16 no_of_buff;
   kal_uint32 num_of_misses;
} buff_pool_info_struct;

 


extern void stack_init_buff_pool_info(void);
extern kal_bool stack_resources_init(void);
extern void stack_ps_init_buff_pool_info(void);
extern kal_bool stack_ps_resources_init(void);




#line 89 "interface\ps\nvram_data_items.h"
#line 1 "adaptation\include\ctrl_buff_pool.h"
 


































 

















































































































































 










 








 



 


 
typedef enum {
   CTRL_BUFF_POOL_SIZE08      = 8,
   CTRL_BUFF_POOL_SIZE16      = 16,
   CTRL_BUFF_POOL_SIZE32      = 32,
   CTRL_BUFF_POOL_SIZE64      = 64,
   CTRL_BUFF_POOL_SIZE128     = 128,
   CTRL_BUFF_POOL_SIZE256     = 256,
   CTRL_BUFF_POOL_SIZE512     = 512,
   CTRL_BUFF_POOL_SIZE1024    = 1024,
   CTRL_BUFF_POOL_SIZE2048    = 2048,
   CTRL_BUFF_POOL_SIZE4096    = 4096,
   CTRL_BUFF_POOL_SIZE8192    = 8192,
   CTRL_BUFF_POOL_SIZE16384   = 16384,
   CTRL_BUFF_POOL_SIZE32768   = 32768,
   CTRL_BUFF_POOL_SIZE65536   = 65536,






   CTRL_BUFF_POOL_MAX_BUFF_SIZE = CTRL_BUFF_POOL_SIZE65536

} ctrl_buff_pool_size;



































































 

typedef enum {
   NUM_CTRL_BUFF_POOL_SIZE08   = 200,
   NUM_CTRL_BUFF_POOL_SIZE16   = 100,
   NUM_CTRL_BUFF_POOL_SIZE32   = 100,
   NUM_CTRL_BUFF_POOL_SIZE64   = 100,
   NUM_CTRL_BUFF_POOL_SIZE128  = 61,
   NUM_CTRL_BUFF_POOL_SIZE256  = 50,
   NUM_CTRL_BUFF_POOL_SIZE512  = 22,
   NUM_CTRL_BUFF_POOL_SIZE1024 = 16,
   NUM_CTRL_BUFF_POOL_SIZE2048 = 10,
   NUM_CTRL_BUFF_POOL_SIZE4096 = 0,
   NUM_CTRL_BUFF_POOL_SIZE8192 = 0,
   NUM_CTRL_BUFF_POOL_SIZE16384 =0,
   NUM_CTRL_BUFF_POOL_SIZE32768 =0,
   NUM_CTRL_BUFF_POOL_SIZE65536 =0
} ctrl_num_buff_pool_size;
























































 


extern buff_pool_info_struct ctrl_buff_pool_info_g[  14 ];

 


extern void stack_init_ctrl_buff_pool_info( void );
extern kal_bool stack_create_ctrl_buff_pools(void);
extern kal_poolid get_ctrl_pool_id_from_buff_size(kal_uint32 buff_size);



#line 90 "interface\ps\nvram_data_items.h"
#line 1 "adaptation\include\tst_buff_pool.h"
 


































 



























































 










 




 


typedef enum {
   TST_BUFF_POOL_SIZE08    = 8,
   TST_BUFF_POOL_SIZE16    = 16,
   TST_BUFF_POOL_SIZE32    = 32,
   TST_BUFF_POOL_SIZE64    = 64,
   TST_BUFF_POOL_SIZE128   = 128,
   TST_BUFF_POOL_SIZE256   = 256,
   TST_BUFF_POOL_SIZE512   = 512,
   TST_BUFF_POOL_SIZE1024  = 1024,
   TST_BUFF_POOL_SIZE2048  = 2048,
   TST_BUFF_POOL_SIZE4096  = 4096,
   TST_BUFF_POOL_SIZE8192  = 8192,
   TST_BUFF_POOL_SIZE16384 = 16384,
   TST_BUFF_POOL_SIZE32768 = 32768,
   TST_BUFF_POOL_SIZE65536 = 65536,
   TST_BUFF_POOL_MAX_BUFF_SIZE = TST_BUFF_POOL_SIZE65536
} tst_buff_pool_size;



















 
typedef enum {
   NUM_TST_BUFF_POOL_SIZE08   = 0,
   NUM_TST_BUFF_POOL_SIZE16   = 0,
   NUM_TST_BUFF_POOL_SIZE32   = 20,
   NUM_TST_BUFF_POOL_SIZE64   = 30,
   NUM_TST_BUFF_POOL_SIZE128  = 40,
   NUM_TST_BUFF_POOL_SIZE256  = 50,
   NUM_TST_BUFF_POOL_SIZE512  = 6,
   NUM_TST_BUFF_POOL_SIZE1024 = 4,
   NUM_TST_BUFF_POOL_SIZE2048 = 2,
   NUM_TST_BUFF_POOL_SIZE4096 = 0,
   NUM_TST_BUFF_POOL_SIZE8192 = 0,
   NUM_TST_BUFF_POOL_SIZE16384 =0,
   NUM_TST_BUFF_POOL_SIZE32768 =0,
   NUM_TST_BUFF_POOL_SIZE65536 =0
} tst_num_buff_pool_size;




















 


 



 



void* get_int_tst_buffer(kal_uint32 buff_size, char* file_name, kal_uint32 line);
   





extern void stack_init_tst_buff_pool_info(void);
extern kal_bool stack_create_tst_buff_pools(void);
extern kal_poolid get_tst_pool_id_from_buff_size(kal_uint32 buff_size);

 


extern buff_pool_info_struct tst_buff_pool_info_g[ 12 ];




#line 91 "interface\ps\nvram_data_items.h"
#line 1 "config\include\sysconf_statistics.h"
 


































 



















































 


enum {
	STACK_STATS_NONE,
	STACK_STATS_UPDATE,
	STACK_STATS_END
};

typedef struct stack_statistics_t {
	kal_uint16 stack_stats_status;													 
	kal_uint32 max_sys_mem_used;														 
	kal_uint32 max_sysdebug_mem_used;												 
	kal_uint16 max_task_stack_used[RPS_TOTAL_STACK_TASKS];					 
	kal_uint16 max_hisr_stack_used[ 20 ];							 

	kal_uint8 max_task_extq_enqued[RPS_TOTAL_STACK_TASKS];					 
        kal_uint8 max_task_intq_enqued[RPS_TOTAL_STACK_TASKS];					 


	kal_uint16 max_ctrl_buff_num_allocated[ 14 ];	 
	kal_uint16 max_tst_buff_num_allocated[ 12 ];	 

} stack_statistics_struct;




#line 92 "interface\ps\nvram_data_items.h"
#line 1 "interface\ps\nvram_defs.h"
 


































 



































     





#line 1 "custom\common\nvram_lid_statistics.h"
 


































 





































#line 79 "interface\ps\nvram_defs.h"




 








     


















































    typedef kal_char NVRAM_FILE_NAME[9];

     
    typedef kal_uint16 nvram_attr_enum;


















 



typedef kal_uint32 nvram_category_enum;











typedef kal_uint16 nvram_lid_enum;
typedef struct
{
    nvram_lid_enum LID;              
    kal_uint16 size;                 
    kal_uint16 total_records;        
    kal_uint8 const *default_value;  
    nvram_attr_enum attr;            
    nvram_category_enum category;    
    kal_char fileprefix[ 4  + 1];
    kal_char fileverno[ 3  + 1];
    kal_char *description;
    kal_uint8 record_ID;             
} ltable_entry_struct;













 



typedef struct
{
   nvram_lid_enum	LID;             		             
	kal_uint8	*offset;					             
	kal_uint32	dirty_records[ 2 ];     
}shadow_ltable_struct;

















extern const kal_uint8 NVRAM_EF_ZERO_DEFAULT[];
extern const kal_uint8 NVRAM_EF_FF_DEFAULT[];
extern const kal_uint8 *NVRAM_EF_CUSTPACK_DEFAULT[];

extern ltable_entry_struct *logical_data_item_table[];

extern ltable_entry_struct logical_data_item_table_core[];
extern ltable_entry_struct logical_data_item_table_comm_app[];
extern ltable_entry_struct logical_data_item_table_cust[];

extern const kal_uint8 NVRAM_TOTAL_LID;
extern kal_uint8 coded_version_lock[];

extern const kal_uint8 NVRAM_LAST_COMMAPP_LID;







#line 93 "interface\ps\nvram_data_items.h"




#line 1 "adaptation\include\stack_common.h"
#line 98 "interface\ps\nvram_data_items.h"










 






    typedef enum
    {
         
        NVRAM_EF_SYS_LID,
         
        NVRAM_EF_BRANCH_VERNO_LID,
         
        NVRAM_EF_CUSTPACK_VERNO_LID,

        NVRAM_EF_START,
        NVRAM_EF_SYS_EXCEPTION_LID = NVRAM_EF_START,
        NVRAM_EF_SYS_STATISTICS_LID,
        NVRAM_EF_L1_START,
        NVRAM_EF_L1_AGCPATHLOSS_LID = NVRAM_EF_L1_START,
        NVRAM_EF_L1_RAMPTABLE_GSM850_LID,
        NVRAM_EF_L1_RAMPTABLE_GSM900_LID,
        NVRAM_EF_L1_RAMPTABLE_DCS1800_LID,
        NVRAM_EF_L1_RAMPTABLE_PCS1900_LID,
        NVRAM_EF_L1_EPSK_START,
        NVRAM_EF_L1_EPSK_RAMPTABLE_GSM850_LID = NVRAM_EF_L1_EPSK_START,
        NVRAM_EF_L1_EPSK_RAMPTABLE_GSM900_LID,
        NVRAM_EF_L1_EPSK_RAMPTABLE_DCS1800_LID,
        NVRAM_EF_L1_EPSK_RAMPTABLE_PCS1900_LID,
        NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM850_LID,
        NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM900_LID,
        NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_DCS1800_LID,
        NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_PCS1900_LID,
        NVRAM_EF_L1_EPSK_END = NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_PCS1900_LID,
        NVRAM_EF_L1_AFCDATA_LID,
        NVRAM_EF_L1_TXIQ_LID,
        NVRAM_EF_L1_RFSPECIALCOEF_LID,
        NVRAM_EF_L1_INTERSLOT_RAMP_GSM850_LID,
        NVRAM_EF_L1_INTERSLOT_RAMP_GSM900_LID,
        NVRAM_EF_L1_INTERSLOT_RAMP_DCS1800_LID,
        NVRAM_EF_L1_INTERSLOT_RAMP_PCS1900_LID,
        NVRAM_EF_L1_CRYSTAL_AFCDATA_LID,
        NVRAM_EF_L1_CRYSTAL_CAPDATA_LID,
        NVRAM_EF_L1_END = NVRAM_EF_L1_CRYSTAL_CAPDATA_LID,
        NVRAM_EF_UL1_START,
        NVRAM_EF_UL1_TEMP_DAC_LID = NVRAM_EF_UL1_START,
        NVRAM_EF_UL1_PATHLOSS_BAND1_LID,
        NVRAM_EF_UL1_PATHLOSS_BAND2_LID,
        NVRAM_EF_UL1_PATHLOSS_BAND3_LID,
        NVRAM_EF_UL1_TXDAC_BAND1_LID,
        NVRAM_EF_UL1_TXDAC_BAND2_LID,
        NVRAM_EF_UL1_TXDAC_BAND3_LID,
        NVRAM_EF_UL1_END = NVRAM_EF_UL1_TXDAC_BAND3_LID,
    









        NVRAM_EF_EXTBCCH_LID,
        NVRAM_EF_EQ_PLMN_LID,
        NVRAM_EF_BAND_INFO_LID,
        NVRAM_EF_TST_FILTER_LID,
        NVRAM_EF_CB_CH_INFO_LID,
        NVRAM_EF_SMSAL_MWIS_LID,
        NVRAM_EF_TCM_STATISTICS_LID,
        NVRAM_EF_CFU_FLAG_LID,
        NVRAM_EF_MM_EQPLMN_LOCIGPRS_LID,
        NVRAM_EF_CTM_DEFAULT_SETTINGS_LID,
        NVRAM_EF_ALS_LINE_ID_LID,
        NVRAM_EF_MSCAP_LID,
        NVRAM_EF_CLASSMARK_RACAP_LID,
        NVRAM_EF_SIM_ASSERT_LID,
        NVRAM_EF_RTC_DATA_LID,

        NVRAM_EF_UMTS_PLMN_LID,
        NVRAM_EF_UMTS_NET_PAR_LID,
        NVRAM_EF_UMTS_IMSI_LID,
        NVRAM_EF_UMTS_START_HFN_LID,
        NVRAM_EF_UMTS_CSE_CACHE_INFO_LID,
        NVRAM_EF_UMTS_USIME_RRC_DYNAMIC_CAP_LID,
        NVRAM_EF_L1_3G_CAL_DATA_LID,
        NVRAM_EF_FLC_STATISTICS_LID,

         
        NVRAM_EF_LAST_LID_CORE
    } nvram_lid_core_enum;

 














 

























 






 





 





 


 









 

 








 





 





 





 





 






























 





 





 





 





 





 





 

































 


















 
 





 





 















































 





 





 





 





 





 





 





 





 












 






 





 











 








 


























    typedef enum
    {
        NVRAM_SYS_AUTO_DETECT = 1,
        NVRAM_SYS_FLIGHTMODE_STATE,
        NVRAM_SYS_DSP_PATCH,
        NVRAM_SYS_SIM_PLUS_SETTING,
        NVRAM_SYS_FIXED_GAIN_MECH_FOR_HELIOS2,
        NVRAM_SYS_FACTORY_FLAG,
        NVRAM_SYS_CV_CALIBRATION,
        NVRAM_SYS_CACHE_MAX
    } NVRAM_SYS_CACHE_OCTETDATA;







#line 522 "custom\common\PLUTO_MMI\nvram_common_defs.h"
#line 1 "custom\common\custom_nvram_sec.h"
 


































 












































































 



 







 





 





 


 


 

 

 




 


 



 



 
 








 










 
typedef struct {
    kal_uint8 state;     
    kal_uint8 key[ 8 ];   
} sml_control_key_struct;

 
typedef struct {
    kal_uint8 state;                         
    kal_uint8 retry_count;               
    kal_uint8 autolock_count;            
    kal_uint8 num;                       
} sml_category_meta_struct;

typedef struct {
    kal_uint32  magic_head;                                  
    sml_category_meta_struct    cat[ 7 ];   
    sml_control_key_struct      key[ 7 ];   
    kal_uint8   code_cat_n[ ( 30  *  3 ) ];              
    kal_uint8   code_cat_ns[ ( 30  *  4 ) ];            
    kal_uint8   code_cat_sp[ ( 30  *  4 ) ];            
    kal_uint8   code_cat_c[ ( 30  *  5 ) ];              
    kal_uint8   code_cat_sim[ ( 30  *  8 ) ];          
    kal_uint8   code_cat_ns_sp[ ( 5  *  10 ) ];      
    kal_uint8   code_cat_sim_c[ ( 10  *  10 ) ];      
    kal_uint8   range_cat_ns[ 2 ];         
    kal_uint32 magic_tail;                                   
} sml_context_struct;                                        
typedef sml_context_struct nvram_sml_context_struct;

 


 


 


































extern const kal_uint8 *NVRAM_EF_SECUPACK_DEFAULT[];

extern const nvram_sml_context_struct NVRAM_EF_SML_DEFAULT;

extern void custom_nvram_get_key(char *init_key, unsigned char *keys);
extern void custom_nvram_encrypt(unsigned char const *keys, unsigned char *buffer, unsigned int length, int scrambleIndex);
extern void custom_nvram_decrypt(unsigned char const *keys, unsigned char *buffer, unsigned int length, int scrambleIndex);






#line 523 "custom\common\PLUTO_MMI\nvram_common_defs.h"
#line 1 "custom\common\nvram_lid_statistics.h"
#line 524 "custom\common\PLUTO_MMI\nvram_common_defs.h"










#line 1 "interface\hwdrv\uart_sw.h"
 


































 










































































































































































































































































































#line 1 "interface\drv_def\drv_features.h"
#line 336 "interface\hwdrv\uart_sw.h"

#line 1 "config\include\stack_config.h"
#line 337 "interface\hwdrv\uart_sw.h"

#line 1 "interface\hwdrv\bmd.h"
 


































 





















































typedef struct __BUFFER_INFO
{
	kal_uint16	Read;		 
	kal_uint16	Write;		 
	kal_uint16	Length;		 
	kal_uint8	*CharBuffer;		 
}BUFFER_INFO;



































































































 













 














 





































extern void Buff_init(BUFFER_INFO *Buf,kal_uint8 *Buffaddr, kal_uint16 uTotalSize);
extern void Buff_Push(BUFFER_INFO *Buf,kal_uint8 *pushData);
extern void Buff_Pop(BUFFER_INFO *Buf,kal_uint8 *popData);
extern kal_uint8 Buff_IsEmpty(BUFFER_INFO *Buf);
extern kal_uint8 Buff_IsFull (BUFFER_INFO *Buf);
extern kal_uint16 Buff_GetRoomLeft (BUFFER_INFO *Buf);
extern kal_uint16 Buff_GetBytesAvail (BUFFER_INFO *Buf);
extern kal_uint16 Buff_GetLength(BUFFER_INFO *Buf);
extern void Buff_Flush (BUFFER_INFO *Buf);
extern void Buff_look(BUFFER_INFO *Buf,kal_uint8 *popData,kal_uint8 num);
extern void Get32FromBuff(BUFFER_INFO *Buf,kal_uint32 *DATA);
extern void Put32toBuff(BUFFER_INFO *Buf,kal_uint32 *DATA);
extern void MemCPY(kal_uint8 *dst,kal_uint8 *src,kal_uint32 len);
extern void MemSET(kal_uint8 *dst,kal_uint8 data,kal_uint32 len);




#line 338 "interface\hwdrv\uart_sw.h"
#line 1 "interface\hwdrv\drv_comm.h"
 


































 




































































































































































































#line 1 "interface\drv_def\drv_features.h"
#line 234 "interface\hwdrv\drv_comm.h"

#line 1 "kal\include\kal_release.h"
#line 235 "interface\hwdrv\drv_comm.h"

#line 1 "interface\hwdrv\drvpdn.h"
 


































 


















































































































































































































 








































































































































































































































































 















typedef enum {
   PDN_UART1 = 0,
   PDN_UART2,
   PDN_ALTER,
   PDN_GCU,
   PDN_DMA,
   PDN_SIM,
   PDN_ADC,
   PDN_GPT,
   PDN_PWM,
   PDN_PWM2,
   PDN_USB,
   PDN_UART3,   
   PDN_MSDC,
   PDN_NFI,
   PDN_B2PSI,
   PDN_IMGPROC,
   PDN_IMGDMA,
   PDN_GIF,
   PDN_RESZ,
   PDN_IRDA,
   PDN_TRC,
   PDN_PFC,
   PDN_PNG,
   PDN_MSDC2,
   PDN_MAX_DEV
} PDN_DEVICE;


typedef struct
{
   kal_uint32 addr;
   kal_uint16 code;
} PDN_INPUT;
 


extern kal_uint8 L1SM_GetHandle(void);
extern void L1SM_SleepDisable(kal_uint8);
extern void L1SM_SleepEnable(kal_uint8);
extern void L1SM_UnIRQSleepDisable(kal_uint8 handle);
extern void L1SM_UnIRQSleepEnable(kal_uint8 handle);
extern void DRVPDN_Enable(kal_uint32 addr,kal_uint16 code,kal_uint8 handle);
extern void DRVPDN_Disable(kal_uint32 addr,kal_uint16 code,kal_uint8 hanlde);



#line 236 "interface\hwdrv\drv_comm.h"







typedef enum {
    	io_low=0,
	   io_high
} IO_level;



typedef enum {
    	DEV_DMA=0,
    	DEV_USB,
    	DEV_GCU,
    	DEV_CHE,
    	DEV_PPP,
    	DEV_GPT,
    	DEV_KP,
    	DEV_GPIO,
    	DEV_UART1,
    	DEV_UART2,
    	DEV_UART3,
    	DEV_SIM,
    	DEV_PWM1,
    	DEV_PWM2,
    	DEV_ALTER,
    	DEV_LCD,
    	DEV_MSDC,
    	DEV_TRC,
    	DEV_NFI,
    	DEV_B2SPI,
    	DEV_IRDA,
    	DEV_ADC,
    	DEV_RTC,
    	DEV_DIV,
    	DEV_FCS,
    	DEV_RZLB,
    	DEV_CRZ,
    	DEV_TV_OUT,
    	DEV_IPP,
    	DEV_PNG,
    	DEV_GIF,
    	DEV_GCMQ,
    	DEV_G2D,
    	DEV_MP4,
    	DEV_JPEG,
    	DEV_PRZ,
    	DEV_RESZ,
    	DEV_ISP,
    	DEV_DCT,
    	DEV_IMGDMA,
    	DEV_DRZ,
    	DEV_MSDC2,
    	DEV_MAX_ID
} DEVICE_ID_ENUM;



typedef void (* VOID_FUNC)(void);







































































extern void Fast_Memcpy(void *srcaddr, void *dstaddr, kal_uint32 leng);
extern void Fast_SherifWrite(void *srcaddr,void *dstaddr,kal_uint32 len);
extern void Fast_SherifRead(void *srcaddr,void *dstaddr,kal_uint32 len);
extern kal_uint32 SaveAndSetIRQMask(void);
extern void RestoreIRQMask(kal_uint32);
extern kal_uint32 drv_get_current_time(void);
extern kal_uint32 drv_get_duration_tick(kal_uint32 previous_time, kal_uint32 current_time);
extern kal_uint32 drv_get_duration_ms(kal_uint32 previous_time);


void get_NFI_bus(void);
void free_NFI_bus(void);

































   
   
   
   
   
   
   
   
   
   

	 
   








 

























extern void drv_trace0(kal_int32 trc_class, kal_uint32 msg_index, const char *arg_type);
extern void drv_trace1(kal_int32 trc_class, kal_uint32 msg_index, const char *arg_type, kal_uint32 data1);
extern void drv_trace2(kal_int32 trc_class, kal_uint32 msg_index, const char *arg_type, kal_uint32 data1, kal_uint32 data2);
extern void drv_trace4(kal_int32 trc_class, kal_uint32 msg_index, const char *arg_type, kal_uint32 data1, kal_uint32 data2, kal_uint32 data3, kal_uint32 data4);
extern void drv_trace8(kal_int32 trc_class, kal_uint32 msg_index, const char *arg_type, kal_uint32 data1, kal_uint32 data2, kal_uint32 data3, kal_uint32 data4,
                kal_uint32 data5, kal_uint32 data6, kal_uint32 data7, kal_uint32 data8);



#line 339 "interface\hwdrv\uart_sw.h"


   




























typedef enum {
      uart_port1=0,
      uart_port2,
      uart_port3,
		uart_port_irda,
		uart_port_usb,
		uart_port_bluetooth,
      uart_port_swdbg,
		start_of_virtual_port=10,
		end_of_virtual_port=10+ 5 -1,
      uart_max_port,      
      uart_port_null = 99	 
} UART_PORT;

typedef enum {
      RX_BUF,
      TX_BUF
} UART_buffer;

typedef enum {
      uart_sleep_on_tx_allow = 0,
      uart_sleep_on_tx_forbid
} UART_SLEEP_ON_TX;

typedef kal_uint32 UART_baudrate;






















typedef enum {
      len_5=5,
      len_6,
      len_7,
      len_8
} UART_bitsPerCharacter;

typedef enum {
      sb_1=1,
      sb_2,
      sb_1_5
} UART_stopBits;

typedef enum {
      pa_none=0,
      pa_odd,
      pa_even,
      pa_space
} UART_parity;

typedef enum {
      fc_none=1,
      fc_hw,
      fc_sw
} UART_flowCtrlMode;

typedef struct
{
      UART_baudrate                 baud; 
      UART_bitsPerCharacter         dataBits;
      UART_stopBits                 stopBits;
      UART_parity                   parity;
      UART_flowCtrlMode             flowControl;
      kal_uint8                     xonChar;
      kal_uint8                     xoffChar;
      kal_bool                      DSRCheck;
} UARTDCBStruct;

typedef struct
{
      kal_uint8                      EscChar;
      kal_uint16                     GuardTime;
} UART_ESCDetectStruct;

typedef struct
{
      kal_uint8                      *rx_buffer;    
      kal_uint8                      *tx_buffer;    
      kal_uint8                      *txISR_buffer;   
} UART_RingBufferStruct;


   typedef enum {
      uart_null_buffer=0,
      uart_isr_buffer,
      uart_normal_buffer
   } UART_RingBuffer_Type;

   typedef struct
   {
         UART_RingBuffer_Type            type;
         kal_uint16                      index;
   } UART_RingBuffer_SaveIndex;


typedef struct
{
	kal_uint16	       tst_port_ps;
	kal_uint16         ps_port;	
	UART_baudrate      tst_baudrate_ps;
	UART_baudrate      ps_baudrate;
	kal_bool           High_Speed_SIM_Enabled;
	kal_uint8          swdbg;	
   kal_uint8          uart_power_setting;  
   kal_uint8          cti_uart_port;
   UART_baudrate      cti_baudrate;
   kal_uint8           tst_port_l1;
   UART_baudrate       tst_baudrate_l1;
} port_setting_struct;

 
typedef void (*UART_TX_FUNC)(UART_PORT port); 
typedef void (*UART_RX_FUNC)(UART_PORT port) ; 

typedef struct
{
      UART_PORT                      port_no;
      kal_bool                       initialized;
      kal_bool                       power_on;
      module_type                    ownerid;
      module_type                    UART_id;
      kal_bool                       breakDet;
      kal_bool                       EscFound;
      UARTDCBStruct                  DCB;
      UART_RingBufferStruct          RingBuffers;
      UART_ESCDetectStruct           ESCDet;
      BUFFER_INFO                    Tx_Buffer_ISR;  
      BUFFER_INFO                    Rx_Buffer;   
      BUFFER_INFO                    Tx_Buffer;   
      kal_hisrid                     hisr;
      IO_level                       DSR;
       
      kal_uint8                      handle;     
      kal_uint8                      EscCount;
      kal_uint8                      Rec_state;  
      UART_SLEEP_ON_TX               sleep_on_tx;
      kal_bool               		EnableTX;
       
      UART_TX_FUNC                  tx_cb;
      UART_RX_FUNC                  rx_cb;
      
		kal_uint8 							Rx_DMA_Ch;
		kal_uint8 							Tx_DMA_Ch;
      
} UARTStruct;


typedef enum
{
	UART_TYPE = 0,
	IRDA_TYPE,
	USB_TYPE,
	BLUETOOTH_TYPE,
	CMUX_TYPE
}UartType_enum;

typedef struct _uartdriver
{
	
	kal_bool (*Open)(UART_PORT port, module_type ownerid);
	void (*Close)(UART_PORT port, module_type ownerid);
	kal_uint16 (*GetBytes)(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, kal_uint8 *status, module_type ownerid);
	kal_uint16 (*PutBytes)(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, module_type ownerid);
	kal_uint16 (*GetRxAvail)(UART_PORT port);
	kal_uint16 (*GetTxAvail)(UART_PORT port);
	kal_uint16 (*PutISRBytes)(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, module_type ownerid);
	kal_uint16 (*GetISRTxAvail)(UART_PORT port);
	void (*Purge)(UART_PORT port, UART_buffer dir, module_type ownerid);	
	void (*SetOwner)(UART_PORT port, kal_uint8 ownerid);
	void (*SetFlowCtrl)(UART_PORT port, kal_bool XON, module_type ownerid);
	void (*ConfigEscape)(UART_PORT port, kal_uint8 EscChar, kal_uint16 ESCGuardtime, module_type ownerid);
	void (*SetDCBConfig)(UART_PORT port, UARTDCBStruct *UART_Config, module_type ownerid);
	void (*CtrlDCD)(UART_PORT port, IO_level SDCD, module_type ownerid);
	void (*CtrlBreak)(UART_PORT port, IO_level SBREAK, module_type ownerid);
	void (*ClrRxBuffer)(UART_PORT port, module_type ownerid);
	void (*ClrTxBuffer)(UART_PORT port, module_type ownerid);	
	void (*SetBaudRate)(UART_PORT port, UART_baudrate baudrate, module_type ownerid);	
	kal_uint16 (*SendISRData)(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length,kal_uint8 mode, kal_uint8 escape_char, module_type ownerid);
	kal_uint16 (*SendData)(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length,kal_uint8 mode,kal_uint8 escape_char, module_type ownerid);
	module_type (*GetOwnerID)(UART_PORT port);	
	void (*SetAutoBaud_Div)(UART_PORT port, module_type ownerid);			
	 
	void (*UART_Register_TX_cb)(UART_PORT port, module_type ownerid, UART_TX_FUNC func);
	void (*UART_Register_RX_cb)(UART_PORT port, module_type ownerid, UART_RX_FUNC func);	
	 
	kal_uint8 (*GetUARTByte)(UART_PORT port);	
	void (*PutUARTByte)(UART_PORT port, kal_uint8 data);	
	void (*PutUARTBytes)(UART_PORT port, kal_uint8 *data, kal_uint16 len);		
	 
	void (*ReadDCBConfig)(UART_PORT port, UARTDCBStruct *UART_Config);	
	void (*CtrlRI)(UART_PORT port, IO_level SRI, module_type ownerid);	
	void (*CtrlDTR)(UART_PORT port, IO_level SDTR, module_type ownerid);	
	void (*ReadHWStatus)(UART_PORT port, IO_level *SDSR, IO_level *SCTS);	
}UartDriver_strcut;

typedef struct _uarthandle
{
	UartType_enum type;
	UartDriver_strcut* drv;
	void* dev;
}UartHandle_struct;

 

typedef struct  
{       
	kal_uint8 	ref_count;
	kal_uint16 	msg_len;			 	
	UART_PORT 	port;
}uart_ready_to_read_ind_struct; 

typedef struct  
{       
	kal_uint8 	ref_count;
	kal_uint16 	msg_len;			 	
	UART_PORT 	port;
}uart_ready_to_write_ind_struct;
 
 typedef struct  
{       
	kal_uint8 	ref_count;
	kal_uint16 	msg_len;			 	
	UART_PORT 	port;
}uart_dsr_change_ind_struct;
 
 typedef struct  
{       
	kal_uint8 	ref_count;
	kal_uint16 	msg_len;			 	
	UART_PORT 	port;
}uart_escape_detected_ind_struct;

 typedef struct  
{       
	kal_uint8 	ref_count;
	kal_uint16 	msg_len;			 	
	UART_PORT 	port;
}uart_plugin_ind_struct;

 typedef struct  
{       
	kal_uint8 	ref_count;
	kal_uint16 	msg_len;			 	
	UART_PORT 	port;
}uart_plugout_ind_struct;    
 



































































 
typedef struct{
	kal_uint8*	rx_adrs;
	kal_uint8*	tx_adrs;	
	kal_uint8*	txisr_adrs;	
	kal_uint16	rx_len;
	kal_uint16	tx_len;	
	kal_uint16	txisr_len;	
	module_type	owerid;		
}UART_ring_buffer_struct;

typedef struct {
	UART_ring_buffer_struct ring[ 3 ];
	UART_PORT               not_support_VFIFO;
} UART_rings_struct;

typedef struct {  
   const UART_rings_struct * (*UART_Get_Data)(void);
}UART_customize_function_struct; 

 
extern UartDriver_strcut UartDriver;	
extern kal_bool UART_VFIFO_support[ 3 ];

extern UartDriver_strcut UartDriver_VFIFO;


extern kal_bool UART1DMA_Ini(kal_bool Tx);
extern kal_bool UART2DMA_Ini(kal_bool Tx);
extern kal_uint8 GetUARTByte(UART_PORT port);
extern void PutUARTByte(UART_PORT port, kal_uint8 data);
extern void UART_SetBaudRate(UART_PORT port, UART_baudrate baud_rate, module_type ownerid);
extern void UART_SetDCBConfig(UART_PORT port, UARTDCBStruct *UART_Config, module_type ownerid);
extern void UART_ReadDCBConfig (UART_PORT port, UARTDCBStruct *DCB);
extern void UART_loopback(UART_PORT port);
extern void UART_HWInit(UART_PORT port);
extern kal_bool UART_Open(UART_PORT port, module_type ownerid);
extern void UART_Close(UART_PORT port, module_type ownerid);
extern void UART_SetOwner (UART_PORT port, kal_uint8 ownerid);
extern void UART_ConfigEscape (UART_PORT port, kal_uint8 EscChar, kal_uint16 ESCGuardtime, module_type ownerid);
extern void UART_CtrlDTR (UART_PORT port, IO_level SDTR, module_type ownerid);
extern void UART_ReadHWStatus(UART_PORT port, IO_level *SDSR, IO_level *SCTS);
extern void UART_CtrlBreak(UART_PORT port, IO_level SBREAK, module_type ownerid);
extern void UART_Purge(UART_PORT port, UART_buffer dir, module_type ownerid);
extern void UART_Register_RX_cb(UART_PORT port, module_type ownerid, UART_RX_FUNC func);
extern void UART_Register_TX_cb(UART_PORT port, module_type ownerid, UART_TX_FUNC func);

extern kal_uint16 UART_GetBytes(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, kal_uint8 *status, module_type ownerid);
extern kal_uint16 UART_PutBytes(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, module_type ownerid);
extern kal_uint16 UART_PutISRBytes(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, module_type ownerid);
extern kal_uint16 UART_SendISRData(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length,kal_uint8 mode, kal_uint8 escape_char, module_type ownerid);
extern kal_uint16 UART_SendData(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length,kal_uint8 mode,kal_uint8 escape_char, module_type ownerid );
extern void UART_SetFlowCtrl(UART_PORT port, kal_bool XON, module_type ownerid);
extern void UART_CtrlDCD(UART_PORT port, IO_level SDCD, module_type ownerid);
extern void UART_CtrlRI (UART_PORT port, IO_level SRI, module_type ownerid);
extern kal_uint16 UART_GetBytesAvail(UART_PORT port);
extern void UART_SleepOnTx_Enable(UART_PORT port, UART_SLEEP_ON_TX enable_flag);
extern void UART_SwitchPort(UART_PORT *APP_port, UART_PORT new_uart_port);
extern void UART_dafault_tx_cb(UART_PORT port);
extern void UART_dafault_rx_cb(UART_PORT port);
extern void UART_TurnOnPower(UART_PORT port, kal_bool enable);
extern kal_bool UART_CheckTxBufferEmpty(UART_PORT port);
extern kal_bool UART_CheckTxAllSentOut(UART_PORT port);
extern void UART_GetTxBufferSize(UART_PORT port, kal_uint32 *total_size, kal_uint32 *rest_size);
extern void UART1_HISR(void);
extern void UART2_HISR(void);
extern void UART1_LISR(void);
extern void UART2_LISR(void);
extern kal_bool uart_support_autoescape(void);
 












 


   extern void UART3_HISR(void);
   extern void UART3_LISR(void);


extern void UART_Register(UART_PORT port, UartType_enum type, UartDriver_strcut* drv);
 
extern void uart_customize_init(void);
 

 
extern void UART_RecTimeOutHandler(void *parameter);
extern void UART_TrxHandler_VFIFO(void *parameter);
extern void UART_RecHandler_VFIFO(void *parameter);
extern void UART_THRE_hdr_VFIFO(UART_PORT port);
 
extern void U_configure_DMA_VFIFO(void);
extern kal_uint16 U_GetTxISRRoomLeft_VFIFO(UART_PORT port);
extern kal_uint16 U_GetTxRoomLeft_VFIFO(UART_PORT port);
extern kal_uint16 U_GetBytesAvail_VFIFO(UART_PORT port);
extern kal_uint8 U_GetUARTByte_VFIFO(UART_PORT port);
extern void U_PutUARTByte_VFIFO(UART_PORT port, kal_uint8 data);
extern void PutUARTData_VFIFO(UART_PORT port, kal_uint8 escape_char, kal_uint8 data);
extern kal_uint16 U_GetBytes_VFIFO(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, kal_uint8 *status, module_type ownerid);
extern kal_uint16 U_PutBytes_VFIFO(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, module_type ownerid);
extern kal_uint16 U_PutISRBytes_VFIFO(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length, module_type ownerid);
extern kal_uint16 U_SendData_VFIFO(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length,kal_uint8 mode,kal_uint8 escape_char, module_type ownerid);
extern kal_uint16 U_SendISRData_VFIFO(UART_PORT port, kal_uint8 *Buffaddr, kal_uint16 Length,kal_uint8 mode,kal_uint8 escape_char, module_type ownerid);



#line 534 "custom\common\PLUTO_MMI\nvram_common_defs.h"
#line 1 "interface\drv_def\drv_features.h"
#line 535 "custom\common\PLUTO_MMI\nvram_common_defs.h"

 






    extern shadow_ltable_struct shadow_ltable[];
    extern kal_uint8 ShadowBuffer[];
    extern void nvram_shadow_construct(void);
    extern kal_uint16 shadow_buffer_size;
    extern kal_uint8 shadow_item_total;
    extern kal_uint8 dirty_list[];


 




    typedef enum
    {
         
        NVRAM_EF_ADC_LID =  NVRAM_EF_LAST_LID_CORE ,
        NVRAM_EF_CUST_HW_LEVEL_TBL_LID,
        NVRAM_EF_UEM_MANUFACTURE_DATA_LID,
        NVRAM_EF_UEM_RMI_DATA_LID,
        NVRAM_EF_CUST_ACOUSTIC_DATA_LID,
        NVRAM_EF_AUDIO_PARAM_LID,
        NVRAM_EF_AUTOTEST_LID,
        NVRAM_EF_PORT_SETTING_LID,
        NVRAM_EF_BARCODE_NUM_LID,
        NVRAM_EF_SYS_CACHE_OCTET_LID,
        NVRAM_EF_IMEI_IMEISV_LID,
        NVRAM_EF_PHB_LID,
        NVRAM_EF_PHB_LN_ENTRY_LID,
        NVRAM_EF_PHONEBOOK_SOS_LID,
        NVRAM_EF_PHONEBOOK_SPEEDDIAL_LID,
        NVRAM_EF_PHB_IDS_LID,
        NVRAM_EF_PHB_FIELDS_LID,             
        NVRAM_EF_PHB_SETTINGS_LID,
        NVRAM_EF_PHB_CALLER_GROUPS_LID,
        NVRAM_EF_PHB_VCARD_LID,
        NVRAM_EF_PHB_EMAIL_SORT_LID,         
        NVRAM_EF_PHB_VIDEO_LID,              
        NVRAM_EF_PHB_LN_TYPE_SEQ_LID,
        NVRAM_EF_PHB_COMPARE_DIGIT_LID,
        NVRAM_EF_PHB_BIRTHDAY_LID,           
        NVRAM_EF_PHB_INFO_LID,               
        NVRAM_EF_PHB_SNE_LID,                
        NVRAM_EF_PHB_IMPS_LID,               
        NVRAM_EF_PHB_POC_LID,                
        NVRAM_EF_PHB_VOIP_LID,               
        NVRAM_EF_SMS_LID,                    
        NVRAM_EF_SMS_CB_CHNL_LID,            
        NVRAM_EF_SMS_CB_SMS_LID,
        NVRAM_EF_SMS_CB_SMS_INFO_LID,
        NVRAM_EF_EMS_MY_PICTURE_NAME_LID,    
        NVRAM_EF_EMS_MY_ANIMATION_NAME_LID,
        NVRAM_EF_EMS_MY_MELODY_NAME_LID,     
        NVRAM_EF_SMSAL_SMS_LID,
        NVRAM_EF_SMSAL_MAILBOX_ADDR_LID,
        NVRAM_EF_SMSAL_COMMON_PARAM_LID,
        NVRAM_EF_CB_DEFAULT_CH_LID,
        NVRAM_EF_SMSAL_SMSP_LID,
        NVRAM_EF_MSG_CLUB_LID,               
        NVRAM_EF_MSG_CLUB_NUM_LID,           
        NVRAM_EF_CHAT_ROOM_INFO_LID,         
        NVRAM_EF_CALL_TIME_LID,
        NVRAM_EF_CAMERA_SETTING_LID,
        NVRAM_EF_VIDEO_SETTING_LID,          
        NVRAM_EF_CAMERA_PARA_LID,            
        NVRAM_EF_CAMERA_GAMMA_LID,           
        NVRAM_EF_CAMERA_DEFECT_LID,          
        NVRAM_EF_CAMERA_LENS_LID,            
        NVRAM_EF_TCM_PDP_PROFILE_LID,
        NVRAM_EF_IP_NUMBER_LID,              
        NVRAM_EF_CSD_PROFILE_LID,            
        NVRAM_EF_ABM_GPRS_PROFILE_LID,       
        NVRAM_EF_ALM_QUEUE_LID,
        NVRAM_EF_ALM_SPOF_DATA_LID,
        NVRAM_EF_ALM_ALARM_DATA_LID,
        NVRAM_EF_TODO_LIST_LID,              
        NVRAM_EF_SETTING_LID,
        NVRAM_EF_GROUPLIST_LID,
        NVRAM_EF_WPSS_FILENAME_LID,
        NVRAM_EF_SHORTCUTS_LID,
        NVRAM_EF_CALORIE_DATA_LID,
        NVRAM_EF_PROFILES_LID,
        NVRAM_EF_STOPWATCH_LID,              
        NVRAM_PICTURE_EDITOR_LID,            
        NVRAM_EF_PHOTO_EDITOR_SETTING_LID,   
        NVRAM_EF_EXT_MELODY_INFO_LID,
        NVRAM_EF_FM_RADIO_LID,               
        NVRAM_EF_FMSR_SETTING_LID,           
        NVRAM_EF_VRSD_TAG_LID,               
        NVRAM_EF_VRSI_TAG_LID,               
        NVRAM_EF_FMGR_FILEPATH_POOL_HEAD_LID,
        NVRAM_EF_FMGR_FILEPATH_POOL_TAIL_LID,
        NVRAM_EF_BT_INFO_LID,                
        NVRAM_EF_BTRADIO_RFMD3500_LID,    
        NVRAM_EF_BTRADIO_MT6601_LID,      
        NVRAM_EF_BTRADIO_MT6611_LID,      
        NVRAM_EF_BLACK_LIST_LID,             
        NVRAM_EF_IMPS_LID,                   
        NVRAM_EF_AUDIO_EQUALIZER_LID,        
        NVRAM_EF_POC_PROFILE_LID,
        NVRAM_EF_POC_HISTORY_LID,
        NVRAM_EF_POC_PRIVACY_LID,
        NVRAM_EF_THEMES_VALUES,              
        NVRAM_EF_THEME_MANAGER_LID,          
        NVRAM_EF_THEME_DOWNLOAD_LIST_LID,    
        NVRAM_EF_MOTION_DICE_LID,            
        NVRAM_EF_MOTION_DJ_LID,              
        NVRAM_EF_EONS_INFO_LID,              
        NVRAM_EF_USER_CTRL_PLMN_LID,         
        NVRAM_EF_BGSND_SETTING_LID,          
        NVRAM_EF_BGSND_FILEPATH_LID,         

         
         
        NVRAM_EF_BRW_BOOKMARK_TITLE_LID,
        NVRAM_EF_BRW_BOOKMARK_URL_LID,
        NVRAM_EF_BRW_ADDRESS_HISTORY_TITLE_LID,
        NVRAM_EF_BRW_ADDRESS_HISTORY_URL_LID,
         
        NVRAM_EF_JMMS_COMPOSE_SETTINGS_LID,
        NVRAM_EF_JMMS_SENDING_SETTINGS_LID,
        NVRAM_EF_JMMS_INBOX_READ_UNREAD_LID,

         
        NVRAM_EF_WAP_PROFILE_CONTENT_LID,
        NVRAM_EF_MMS_PROFILE_CONTENT_LID,
        NVRAM_EF_WAP_PROFILE_NAMES_LID,
        NVRAM_EF_MMS_PROFILE_NAMES_LID,

	 
        NVRAM_EF_EBOOK_SETTINGS_LID,
        NVRAM_EF_EBOOK_DEFAULT_SETTINGS_LID,

        NVRAM_EF_BARCODEREADER_SETTING_LID,

         
        NVRAM_EF_SML_LID,

        NVRAM_EF_SYNCML_SETTING_LID,
        NVRAM_EF_SYNCML_PROFILE_LID,

         
        NVRAM_EF_AUDIO_PLAYER_BT_SETTINGS_LID,
        NVRAM_EF_VOIP_PROF_LID,              
        NVRAM_EF_VOIP_SETTING_LID,           
        NVRAM_EF_WLAN_SETTING_LID,
        NVRAM_EF_WLAN_PROFILE_LID,        

        NVRAM_EF_EM_NW_EVENT_RINGS_LID,
         
        NVRAM_EF_NITZ_NW_NAME_LID,

        NVRAM_EF_DM_FWU_TFTP_SETTING_LID,
        NVRAM_EF_DM_FWU_HTTP_SETTING_LID,

        NVRAM_EF_MS_SECURITY_LID,
        NVRAM_EF_RAC_PREFERENCE_LID,
        NVRAM_EF_AVATAR_SETTING_LID,
        NVRAM_EF_CSB_SETTINGS_LID,

         
        NVRAM_EF_BRW_LAST_WEB_ADDR_LID,
        NVRAM_EF_BRW_USER_DEFINED_HOMEPAGE_LID,
        NVRAM_EF_PUSH_SETTING_LID,

        NVRAM_EF_VIDEO_PREDEFINED_URL_LID,   
        NVRAM_EF_VIDEO_HISTORY_URL_LID,      
        NVRAM_EF_DRM_SETTING_LID,
        NVRAM_EF_DRM_STIME_LID,
        NVRAM_EF_DRM_CERPATH_LID,
        NVRAM_EF_DM_SR_NUMBER_LID,	     
        NVRAM_EF_CUSTSER_SETTING_LID,        
        NVRAM_EF_UMMS_COMPOSE_SETTINGS_LID,
        NVRAM_EF_UMMS_SENDING_SETTINGS_LID,
        NVRAM_EF_EMAIL_TEMPLATE_LID,         
        NVRAM_EF_LANGLN_LK_SETTING_LID,
        NVRAM_EF_LANGLN_PRESEL_INFO_LID,

        NVRAM_EF_MOBILE_TV_PLAYER_SETTING_LID,   

        NVRAM_EF_LANGLN_BSK_SETTING_LID,
        NVRAM_EF_SLIDE_SHOW_SETTING_LID,     
        NVRAM_EF_VT_SETTING_LID,
        NVRAM_EF_MMS_BGSR_MSG_STRUCT_LID,    
        NVRAM_EF_BT_BIP_SETTING_LID,  
        NVRAM_EF_GIS_GPS_SETTING_DATA_LID,
        NVRAM_EF_CARD2_CB_CHNL_LID,
        NVRAM_EF_CARD2_CB_SMS_LID,
        NVRAM_EF_CARD2_CB_SMS_INFO_LID,

	 
       NVRAM_ANALOG_TV_CHANNEL_LID,   
       NVRAM_ANALOG_TV_CHANNEL_NAME_LID,
	 

	
	
	NVRAM_G_SENSOR_LID,
	NVRAM_G_SENSOR_CALIBRANTION_LID,
	

	




	



	
         
        NVRAM_EF_LAST_LID_COMMAPP
    } nvram_lid_commapp_enum;

     


 








 























































































































     



     



 










 





 












































































































































 







 














 




















































 










     



 





 















 





 






 





 





 





 





 














 





 





 





 



















 








 






     





































     










   






   





   




























     






     










 







 










 












    extern const kal_uint32 NVRAM_EF_CUST_HW_LEVEL_TBL_DEFAULT[ 440 ];

     










































































 






 













 
























 
















 























 










 











































 















 




 























typedef struct
{
    kal_uint8 const* version;
    kal_uint8 const* custpack_default[ 13 ];
}custpack_nvram_header;

    extern const custpack_nvram_header custpack_nvram_ptr;
    extern ltable_entry_struct logical_data_item_table_core[NVRAM_EF_LAST_LID_CORE];
    extern ltable_entry_struct logical_data_item_table_comm_app[NVRAM_EF_LAST_LID_COMMAPP -  NVRAM_EF_LAST_LID_CORE ];
    extern ltable_entry_struct logical_data_item_table_cust[];








#line 143 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "custom\app\UNIRISE25_GEMINI_BB\nvram_user_defs.h"
 


































 













































































#line 1 "custom\common\PLUTO_MMI\nvram_common_defs.h"
#line 115 "custom\app\UNIRISE25_GEMINI_BB\nvram_user_defs.h"




    typedef enum
    {
        NVRAM_EF_CACHE_BYTE_LID =  NVRAM_EF_LAST_LID_COMMAPP ,
        NVRAM_EF_CACHE_SHORT_LID,
        NVRAM_EF_CACHE_DOUBLE_LID,

         

        NVRAM_EF_LAST_LID_CUST
    } nvram_lid_cust_enum;

  



 



 








     


     




    extern const custpack_nvram_header custpack_nvram_ptr;

 







 



#line 144 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"
 


































 























































































































































































































































































































































































































 


#line 1 "interface\ps\nvram_editor_data_item.h"
 


































 































 



#line 1 "l1\l1d\m12190.h"
 


































 



































































































































































































































































 

 




   
   


 


   
   





 






 


   typedef enum
   {
      FrequencyBand400,
      FrequencyBand850,
      FrequencyBand900,
      FrequencyBand1800,
      FrequencyBand1900,

      FrequencyBandCount

   } FrequencyBand;


 




 

typedef  struct
{
   char  cwin_idx;
   char  band;
   char  rtxwin_idx;
   char  is_init;
   char  cur_slot;
   char  rx_slots;
   char  tx_slots;
   char  tx_mod_type;
   unsigned short tx_mod_type2;
   char  modidx;
   char  change;
   char  bb_tx_autocal;
   char  bat_volt;
   char  bat_temp;
   unsigned short apc_dc_offset;
   unsigned short AFC_data;
   unsigned long  RFN_data;
   unsigned long  IFN_data;
   unsigned long  AGC_data;   
   char inj;
   char next_inj;
   char d2c_txiqswap;   
   char  old_band;
   char d2c_txiqconfig; 



}  sRFSETTING;

extern  sRFSETTING l1d_rf;

 

typedef  struct
{
   unsigned short  ctrl;
   unsigned long   data;

}  sSDATAINITDATA;

 

typedef  struct
{
   int  max_gain;
   int  min_gain;

} sL1DGAINRANGE;

 

typedef  struct
{
   short pos_gain;
   long  setting;
   short A;

} sL1DAGCDATA;

 



typedef  struct
{
   short        max_arfcn;
   signed char  gain_offset;

} sAGCGAINOFFSET;

extern  sAGCGAINOFFSET*  AGC_PATHLOSS_TABLE[FrequencyBandCount];

 





typedef  struct
{
   unsigned char   point[2][16];

} sRAMPAREADATA;

typedef  struct
{
   signed short     max_arfcn;
   unsigned short   mid_level;
   unsigned short   hi_weight;
   unsigned short   low_weight;

} sARFCN_SECTION;

typedef  struct
{
   signed   long   lowest_power;
   unsigned short  power[16];
   sRAMPAREADATA   ramp[  16  ];
   sARFCN_SECTION  arfcn_weight[  12  ];
   unsigned short  battery_compensate[3 ][3 ];
} sRAMPDATA;

extern  sRAMPDATA*  RampData[FrequencyBandCount];




 
typedef struct
{
   unsigned char bbtx_common_mode_voltage;
   unsigned char bbtx_gain;
   unsigned char bbtx_calrcsel;
   unsigned char bbtx_trimI;        
   unsigned char bbtx_trimQ;        
   unsigned char bbtx_dccoarseI;    
   unsigned char bbtx_dccoarseQ;    
   unsigned char bbtx_offsetI;      
   unsigned char bbtx_offsetQ;      
   unsigned char bbtx_isCalibrated; 
   int           apc_bat_low_voltage;
   int           apc_bat_high_voltage;
   int           apc_bat_low_temperature;
   int           apc_bat_high_temperature;
   unsigned char bbtx_common_mode_voltage_h;
   unsigned char bbtx_gain_h;
   unsigned char bbtx_calrcsel_h;
   unsigned char bbtx_trimI_h;
   unsigned char bbtx_trimQ_h;
   unsigned char bbtx_dccoarseI_h;
   unsigned char bbtx_dccoarseQ_h;
   unsigned char bbtx_offsetI_h;
   unsigned char bbtx_offsetQ_h;
   unsigned char bbtx_phsel;
   unsigned char bbtx_phsel_h;
   unsigned char bbrx_gsm850_gsm900_swap;
   unsigned char bbrx_dcs1800_pcs1900_swap;
} sBBTXParameters;

extern sBBTXParameters BBTXParameters;

 

typedef  unsigned char sMIDRAMPDATA[16];
extern sMIDRAMPDATA*  InterRampData[FrequencyBandCount];







 



typedef  struct
{
   long   min_freq;
   short  min_dac;
   long   inv_slope;

}  XO_SLOPE_AREA_DATA;

extern XO_SLOPE_AREA_DATA  XO_SlopeAreaData[ 8 ];

 

extern long  XO_CapID;
 

typedef struct
{
   unsigned long icorrection;
   unsigned long qcorrection;
}skyip2coef;

typedef struct
{
   unsigned long ipol;
   unsigned long qpol;
}sky117ip2pol;

typedef struct
{
   unsigned long acode;
   unsigned long amcode;
}mt6139ip2coef;

typedef union
{
   struct
   {  
      skyip2coef data[5 ];
   }skyip2; 
   struct
   {  
      skyip2coef data[5 ];
      sky117ip2pol pol[5 ];
   }sky117ip2;
   struct
   {
      mt6139ip2coef data[5 ];
      unsigned long rxamcalmode;
   }mt6139ip2;
   struct
   {
      unsigned char fixgain_enable;
   }sky74137; 
}sRxip2;

typedef struct
{
   unsigned long word6_4_0;
   unsigned long word6_5_0;
   unsigned long word6_6_0;
   unsigned long word6_7_0;
   unsigned long bvmode;
   unsigned long c3mode;
   unsigned long wordC3;
}b5ptxcoef;

typedef struct
{
   short pcl_index;
   unsigned char pa_vbias;   
}pa_vbias;

typedef struct
{
   pa_vbias GSM850_pa_vbias[8];
   pa_vbias GSM900_pa_vbias[8];   
   pa_vbias DCS1800_pa_vbias[8];
   pa_vbias PCS1900_pa_vbias[8];      
}mt6140tx_pa_vbias;

typedef   union
{
   struct
   {  
      b5ptxcoef data;
   }b5ptx;
   struct
   {  
      mt6140tx_pa_vbias data;
   }mt6140tx;   
    



}sTxepsk;

typedef struct
{
   sRxip2 rx;
   sTxepsk tx;
}sRFSpecialCoef;

extern  sRFSpecialCoef RFSpecialCoef;
 


extern const  unsigned char   CONTISLOTMASK[5];
extern const  unsigned char   FIRSTSLOTMASK[5];



 

void  L1D_RF_Init( void );
void  L1D_RF_Init_FIR( void );
void  L1D_RF_PowerOn( void );
void  L1D_RF_PowerOff( void );
void  L1D_RF_WindowOn( void );
void  L1D_RF_WindowOff( void );

void  L1D_RF_GetRxPLLSetting( int rf_band, int arfcn, long *rfN, long *ifN );
void  L1D_RF_GetTxPLLSetting( int rf_band, int arfcn, long *rfN, long *ifN );
int   L1D_RF_GetGainSetting( int rf_band, int arfcn, int request_gain, long *gain_setting );

void  L1D_RF_SetFixGainEnable( unsigned char enable );
void  L1D_RF_SetPathLossTable( int rf_band, void* table );
void  L1D_RF_SetRampTable( int rf_band, void* table );
void  L1D_RF_InitRampTable( int rf_band );






void  L1D_RF_SetInterSlotRampTable( int rf_band, void* table );
void  L1D_RF_SetCrystalAFCData( void* table );
void  L1D_RF_SetCrystalCap( int  cap_no );
void  L1D_RF_SetRFSpecialCoef(void* table );
unsigned long  L1D_RF_GetID(void);
void  L1D_RF_SetImmediateBSI(unsigned long bsidata);
void  L1D_RF_GetImmediateBSI( unsigned long bsi_addr, unsigned long *bsi_data  );
void  L1D_RF_TXIQ_Dynamic_Swap( void );
void  L1D_BFE_SetTxIQSwap( void );
void  IMM_RECEIVE_BSI( unsigned short ADD_Ctrl, unsigned long ADD, unsigned short DATA_Ctrl, unsigned long *DATA  );
short L1D_RF_SetTxPowerLevel( int rf_band, int arfcn, short power_dbm, short mod_type );
short L1D_RF_GetRxPathLoss( int rf_band, int arfcn, short request_gain );
void  L1D_RF_NotifyBatteryVoltage( int  micro_volt );
void  L1D_RF_NotifyBatteryTemperature( int  mili_degree );

void  L1D_RF_SetPData_PR( void );
void  L1D_RF_SetPData_PT( void );
void  L1D_RF_SetPData_PR2M( void );
void  L1D_RF_SetPData_PT2M( void );
void  L1D_RF_SetSData_SR1( void );
void  L1D_RF_SetSData_SR2( void );
void  L1D_RF_SetSData_SR3( void );
void  L1D_RF_SetSData_ST1( void );
void  L1D_RF_SetSData_ST2( void );
void  L1D_RF_SetSData_ST3( void );











void  L1D_AFCDAC_On( void );
void  L1D_AFCDAC_Off( void );
unsigned long  L1D_RF_GetITC_PCL(void);
unsigned short  L1D_RF_GetTxPAVBias_TxITC( unsigned short lb_cw_high_idx, unsigned short hb_cw_high_idx); 

 






void     WAIT_TIME_QB( short time_qb );
void     IMM_MODE_BEGIN( unsigned short imm_mask );
void     IMM_MODE_END( void );
void     IMM_SEND_BPI( unsigned short  data );
void     IMM_SEND_BSI( unsigned short ctrl, unsigned long data );

 
void     IMM_RECEIVE_BSI( unsigned short ctrl1, unsigned long data1, unsigned short ctrl2, unsigned long *data2  );
 
 
 


 






#line 73 "interface\ps\nvram_editor_data_item.h"
#line 1 "inc\l1cal.h"
 


































 


























































 
typedef struct
{
   sAGCGAINOFFSET     agcPathLoss[FrequencyBandCount][ 13 ];
}l1cal_agcPathLoss_T;

typedef struct
{
   sRAMPDATA          rampData;
}l1cal_rampTable_T;

typedef struct
{
   kal_uint16         dacValue;
   kal_int32          slopeInv;
}l1cal_afcData_T;

typedef struct
{
   kal_int16 filter_coefficient[60];
}l1spfc_T;

typedef struct
{
   sBBTXParameters BBTXParameters;
}l1cal_txiq_T;
      
typedef struct
{   
   kal_uint8    interRampData[16];
}l1cal_interRampData_T;
         






         
typedef struct
{  
   XO_SLOPE_AREA_DATA  XO_SlopeAreaData[ 8 ]; 
}l1cal_crystalAfcData_T;

typedef struct
{  
   kal_int32 cap_id; 
}l1cal_crystalCapData_T;         
      
typedef struct
{
   sRFSpecialCoef RFSpecialCoef;
}l1cal_rfspecialcoef_T;


#line 74 "interface\ps\nvram_editor_data_item.h"
#line 1 "interface\hwdrv\batparm.h"
 


































 










































   #line 1 "interface\hwdrv\adc.h"
#line 80 "interface\hwdrv\batparm.h"




#line 75 "interface\ps\nvram_editor_data_item.h"






#line 1 "ps\interfaces\local_inc\l4c2uem_struct.h"
#line 82 "interface\ps\nvram_editor_data_item.h"

#line 1 "ps\l4\include\device.h"
 


































 




























































































































 












 


#line 1 "interface\hwdrv\pmic6318_sw.h"
 


































 





























typedef enum 
{
	R_LED=0x3000,
	G_LED=0x4000,
	B_LED=0x5000,
	KP_LED=0x6000,
	BL_LED=0x7000 
}pmic_led_type;
typedef enum 
{
   LED_CURRENT_12=0x0,
   LED_CURRENT_16=0x20,
   LED_CURRENT_20=0x40,
   LED_CURRENT_24=0x60
}pmic_led_current;
typedef enum 
{
   VB_VD=0,
   VB_VTCXO   
}vb_vol;

typedef enum 
{   
   VSIM_1_8=0,
   VSIM_3   
}sim_vol;
typedef enum 
{
   VD_NORMAL=0,
   VD_0_9   
}vd_sel;

typedef enum 
{
   CHR_CURRENT_50=0,
   CHR_CURRENT_90,
   CHR_CURRENT_150,
   CHR_CURRENT_225,
   CHR_CURRENT_300,
   CHR_CURRENT_450,
   CHR_CURRENT_650,
   CHR_CURRENT_800
}pmic_charging_current;

typedef enum 
{
   VSIM_LDO=0,
   VTCXO_LDO,
   VRTC_LDO,   
   VM_LDO,
   VA_LDO,
   VD_LDO   
}pmic_ldo;

typedef enum 
{
   MISC_STAT_VISENSE=0,
   MISC_STAT_VBOUT,
   MISC_STAT_USB_PWR,
   MISC_STAT_VASW_SEL,
   MISC_STAT_VASW,   
   MISC_STAT_MC_SEL,
   MISC_STAT_MC,
   MISC_STAT_VIRBRATOR,
   MISC_STAT_VIRBRATOR_SEL
}pmic_misc_stat;

typedef enum 
{
   CHR_STAT_OV=0,   
   CHR_STAT_CHRDET,
   CHR_STAT_BAT_ON,
   CHR_STAT_AC_DET,
   CHR_STAT_USB_DET,
   CHR_STAT_CV,
   CHR_STAT_CHRG_DIS 
}pmic_chr_stat;

typedef enum 
{
   NO_CHARGING=0,
   CC_MODE,
   CV_MODE      
}pmic_chr_mode;
typedef enum 
{
   AC_CURRENT_50=0,
   AC_CURRENT_875=1,
   AC_CURRENT_150=2,
   AC_CURRENT_225=3,
   AC_CURRENT_300=4,
   AC_CURRENT_450=5,
   AC_CURRENT_650=6,
   AC_CURRENT_800=7   
}ac_current;
typedef enum 
{
   USB_CURRENT_50=0,
   USB_CURRENT_875=1,
   USB_CURRENT_150=2,
   USB_CURRENT_225=3,
   USB_CURRENT_300=4,
   USB_CURRENT_450=5,
   USB_CURRENT_650=6,
   USB_CURRENT_800=7
}usb_current;


typedef enum 
{
   AC_CHR=0,
   USB_CHR
}chr_type;

typedef enum 
{
   PMIC_ADC_OFF=0,
   PMIC_ADC_ISENSE,
   PMIC_ADC_VBAT,
   PMIC_ADC_ISENSE_VBAT
}adc_type;
typedef enum 
{
   DEALY_200u=0,
   DEALY_400u,
   DEALY_500u,
   DEALY_600u      
}charge_pumpdelay_enum;

typedef enum 
{
   VASW_3_3V =0,
   VASW_2_8V
}vasw_a_sel_enum;

typedef enum 
{
   VMC_2_8V =0,
   VMC_3V
}vmc_sel_enum;


typedef enum 
{
   VIBRATOR_1_8V =0,
   VIBRATOR_3_2V
}vibrator_sel_enum;

typedef enum 
{
   CHARGE_PUMP_LEVEL3 =0,
   CHARGE_PUMP_LEVEL2 =4,   
   CHARGE_PUMP_LEVEL1 =8
}charge_pump_current_enum;

typedef enum
{
   CHARGE_PUMP_CTRL_CLR =0,
   CHARGE_PUMP_CTRL_SET =16
}charge_pump_ctrl_enum;

typedef enum 
{
   UV_290 =0,
   UV_275 =1,
   UV_260 =2,
   UV_250 =3
}UV_voltage_enum;

typedef struct
{
   pmic_led_type type;
   pmic_led_current current;
   kal_uint8 duty_cycle;   
}pmic_led_struct;

typedef struct 
{
	void (*pmic_ac_det)(void);
	void (*pmic_usb_det)(void); 
}pmic_chrdect_callbac_struct;


 
extern void pmic_init(void);
extern kal_uint8 pmic_chr_status(pmic_chr_stat status);
extern kal_uint8 pmic_ldo_status(pmic_ldo ldo);
extern void pmic_usb_current_ctrl(usb_current current);
extern void pmic_ac_currnet_ctrl(ac_current current);
extern void pmic_usb_regulator_enable(kal_bool enable);
extern void pmic_speaker_gain(kal_uint8 gain);
extern void pmic_chr_enable(kal_bool enable);
extern void pmic_usb_enable(kal_bool enable);
extern void pmic_chr_pump_enable(kal_bool enable);
extern void pmic_vasw_enable(kal_bool enable);
extern void pmic_vd_sel(vd_sel sel);
extern void pmic_vb_sel(vb_vol sel);
extern void pmic_vmc_enable(kal_bool enable);
extern void pmic_vsim_sel(sim_vol vol);
extern void pmic_speker_enable(kal_bool enable);
extern void pmic_vibrator_enable(kal_bool enable);
extern void pmic_charge_current_offset(kal_uint8 offset);
extern void pmic_rgb_dim_clk_setting(kal_uint32 clk);
extern void pmic_led_enable(pmic_led_type type, kal_bool enable);
extern void pmic_led_config(pmic_led_struct *led_conf);
extern kal_bool pmic_is_chr_det(chr_type type);
extern kal_bool pmic_is_chr_valid(void);
extern void pmic_write_to_register_save(kal_uint8 data, kal_uint16 register_index);
extern void PMIC_ChrDet_Registration(chr_type type, void (*Callback)(void));
extern void PMIC_HISR(void);
extern void pmic_charge_pump_init(kal_uint8 value);
extern void pmic_adc_measure_div2(kal_bool enable);
extern void pmic_clear_ov(void);
extern void pmic_pump_delay(charge_pumpdelay_enum delay);
extern void pmic_sim_leveltype(kal_bool enable);
extern void pmic_sw_sel(vasw_a_sel_enum value);
extern void pmic_vibrator_sel(vibrator_sel_enum value);
extern void pmic_usb_chr_enable(kal_bool enable);
extern void pmic_customization_init(void);
extern void pmic_adc_measure_sel(adc_type sel);
extern void pmic_adc_measure_sel_fast(adc_type sel);
extern void pmic_bl_div_bypass(kal_bool enable);
extern void pmic_bl_dim_clk_setting(kal_uint32 clk);
extern void pmic_chr_pump_current_level(kal_uint32 level);
extern void pmic_power_save_enable(kal_bool enable);
extern void pmic_set_UV_vol(UV_voltage_enum voltage);
extern void pmic_audio_diffential_enable(kal_bool enable);
extern void pmic_charging_currnet_ctrl(pmic_charging_current current);
extern void pmic_speaker_enable(kal_bool enable);
extern void pmic_vmc_sel(vmc_sel_enum sel);

 
extern void pmic_pwm_level(kal_uint8 level);
extern kal_uint8 pmic_pwm_current_level(void);
extern void pmic_pwm_configure(kal_uint32 freq, kal_uint8 duty);
extern void pmic_pwm_start(void);

 
extern void pmic_get_ac_usb_status(chr_type type, kal_bool *chr_enable, kal_uint32 *current);
extern void pmic_get_LED_config(pmic_led_type type, kal_uint8 *duty, kal_uint32 *current);
extern void pmic_get_rgb_dim(kal_bool *pump_enable, kal_uint32 *pump_current, kal_uint32 *clk);
extern void pmic_get_BL_dim(kal_bool *div_enable, kal_uint32 *clk);
extern kal_uint8 pmic_get_speaker_stat(void);
extern kal_uint8 pmic_get_speaker_gain(void);
extern void pmic_get_misc_ldo_stat(pmic_misc_stat type, kal_bool *enable);
extern kal_uint8 pmic_reg_read(kal_uint16 register_index);
extern void pmic_reg_write(kal_uint8 data, kal_uint16 register_index);



#line 178 "ps\l4\include\device.h"


 


 



 



 




 


typedef enum {
   L4_BCD = 0x01,
   L4_ASCII = 0x04,
   L4_UCS2 = 0x08
} L4_charset_enum;


typedef enum {
   MMI_PS_AT_LANG_DEFAULT,
   MMI_PS_AT_LANG_UNKWN,
   MMI_PS_AT_LANG_EN,
   MMI_PS_AT_LANG_TW,
   MMI_PS_AT_LANG_ZH,
   MMI_PS_AT_LANG_LAST
} L4_AT_lang_enum;


 


   
 
typedef enum {
    AUDIO_DEVICE_SPEAKER = 0  ,      
    AUDIO_DEVICE_MICROPHONE   ,      
    AUDIO_DEVICE_BUZZER       ,      
    AUDIO_DEVICE_GMI          ,      
    AUDIO_DEVICE_SPEAKER2     ,      
    AUDIO_DEVICE_LOUDSPEAKER  ,      
    AUDIO_DEVICE_SPEAKER_BOTH ,
    MAX_AUDIO_DEVICE_NUM      
}audio_type_enum;


 
typedef enum {
    AUDIO_DEVICE_MIC1 = 0 ,     
    AUDIO_DEVICE_MIC2     ,     
    AUDIO_DEVICE_FMRR           
}audio_input_path_enum;


 
typedef enum {
    VOL_NORMAL   = 0 ,
    VOL_HEADSET      ,  
    VOL_HANDFREE     ,  
    MAX_VOL_CATE,
    VOL_TV_OUT = MAX_VOL_CATE
}volume_category_enum;


 
typedef enum {
    VOL_TYPE_CTN  = 0 ,    
    VOL_TYPE_KEY      ,    
    VOL_TYPE_MIC      ,    
    VOL_TYPE_GMI      ,    
    VOL_TYPE_SPH      ,    
    VOL_TYPE_SID	  ,    
    VOL_TYPE_MEDIA    ,    
    MAX_VOL_TYPE           
}volume_type_enum;


 




 
typedef enum {
    DEVICE_AUDIO_PLAY_CRESCENDO  = 0 ,   
    DEVICE_AUDIO_PLAY_INFINITE       ,   
    DEVICE_AUDIO_PLAY_ONCE           ,   
    DEVICE_AUDIO_PLAY_DESCENDO          
}audio_play_style_enum;


typedef struct {
   kal_uint8 first_out_amp[MAX_AUDIO_DEVICE_NUM][ 7 ];
   kal_uint8 second_out_amp[MAX_AUDIO_DEVICE_NUM][ 7 ];
   kal_uint8 side[MAX_AUDIO_DEVICE_NUM][ 7 ];
   kal_uint8 volume[MAX_AUDIO_DEVICE_NUM];
} acoustic_gain_struct;


 



 
typedef enum {
    KEY_PRESSED        = 0    
    ,KEY_RELEASED             
    ,KEY_LONGPRESS            
    ,KEY_REPEATED             




}keypad_status_enum;


 
typedef kal_uint8 keypad_code_enum;


 



 
typedef enum {
    RTC_TIME_CLOCK_IND  = 0 ,  
    RTC_ALARM_IND              
}rtc_type_enum;


 
typedef enum {
    RTC_SETTING_TYPE_DATETIME  = 0 , 
    RTC_SETTING_TYPE_DATE          ,
    RTC_SETTING_TYPE_TIME             
}rtc_setting_type_enum;

 
typedef kal_uint8 rtc_alarm_id_enum;





 
typedef enum {
    RTC_ALARM_VIBRATOR  = 0x01 , 
    RTC_ALARM_LED       = 0x02 , 
    RTC_ALARM_SOUND     = 0x04 , 
    RTC_ALARM_SILENT    = 0x08 
}rtc_alarm_type_enum;


 
typedef enum {
 RTC_ALARM_DAY1    = 0x01 ,
 RTC_ALARM_DAY2    = 0x02 ,
 RTC_ALARM_DAY3    = 0x04 ,
 RTC_ALARM_DAY4    = 0x08 ,
 RTC_ALARM_DAY5    = 0x10 ,
 RTC_ALARM_DAY6    = 0x20 ,
 RTC_ALARM_DAY7    = 0x40 ,
 RTC_ALARM_DAY_ALL = 0x7F
}rtc_alarm_recurr_enum;

 
typedef enum {
    DATE_DD_MMM_YYYY  = 1 
 








    ,DATE_DD_MM_YYYY_S 	  = 8
    ,DATE_MM_DD_YYYY_S		
    ,DATE_YYYY_MM_DD_S		
    ,DATE_YYYY_MM_DD_H		
    ,DATE_MMM_DD_YYYY		
}date_format_enum;






typedef enum {
    TIME_HH_MM_24 = 1 ,
    TIME_HH_MM_12    
}time_format_enum;


 
 
typedef kal_uint8 rtc_format_enum; 


 
typedef enum {
    DEVICE_AL_EN_None     = 0 ,
    DEVICE_AL_EN_ChkS         ,
    DEVICE_AL_EN_ChkMS        ,
    DEVICE_AL_EN_ChkHMS       ,
    DEVICE_AL_EN_ChkDHMS      ,
    DEVICE_AL_EN_ChkWHMS      ,
    DEVICE_AL_EN_ChkMDHMS     ,
    DEVICE_AL_EN_ChkYMDHMS    ,
    DEVICE_AL_EN_NoChange    
}rtc_alarm_format_enum;


typedef enum {
    DEVICE_TC_EN_None    = 0 ,
    DEVICE_TC_EN_ChkS        ,
    DEVICE_TC_EN_ChkM        ,
    DEVICE_TC_EN_ChkH        ,
    DEVICE_TC_EN_ChkD        ,
    DEVICE_TC_EN_ChkW        ,
    DEVICE_TC_EN_ChkMon      ,
    DEVICE_TC_EN_ChkY        ,
    DEVICE_TC_EN_NoChange        
}rtc_clock_format_enum;

 
typedef enum {
    ALARM_STATUS_ON_POWEROFF_CHARING  =0 ,  
    ALARM_STATUS_ON_POWEROFF             ,  
    ALARM_STATUS_ON_POWERON                 
}alarm_status_enum;


 
typedef enum {
  UEM_CALL_UNKNOW     = 0 ,
  UEM_CALL_SETUP          , 
  UEM_CALL_CONNECT        ,
  UEM_CALL_DISCONNECT           
}uem_call_state_enum;


 



 
 


typedef enum {
    GPIO_DEV_LED_MAINLCD   = 0 ,   
    GPIO_DEV_LED_SUBLCD        ,   
    GPIO_DEV_LED_STATUS_1      ,   
    GPIO_DEV_LED_STATUS_2      ,   
    GPIO_DEV_LED_STATUS_3      ,   
    GPIO_DEV_LED_KEY           ,   
    GPIO_DEV_VIBRATOR          ,   
    GPIO_DEV_FLASHLIGHT        ,   
    GPIO_DEV_RESERVED1         ,   
    GPIO_DEV_RESERVED2         ,   
    GPIO_DEV_RESERVED3         ,   
    GPIO_DEV_RESERVED4         ,   
    GPIO_DEV_RESERVED5         ,   
    GPIO_DEV_RESERVED6         ,   
    GPIO_DEV_RESERVED7         ,   
    GPIO_DEV_RESERVED8         ,   
    GPIO_DEV_RESERVED9         ,   
    GPIO_DEV_RESERVED10        ,   
    GPIO_DEV_RESERVED11        ,   

    GPIO_DEV_KEYENTER_BACKLIGHT,



    MAX_GPIO_DEVICE_NUM           
}gpio_device_enum;


 
typedef enum {
    LED_LIGHT_LEVEL0   =0  ,   
    LED_LIGHT_LEVEL1       ,
    LED_LIGHT_LEVEL2       ,
    LED_LIGHT_LEVEL3       ,
    LED_LIGHT_LEVEL4       ,
    LED_LIGHT_LEVEL5       ,
    LED_LIGHT_LEVEL_MAX     
}gpio_device_led_level_typedef;


 
typedef enum {
    VIBRATOR_OFF  =0 ,   
    VIBRATOR_ON               
}gpio_device_vibrator_level_typedef;


 

typedef enum {
	KEY_ENTER_BK_LIGHT_ALL_OFF = 0,  
	KEY_ENTER_BK_LIGHT_ALL_ON ,         
	KEY_ENTER_BK_LIGHT_CIRCLE
}gpio_device_keyenter_backlight_typedef;

 


typedef enum {
    AUD_MODE_NORMAL   =0 ,  
    AUD_MODE_HEADSET     ,  
    AUD_MODE_LOUDSPK     ,  
    MAX_AUD_MODE_NUM     
}audio_mode_enum;


 
typedef enum {
    EXT_DEV_NONE      = 0  ,  
    EXT_DEV_HANDFREE       ,  
    EXT_DEV_EARPHONE       ,  
    EXT_DEV_CARKIT         ,  
    EXT_DEV_KEY_1          ,  
    EXT_DEV_KEY_2          ,  
    EXT_DEV_UART           , 
    EXT_DEV_CLAM_OPEN  = 8 ,
    EXT_DEV_CLAM_CLOSE     , 
    EXT_DEV_HOOK_ON	   ,  
    EXT_DEV_HOOK_OFF	   ,  
    MAX_EXT_DEVICE_NUM   
}ext_device_enum;



 




typedef enum
{
   UART_NVRAM_LID_FUNC_UART_CONFIG,
   UART_NVRAM_LID_FUNC_HIGH_SPEED_SIM,
   UART_NVRAM_LID_FUNC_SWDBG,
   UART_NVRAM_LID_FUNC_UART_POWER
} uart_nvram_lid_function_enum;


 


typedef enum
{
   PMIC_VBAT_STATUS,     
   PMIC_CHARGER_IN,      
   PMIC_CHARGER_OUT,     
   PMIC_OVERVOLPROTECT,     
   PMIC_OVERBATTEMP,     
   PMIC_LOWBATTEMP,      
   PMIC_OVERCHARGECURRENT,  
   PMIC_CHARGE_COMPLETE,    
   PMIC_INVALID_BATTERY,     
   PMIC_INVALID_CHARGER,    
   PMIC_CHARGING_TIMEOUT,   
   PMIC_LOWCHARGECURRENT,  
   PMIC_CHARGE_BAD_CONTACT,  
   PMIC_BATTERY_BAD_CONTACT,  
   PMIC_USB_CHARGER_IN,    
   PMIC_USB_CHARGER_OUT,    
   PMIC_USB_NO_CHARGER_IN,
   PMIC_USB_NO_CHARGER_OUT
} pmic_status_enum;
typedef pmic_status_enum battery_status_enum;

typedef enum 
{
   BATTERY_LOW_POWEROFF = 0,
   BATTERY_LOW_TX_PROHIBIT,
   BATTERY_LOW_WARNING,
   BATTERY_LEVEL_0,
   BATTERY_LEVEL_1,
   BATTERY_LEVEL_2,
   BATTERY_LEVEL_3, 
   BATTERY_LEVEL_4 = BATTERY_LEVEL_3,  
   BATTERY_LEVEL_5 = BATTERY_LEVEL_3,  
   BATTERY_LEVEL_6 = BATTERY_LEVEL_3,  
   BATTERY_LEVEL_LAST = 9

} battery_level_enum;


 
typedef enum 
{
	POWER_ON_KEYPAD	     = 0 ,
	POWER_ON_ALARM			 ,
	POWER_ON_CHARGER_IN		 ,
	POWER_ON_EXCEPTION		 ,
	POWER_ON_USB			 ,
	POWER_ON_UNINIT			 ,
	POWER_ON_PRECHARGE	 = 8
} power_on_status_enum;








 
typedef enum
{
   NORMAL_RESET,
   CHARGING_RESET,
   ALARM_RESET
} pmic_reset_type_enum;

typedef enum
{
	PMIC_GET_CHR_STATE
	,PMIC_GET_AC_USB
	,PMIC_GET_LED_CONFIG
	,PMIC_GET_RGB_DIM
	,PMIC_GET_BL_DIM
	,PMIC_GET_SPEAKER_STATE
	,PMIC_GET_SPEAKER_GAIN
	,PMIC_GET_MISC_LDO_STATE
	,PMIC_READ_REG
	,PMIC_WRITE_REG
	,PMIC_CHR_ENABLE
	,PMIC_CHR_CURRENT_CTRL
	,PMIC_USB_CHR_ENABLE
	,PMIC_LED_ENABLE
	,PMIC_LED_CONFIG
	,PMIC_RGB_DIM_CLK
	,PMIC_CHR_PUMP_ENABLE
	,PMIC_CHR_PUMP_CURRENT
	,PMIC_BL_DIM_CLK
	,PMIC_BL_DIV_BYPASS
	,PMIC_SPEAKER_ENABLE
	,PMIC_SPEAKER_GAIN
	,PMIC_VIBRATOR_ENABLE
	,PMIC_VIBRATOR_SEL
	,PMIC_VMC_ENABLE
	,PMIC_VMC_SEL
	,PMIC_VASW_ENABLE
	,PMIC_VASW_SEL
	,PMIC_USB_REG_ENABLE
	,PMIC_VBAT_ENABLE
	,PMIC_ISENSE_ENABLE
	,PMIC_BL_PWM
	,PMIC_MAX_NUM
}pmic_config_req_enum;

typedef struct
{
	pmic_chr_stat status; 
	kal_uint8 charger_status; 
}pmic_chr_state_struct;

typedef struct
{
	chr_type type; 
	kal_bool chr_enable; 
	kal_uint32 current; 
}pmic_get_ac_usb_status_struct;

typedef struct
{
	pmic_led_type type; 
	kal_uint8 duty; 
	kal_uint32 current; 
}pmic_get_led_config_struct;

typedef struct
{
	kal_bool pump_enable; 
	kal_uint32 pump_current; 
	kal_uint32 clk; 
}pmic_get_rgb_dim_struct;

typedef struct
{
	kal_bool div_enable; 
	kal_uint32 clk; 
}pmic_get_bl_dim_struct;

typedef struct
{
	kal_uint8 state; 
}pmic_get_speaker_state_struct;

typedef struct
{
	kal_uint8 gain; 
}pmic_get_speaker_gain_struct;

typedef struct
{
	pmic_misc_stat type; 
	kal_bool enable; 
}pmic_get_misc_ldo_stat_struct;

typedef struct
{
	kal_uint8 result; 
	kal_uint16 register_index; 
}pmic_read_reg_struct;

typedef struct
{
	kal_uint8 data; 
	kal_uint16 register_index; 
}pmic_write_reg_struct;


typedef struct
{
       kal_bool enable;  
}pmic_chr_enable_struct;

typedef struct
{
       pmic_charging_current chr_current;  
}pmic_chr_current_control_struct;

typedef struct
{
       kal_bool enable;  
}pmic_usb_chr_enable_struct;

typedef struct
{
	pmic_led_type type; 
       kal_bool enable;  
}pmic_led_enable_struct;

typedef struct
{
	pmic_led_struct led_conf; 
}pmic_led_config_struct;

typedef struct
{
       kal_uint32 dim_clk;  
}pmic_rgb_dim_clk_setting_struct;

typedef struct
{
       kal_bool enable;  
}pmic_chr_pump_enable_struct;

typedef struct
{
	kal_uint32 level;  
}pmic_chr_pump_current_struct;

typedef struct
{
       kal_uint16 dim_clk;  
}pmic_bl_dim_clk_setting_struct;

typedef struct
{
       kal_bool enable;  
}pmic_bl_div_bypass_enable_struct;

typedef struct
{
       kal_bool enable;  
}pmic_speaker_enable_struct;

typedef struct
{
       kal_uint8 gain;  
}pmic_speaker_gain_struct;

typedef struct
{
       kal_bool enable;  
}pmic_vibrator_enable_struct;

typedef struct
{
       vibrator_sel_enum value;  
}pmic_vibrator_sel_struct;

typedef struct
{
       kal_bool enable;  
}pmic_vmc_enable_struct;

typedef struct
{
       vmc_sel_enum vmc_sel_value;  
}pmic_vmc_sel_struct;

typedef struct
{
       kal_bool enable;  
}pmic_vasw_enable_struct;

typedef struct
{
       vasw_a_sel_enum value;  
}pmic_vasw_sel_struct;

typedef struct
{
       kal_bool enable;  
}pmic_usb_regulator_enable_struct;

typedef struct
{
       kal_bool enable;  
}pmic_vbat_enable_struct;

typedef struct
{
       adc_type adc_value;  
}pmic_isense_enable_struct;

typedef struct
{ 
       kal_uint8 result; 
}pmic_bl_pwm_struct;

typedef struct
{
	pmic_chr_state_struct chr_state;
	pmic_get_ac_usb_status_struct ac_usb_status;
	pmic_get_led_config_struct led_config;
	pmic_get_rgb_dim_struct rgb_dim;
	pmic_get_bl_dim_struct bl_dim;
	pmic_get_speaker_state_struct speaker_state;
	pmic_get_speaker_gain_struct speaker_gin;
	pmic_get_misc_ldo_stat_struct misc_ldo_state;
	pmic_read_reg_struct read_reg;
	pmic_write_reg_struct write_reg;
	pmic_chr_enable_struct chr_enable;
	pmic_chr_current_control_struct chr_current_control;	
	pmic_usb_chr_enable_struct usb_chr_enable;
	pmic_led_enable_struct led_enable;
	pmic_led_config_struct led_setting;
	pmic_rgb_dim_clk_setting_struct rgb_dim_clk_setting;
	pmic_chr_pump_enable_struct chr_pump_enable;
	pmic_chr_pump_current_struct chr_pump_current_level;
	pmic_bl_dim_clk_setting_struct bl_dim_clk_setting;
	pmic_bl_div_bypass_enable_struct bl_div_bypass_enable;
	pmic_speaker_enable_struct speaker_enable;
	pmic_speaker_gain_struct speaker_gain;
	pmic_vibrator_enable_struct vibrator_enable;
	pmic_vibrator_sel_struct vibrator_sel;
	pmic_vmc_enable_struct vmc_enable;
	pmic_vmc_sel_struct vmc_sel;
	pmic_vasw_enable_struct vasw_enable;
	pmic_vasw_sel_struct vasw_sel;
	pmic_usb_regulator_enable_struct usb_reg_enable;
	pmic_vbat_enable_struct vbat_enable;
	pmic_isense_enable_struct isense_enable;     
    pmic_bl_pwm_struct bl_pwm_setting;
}pmic_config_param_struct;


 


typedef enum
{
    FM_RADIO_CMD_MONO = 0,
    FM_RADIO_CMD_STEREO,
    FM_RADIO_CMD_RSSI,
    FM_RADIO_CMD_IF_COUNT,
    FM_RADIO_CMD_RSSI_INFO
}fm_radio_config_cmd_enum;

typedef enum
{
    FM_RADIO_COMMON_DISABLE = 0,
    FM_RADIO_COMMON_ENABLE,       
    FM_RADIO_COMMON_ENABLE_EXTRA    
}fm_radio_common_state_enum;

typedef struct
{
    kal_uint8 mono_enable;     
}fm_radio_mono_struct;
  
typedef struct
{
    kal_uint8 stereo_enable;   
    kal_uint8 sblend_onoff;     
}fm_radio_stereo_struct;

typedef struct
{
    kal_uint8 level;                      
}fm_radio_rssi_struct;

typedef struct
{
    kal_uint8 item_value;              
}fm_radio_if_count_delta_struct;

typedef struct
{
    fm_radio_mono_struct fm_radio_mono;
    fm_radio_stereo_struct fm_radio_stereo;   
    fm_radio_rssi_struct fm_radio_rssi;    
    fm_radio_if_count_delta_struct fm_radio_if;
}fm_radio_config_param_struct;


 


typedef enum
{
    RF_TEST_GSM_TX_BAND_850,
    RF_TEST_GSM_TX_BAND_900,
    RF_TEST_GSM_TX_BAND_1800,
    RF_TEST_GSM_TX_BAND_1900
}rf_test_gsm_tx_band_enum;
  
typedef enum
{
    RF_TEST_GSM_STOP,
    RF_TEST_GSM_TX_TEST,
    RF_TEST_GSM_RX_TEST,
    RF_TEST_GSM_POWER_SCAN
}rf_test_gsm_req_enum;

typedef struct
{
    kal_uint16 arfcn;     
    kal_int16 afc;        
    kal_uint8 band;       
    kal_int8   tsc;       
    kal_int8   pcl;       
    kal_uint8   pattern;  
}rf_test_gsm_tx_test_struct;

typedef struct
{
    kal_int16 arfcn;       
    kal_int16 gain;        
    kal_uint8 band;        
    kal_uint8  pattern;    
}rf_test_gsm_rx_test_struct;

typedef struct
{
    kal_uint8 band;                    
    kal_int16 arfcn_in;             
    kal_int16 arfcn_out[20];        
    kal_int16 power[20];                
}rf_test_gsm_power_scan_struct;

typedef struct
{
    rf_test_gsm_tx_test_struct gsm_tx_test;
    rf_test_gsm_rx_test_struct gsm_rx_test;   
    rf_test_gsm_power_scan_struct gsm_power_scan;    
}rf_test_gsm_param_struct;


 



typedef enum
{
    RF_TEST_WIFI_STOP,
    RF_TEST_WIFI_TEST_MODE,
    RF_TEST_WIFI_NORMAL_MODE,
    RF_TEST_WIFI_TX_GET_DAC_OFFSET,
    RF_TEST_WIFI_TX_OUTPUT_POWER,
    RF_TEST_WIFI_TX_CARRIER_SUPP,
    RF_TEST_WIFI_TX_LOCAL_FREQ,
    RF_TEST_WIFI_TX_CONT_PKT,
    RF_TEST_WIFI_RX_CONT_PKT,
    RF_TEST_WIFI_POWER_SAVE,
    RF_TEST_WIFI_REG_MCR32_WRITE,
    RF_TEST_WIFI_REG_MCR32_READ,
    RF_TEST_WIFI_REG_MCR16_WRITE,
    RF_TEST_WIFI_REG_MCR16_READ,
    RF_TEST_WIFI_REG_BBCR_WRITE,
    RF_TEST_WIFI_REG_BBCR_READ,
    RF_TEST_WIFI_REG_EEPROM_WRITE,
    RF_TEST_WIFI_REG_EEPROM_READ    
}rf_test_wifi_req_enum;

typedef struct
{
    kal_uint8 ich;     
    kal_uint8 qch;    
}rf_test_wifi_tx_get_dac_offset_struct;

typedef struct
{
    kal_uint8 contry_code[2];    
    kal_uint32 ch_freq;                
    kal_uint8 tx_rate;                
    kal_uint8 tx_ant;                 
    kal_uint8 gain;                    
}rf_test_wifi_tx_common_struct;

typedef struct
{
    kal_uint8 contry_code[2];       
    kal_uint32 ch_freq;                  
    kal_uint8 tx_rate;                     
    kal_uint8 tx_ant;                      
    kal_uint8 gain;                         
    kal_uint32 pkt_count;              
    kal_uint32 pkt_interval;          
    kal_uint32 pkt_length;              
    kal_uint8 tx_pattern;                
    kal_bool short_peramble;        
    kal_uint8 mac_header[24];      
}rf_test_wifi_tx_cont_pkt_struct;

typedef struct
{
    kal_uint32 ch_freq;                      
    kal_uint32 pau_total;                   
    kal_uint32 pau_err;                     
    kal_uint32 pau_ccca;                   
    kal_uint32 pau_fifo_full;             
    kal_uint32 int_ok;                       
    kal_uint32 int_err;                      
    kal_uint32 rssi_mean;                 
    kal_uint32 rssi_max;                   
    kal_uint32 rssi_min;                     
    kal_uint32 rssi_variance;             
    kal_uint32 int_long_preamble;     
    kal_uint32 int_short_preamble;    
}rf_test_wifi_rx_cont_pkt_struct;

typedef struct
{
    kal_uint8 pwr_mgt;      
}rf_test_wifi_power_save_struct;

typedef struct
{
    kal_uint32 mcr_index;
    kal_uint32 mcr32;
}rf_test_wifi_reg_mcr32_write_struct;

typedef struct
{
    kal_uint32 mcr_index;   
    kal_uint32 mcr32;          
}rf_test_wifi_reg_mcr32_read_struct;

typedef struct
{
    kal_uint32 mcr_index;   
    kal_uint16 mcr16;          
}rf_test_wifi_reg_mcr16_write_struct;

typedef struct
{
    kal_uint32 mcr_index;       
    kal_uint16 mcr16;              
}rf_test_wifi_reg_mcr16_read_struct;

typedef struct
{
    kal_uint32 bbcr_index;    
    kal_uint8 bbcr;               
}rf_test_wifi_reg_bbcr_write_struct;

typedef struct
{
    kal_uint32 bbcr_index;     
    kal_uint8 bbcr;                
}rf_test_wifi_reg_bbcr_read_struct;

typedef struct
{
    kal_uint32 eeprom_index;    
    kal_uint16 eeprom;               
}rf_test_wifi_reg_eeprom_write_struct;

typedef struct
{
    kal_uint32 eeprom_index;       
    kal_uint16 eeprom;                  
}rf_test_wifi_reg_eeprom_read_struct;

typedef struct
{
    rf_test_wifi_tx_get_dac_offset_struct wifi_get_dac;
    rf_test_wifi_tx_common_struct wifi_tx_common;
    rf_test_wifi_tx_cont_pkt_struct wifi_tx_cont_pkt;
    rf_test_wifi_rx_cont_pkt_struct wifi_rx_cont_pkt;
    rf_test_wifi_power_save_struct wifi_power_save;
    rf_test_wifi_reg_mcr32_write_struct wifi_mcr32_write;
    rf_test_wifi_reg_mcr32_read_struct wifi_mcr32_read;
    rf_test_wifi_reg_mcr16_write_struct wifi_mcr16_write;
    rf_test_wifi_reg_mcr16_read_struct wifi_mcr16_read;
    rf_test_wifi_reg_bbcr_write_struct wifi_bbcr_write;
    rf_test_wifi_reg_bbcr_read_struct wifi_bbcr_read;
    rf_test_wifi_reg_eeprom_write_struct wifi_eeprom_write;
    rf_test_wifi_reg_eeprom_read_struct wifi_eeprom_read;
}rf_test_wifi_param_struct;


 


 
typedef enum 
{
    IND_BATTCHG  = 0 ,
    IND_SIGNAL       ,  
    IND_SERVICE      ,  
    IND_SOUNDER      ,  
    IND_MESSAGE      ,  
    IND_CALL         ,  
    IND_VOX          ,  
    IND_ROAM         ,  
    IND_SMSFULL       
} indicator_type_enum;


 
typedef enum 
{
    EQ_ME_MANUFACTURE_ID      = 0 ,
    EQ_ME_MODEL_ID                ,
    EQ_ME_REVISION_ID             ,
    EQ_ME_SERIAL_NUMBER_ID        ,
    EQ_ME_GLOBAL_OBJECT_ID        ,
    EQ_ME_MANUFACTURE_INFO_ID     ,
    EQ_ME_COMP_CAP_LIST_ID        ,
    MAX_ME_ID_NUM                    
} equip_id_enum;





 
typedef enum 
{
    DEV_OK                    = 0 ,  
    DEV_FAIL                      ,  
    DEV_FAIL_VM_NO_FREE_ENTRY     ,  
    DEV_FAIL_VM_BUFFER_FULL       ,
    DEV_FAIL_VM_PLAY_NO_DATA     
} dev_status_enum;


 


typedef enum 
{
    DEVUSB_DETECT_ACTION_UNKNOWN = 0 ,
    DEVUSB_DETECT_ACTION_PLUGIN      , 
    DEVUSB_DETECT_ACTION_PLUGOUT     ,
    DEVUSB_DETECT_ACTION_MAX_ID   
} devusb_detect_action_enum;


typedef enum 
{
    DEVUSB_CFG_ACTION_UNKNOWN     =	0 ,
    DEVUSB_CFG_ACTION_CDC_ACM         ,
    DEVUSB_CFG_ACTION_MASS_STORAGE    ,
    DEVUSB_CFG_ACTION_COMPOSITE       ,
    DEVUSB_CFG_ACTION_WEBCAM          ,
    DEVUSB_CFG_ACTION_STOP_MS         ,
    DEVUSB_CFG_ACTION_IRDBG           ,
    DEVUSB_CFG_ACTION_PICTBRIGE       ,
    DEVUSB_CFG_ACTION_MAX_ID			  
} devusb_cfg_action_enum;


typedef enum 
{
    USB_SWITCH_PORT_APP_DATA     = 0 ,
    USB_SWITCH_PORT_APP_DEBUG   
} usb_switch_port_app_enum;




























typedef enum
{

    EM_SWDBG_OFF,
    EM_SWDBG_DSP_L1,
    EM_SWDBG_DSP_PS,
    EM_SWDBG_L1_PS,
    EM_SWDBG_MCU,
    EM_SWDBG_MCU_DSP,



    EM_SWDBG_RESET,
    EM_SWDBG_MAX
} EM_SWDBG_ITEM;








#line 83 "interface\ps\nvram_editor_data_item.h"
#line 1 "ps\gen\mcd\mcd_l4_common.h"
 

































  




















extern kal_uint32 l4_pun_src_buff[180];
extern kal_uint32 l4_pun_dest_buff[200];
extern kal_uint32 l4_pun_src_buff_2[180];
extern kal_uint32 l4_pun_dest_buff_2[200];
typedef struct l4_addr_bcd_struct
{
	kal_uint8 addr_length;
	kal_uint8 addr_bcd[41];
} l4_addr_bcd_struct;


typedef struct l4_name_struct
{
	kal_uint8 name_length;
	kal_uint8 name_dcs;
	kal_uint8 name[32];
} l4_name_struct;



#line 84 "interface\ps\nvram_editor_data_item.h"

#line 1 "interface\ps\nvram_data_items.h"
#line 86 "interface\ps\nvram_editor_data_item.h"

 



 



 

















































































 



typedef struct
{
    kal_uint32 total_rx_data;
    kal_uint32 total_tx_data;
    kal_uint32 last_rx_data;
    kal_uint32 last_tx_data;
} nvram_ef_tcm_statistics_struct;








typedef struct
{	
	kal_uint8 als_line_id[2];
}nvram_ef_als_line_id_struct;


typedef struct
{
    kal_uint8 byte1;
    kal_uint8 byte2;
    kal_uint8 byte3;
    kal_uint8 byte4;
    kal_uint16 byte5_byte6;
    kal_uint8 byte7;
    kal_uint8 byte8;
    kal_uint8 byte9;
    kal_uint8 byte10;
    kal_uint8 byte11;
    kal_uint8 byte12;
} nvram_ef_classmark_racap_struct;

typedef struct
{
    kal_uint8 cfu_flag[2];
} nvram_ef_cfu_flag_struct;

typedef struct _nvram_ef_cb_ch_info_struct
{
    kal_uint16 cbmir_mask;
    kal_uint16 dcs_mask;
    kal_uint8 cbmi_mask[6];
    kal_uint16 cbmi[20];
} nvram_ef_cb_ch_info_struct;

typedef struct
{
    kal_uint8 message_waiting_indication_status[5];
    kal_uint8 pad;
} nvram_ef_smsal_mwis_struct;

typedef struct
{
    kal_uint8 nvram_ef_tst_filter[ (((END_OF_MOD_ID+7)/8) + (LAST_SAP_CODE+1) + (2*(END_OF_MOD_ID+1)) + 44*5) ];
} nvram_ef_tst_filter_struct;

typedef struct
{
    kal_uint8 mcc1;
    kal_uint8 mcc2;
    kal_uint8 mcc3;
    kal_uint8 mnc1;
    kal_uint8 mnc2;
    kal_uint8 mnc3;
    kal_uint8 arfcn_MSB;
    kal_uint8 arfcn_LSB;
    kal_uint8 byte[48];  
} nvram_ef_extbcch_struct;

typedef struct
{
    kal_uint8 byte[ 38 ];
} nvram_ef_eq_plmn_struct;

typedef struct
{
    kal_uint8 byte[ 6 ];
} nvram_ef_band_info_struct;

typedef struct
{
    kal_uint16 cbmi_mask;
    kal_uint16 cbmir_mask;
    kal_uint16 dcs_mask;
} nvram_ef_cb_mask_struct;


typedef struct
{
    kal_uint8 byte[ 52 ];
} nvram_ef_mm_eqplmn_locigprs_struct;









typedef struct
{
    kal_uint8 speech_version;
    kal_uint8 data_cap1;
    kal_uint8 data_cap2;
    kal_uint8 channel_coding;
} nvram_ef_mscap_struct;


typedef struct
{
    kal_uint32 data[4];
}nvram_ef_sim_assert_struct;

typedef struct
{
	kal_uint8		rtc_sec;     
	kal_uint8		rtc_min;     
	kal_uint8		rtc_hour;    
	kal_uint8		rtc_day;     
	kal_uint8		rtc_mon;     
	kal_uint8		rtc_wday;    
	kal_uint8		rtc_year;    
} nvram_ef_rtc;


typedef struct
{
    kal_uint8     time_valid;
    nvram_ef_rtc        rtc_time;
    kal_uint8     ticks_diff_valid;
    kal_int32    ticks_diff_per_hour;
} nvram_ef_rtc_calibration;












































 


BEGIN_NVRAM_DATA
 











    LID_BIT   "000"   NVRAM_EF_SYS_EXCEPTION_LID  
     EX_LOG_T * 10 
     {
     };

  











     LID_BIT   "000"   NVRAM_EF_SYS_STATISTICS_LID  
     stack_statistics_struct * 1 
     {
     };

 



  




  











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_AGCPATHLOSS_LID  
     l1cal_agcPathLoss_T * 1 
     {

     };

 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_RAMPTABLE_GSM850_LID  
     l1cal_rampTable_T * 1 
     {

     };

 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_RAMPTABLE_GSM900_LID  
     l1cal_rampTable_T * 1 
     {

     };

 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_RAMPTABLE_DCS1800_LID  
     l1cal_rampTable_T * 1 
     {
     };

 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_RAMPTABLE_PCS1900_LID  
     l1cal_rampTable_T * 1 
     {
     };
 


















































































































































































 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_AFCDATA_LID  
     l1cal_afcData_T * 1 
     {
     };

 











     LID_BIT MULTIPLE_LID   "004"   NVRAM_EF_L1_TXIQ_LID  
     l1cal_txiq_T * 1 
     {
     };

 











     LID_BIT MULTIPLE_LID   "003"   NVRAM_EF_L1_RFSPECIALCOEF_LID  
     l1cal_rfspecialcoef_T * 1 
     {
     };
 
 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_INTERSLOT_RAMP_GSM850_LID  
     l1cal_interRampData_T * 1 
     {
     };

 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_INTERSLOT_RAMP_GSM900_LID  
     l1cal_interRampData_T * 1 
     {
     };

 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_INTERSLOT_RAMP_DCS1800_LID  
     l1cal_interRampData_T * 1 
     {
     };

 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_INTERSLOT_RAMP_PCS1900_LID  
     l1cal_interRampData_T * 1 
     {
     };
 
 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_CRYSTAL_AFCDATA_LID  
     l1cal_crystalAfcData_T * 1 
     {
     };

 











     LID_BIT MULTIPLE_LID   "002"   NVRAM_EF_L1_CRYSTAL_CAPDATA_LID  
     l1cal_crystalCapData_T * 1 
     {
     };

 
















































































 
 











     LID_BIT MULTIPLE_LID   "000"   NVRAM_EF_EXTBCCH_LID  
     nvram_ef_extbcch_struct * (1 *  2 ) 
     {
         mcc1:"mobile country code 1 "
         {
         };

       mcc2:"mobile country code 2 "
         {
         };
       mcc3:"mobile country code 3 "
         {
         };
       mnc1:"mobile network code 1 "
         {
         };
       mnc2:"mobile network code 2 "
         {
         };
       mnc3:"mobile network code 3 "
         {
         };
       arfcn_MSB:"last time serving cell arfcn MSB "
         {
         };
       arfcn_LSB:"last time serving cell arfcn LSB "
         {
         };
       byte:"Extended BCCH Frequency List (Refer to 04.18 10.5.2.22, Neighbour Cell Description"
         {
         };
     };

 
LID_BIT MULTIPLE_LID   "000"   NVRAM_EF_EQ_PLMN_LID  
     nvram_ef_eq_plmn_struct * (1 *  2 ) 
     {
     };
 

     LID_BIT MULTIPLE_LID   "000"   NVRAM_EF_BAND_INFO_LID  
     nvram_ef_band_info_struct * (1 *  2 ) 
     {
     };

 











 
     LID_BIT   "002"   NVRAM_EF_TST_FILTER_LID  
     nvram_ef_tst_filter_struct * 1 
     {
         nvram_ef_tst_filter:"tst specific data"
         {
         };
     };

 











LID_BIT   "001"   NVRAM_EF_CB_CH_INFO_LID  
     nvram_ef_cb_ch_info_struct * (1 *  2 ) 
     {
         cbmir_mask:"CBMIR MASK"
         {
           cbmir_0:1 "CBMIR [0]"
             {
               0x0:"Disable";
                 0x1:"Enable";
             };

           cbmir_1:1 "CBMIR [1]"
             {
               0x0:"Disable";
               0x1:"Enable";
             };

           cbmir_2:1 "CBMIR [2]"
             {
               0x0:"Disable";
               0x1:"Enable";
             };

           cbmir_3:1 "CBMIR [3]"
             {
               0x0:"Disable";
               0x1:"Enable";
             };

           cbmir_4:1 "CBMIR [4]"
             {
               0x0:"Disable";
               0x1:"Enable";
             };

           cbmir_5:1 "CBMIR [5]"
             {
               0x0:"Disable";
               0x1:"Enable";
             };

           cbmir_6:1 "CBMIR [6]"
             {
               0x0:"Disable";
               0x1:"Enable";
             };

           cbmir_7:1 "CBMIR [7]"
             {
               0x0:"Disable";
               0x1:"Enable";
             };

           cbmir_8_15:8 "CBMIR [8] ~ [15], Same as above"
             {
             };
         };

       dcs_mask:"DCS MASK"
         {
           dcs_mask_0:8 "DCS [0] ~ DCS [7]"
             {
             };

           dcs_mask_8:8 "DCS [8] ~ DCS [15]"
             {
             };

         };

       cbmi_mask:"CBMI MASK"
         {
           cbmi_mask:24 "CBMI_MASK for ME"
             {
             };

           cbmi_mask:24 "CBMI_MASK for SIM"
             {
             };
         };

       cbmi:"CBMI storage in ME";
     };

 











LID_BIT   "000"   NVRAM_EF_SMSAL_MWIS_LID  
     nvram_ef_smsal_mwis_struct * (2 *  2 ) 
     {
         message_waiting_indication_status:"Message waiting indication status";
         message_waiting_indication_status[0]
         {
           vm:1 "Voice mail"
             {
               0x0:"Set indication active";
                 0x1:"Set indication inactive";
             };

           fax:1 "FAX"
             {
               0x0:"Set indication active";
               0x1:"Set indication inactive";
             };

           email:1 "Email"
             {
               0x0:"Set indication active";
               0x1:"Set indication inactive";
             };

           other:1 "Other"
             {
               0x0:"Set indication active";
               0x1:"Set indication inactive";
             };

           RFU:4 "RFU"
             {
               0x0:"Set indication active";
               0x1:"Set indication inactive";
             };
         };

         message_waiting_indication_status[1]
         {
           vm:8 "Number of Voicemail message waiting"
             {
             };
         };

         message_waiting_indication_status[2]
         {
           fm:8 "Number of fax mail message waiting"
             {
             };
         };

         message_waiting_indication_status[3]
         {
           em:8 "Number of email message waiting"
             {
             };
         };

         message_waiting_indication_status[4]
         {
           om:8 "Number of other message waiting"
             {
             };
         };

       pad:"Padding"
         {
         };
     };

 











LID_BIT   "001"   NVRAM_EF_TCM_STATISTICS_LID  
     nvram_ef_tcm_statistics_struct * (1 *  2 ) 
     {
         total_rx_data:"Total received bytes"
         {
         };

       total_tx_data:"Total transmitted bytes"
         {
         };
       last_rx_data:"Received bytes of last"
         {
         };
       last_tx_data:"Transmitted bytes of last call"
         {
         };
     };

 











LID_BIT   "000"   NVRAM_EF_CFU_FLAG_LID  
     nvram_ef_cfu_flag_struct * (1 *  2 ) 
     {
         cfu_flag:"CFU flag"
         {
         };
     };

 
LID_BIT   "000"   NVRAM_EF_MM_EQPLMN_LOCIGPRS_LID  
     nvram_ef_mm_eqplmn_locigprs_struct *  (1 *  2 ) 
     {
     };
 

 





 











     LID_BIT MULTIPLE_LID   "000"   NVRAM_EF_MSCAP_LID  
     nvram_ef_mscap_struct * (1 *  2 ) 
     {
         speech_version:"Supported speech version"
         {
           FR:1 "FR"
             {
               0x0:"Not supported";
                 0x1:"Supported";
             };

           HR:1 "HR"
             {
               0x0:"Not supported";
               0x1:"Supported";
             };

           EFR:1 "EFR"
             {
               0x0:"Not supported";
               0x1:"Supported";
             };

           AMR_FR:1 "AMR FR"
             {
               0x0:"Not supported";
               0x1:"Supported";
             };

           AMR_HR:1 "AMR HR"
             {
               0x0:"Not supported";
               0x1:"Supported";
             };
         };

       data_cap1:"Supported speech version"
         {
           CSD:1 "CSD"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_fax:1 "Transparent Fax"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           non_trans_fax:1 "Non-transparent Fax"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_data_cs:1 "Transparent data circuit synchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           non_trans_data_cs:1 "Non-transparent data circuit synchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_data_acs:1 "Transparent data circuit asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           non_trans_data_acs:1 "Non-transparent data circuit asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_PAD_aa:1 "Transparent PAD access asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };
         };

       data_cap2:"Supported speech version"
         {
           non_trans_PAD_aa:1 "Non-transparent PAD access asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_data_ps:1 "Transparent data packet synchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           non_trans_PAD_pas:1 "Non-transparent data packet asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           HSCSD_multislot:5 "HSCSD multislot class"
             {
             };

         };

       channel_coding:"Supported speech version"
         {
           tch_f48:1 "TCH/F4.8"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f96:1 "TCH/F9.6"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f144:1 "TCH/F14.4"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f288:1 "TCH/F28.8"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f32:1 "TCH/F32"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f432:1 "TCH/F43.2"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };
         };
     };

 























 LID_BIT   "002"   NVRAM_EF_ALS_LINE_ID_LID  
     nvram_ef_als_line_id_struct * (1 *  2 ) 
     {
         als_line_id:"als_line_id"
         {
         };
     };
 

LID_BIT MULTIPLE_LID   "003"   NVRAM_EF_CLASSMARK_RACAP_LID  
     nvram_ef_classmark_racap_struct * (1 *  2 ) 
     {
         byte1:""
         {
           a54:1 "A5/4"
             {
             };

           a55:1 "A5/5"
             {
             };
           a56:1 "A5/6"
             {
             };
           a57:1 "A5/7"
             {
             };
           band3:1 "Band 3"
             {
             };
           band2:1 "Band 2"
             {
             };
           band1:1 "Band 1"
             {
             };
           spare:1 "Spare"
             {
             };
         };

       byte2:""
         {
           radio_cap1:4
             {
             };
           radio_cap2:4
             {
             };
         };

       byte3:""
         {
           ucs2:1 "UCS2 treatment"
             {
             };
           hscsd_mtslot_cap:5 "HSCSD Multi slot capability"
             {
             };
           hscsd_mtslot_cap_p:1 "HSCSD Multi slot capability present"
             {
             };
           rsupport:1 "R-GSM support"
             {
             };
         };

       byte4:""
         {
           gsm400_p:1 "GSM400 present"
             {
             };
           ms_posi_method:5 "MS Positioning method"
             {
             };
           ms_posi_method_p:1 "MS Positioning method present"
             {
             };
           em_cap:1 "Extended Measurement Capability"
             {
             };
         };

       byte5_byte6:""
         {
           gsm1900_r_cap:4 "GSM1900 Radio Capability"
             {
             };
           gsm1900_r_cap_p:1 "GSM1900 Radio Capability present"
             {
             };
           gsm850_r_cap:4 "GSM850 Radio Capability"
             {
             };
           gsm850_r_cap_p:1 "GSM850 Radio Capability present"
             {
             };
           gsm400_r_cap:4 "GSM400 Radio Capability"
             {
             };
           gsm400_supp:2 "GSM400 Bands Supported"
             {
             };
         };

       byte7:"Octet3 of Mobile Station Classmark2 information element"
         {
           spare:3 "Spare"
             {
             };
           a51:1 "A5/1"
             {
             };
           es_ind:1 "ES IND"
             {
             };
           rev_level:2 "Revision level"
             {
             };
           spare:1 "Spare"
             {
             };
         };

          
       byte8:"Octet4 of Mobile Station Classmark2 information element"
         {
           spare:1 "Spare"
             {
             };
           vgcs:1 "VGCS"
             {
             };
           vbs:1 "VBS"
             {
             };
           sm_cap:1 "SM capability"
             {
             };
           SSScr_ind:2 "SS Screen Indicator"
             {
             };
           ps_cap:1 "PS capability"
             {
             };
           spare:1 "Spare"
             {
             };
         };

          
       byte9:"Octet5 of Mobile Station Classmark2 information element"
         {
           a52:1 "A5/2"
             {
             };
           a53:1 "A5/3"
             {
             };
           cmsp:1 "CMSP"
             {
             };
           solsa:1 "SoLSA"
             {
             };
           spare:1 "Spare"
             {
             };
           lcsva_cap:1 "LCSVA CAP"
             {
             };
           spare:1 "Spare"
             {
             };
           cm3:1 "Support options in Classmark 3"
             {
             };
         };

       byte10:"GPRS related parameters used in Mobile Station Radio Access Capability IE"
         {
           rev_level_ind:1 "Revision Level Indicator"
             {
             };
           gprs_ext_dyna_cap:1 "GPRS Extended Dynamic Allocation Capability"
             {
             };
           gprs_mtslot_cap:5 "GPRS Multi slot capability"
             {
             };
           gprs_mtslot_cap_p:1 "GPRS Multi slot capability present"
             {
             };
         };

       byte11:"GPRS related parameters used in Mobile network capability IE"
         {
           gea_1:1 "GEA7"
             {
             };
           gea_2:1 "GEA6"
             {
             };
           gea_3:1 "GEA5"
             {
             };
           gea_4:1 "GEA4"
             {
             };
           gea_5:1 "GEA3"
             {
             };
           gea_6:1 "GEA2"
             {
             };
           gea_7:1 "GEA1"
             {
             };
           sm_cap_gprs:1 "SM capabilities via GPRS channels"
             {
             };
         };

       byte12:"GPRS related parameters used in Mobile network capability IE"
         {
           pfc:1 "BSS packet flow proedure"
             {
             };
           spare:7 "Spare"
             {
             };
         };

     };















 

LID_BIT   "000"   NVRAM_EF_SIM_ASSERT_LID   nvram_ef_sim_assert_struct*  80  {};

END_NVRAM_DATA




#line 448 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"
#line 1 "custom\drv\misc_drv\UNIRISE25_GEMINI_BB\custom_hw_default.h"
 







































extern const kal_uint8 DEFAULT_HARDWARE_YEAR;
extern const kal_uint8 DEFAULT_HARDWARE_MON;
extern const kal_uint8 DEFAULT_HARDWARE_DAY;

 




extern const kal_uint32 ADC_BOOTUP_EVAL_PERIOD;
extern const kal_uint32 ADC_BOOTUP_EVAL_COUNT;
extern const kal_uint32 ADC_IDLE_EVAL_PERIOD;
extern const kal_uint32 ADC_IDLE_EVAL_COUNT;
extern const kal_uint32 ADC_TALKING_EVAL_PERIOD;
extern const kal_uint32 ADC_TALKING_EVAL_COUNT;

extern const kal_uint32 KPD_LONGPRESS_PERIOD;
extern const kal_uint32 KPD_REPEAT_PERIOD;

extern kal_uint32 PWM1_Level_Info[ 5 ][2];
extern kal_uint32 PWM2_Level_Info[ 5 ][2];
extern kal_uint32 Alter_Level_Info[ 5 ][2];

extern kal_uint8   MainLCD_Contrast_Level_Info[ 15 ];
extern kal_uint8   MainLCD_Bias_Level_Info[ 5 ];
extern kal_uint8   MainLCD_Linerate_Level_Info[ 5 ];
extern kal_uint8   MainLCD_Temp_Level_Info[ 5 ];
   







extern kal_uint32   Battery_Level_Info[ 10 ];






#line 449 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"
#line 1 "custom\audio\UNIRISE25_GEMINI_BB\nvram_default_audio.h"
 


































 










































































































 




extern const kal_uint8 NVRAM_EF_CUST_ACOUSTIC_DATA_DEFAULT[ 183 ];

 





 






typedef struct 
{
   kal_int16 count;
   kal_int16 index;
   kal_int8 magnitude[ 8 ][8];
   kal_uint8 setting_name[ 8  + 1][(23 + 1) * 2];  
} nvram_ef_audio_equalizer_struct;

extern const nvram_ef_audio_equalizer_struct NVRAM_EF_AUDIO_EQUALIZER_DEFAULT[];



#line 450 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"
#line 1 "custom\common\custom_em.h"
 


































 






















































#line 1 "config\include\stack_config.h"
#line 92 "custom\common\custom_em.h"





typedef unsigned short VTCHAR;
































 






typedef enum
{
    CUSTOM_EM_LCD_MAIN,
    CUSTOM_EM_LCD_SUB
} CUSTOM_EM_LCD_TYPE;

typedef enum
{
    CUSTOM_EM_LCD_FUNC_BIAS,
    CUSTOM_EM_LCD_FUNC_CONSTRAST,
    CUSTOM_EM_LCD_FUNC_LINERATE,
    CUSTOM_EM_LCD_FUNC_TEMPCOM
} CUSTOM_EM_LCD_FUNC_TYPE;

typedef enum
{
    CUSTOM_EM_PWM_LEVEL_1 = 0x0,
    CUSTOM_EM_PWM_LEVEL_2,
    CUSTOM_EM_PWM_LEVEL_3,
    CUSTOM_EM_PWM_LEVEL_4,
    CUSTOM_EM_PWM_LEVEL_5,
    CUSTOM_EM_PWM_LEVEL_MAX
} CUSTOM_EM_PWM_LEVEL;

typedef enum
{
    CUSTOM_EM_PWM_TYPE_1 = 0x0,
    CUSTOM_EM_PWM_TYPE_2,
    CUSTOM_EM_PWM_TYPE_3,
    CUSTOM_EM_PWM_TYPE_MAX
} CUSTOM_EM_PWM_TYPE;

typedef enum
{
    CUSTOM_EM_UART_PORT1 = 0,
    CUSTOM_EM_UART_PORT2,
    CUSTOM_EM_UART_PORT3,
    CUSTOM_EM_UART_MAX_PORT
} CUSTOM_EM_PORT_TYPE;

typedef struct
{
    kal_uint8 bias_idx;
    kal_uint8 contrast_idx;
    kal_uint8 linerate_idx;
    kal_uint8 temp_compensate_idx;
    kal_uint8 bias[ 5 ];
    kal_uint8 contrast[ 5 ];
    kal_uint8 linerate[ 5 ];
    kal_uint8 temp_compensate[ 5 ];
} custom_em_lcd_param_set_struct;

typedef struct
{
    kal_uint32 freq[CUSTOM_EM_PWM_TYPE_MAX];
    kal_uint32 duty_cycle[CUSTOM_EM_PWM_TYPE_MAX];
} custom_em_pwm_param_set_struct;

typedef struct
{

    custom_em_lcd_param_set_struct custom_em_main_lcd_param;     
    custom_em_lcd_param_set_struct custom_em_sub_lcd_param;  
    custom_em_pwm_param_set_struct custom_em_pwm_param;      
    custom_em_pwm_param_set_struct custom_em_pwm_level_param[CUSTOM_EM_PWM_LEVEL_MAX];   

} custom_em_param_context_struct;








typedef enum
{
 






























































    EM_NW_EVENT_ID_TEST0,      
    EM_NW_EVENT_ID_TEST1,
    EM_NW_EVENT_ID_TEST2,
    EM_NW_EVENT_ID_TEST3,
    EM_NW_EVENT_ID_TEST4,
    EM_NW_EVENT_ID_TEST5,
    EM_NW_EVENT_ID_TEST6,      
    EM_NW_EVENT_ID_TEST7,
    EM_NW_EVENT_ID_TEST8,
    EM_NW_EVENT_ID_TEST9,
    EM_NW_EVENT_ID_TEST10,
    EM_NW_EVENT_ID_TEST11,     
    EM_NW_EVENT_ID_TEST12,
    EM_NW_EVENT_ID_TEST13,
    EM_NW_EVENT_ID_TEST14,
    EM_NW_EVENT_ID_TEST15,
    EM_NW_EVENT_ID_TEST16,     
    EM_NW_EVENT_ID_TEST17,
    EM_NW_EVENT_ID_TEST18,
    EM_NW_EVENT_ID_TEST19,
    EM_NW_EVENT_ID_TEST20,
    EM_NW_EVENT_ID_TEST21,     
    EM_NW_EVENT_ID_TEST22,
    EM_NW_EVENT_ID_TEST23,
    EM_NW_EVENT_ID_TEST24,
    EM_NW_EVENT_ID_TEST25,
    EM_NW_EVENT_ID_TEST26,     
    EM_NW_EVENT_ID_TEST27,
    EM_NW_EVENT_ID_TEST28,
    EM_NW_EVENT_ID_TEST29,
    EM_NW_EVENT_ID_TEST30,
    EM_NW_EVENT_ID_TEST31,     
    EM_NW_EVENT_ID_TEST32,
    EM_NW_EVENT_ID_TEST33,
    EM_NW_EVENT_ID_TEST34,
    EM_NW_EVENT_ID_TEST35,
    EM_NW_EVENT_ID_TEST36,     
    EM_NW_EVENT_ID_TEST37,
    
     
    EM_NW_EVENT_ID_CELL_POWER_LEVEL_IND,
    EM_NW_EVENT_ID_GMMREG_ATTACH_CNF,

     
    
    EM_NW_EVENT_ID_MAX
    
} EM_NW_EVENT_ID_ENUM;

typedef enum
{













    EM_NW_EVENT_GROUP_1,
    EM_NW_EVENT_GROUP_2,
    EM_NW_EVENT_GROUP_3,
    EM_NW_EVENT_GROUP_4,
    EM_NW_EVENT_GROUP_5,
    EM_NW_EVENT_GROUP_RAC,
     
    EM_NW_MAX_NO_OF_GROUP
} EM_NW_EVENT_GROUP_ENUM;


typedef struct
{
    kal_uint8 group_id;                   
    const unsigned char group_name[ 5 ];
    
    module_type  mod_id;                  

    kal_uint32 event_id;                  
    const unsigned char event_name[ 20 ];
    
    kal_uint16 ring_tone_id;                      
} em_network_event_struct;


extern em_network_event_struct em_network_event_tbl[];

extern kal_uint32 em_nw_get_total_event(void);




extern kal_bool custom_em_init(kal_bool is_reset);
extern void custom_em_lcd_get_value(custom_em_lcd_param_set_struct *lcd_param, CUSTOM_EM_LCD_TYPE type);
extern void custom_em_lcd_set_value(custom_em_lcd_param_set_struct *lcd_param, CUSTOM_EM_LCD_TYPE type);
extern kal_uint8 custom_em_lcd_get_param_number(CUSTOM_EM_LCD_TYPE type, CUSTOM_EM_LCD_FUNC_TYPE func);
extern void custom_em_lcd_exe_function(CUSTOM_EM_LCD_TYPE type, CUSTOM_EM_LCD_FUNC_TYPE func, kal_uint8 *param);
extern kal_bool custom_em_pwm_get_level_value(
                    CUSTOM_EM_PWM_TYPE type,
                    CUSTOM_EM_PWM_LEVEL level,
                    kal_uint16 *freq,
                    kal_uint8 *duty_cycle);
extern kal_bool custom_em_pwm_set_level_value(
                    CUSTOM_EM_PWM_TYPE type,
                    CUSTOM_EM_PWM_LEVEL level,
                    kal_uint16 freq,
                    kal_uint8 duty_cycle);
extern void custom_em_pwm_get_value(kal_uint16 *freq, kal_uint8 *duty_cycle);
extern void custom_em_pwm_set_value(kal_uint16 *freq, kal_uint8 *duty_cycle);
extern void custom_em_pwm_start(CUSTOM_EM_PWM_TYPE type, kal_uint32 freq, kal_uint32 duty);
extern void custom_em_pwm_stop(CUSTOM_EM_PWM_TYPE type);
extern kal_uint8 custom_em_pwm_get_hw_current_level(CUSTOM_EM_PWM_TYPE type);
extern void custom_em_pwm_set_level(CUSTOM_EM_PWM_TYPE type, kal_uint8 level);
extern void custom_em_gpio_start(kal_uint8 port);
extern void custom_em_gpio_stop(kal_uint8 port);
extern void custom_em_gpo_start(kal_uint8 port);
extern void custom_em_gpo_stop(kal_uint8 port);
extern void custom_em_gpo_writeio(kal_int8 data, kal_int8 port);
extern void custom_em_pwn_cycle(kal_bool is_on);
extern void custom_em_rtc_get_time(
                kal_uint16 *year,
                kal_uint8 *mon,
                kal_uint8 *day,
                kal_uint8 *hour,
                kal_uint8 *min,
                kal_uint8 *sec);
extern void custom_em_set_mode(kal_uint8 mode);
extern void custom_em_set_gain(kal_uint8 type, kal_uint8 gain);
extern void custom_em_set_loopback(kal_bool on);
extern kal_bool custom_em_get_melody_version(kal_char *mel_ver);
extern kal_bool custom_em_melody_key_shift(kal_int32 level);
extern kal_bool custom_em_get_uart_detection_status(CUSTOM_EM_PORT_TYPE port);
extern void custom_em_set_uart_detection_status(CUSTOM_EM_PORT_TYPE port, kal_bool enable);
extern kal_bool custom_has_more_than_1_imei(void); 


#line 451 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"

#line 1 "interface\drv_def\drv_features.h"
#line 453 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"


#line 1 "media\camera\include\camera_para.h"
 


































 










































































































































































































































































#line 1 "interface\drv_def\drv_features.h"
#line 304 "media\camera\include\camera_para.h"































#line 1 "custom\drv\YUV_sensor\image_sensor.h"
 


































 





























#line 1 "media\camera\include\isp_if.h"
 


































 































































































































































































































































































































































































































#line 1 "interface\drv_def\drv_features.h"
#line 453 "media\camera\include\isp_if.h"

#line 1 "inc\reg_base.h"
 


































 









































































































































































































 









 


 

 

































































































































































































 














































 





 



 





 
























































 



 



























































 














 

















































































































 








 

























#line 454 "media\camera\include\isp_if.h"


#line 1 "media\camera\include\isp_if_622x_series_hw.h"
 


































 





































#line 1 "interface\drv_def\drv_features.h"
#line 75 "media\camera\include\isp_if_622x_series_hw.h"

#line 1 "inc\reg_base.h"
#line 76 "media\camera\include\isp_if_622x_series_hw.h"

















enum
{
	BAYER_B=0,
	BAYER_Gb,
	BAYER_Gr,
	BAYER_R
};









	
enum
{
	INPUT_BAYER=0,
	INPUT_YUV422=1,
	INPUT_RGB=2,
	INPUT_YCbCr=5	
};

enum
{
	INPUT_ORDER_CbYCrY1=0,
	INPUT_ORDER_CrYCbY1,
	INPUT_ORDER_YCbY1Cr,
	INPUT_ORDER_YCrY1Cb	
};
	
enum
{
   ISP_DRIVING_2MA=0,
   ISP_DRIVING_4MA,
	ISP_DRIVING_6MA,
	ISP_DRIVING_8MA
};








































































































































































































        


































































































































































































 
















 



 



 



 







 









 







 






















 










 





















 








 







 





 


















 














 





 







 





 






 








 









 








 






 







 




 







 





 




 




 






 




 







 









 





 







 












 







 





























 
























                                               
 












 


 






 















 





 





 




 






 





 











 

































































 


















 








 



 











 




























 


 





 







 




 


















 

















 












 




































 








 































                                       
 


















 














 

































 


























 


















 









 


 









 











 















 

















 













 











 













 







 












 









 







 







 











 







 













 















 









 













 























 





 





























 	










































































 	
























 
















 









 









 







 







 




 








 



























												

















































































 






























                                               
 














 




















 














 










#line 457 "media\camera\include\isp_if.h"












































typedef enum
{
	CAMERA_SYSTEM_NORMAL_MODE=0,
	CAMERA_SYSTEM_META_MODE
} CAMERA_SYSTEM_ENUM;

typedef enum
{
	ISP_IDLE_STATE=0,
	ISP_STANDBY_STATE,
	ISP_PREVIEW_STATE,
	ISP_CAPTURE_JPEG_STATE,
	ISP_CAPTURE_MEM_STATE,
	ISP_MPEG4_ENCODE_STATE,
	ISP_CAPTURE_BARCODE_STATE,
	ISP_MJPEG_ENCODE_STATE,
	ISP_VIDEO_FULLDUPLEX_ENCODE_STATE
} ISP_OPERATION_STATE_ENUM;

typedef enum
{
	ISP_PREVIEW_MODE,
	ISP_MPEG4_PREVIEW_MODE,
	ISP_MPEG4_ENCODE_MODE,
	ISP_MJPEG_PREVIEW_MODE,
	ISP_MJPEG_ENCODE_MODE
} ISP_OPERATION_MODE_ENUM;

enum
{
	IMAGE_NORMAL=0,
	IMAGE_H_MIRROR,
	IMAGE_V_MIRROR,
	IMAGE_HV_MIRROR
};



typedef enum
{
	AF_ENABLE=0,
	AF_METERING,
	SHUTTER_PRIORITY,
	APERTURE_PRIORITY,
	SCENE_MODE
} LENS_OPERATION_ENUM;















typedef struct
{
	kal_uint16 grab_start_x;				 
	kal_uint16 grab_start_y;				 
	kal_uint16 exposure_window_width;	 
	kal_uint16 exposure_window_height;	 
	kal_uint16 image_target_width;		 
	kal_uint16 image_target_height;		 


	kal_uint16 exposure_pixel;				 
	kal_uint16 exposure_line;				 
	kal_uint8  digital_zoom_factor;		 
	kal_uint16 current_exposure_pixel;	 
	kal_uint8  isp_hsub_factor;			 
	kal_uint8  isp_vsub_factor;			 

	kal_bool		night_mode;					 
	kal_uint8 	exposure_value;			 
	kal_uint8 	contrast_level;			 
	kal_uint8 	brightness_level;			 
	kal_uint8	saturation_value;			 
	kal_uint8	wb_mode;						 
	kal_uint8 	ev_value;					 
	kal_uint8 	banding_freq;				 
	kal_uint8 	image_effect;				 
	kal_uint16 	hue_value;					 

} image_sensor_exposure_window_struct;

typedef struct
{
	kal_bool		enable_shutter_tansfer;	 
	kal_uint16	capture_shutter;			 
	kal_uint8	image_mirror;
	kal_uint16 	frame_rate;
	kal_uint8 	meta_mode;					 
	kal_bool		enable_flashlight_tansfer;	 	
	kal_uint16	flashlight_duty;				 	
	kal_uint16	flashlight_offset;			 		
	kal_uint16	flashlight_shut_factor;			 				
	kal_uint16  preview_width;
	kal_uint16  preview_height;
	kal_uint8	isp_op_mode;				 
	kal_uint16	sensor_frame_rate;		 
} image_sensor_config_struct;

typedef struct
{
   kal_int8 (* sensor_init)(void);
   void (* get_sensor_id)(kal_uint8 *sensor_write_id, kal_uint8 *sensor_read_id);
   void (* get_sensor_size)(kal_uint16 *sensor_width, kal_uint16 *sensor_height);
   void (* get_sensor_period) (kal_uint16 *pixel_number, kal_uint16 *line_number);
   void (* sensor_preview_setting)(image_sensor_exposure_window_struct *image_window, image_sensor_config_struct *sensor_config_data);
   void (* sensor_capture_setting)(image_sensor_exposure_window_struct *image_window, image_sensor_config_struct *sensor_config_data);
   void (* write_sensor_reg)(kal_uint32 cmd, kal_uint32 para);
   kal_uint32 (* read_sensor_reg)(kal_uint32 cmd);
   void (* set_sensor_eshutter)(kal_uint16 eshutter);
   void (* set_camera_night_mode) (kal_bool enable);
   void (* sensor_power_off) (void);
   kal_uint16 (* set_sensor_gain) (kal_uint16 gain);

   void (* set_flashlight) (kal_bool enable);

   kal_uint32 (* yuv_sensor_setting)(kal_uint32 cmd, kal_uint32 para);


} image_sensor_func_struct;

 
typedef struct
{
	kal_int8 (* lens_init)(void);
	void (* lens_power_on)(void);
	void (* lens_power_off)(void);
	void (* lens_standby)(void);
	void (* get_lens_id)(kal_uint8 *id);
	kal_uint8 (*lens_af_home_check)(void);
	kal_uint32 (*get_lens_af_current_pos)( void );
	void (*lens_af_step_cw)( kal_uint32 num );
	void (*lens_af_step_ccw)( kal_uint32 num );
	void (*lens_af_move_to)( kal_int32 target_pos );
	kal_uint8 (*get_lens_af_status)( void );
	void (*lens_ms_open)(void);
	void (*lens_ms_close)(void);
	kal_uint8 (*get_lens_current_iris)(void);	
	void (*lens_set_iris)(kal_uint8 iris_sel);	
} lens_func_struct;

typedef struct
{
	kal_uint8 	lcd_id;
	kal_uint16 	lcm_start_x;				 
	kal_uint16 	lcm_start_y;				 
	kal_uint16 	lcm_end_x;					 
	kal_uint16 	lcm_end_y;					 
	kal_uint16 	roi_offset_x;				 
	kal_uint16 	roi_offset_y;				 
	kal_uint32 	update_layer;				 
	kal_uint32 	hw_update_layer;			 
	kal_uint8 	rotate_value;				 
	kal_uint8	frame_rate;					 
	kal_uint8	continue_capture;			

	kal_uint8 	contrast_level;			 
	kal_uint8 	brightness_level;			 
	kal_uint8	saturation_value;			 
	kal_uint8	wb_mode;						 
	kal_uint8 	ev_value;					 
	kal_uint8 	banding_freq;				 
	kal_uint8 	image_effect;				 
	kal_bool		night_mode;					 
	kal_uint16 	hue_value;					 
	kal_uint8 	exposure_value;			 

	kal_uint32 	intmem_start_address;	 
	kal_uint32 	intmem_size;				 
	kal_uint32 	extmem_start_address;	 
	kal_uint32 	extmem_size;				 

	kal_uint8	zoom_factor;				 
	kal_uint8   image_mirror;				 
	kal_uint16 	source_width;				 
	kal_uint16 	source_height;				 
	kal_uint16 	target_width;				 
	kal_uint16 	target_height;				 
	kal_uint16  preview_offset_x;			 
	kal_uint16  preview_offset_y; 		 
	kal_uint32	frame_buffer_address;	 
	kal_uint32 	frame_buffer_size;		 
	kal_uint32	frame_buffer_address1;	 
	kal_uint32 	frame_buffer_size1;		 
	kal_uint32	roi_background_color;			 
	kal_bool		lcd_update;					 

	kal_uint16  	camera_offset_x;			 
	kal_uint16  	camera_offset_y; 			 
	kal_uint16	af_zone0_x;					 
	kal_uint16	af_zone0_y;					 
	kal_uint16	af_zone1_x;					 
	kal_uint16	af_zone1_y;					 
	kal_uint16	af_zone2_x;					 
	kal_uint16	af_zone2_y;					 
	kal_uint16	af_zone3_x;					 
	kal_uint16	af_zone3_y;					 
	kal_uint16	af_zone4_x;					 
	kal_uint16	af_zone4_y;					 


	 
	kal_uint8	dsc_mode;							 
	kal_uint8	ae_metering_mode;					 
	kal_uint8	af_mode;								 
	kal_uint8	af_metering_mode;					 
	kal_uint16	tv_setting;							 
	kal_uint8	av_setting;							 
	kal_uint8	iso_setting;						 
	kal_uint8	flash_mode;							 


























	void (*cam_preview_cb) (kal_uint8 return_code);	 

	void (*cam_focus_cb) (kal_uint8 return_code);	 

} camera_preview_process_struct;

typedef struct
{
	kal_uint32 	jpeg_file_size[20];
	kal_uint32 	jpeg_file_address[20];
} isp_burst_capture_info_struct;

typedef struct
{
	kal_uint32 	intmem_start_address;	 
	kal_uint32 	intmem_size;				 
	kal_uint32 	extmem_start_address;	 
	kal_uint32 	extmem_size;				 
	
	kal_uint32  source_width;				 
	kal_uint32	source_height;				 
	kal_uint16 	target_width;				 
	kal_uint16 	target_height;				 

	kal_uint8  	image_quality;				 
	kal_uint8  	jpeg_gray_mode;			 

   kal_uint32 	y_address;	             
	kal_uint32 	u_address;	             
   kal_uint32 	v_address;	             
   kal_uint32 	y_size;          			 
	kal_uint32 	u_size;          			 
   kal_uint32 	v_size;          			 

	kal_uint32 	target_buffer_start_address;	 
	kal_uint32 	target_buffer_size;				 

    kal_bool memory_output;  
    kal_uint8 memory_output_type;
    kal_uint16 memory_output_width;
    kal_uint16 memory_output_height;
    kal_uint32 memory_output_buffer_address;
    kal_uint32 memory_output_buffer_size;


	kal_uint8	flash_mode;							 

















































	void (*cam_capture_jpeg_cb) (kal_uint8 return_code);	 
} camera_capture_jpeg_struct;

typedef struct
{
	kal_uint8 	lcd_id;
	kal_uint16 	lcm_start_x;				 
	kal_uint16 	lcm_start_y;				 
	kal_uint16 	lcm_end_x;					 
	kal_uint16 	lcm_end_y;					 
	kal_uint16 	roi_offset_x;				 
	kal_uint16 	roi_offset_y;				 
	kal_uint32 	update_layer;				 
	kal_uint32 	hw_update_layer;			 

	kal_uint8 	banding_freq;				 
	kal_uint8   image_mirror;				 
	kal_uint8	frame_rate;					 
	kal_uint8 	ev_value;					 
	
	kal_uint16  camera_offset_x;			 
	kal_uint16  camera_offset_y; 			 
	kal_uint16	af_zone0_x;					 
	kal_uint16	af_zone0_y;					 
	kal_uint16	af_zone1_x;					 
	kal_uint16	af_zone1_y;					 
	kal_uint16	af_zone2_x;					 
	kal_uint16	af_zone2_y;					 
	kal_uint16	af_zone3_x;					 
	kal_uint16	af_zone3_y;					 
	kal_uint16	af_zone4_x;					 
	kal_uint16	af_zone4_y;					 

	kal_uint32 	intmem_start_address;	 
	kal_uint32 	intmem_size;				 
	kal_uint32 	extmem_start_address;	 
	kal_uint32 	extmem_size;				 

	kal_uint32  source_width;				 
	kal_uint32	source_height;				 
	kal_uint16 	target_width;				 
	kal_uint16 	target_height;				 

	kal_uint32	frame_buffer_address;	 
	kal_uint32 	frame_buffer_size;		 
	kal_uint32	frame_buffer_address1;	 
	kal_uint32 	frame_buffer_size1;		 

	kal_uint32 	barcode_buffer_address;	 
	kal_uint32 	barcode_buffer_size;		 


















	void (*cam_preview_cb) (kal_uint8 return_code);	 
	void (*cam_capture_barcode_cb) (kal_uint8 return_code);	 
	void (*cam_focus_cb) (kal_uint8 return_code);	 
} camera_capture_barcode_struct;

typedef struct
{
	kal_uint32 	intmem_start_address;	 
	kal_uint32 	intmem_size;				 
	kal_uint32 	extmem_start_address;	 
	kal_uint32 	extmem_size;				 
	kal_uint32  source_width;				 
	kal_uint32	source_height;				 
	kal_uint16 	target_width;				 
	kal_uint16 	target_height;				 
	kal_uint32 	imgdma_buffer_address;	 
	kal_uint32 	imgdma_buffer_size;		 

	kal_uint8 	block_mode;					 
	kal_uint16 	dest_block_width;			 
	kal_uint32 	dest_buffer_address;		 
	kal_uint32 	dest_buffer_size;
	kal_uint16 	roi_offset_x;				 
	kal_uint16	roi_offset_y;				 
	kal_uint16	roi_width;					 
	kal_uint16	roi_height;					 
	kal_uint32 	update_layer;
	kal_uint32	hw_update_layer;
	kal_uint32	roi_background_color;	 

























	void (*cam_capture_mem_cb) (kal_uint8 return_code);	 
}	camera_capture_mem_struct;

typedef struct
{
	kal_uint32 	intmem_start_address;	 
	kal_uint32 	intmem_size;				 
	kal_uint32 	extmem_start_address;	 
	kal_uint32 	extmem_size;				 
	kal_uint32  video_buffer1_address;
	kal_uint32  video_buffer2_address;
	kal_bool		init_mem;					 
	
	kal_uint16  image_source_width;		 
	kal_uint16 	image_source_height;		 
	kal_uint16 	mpeg4_image_width;		 
	kal_uint16	mpeg4_image_height;		 
	kal_uint16	image_target_width;		 
	kal_uint16 	image_target_height;		 

	kal_uint32 	encode_bit_rate;
	kal_uint8 	short_header_mode;
	kal_bool 	resume_enable;

	kal_uint8 	lcd_id;						 
	kal_uint16 	lcm_start_x;				 
	kal_uint16 	lcm_start_y;				 
	kal_uint16 	lcm_end_x;					 
	kal_uint16 	lcm_end_y;					 
	kal_uint16 	roi_offset_x;				 
	kal_uint16 	roi_offset_y;				 
	kal_uint32 	update_layer;				 
	kal_uint32 	hw_update_layer;			 
	kal_uint8 	rotate_value;				 
	kal_uint8   image_mirror;				 
   kal_uint8   skip_frame_count;        
   kal_uint8	frame_rate;					 
	kal_uint32	frame_buffer_address;	 
	kal_uint32  frame_buffer_size;		 
	kal_uint16 	mpeg4_offset_x;
	kal_uint16	mpeg4_offset_y;
	kal_uint32	roi_background_color;	 
	kal_bool		lcd_update;					 

	kal_uint8	zoom_factor;				 
	kal_uint8 	contrast_level;			 
	kal_uint8 	brightness_level;			 
	kal_uint8	saturation_value;			 
	kal_uint8	wb_mode;						 
	kal_uint8 	ev_value;					 
	kal_uint8 	banding_freq;				 
	kal_uint8 	image_effect;				 
	kal_bool		night_mode;					 
























	void (*mpeg4_encode_cb) (kal_uint32 yuv_address);						 
	void (*encode_event_cb) (kal_uint8 event);  		 
	void (*cam_encode_cb) (kal_uint8 return_code);	 
}	mpeg4_encode_process_struct;

typedef struct
{
	kal_uint32 	intmem_start_address;	 
	kal_uint32 	intmem_size;				 
	kal_uint32 	extmem_start_address;	 
	kal_uint32 	extmem_size;				 
	kal_uint32  video_buffer1_address;
	kal_uint32  video_buffer2_address;
	kal_bool		init_mem;					 
	
	kal_uint16  image_source_width;		 
	kal_uint16 	image_source_height;		 
	kal_uint16 	viedo_encode_image_width;		 
	kal_uint16	viedo_encode_image_height;		 
	kal_uint16	image_target_width;		 
	kal_uint16 	image_target_height;		 

	kal_uint32 	encode_bit_rate;
	kal_uint8 	short_header_mode;
	kal_bool 	resume_enable;

	kal_uint8 	lcd_id;						 
	kal_uint16 	lcm_start_x;				 
	kal_uint16 	lcm_start_y;				 
	kal_uint16 	lcm_end_x;					 
	kal_uint16 	lcm_end_y;					 
	kal_uint16 	roi_offset_x;				 
	kal_uint16 	roi_offset_y;				 
	kal_uint32 	update_layer;				 
	kal_uint32 	hw_update_layer;			 
	kal_uint8 	rotate_value;				 
	kal_uint8   image_mirror;				 
   kal_uint8   skip_frame_count;        
   kal_uint8	frame_rate;					 
	kal_uint32	frame_buffer_address;	 
	kal_uint32  frame_buffer_size;		 
	kal_uint16 	viedo_encode_offset_x;   
	kal_uint16	viedo_encode_offset_y;   
	kal_uint32	roi_background_color;	 
	kal_bool		lcd_update;					 

	kal_uint8	zoom_factor;				 
	kal_uint8 	contrast_level;			 
	kal_uint8 	brightness_level;			 
	kal_uint8	saturation_value;			 
	kal_uint8	wb_mode;						 
	kal_uint8 	ev_value;					 
	kal_uint8 	banding_freq;				 
	kal_uint8 	image_effect;				 
	kal_bool		night_mode;					 

	 
	kal_uint8 	overlay_frame_mode;
	kal_uint8 	overlay_color_depth;
	kal_uint8	overlay_frame_source_key;
	kal_uint16  overlay_frame_width;
	kal_uint16	overlay_frame_height;
	kal_uint32  overlay_frame_buffer_address;

	kal_bool		image_pitch_mode;							 
	kal_uint8	image_data_format;						 
	kal_uint16	image_pitch_bytes;						 
	
	 
	kal_bool		tv_output;
	kal_uint16	tv_output_width;
	kal_uint16 	tv_output_height;
	kal_uint16	tv_output_offset_x;
	kal_uint16	tv_output_offset_y;
   kal_uint32 	tv_output_buffer1_address;		 
   kal_uint32 	tv_output_buffer2_address;		 
   kal_uint32 	tv_output_buffer_size;			 

	void (*video_encode_cb) (kal_uint32 yuv_address);	 
	void (*encode_event_cb) (kal_uint8 event);  		 
	void (*cam_encode_cb) (kal_uint8 return_code);	 
}	fullvideo_encode_process_struct;

typedef struct
{
	kal_uint32 	intmem_start_address;	 
	kal_uint32 	intmem_size;				 
	kal_uint32 	extmem_start_address;	 
	kal_uint32 	extmem_size;				 

	kal_uint16  source_width;				 
	kal_uint16 	source_height;				 
	kal_uint16	target_width;				 
	kal_uint16 	target_height;				 

	kal_uint8 	lcd_id;						 
	kal_uint16 	lcm_start_x;				 
	kal_uint16 	lcm_start_y;				 
	kal_uint16 	lcm_end_x;					 
	kal_uint16 	lcm_end_y;					 
	kal_uint16 	roi_offset_x;				 
	kal_uint16 	roi_offset_y;				 
	kal_uint32 	update_layer;				 
	kal_uint32 	hw_update_layer;			 
	kal_uint8 	rotate_value;				 
	kal_bool		lcd_update;					 

	kal_uint32	frame_buffer_address;	 
	kal_uint32  frame_buffer_size;		 
	kal_uint32	frame_buffer_address1;	 
	kal_uint32 	frame_buffer_size1;		 

	kal_uint8   image_mirror;				 
	kal_uint8	zoom_factor;				 
	kal_uint8 	contrast_level;			 
	kal_uint8 	brightness_level;			 
	kal_uint8	saturation_value;			 
	kal_uint8	wb_mode;						 
	kal_uint8 	ev_value;					 
	kal_uint8 	banding_freq;				 
	kal_uint8 	image_effect;				 
	kal_uint16 	hue_value;					 
	kal_bool		night_mode;					 
	
	void (*mjpeg_encode_cb) (kal_uint8 return_code);	 
}	mjpeg_encode_process_struct;

typedef enum
{
	CAPTURE_MODE_NORMAL = 0,
	CAPTURE_MODE_META,			 
	CAPTURE_MODE_META_EXT		 
} SENSOR_CAPTURE_MODE_ENUM;

typedef enum
{
	OUTDOOR_WB = 0,
	COMPONENT_OFFSET,
	INTERPOLATION,
	AWB,
	COMPONENT_GAIN,
	MANUEL_WB_1,
	MANUEL_WB_2,
	MANUEL_WB_3,
	MANUEL_WB_4,
	MANUEL_WB_5,
	AE,
	COLOR_MATRIX,
	EDGE,
	COLOR_SUPPRESSION,
	GAMMA_SELECT,
	GAMMA_TUNING,
	GAMMA_PREDEFINE1,
	GAMMA_PREDEFINE2,
	GAMMA_PREDEFINE3,
	GAMMA_PREDEFINE4,
	GAMMA_PREDEFINE5,
	GAMMA_PREDEFINE6,
	GAMMA_PREDEFINE7,
	GAMMA_PREDEFINE8,
	GAMMA_PREDEFINE9,
	CONTRAST,
	BRIGHTNESS,
	SATURATION,
	TOTAL_GROUP_NUMBER
}ISP_ENGMODE_GROUP_ENUM;

typedef struct
{
	kal_uint8	item_name_ptr[50];
   kal_int32	item_value;
   kal_int32	min;			
   kal_int32	max;			
   kal_bool		is_read_only;
   kal_bool		is_need_restart;
   kal_bool		is_true_false;
}isp_engmode_item_info_struct;

typedef struct
{
	kal_bool		start;		
	kal_bool		zoom_in;		
	kal_uint8	zoom_limit;	
	kal_uint8	zoom_step;	
	kal_uint8	zoom_speed;	
}isp_fast_zoom_struct;

typedef struct{
 	kal_int8 c11;
 	kal_int8 c12;
 	kal_int8 c21;
 	kal_int8 c22;
}ISP_HUE_STURCT;

typedef struct
{
  kal_uint32	mtk_para[300];
} exif_MTK_camera_para_struct;

extern kal_uint32 camera_process_stage;
extern kal_uint32 isp_frame_count;
extern camera_preview_process_struct isp_preview_config_data;
extern camera_capture_jpeg_struct isp_capture_jpeg_data;
extern ISP_OPERATION_STATE_ENUM isp_operation_state;
extern volatile kal_uint8 isp_digital_zoom_factor;
extern volatile kal_uint8 isp_contrast_gain;
extern volatile kal_uint8 isp_brightness_level;
extern kal_uint8 preview_hue_level,preview_saturation_level;
extern camera_capture_mem_struct isp_capture_mem_data;
extern mpeg4_encode_process_struct mpeg4_encode_data;
extern mjpeg_encode_process_struct mjpeg_encode_data;
extern kal_bool mjpeg_encode_enable;
extern image_sensor_func_struct *image_sensor_func;
extern image_sensor_exposure_window_struct exposure_window;
extern image_sensor_config_struct sensor_config_data;
extern kal_bool MPEG4_RECODE_START;
extern kal_uint8 hist_idx;
extern kal_uint16 isp_grab_width,isp_grab_height,isp_grab_start_x,isp_grab_start_y;
extern kal_uint8 isp_sub_sample_mode,isp_horizontal_subsample,isp_vertical_subsample;
extern kal_int8 sensor_err_check;
extern kal_bool isp_enter_exit_process_flag;
extern volatile kal_bool isp_idle_done_flag;
extern kal_uint16 image_setting_index;
extern kal_bool isp_digital_zoom_flag;
extern kal_uint8 ae_count;
extern kal_uint8 hist_idx;
extern kal_uint32	vd_blanking_lines;
extern kal_uint8 ae_hw_frame_count_backup[2];
extern kal_uint16 exif_isp_target_width, exif_isp_target_height;

extern isp_fast_zoom_struct isp_fast_zoom_data;
extern kal_bool wait_first_frame_flag;
extern kal_bool isp_first_preview_frame;
extern volatile kal_uint8 isp_preview_2a_enable;
extern kal_uint8 isp_preview_frame;
extern kal_uint8	camera_system_operation_mode;
extern kal_uint8 fast_zoom_count;
extern kal_uint32 time_tick_buff[10];
extern kal_uint32 time_tick;

extern void (*cam_preview_cb) (kal_uint8 return_code);
extern void (*cam_focus_cb) (kal_uint8 return_code);
extern lens_func_struct *lens_func;


void init_isp_if(void);
void set_isp_interrupt_trigger_delay_lines(kal_uint16 lines);
void power_off_isp(void);
kal_uint16 get_camera_frame_period(void);
void set_vd_blanking_lines(kal_uint32 lines);
kal_uint32 get_vd_blanking_lines(void);
void get_image_sensor_exposure_window(kal_uint16 *exposure_pixel, kal_uint16 *exposure_line);
void isp_contrast_setting(kal_uint8 contrast_level);
void isp_bright_setting(kal_uint8 bright_level);
kal_uint8 get_max_digital_zoom_factor(kal_uint16 target_width, kal_uint16 target_height);
void isp_digital_zoom(kal_uint8 zoom_factor);
kal_uint8 isp_led_setting(kal_bool light);
kal_uint8 camera_preview_process(camera_preview_process_struct *isp_data);
kal_uint8 exit_camera_preview_process(void);
kal_uint32 camera_capture_jpeg_process(camera_capture_jpeg_struct *isp_data);
kal_uint32 camera_capture_barcode_process(camera_capture_barcode_struct *isp_data);
kal_uint8 stop_camera_capture_barcode_process(void);
void pause_camera_capture_barcode_process(void);
void resume_camera_capture_barcode_process(void);
kal_uint8 camera_capture_mem_process(camera_capture_mem_struct *isp_data);
kal_uint8 mpeg4_encode_process(mpeg4_encode_process_struct *mpeg4_data);
kal_uint8 mpeg4_encode_start(void);
kal_uint8 mpeg4_encode_pause(void);
kal_uint8 mpeg4_encode_resume(void);
kal_uint8 exit_mpeg4_encode_process(void);
kal_uint8 camera_image_setting(kal_uint8 type_sel, kal_uint16 para);
void background_image_setting(void);
void get_isp_engmode_group_count(kal_int32* group_count_ptr);
void get_isp_engmode_group_info(kal_uint16 group_idx, kal_uint8* group_name_ptr, kal_int32* item_count_ptr);
void get_isp_engmode_item_info(kal_uint16 group_idx, kal_uint16 item_idx, isp_engmode_item_info_struct* info_ptr);
kal_bool set_isp_engmode_item_info(kal_uint16 group_idx, kal_uint16 item_idx, kal_int32 item_value);
void set_isp_driving_current(kal_uint8 current);
kal_uint8 stop_camera_capture_process(void);
void isp_fast_zoom_setting(isp_fast_zoom_struct zoom_data);
kal_uint8 get_isp_digital_zoom_factor(void);
void camera_operation_setting(kal_uint8 func_sel, kal_uint16 para);





 
void exif_update_MTK_para_struct_AEAWB(exif_MTK_camera_para_struct* para);




kal_uint8 mjpeg_encode_process(mjpeg_encode_process_struct *mjpeg_data);
kal_uint8 mjpeg_encode_start(void);
kal_uint8 mjpeg_encode_pause(void);
kal_uint8 mjpeg_encode_resume(void);
kal_uint8 exit_mjpeg_encode_process(void);
kal_uint8 get_mjpeg_frame_rate(void);



#line 67 "custom\drv\YUV_sensor\image_sensor.h"





typedef enum group_enum {
	AWB_GAIN=0,
	PRE_GAIN,
	SENSOR_DBLC,
	GAMMA_ENABLE,
	CMMCLK_CURRENT,
	FRAME_RATE_LIMITATION,
	REGISTER_EDITOR,
	GROUP_TOTAL_NUMS
} FACTORY_CCT_GROUP_ENUM;

typedef enum register_index {
	AWB_GAIN_R_INDEX= 70 ,
	AWB_GAIN_B_INDEX,
	SENSOR_DBLC_INDEX,
	GAMMA_ENABLE_INDEX,
	CMMCLK_CURRENT_INDEX,	   
	FACTORY_END_ADDR
} FACTORY_REGISTER_INDEX;

typedef enum cct_register_index {
	GLOBAL_GAIN_INDEX=0,
	PRE_GAIN_R_INDEX,
	PRE_GAIN_B_INDEX,
	CCT_END_ADDR
} CCT_REGISTER_INDEX;

typedef struct
{
	kal_uint8   item_name_ptr[50];         
	kal_int32	item_value;                
	kal_bool    is_true_false;             
	kal_bool	   is_read_only;              
	kal_bool	   is_need_restart;           
	kal_int32	min;                       
	kal_int32	max;                       
} ENG_sensor_info;


void  get_sensor_group_count(kal_int32* sensor_count_ptr);
void  get_sensor_group_info(kal_uint16 group_idx, kal_int8* group_name_ptr, kal_int32* item_count_ptr);
void  get_sensor_item_info(kal_uint16 group_idx,kal_uint16 item_idx, ENG_sensor_info* info_ptr);
kal_bool set_sensor_item_info(kal_uint16 group_idx, kal_uint16 item_idx, kal_int32 item_value);



typedef struct {
	kal_uint32	addr;
	kal_uint32	para;
} sensor_reg_struct;

typedef struct {
	sensor_reg_struct	reg[FACTORY_END_ADDR];
	sensor_reg_struct	cct[CCT_END_ADDR];
} sensor_data_struct;


void camera_para_to_sensor(void);

void sensor_to_camera_para(void);

void image_sensor_func_config(void);

void cis_module_power_on(kal_bool on);

typedef enum _SENSOR_TYPE {
	CMOS_SENSOR=0,
	CCD_SENSOR
} SENSOR_TYPE;

typedef struct {
	kal_uint16		id;
	SENSOR_TYPE		type;
} SensorInfo;

 
extern kal_uint16 MAX_EXPOSURE_LINES;
extern kal_uint8  MIN_EXPOSURE_LINES;
 
extern kal_uint8  AE_AWB_CAL_PERIOD;
extern kal_uint8  AE_GAIN_DELAY_PERIOD;
extern kal_uint8  AE_SHUTTER_DELAY_PERIOD;

 





 








 



 


 


 



 


 



 



 











 



	








































typedef unsigned int  U32;
typedef unsigned short U16;
typedef unsigned char  U8;
typedef signed int  S32;
typedef signed short S16;
typedef char  S8;

typedef enum{
	ID_MAIN_CAMERA_OV7670_DEFAULT,
	ID_MAIN_CAMERA_OV7680_DEFAULT,
	ID_MAIN_CAMERA_BF3403_DEFAULT,
	ID_MAIN_CAMERA_BF3503_DEFAULT,
	ID_MAIN_CAMERA_BF3603_DEFAULT,
	ID_MAIN_CAMERA_GC0316_DEFAULT,
	ID_MAIN_CAMERA_GC0307_DEFAULT,
	 
	ID_MAIN_CAMERA_MAX
}ID_MAIN_CAMERA_ENUM;






















typedef struct{
	kal_uint32 camera_id;
	kal_char camera_info[ (128) ];
	kal_uint16 sensor_id;
	kal_uint16 sensor_write_id;
	kal_uint16 sensor_read_id;
	SENSOR_TYPE sensor_type;
	image_sensor_func_struct *image_sensor_func;
	void (* camera_para_to_sensor)(void);
	void (* sensor_to_camera_para)(void);
	void (* get_sensor_group_count)(kal_int32* sensor_count_ptr);
	void (* get_sensor_group_info)(kal_uint16 group_idx, kal_int8* group_name_ptr, kal_int32* item_count_ptr);
	void (* get_sensor_item_info)(kal_uint16 group_idx,kal_uint16 item_idx, ENG_sensor_info* info_ptr);
	kal_bool (* set_sensor_item_info)(kal_uint16 group_idx, kal_uint16 item_idx, kal_int32 item_value);
	kal_bool (* is_sensor_ready)(void);
	void (* image_sensor_init_func)(void);
}noke_drv_camera_info_struct;


kal_bool image_sensor_is_main_camera_ready(void);












#line 1 "interface\hwdrv\gpio_sw.h"
 


































 





















































































#line 1 "interface\drv_def\drv_features.h"
#line 123 "interface\hwdrv\gpio_sw.h"

















































typedef enum {
   mode_default = 0,





























   mode_max_num
} gpio_clk_mode;


extern void GPIO_InitIO(char direction, char port);
extern char GPIO_ReadIO(char port);
extern kal_uint16 GPIO_ReadAll(void);
extern void GPIO_WriteIO(char data, char port);
extern void GPIO_WriteAll(kal_uint16 write_data);
extern char GPIO_ReturnMode(char port);
extern char GPO_ReturnMode(char port);
extern char GPIO_ReturnDir(char port);
extern char GPIO_ReturnDout(char port);
extern char GPO_ReturnDout(char port);
extern void GPO_WriteIO(char data,char port);
extern void GPO_WriteAll(kal_uint16 write_data);
extern void GPIO_ModeSetup(kal_uint16 pin, kal_uint16 conf_dada);
extern void GPO_ModeSetup(kal_uint16 pin, kal_uint16 conf_dada);
extern void initGPIO(void);
extern void GPIO_init(void);
extern void GPIO_ALLIO(void);
extern void GPIO_PullenSetup(kal_uint16 pin, kal_bool enable);
extern void GPIO_DinvSetup(kal_uint16 pin, kal_bool enable);
extern void GPIO_SetDebugMode(kal_bool enable);
extern void GPIO_SetClkOut(char clk_num, gpio_clk_mode mode);
extern void GPIO_PullSelSetup(kal_uint16 pin, kal_bool pull_up);
extern void GPIO_TMDir(kal_bool pad_oe);

extern void GPIO_InitIO_FAST(char direction, char port);
extern char GPIO_ReadIO_FAST(char port);
extern void GPIO_WriteIO_FAST(char data, char port);



#line 325 "custom\drv\YUV_sensor\image_sensor.h"


	extern const char gpio_flashlight_en_pin;


 
extern const char gpio_camera_power_en_pin;
extern const char gpio_camera_reset_pin;
extern const char gpio_camera_cmpdn_pin;





















void camera_module_pin_set( kal_uint16 port, kal_uint16 data );
































			













































#line 335 "media\camera\include\camera_para.h"
#line 1 "media\camera\include\ae_awb.h"
 


































 







































































































































































































































































#line 1 "interface\drv_def\drv_features.h"
#line 301 "media\camera\include\ae_awb.h"



#line 1 "media\image\include\exif.h"
 


































 



































































#line 1 "kal\include\kal_non_specific_general_types.h"
#line 105 "media\image\include\exif.h"























































































































































































































































































































#line 304 "media\camera\include\ae_awb.h"


































typedef enum
{
	AE_METERING_CENTER = 1,					
	AE_METERING_EXCESSIVE_BACKLIGHT,		
	AE_METERING_BACKLIGHT_WEIGHT,			
	AE_METERING_AVGERAGE						
}	AE_METERING_DYNAMIC;

typedef enum
{
	TV00020=0,	TV00025,	TV00030,	TV00035,	TV00040,	TV00045,	TV00050,	TV00055,		
	TV00060,		TV00070,	TV00080,	TV00090,	TV00100,	TV00110,	TV00120,	TV00130,
	TV00140,		TV00150,	TV00170,	TV00200,	TV00240,	TV00250,	TV00300,	TV00330,		
	TV00400,		TV00500,	TV00600,	TV01000,	TV01200,	TV01250,	TV01400,	TV01600,		
	TV01750,		TV02000,	TV02500,	TV03200,	TV04000,	TV05000,	TV06400,	TV08000,		
	TV10000,		TV12000,	TV14000,	TV16000,	TV18000,	TV20000,	TV_NO
}TIME_VALUE_INDEX;

typedef enum
{
	AV020=0,	AV028, AV035, AV040, AV045, AV050, AV056, AV063, AV071, AV080, 
	AV090, 	AV100, AV110, AV130, AV140, AV160, AV180, AV200, AV220, AV_NO
}APERTURE_VALUE_INDEX;

typedef enum
{
	ISO100=0,	ISO200,	ISO400,	ISO_NO
}ISO_VALUE_INDEX;
typedef enum
{
	CAMERA_SHADING_NORMAL_SET=0,
	CAMERA_SHADING_PREVIEW_COPY2_TAKE,
	CAMERA_SHADING_TAKE_COPY2_PREVIEW,
	CAMERA_SHADING_SET_FAIL_KEEP_NORMAL_SET,	
	CAMERA_SHADING_END
} camera_shading_mode_set_num;

typedef enum
{
	AWB_NORMAL_FINISH = 0,
	AWB_PWRON_FASTRUN,
	AWB_OVER_LUM,
	AWB_FEW_COUNT,
	AWB_LOWER_VALUE,
	AWB_FASTFLAG,
	AWB_RGAIN_MAX,
	AWB_BGAIN_MAX	
}AWB_STATUS_INDEX;

typedef enum
{
    FLASHLIGHT_NONE = 0,
	FLASHLIGHT_LED_ONOFF,           
	FLASHLIGHT_LED_CONSTANT,	    
	FLASHLIGHT_LED_PEAK,	        
	FLASHLIGHT_XENON_SCR,	        
	FLASHLIGHT_XENON_IGBT	        
}	FLASHLIGHT_TYPE;

typedef enum
{
	AE_SMOOTH_PREVIEW = 0,
	AE_SMOOTH_VIDEO,
	AE_SMOOTH_MODE_NO
}AE_SMOOTH_MODE_INDEX;

typedef struct
{
	kal_uint16	value;	
	kal_uint16	prtinfo;	
}shutter_info_struct;

typedef struct
{
	kal_uint8	value;	
	kal_uint8	prtinfo; 
}aperture_info_struct;

typedef struct
{
	shutter_info_struct 	tv[TV_NO];
	aperture_info_struct av[AV_NO];
}tv_av_info_struct;

typedef struct
{
	kal_uint16	shutter;
	kal_uint16	sensorgain;
	kal_uint8	ispgain;
}exposure_lut_struct;

typedef struct
{
	kal_uint8	metering;
	kal_uint16	tv;
	kal_uint8	av;
	kal_uint8	iso;
	kal_uint8	flash;
}ae_operation_struct;

typedef struct
{
	kal_uint8	trigger;
	kal_uint8	index;
	kal_uint8	mode;
	kal_uint8	metering;
	kal_uint8	mfdir;
	kal_uint8	range;
}af_operation_struct;

typedef struct
{
	kal_uint8				dscmode;
	ae_operation_struct	ae;
	af_operation_struct	af;
}dsc_operation_struct;

typedef struct
{
	kal_uint32 	mwb_buffer_address;
	kal_uint16 	mwb_image_width;
	kal_uint16 	mwb_image_height;
} camera_mwb_process_struct;

typedef struct
{
	 
	kal_uint16 AE_Smooth_Median_Filter_Tape;
	 
	kal_uint16 AE_Smooth_Normal_Last_Weight;
	kal_uint16 AE_Smooth_Normal_Max_Step;
	 
	kal_uint16 AE_Smooth_Fast_Last_Weight;
	kal_uint16 AE_Smooth_Fast_Max_Step;
	kal_uint16 AE_Smooth_Fast_Min_Step;
	kal_uint16 AE_Smooth_Fast_Check_Count;
	kal_uint16 AE_Smooth_Fast_Back_Count;
	kal_uint16 AE_Smooth_Fast_Transition_Count;
	kal_uint16 AE_Smooth_Fast_TH_Fast;
	kal_uint16 AE_Smooth_Fast_TH_Normal;
	kal_uint16 AE_Smooth_Fast_Gap_Ratio;
	kal_uint16 AE_Smooth_Fast_Gap_TH;
	 
	kal_uint16 AE_Smooth_Speed_Last_Weight;
	kal_uint16 AE_Smooth_Speed_Max_Step;
	kal_uint16 AE_Smooth_Speed_Check_Count;
	kal_uint16 AE_Smooth_Speed_Transition_Count;
	kal_uint16 AE_Smooth_Speed_Back_Count;
	kal_uint16 AE_Smooth_Speed_Target_Diff_TH_Speed;
	kal_uint16 AE_Smooth_Speed_Target_Diff_TH_Normal;
	kal_uint16 AE_Smooth_Speed_dEv_Normal;
	 
	kal_uint16 AE_Smooth_Ramp_Last_Weight;
	kal_uint16 AE_Smooth_Ramp_Max_Step;
	kal_uint16 AE_Smooth_Ramp_Check_Count;
	kal_uint16 AE_Smooth_Ramp_Transition_Count;
	kal_uint16 AE_Smooth_Ramp_Back_Count;
	kal_uint16 AE_Smooth_Ramp_TH_Ramp;
	kal_uint16 AE_Smooth_Ramp_TH_Normal;
	 
	kal_uint16 AE_Smooth_Final_Tol;
	kal_uint16 AE_Smooth_Max_Ev_Range;
	kal_uint16 AE_Smooth_Min_Ev_Range;
}AE_Smooth_Filter_input_struct;

typedef struct
{
	kal_bool		ae_mode;									 
	kal_bool		enable_cap_shutter_compensate;	 
	kal_bool		gain_priority;							 
	kal_uint8	pregain_mode;							 
	kal_uint16	pregain_max;							 
	kal_uint16	isp_pregain_max;						 
	kal_uint16	sensor_pregain_max;					 
	kal_uint16	pregain_compensate_max;				 
	kal_uint16	shutter_compensate_max;				 
	kal_uint16	pregain_min;							 
	kal_uint16	isp_pregain_min;						 
	kal_uint16	sensor_pregain_min;					 
	kal_uint8	preview_display_wait_frame;		 
	kal_uint8	ae_smooth_upper_bound;				 
	kal_uint8	ae_smooth_lower_bound;				 
	kal_uint8	ae_awb_cal_period;					 
	kal_uint8	ae_setting_gain_delay_frame;		 
	kal_uint8	ae_setting_shut_delay_frame;		 
	kal_uint8	ae_setting_cal_delay_frame;		 
	kal_uint8	capture_delay_frame;					 
	kal_uint8	preview_delay_frame;					 
	kal_uint8	ae_lowlight_threshold;				 
	kal_uint8	ae_lowlight_off_threshold;			 
	kal_uint8	ae_video_lowlight_threshold;		 
	kal_uint8	ae_video_lowlight_off_threshold;	 
	kal_bool		ae_high_banding_target_enable;	 
	kal_bool		flare_camera_enable;					 
	kal_bool		flare_video_enable;					 
	kal_uint8	flare_lower_bound_percentage;		 
	kal_uint8	flare_upper_bound_percentage;		 
	kal_uint8	flare_gain_max;						 
	kal_uint8	ae_setting_sensor_gain_delay_frame;		 
	kal_bool		preview_defect_table_enable;		 
	kal_bool		capture_defect_table_enable;		 
	camera_shading_mode_set_num	shading_table_mode_set;  
	kal_uint8	yuv_af_timeout_frame;				 
	kal_uint8	flashlight_mode;		             		
	kal_uint8	flashlight_delta_main_lum;           
	kal_uint8	extreme_CT_fixWB_enable;			 
	kal_uint8	outdoorIdx;							 
	kal_uint8	outdoor_fixWB_enable;				 	
	kal_uint16	out_Rgain;							 	
	kal_uint16	out_GRgain;							 	
	kal_uint16	out_Bgain;							 	
	kal_uint16	out_GBgain;							 
	AE_Smooth_Filter_input_struct Smooth_Filter_Para_Preview; 
	AE_Smooth_Filter_input_struct Smooth_Filter_Para_Video; 
	kal_bool	AE_Smooth_Enable; 
	kal_bool AE_ISO_Highlight_Comp_Enable; 
	kal_bool AE_ISO_Lowlight_Comp_Enable; 	
	kal_bool AE_ISO_EXIF_Report_Standard_Enable; 
}camera_operation_para_struct;

extern kal_uint8	ae_range;
extern kal_uint8	expo_level;
extern kal_uint8	high_expo_level;
extern kal_uint8	low_expo_level;
extern kal_uint8	light_band;
extern kal_uint32 eShutter;
extern kal_uint32	lum[9];
extern kal_uint8	BaseShutter;
extern kal_uint32	avglum;
extern kal_uint32	histogram[5],Rhist[5],Ghist[5],Bhist[5];
extern kal_uint8	flare_offset;
extern kal_uint8	flare_gain;
extern kal_uint8	histogram_b1,histogram_b2,histogram_b3,histogram_b4,histogram_b5;




extern dsc_operation_struct dsc_status;


extern kal_uint16	pregain; 
extern kal_uint8	isp_pregain; 
extern kal_uint16	sensor_pregain; 
extern kal_uint8 	iris_no;





extern kal_uint16	AWB_Rgain,AWB_GRgain,AWB_Bgain,AWB_GBgain;
extern kal_uint16	tmp_Rgain,tmp_GRgain,tmp_Bgain,tmp_GBgain; 

extern kal_uint16	Rgain_max,Ggain_max,Bgain_max;
extern kal_uint16	Rgain_min,Ggain_min,Bgain_min;
extern kal_uint32	Acc_R,Acc_G,Acc_B,Acc_Cnt;
extern kal_uint8	awbEntryCnt;
extern kal_bool		awbFastFlag;

extern kal_bool ae_enable_flag,awb_enable_flag;
extern camera_operation_para_struct camera_oper_data;
extern kal_uint8	ae_awb_cal_complete;

extern kal_bool ae_bypass_enable_flag;		
extern kal_uint8 AE_BYPASS_INDEX;


extern const exposure_lut_struct *AE_LUT;
extern const kal_uint8 *IRIS_LUT;



 
extern const tv_av_info_struct tv_av_info;
extern kal_bool shutter_pri_60hz_info[TV_NO];
extern kal_bool shutter_pri_50hz_info[TV_NO];
extern kal_bool aperture_pri_info[AV_NO];
extern kal_bool iso_pri_info[ISO_NO];
extern kal_uint16 iso_gain_info[ISO_NO];
extern kal_uint8 AE_INDEX, AE_INDEX_C, AE_INDEX_ENV;


 
void init_ae(void);
void init_awb(void);
void ae_awb_main(void);
void ae_on_off(kal_bool flag);
void ae_select_band(kal_uint8 band);
void awb_on_off(kal_bool flag);
void awb_fast_method(kal_bool flag);
void awb_reset(void);
void get_ae_awb_info(void);
void get_histogram_info(kal_uint8 color);
void ae_bypass_mode_on_off(kal_bool flag);
kal_uint32 get_lum_info(void);

 
void ae_config(kal_uint16 Hsize,kal_uint16 Vsize);
void ae_proc(void);
void ae_banding_factor(void);
void ae_cal_lum(void);
void ae_compute(void);
void cal_shutter(void);
void cal_pregain(void);
void ae_set_pregain(kal_uint16 pre_gain);
void ae_set_lut_gain(void);
void ae_set_isp_pregain(void);
void ae_set_ini_shutter(kal_uint16 shutter);
void ae_select_stepperev(kal_uint8 step);
void ae_set_expovalue(kal_uint8 target);
void ae_set_shutter(kal_uint16 lines);
void init_histogram_setting (void);
kal_int8 ae_get_ev_level(void);
kal_uint8 ae_set_ev(kal_int8 level);
kal_uint8 ae_get_totalevlevel(void);
kal_uint8 ae_get_stepperev(void);
kal_uint8 ae_get_expovalue(void);
kal_uint16 ae_get_ini_shutter(void);
kal_uint16 ae_get_current_shutter(void);
kal_uint32 get_shutter_from_time(kal_uint32 time, kal_uint16 pixel_width);

void ae_set_ini_expo_idx(kal_uint8 idx);
kal_uint8 ae_get_ini_expo_idx(void);


 
void awb_config(kal_uint16 Hsize,kal_uint16 Vsize);
void awb_set_manual_gain(kal_uint8 light);
void awb_save_manual_gain(kal_uint8 light, kal_uint16 color_temp, kal_uint16 r_gain, kal_uint16 g_gain, kal_uint16 b_gain);
void awb_read_all_manual_gain(kal_uint16 manualWB[5][4]);
void awb_proc(void);
void awb_set_gain(void);
void awb_gain_max_min(void);








void flash_config(kal_uint16 delay_line,kal_uint16 duty_line);
void get_shutter_priority_info(kal_uint8 tv_index, shutter_info_struct *tv_data);
void get_aperture_priority_info(kal_uint8 av_index, aperture_info_struct *av_data);






 
extern AE_Smooth_Filter_input_struct Filter_para;
void AE_Smooth_Init(void);
void init_ae_smooth_custom_para(AE_SMOOTH_MODE_INDEX mode);
kal_uint16 AE_Smooth_Check_Input_Clear_Table(void);
 
extern kal_uint8 ae_max_idx, ae_min_idx;
void ae_iso_priority_Init(void);
kal_uint16 ae_get_sensor_gain(kal_uint8 cam_mode, kal_uint8 iso_mode);
kal_uint8	ae_apply_index_update(kal_uint8 cam_mode, kal_uint8 iso_mode, kal_uint8 env_idx);
kal_uint8	ae_env_index_offset(kal_uint8 AE_update);
void ae_lut_max_min_idx_iso_update(kal_uint8 cam_mode, kal_uint8 iso_mode);





#line 336 "media\camera\include\camera_para.h"
#line 1 "media\camera\include\af.h"
 


































 





















#line 1 "interface\drv_def\drv_features.h"
#line 59 "media\camera\include\af.h"






 

 

 



 
 







 











 















 


 




typedef enum
{
	AF_IDLE_STATE=0,
	AF_STANDBY_STATE,
	AF_COLLECT_STATE,
	AF_SEARCH_STATE,
	AF_FREEZE_STATE
} AF_OPERATION_STATE_ENUM;

typedef enum
{
	AF_AUTO_RANGE=0,
	AF_NORMAL_RANGE,
	AF_MACRO_RANGE,
	AF_INFINITE_RANGE
}AF_SEARCH_RANGE_ENUM;

typedef enum
{
	AF_SUCCESS=0,
	AF_TABLE_SEARCH_SUCCESS,
	AF_TABLE_SEARCH_FAIL,
	AF_DETAIL_SEARCH_FAIL,
	AF_DETAIL_SEARCH_EDGE_FAIL
}AF_RESULT_ENUM;

typedef struct
{
	AF_RESULT_ENUM	result;
	kal_uint16		best_step;
	kal_uint16		success_zone;
}af_result_struct;

typedef struct
{
	kal_uint16	AF_peak_no;
	kal_uint16	AF_peak_setp;
	kal_uint16	AF_search_no;
	kal_int16		AF_search_step;
	kal_uint8		AF_peak_result;
	kal_uint8		AF_curve_result;
	kal_uint32	AF_mz_FV;
	kal_uint8		AF_mz_no;
	kal_uint8		AF_DOF_start;
	kal_uint8		AF_DOF_end;
} AF_search_struct;

typedef struct
{
	kal_uint8		manual_focus_step;
	kal_uint8		af_auto_range_start_idx;
	kal_uint8		af_auto_range_end_idx;
	kal_uint8		af_normal_range_start_idx;
	kal_uint8		af_normal_range_end_idx;
	kal_uint8		af_macro_range_start_idx;
	kal_uint8		af_macro_range_end_idx;
	kal_uint8		af_infinite_range_start_idx;
	kal_uint8		af_infinite_range_end_idx;
	kal_uint16	auto_peak_select_min_fv_ratio_diff;
	kal_uint16	auto_peak_select_min_up_fv_th;
	kal_uint16	auto_peak_select_max_dn_fv_th;
	kal_uint16	auto_multi_zone_min_fv_ratio;
	kal_uint16	macro_peak_select_min_fv_ratio_diff;
	kal_uint16	macro_peak_select_min_up_fv_th;
	kal_uint16	macro_peak_select_max_dn_fv_th;
	kal_uint16	macro_multi_zone_min_fv_ratio;
	kal_uint16	infi_peak_select_min_fv_ratio_diff;
	kal_uint16	infi_peak_select_min_up_fv_th;
	kal_uint16	infi_peak_select_max_dn_fv_th;
	kal_uint16	infi_multi_zone_min_fv_ratio;
	kal_uint16	lowlight_peak_select_min_fv_ratio_diff;
	kal_uint16	lowlight_peak_select_min_up_fv_th;
	kal_uint16	lowlight_peak_select_max_dn_fv_th;
	kal_uint16	lowlight_multi_zone_min_fv_ratio;

	kal_uint16	AF_Scaling_Ratio;
	kal_uint16	AF_DF_r;
	 
	kal_uint16	AF_LC_p;
	kal_uint16	AF_LC_a;
	kal_uint16	AF_LC_v;
	kal_uint16	AF_LC_m;
	kal_uint16	AF_LC_w;
	 
	kal_uint16	AF_Gr_1;
	kal_uint16	AF_Gr_2;
	kal_uint16	AF_Gd_u;
	kal_uint16	AF_Gd_d;
	kal_uint16	AF_Gu_r;
	kal_uint16	AF_Gd_r;
	 
	kal_uint16	AF_Cr_n;
	kal_uint16	AF_Cr_1;
	kal_uint16	AF_Cr_mr;
	kal_uint16	AF_Cr_dr;
	kal_uint16	AF_Cr_ur;
	 
	kal_uint32	AF_step_FV;
	kal_uint32	AF_noise_FV;
	kal_uint32	AF_min_FV;
	kal_uint32	AF_mid_FV;
	kal_uint32	AF_max_FV;
	 
	kal_uint16	AF_FC_fmin;
	kal_uint16	AF_Gr_fm;
	kal_uint16	AF_Cr_ft;
	kal_uint16	AF_Cr_fd;
	 
	kal_uint8		AF_Normal_Dist;
	kal_uint8		AF_Inf_Dist;
	kal_uint8		AF_Macro_Dist;
	kal_uint8		AF_Closer_Dist;	
	 
	kal_uint16	AF_Fast_Th_S;
	kal_uint16	AF_Fast_Th_E;
	kal_uint16	AF_LUT_min_diff_FV;
	kal_uint8		AF_LUT_min_count;
	 
	kal_uint8		AF_count_max;
	kal_uint8		AF_count_max_no;
	kal_uint8		AF_count_release;
	kal_uint8		AF_count_min;
	 
	kal_uint8		AF_slow_max_step;
	kal_uint8		AF_small_check_max;
	 
	kal_uint8		AF_detail_Rbound[2];
	kal_uint8		AF_detail_Lbound[2];
	kal_uint8		AF_detail_RC[2];
	kal_uint8		AF_detail_LC[2];
	 
	kal_uint8		AF_shift_count;
	kal_uint8		AF_detail_shift;
	kal_bool		AF_invese_step;
	kal_uint16	AF_max_r[2];
	kal_uint16	AF_min_r[2];
	kal_bool		AF_search_dir[2];
	kal_uint8		AF_min_count[2];
	kal_uint8		AF_mini_step;
	kal_uint16	AF_parse_R;
	kal_uint16	AF_parse_L;
	kal_uint8		AF_parse_C;	
	 
	kal_uint8		AF_step_win_m0;
	kal_uint8		AF_step_win_n0;
	kal_uint8		AF_step_win_m1;
	kal_uint8		AF_step_win_n1;
	 
	kal_bool		AF_closer_enable;
    
   kal_uint8	AF_wind_y_delay;
   kal_uint8	AF_wind_y_delay_count;		
	kal_uint8 	AF_inv_delay;
	 
	kal_int16		AF_boundary_macro;
	kal_int16		AF_boundary_inf;
}af_operation_para_struct;

typedef struct {
	kal_uint32	step;	
	kal_uint32	tick;
} af_timing_struct;

typedef struct {
	kal_uint32	pos;	
	kal_uint32	distance;
} af_step_struct;

typedef struct
{
   	kal_uint32		Step_no;
	af_step_struct		AF[ 32 ];	
}camera_lens_run_struct;


typedef struct
{
   	kal_uint32		Step_no;
   	kal_uint32		Max_frame_delay;
	af_timing_struct	Tick[ 12 ];	
}camera_lens_timing_struct;

extern af_operation_para_struct     *p_af_oper_data;
extern camera_lens_run_struct	    *p_camera_lens_step;
extern camera_lens_timing_struct    *p_camera_lens_timing;

extern AF_OPERATION_STATE_ENUM af_operation_state;
extern kal_bool  	af_detail_search;
extern kal_uint8 	af_table_search_start_idx;
extern kal_uint8 	af_table_search_end_idx;
extern kal_uint32	AF_focus_result[ 5 ][ 24 ];
extern af_result_struct af_result;


















































































#line 337 "media\camera\include\camera_para.h"
#line 1 "media\camera\include\isp_flashlight.h"
 


































 









































#line 1 "interface\drv_def\drv_features.h"
#line 79 "media\camera\include\isp_flashlight.h"



#line 1 "media\camera\include\isp_if.h"
#line 82 "media\camera\include\isp_flashlight.h"


typedef enum
{
	FLASHLIGHT_STANDBY_STATE=0,
	FLASHLIGHT_CHARGE_STATE,        
	FLASHLIGHT_READY_STATE,		    
	FLASHLIGHT_RECHARGE_STATE,		
	FLASHLIGHT_PRE_STROBE_STATE,		
	FLASHLIGHT_PRE_STROBE_DONE_STATE,			
	FLASHLIGHT_TRIGGER_STATE,		
	FLASHLIGHT_TRIGGER_DONE_STATE,
	FLASHLIGHT_MAIN_STROBE_STATE	
} FLASHLIGHT_OPERATION_STATE_ENUM;


extern FLASHLIGHT_OPERATION_STATE_ENUM flashlight_operation_state;
extern kal_bool fake_main_flash_frame_flag, fake_sub_flash_frame_flag;
extern kal_int32  flashlight_idx, flashlight_main_idx; 
extern kal_uint32 flashlight_lum, flashlight_main_lum;
extern kal_uint16  flashlight_sensor_gain, flashlight_isp_gain;
extern kal_uint8   flashlight_awb_idx, flashlight_awb_weight;
extern kal_uint16  flashlight_awb_r_backup, flashlight_awb_g_backup, flashlight_awb_b_backup;
extern kal_uint32  flash_ae_info;

extern kal_uint16 isp_tg_delay_lines;
void init_flashlight(void);
void flashlight_pre_process(void);
void flashlight_post_process(void);
kal_bool flashlight_redeye_process(kal_uint32  capture_delay_frame);
void flashlight_trigger_process(void);
void flashlight_stop_process(void);
void flashlight_hisr(void);

void flashlight_prestrobe(void);
void flashlight_poststrobe(void);
kal_bool flashlight_redeye(kal_uint32  capture_delay_frame);
void flashlight_trigger(void);
kal_uint32  flashlight_ae_cal(void);
kal_uint32  flashlight_ae_proc(void);
void  flashlight_awb_proc(void);





































































typedef struct 
{
    kal_uint32  pixels;             
    kal_uint32  lines;              
} flashlight_preview_para_struct;
typedef struct 
{
    kal_uint32  default_pclk;       
    kal_uint32  pixels;             
    kal_uint32  lines;              
    kal_uint32  shutter;            
} flashlight_capture_para_struct;
extern flashlight_preview_para_struct flashlight_preview_para;
extern flashlight_capture_para_struct flashlight_capture_para;
void flashlight_preview_config(flashlight_preview_para_struct *para, image_sensor_config_struct *sensor_config_data);
kal_uint32 flashlight_capture_config(flashlight_capture_para_struct *para, image_sensor_config_struct *sensor_config_data);


extern FLASHLIGHT_OPERATION_STATE_ENUM flashlight_operation_state;
extern kal_uint16	AWB_Rgain_Backup,AWB_GRgain_Backup,AWB_Bgain_Backup,AWB_GBgain_Backup;
extern kal_uint8 AE_INDEX_Backup;
extern kal_bool fake_main_flash_frame_flag, fake_sub_flash_frame_flag;
extern kal_int32  flashlight_idx, flashlight_main_idx; 
extern kal_uint32 flashlight_lum, flashlight_main_lum;
extern kal_uint16  flashlight_sensor_gain, flashlight_isp_gain;
extern int flashlight_miss_count;





extern const kal_uint16 EVSTEP_FLASH_01[];

extern kal_uint8   xenon_awb_mix_tbl[3][ (20) ];




#line 338 "media\camera\include\camera_para.h"




typedef struct
{





	kal_uint32	reg[144];	



}isp_para_struct;

typedef struct
{
	kal_uint8	gamma_select;	
	kal_uint8	gamma[9][11];	
}isp_predefine_gamma_struct;


typedef struct
{
	kal_uint32	gamma[256];	
}nvram_camera_gamma_struct;


typedef struct
{
	kal_uint16	iniShutter;
	kal_uint8	TargetLum;
	kal_uint8	StepperEV;

	kal_uint8	iniExpoIdx;

}ae_para_struct;

typedef struct
{



	kal_uint16	LightSource[5][5];	 	



	kal_uint16	AWB_rgain_max;
	kal_uint16	AWB_ggain_max;
	kal_uint16	AWB_bgain_max;
}awb_para_struct;


typedef struct
{
	kal_uint32		shading_cap[11];
	kal_uint32		autodefect_pre_low[2];
	kal_uint32		autodefect_cap_nor[2];
	kal_uint32		autodefect_cap_low[2];
	kal_uint32		shading_spare_1[11];
	kal_uint32		shading_spare_2[11];
}isp_comp_struct;















 
typedef struct
{
	kal_uint16	ISO_Gain[3];
	kal_uint16	ISO_Value[3];
}ae_iso_struct;

typedef struct
{
	kal_uint8		ISO_sensor_gain_no;
	kal_uint16	*ISO_sensor_gain;
}ae_iso_sensor_gain_struct;



typedef struct
{
	isp_para_struct				ISP;
	isp_predefine_gamma_struct	PREDGAMMA;

	isp_comp_struct		COMP;

	ae_para_struct					AE;
	awb_para_struct				AWB;
	sensor_data_struct			SENSOR;

	ae_iso_struct		ISO_PRIORITY_INFO;

}nvram_camera_para_struct;





typedef struct
{
	kal_uint32	defect[ ( (256) + (240) ) ];		
}nvram_camera_defect_struct;


typedef struct {
	kal_uint8		af_table_num;	
	kal_uint16		af_home_idx;
	kal_uint16		af_macro_idx;		
	kal_uint16		af_infinite_idx;		
	kal_uint16		af_hyper_pos;		
	kal_uint16		af_me_home_pos;		
	kal_uint16		af_me_macro_pos;		
	kal_uint16		af_calibration_offset;
} lens_info_struct;

typedef struct {
	kal_uint32	pos;	
	kal_uint32	distance;
} af_table_struct;

typedef struct
{
   lens_info_struct	INFO;
	af_table_struct	AF[ 32 ];	
}nvram_camera_lens_struct;

enum
{
	CAMERA_PARA_INIT_MODE=0,
	CAMERA_PARA_PREVIEW_MODE,
	CAMERA_PARA_CAPTURE_MODE,
	CAMERA_PARA_NIGHT_MODE,
	CAMERA_PARA_VIDEO_MODE,
	CAMERA_PARA_AUTO_LOWLIGHT_MODE,
	CAMERA_PARA_VIDEO_AUTO_LOWLIGHT_MODE,
	CAMERA_PARA_AF_NORMAL_MODE,
	CAMERA_PARA_AF_LOWLIGHT_MODE
};

typedef enum
{
	 
	CAMERA_COMP_PREVIEW_NORMAL_SET=0,
	CAMERA_COMP_PREVIEW_LOWLIGHT_SET,
	CAMERA_COMP_CAPTURE_NORMAL_SET,	
	CAMERA_COMP_CAPTURE_LOWLIGHT_SET,
	CAMERA_COMP_END
	 
} camera_comp_set_num;

typedef enum
{
	 
	CAMERA_AUTO_DEFECT_LEVEL_0=0,
	CAMERA_AUTO_DEFECT_LEVEL_1,
	CAMERA_AUTO_DEFECT_LEVEL_2,	
	CAMERA_AUTO_DEFECT_LEVEL_3,
	CAMERA_AUTO_DEFECT_END
	 
} camera_auto_defect_set_num;

typedef struct
{
	kal_uint8		band;
	kal_bool		videomode;
	kal_uint8	dscmode;
}ae_lut_info_struct;

typedef struct
{
	kal_bool	autodsc;
	kal_bool	portrait;
	kal_bool	landscape;
	kal_bool	sport;
	kal_bool flower;
	kal_bool	nightscene;
	kal_bool	tvmode;
	kal_bool	avmode;
	kal_bool	isomode;
}dsc_mode_info_struct;

typedef struct
{
	kal_bool	flashlight;
	kal_bool	autofocus;
}dsc_comp_info_struct;

typedef struct
{
	kal_bool	autoflash;
	kal_bool	forceon;
	kal_bool	forceoff;
	kal_bool	antiredeye;
}flash_mode_info_struct;

typedef struct
{
	kal_bool	automode;
	kal_bool	macro;
	kal_bool	infinite;
	kal_bool	manual;
}af_mode_info_struct;

typedef struct
{
	dsc_mode_info_struct		dscmode;
	dsc_comp_info_struct		dsccomp;
	flash_mode_info_struct	flashlight;
	af_mode_info_struct		af;
}dsc_info_struct;

typedef struct
{
	kal_uint8	lutsize;
	kal_uint16	step;		
	kal_uint16	minEv;	
	kal_uint16	maxEv;	
	kal_uint8	iris;		
	kal_uint8	sensor_basegain;	
}ae_info_struct;

typedef struct
{
	kal_bool		strobe_pol;
	kal_uint8	lutidx;
	kal_uint16	duty;
	kal_uint16	offset;
	kal_uint16	shutter;
	kal_uint16	min_shutter;
	kal_uint16	max_shutter;
	kal_uint16	fwb_rgain;
	kal_uint16	fwb_ggain;
	kal_uint16	fwb_bgain;
	kal_uint16	sensorgain;
	kal_uint8	ispgain;
}flash_info_struct;

typedef struct
{
	ae_info_struct			ae;
	flash_info_struct		autoflash;
}device_info_struct;


typedef enum _LENS_TYPE {
	VCM_AF_LENS=0,
	PIEZO_AF_LENS,
	STEP_MOTOR_AF_LENS
} LENS_TYPE;




enum LENS_AF_STATUS
{
	AF_STATUS_READY,				 
	AF_STATUS_OPERATING,			 	
	AF_STATUS_FIXED				 
};

































void apply_camera_para_to_reg(void);
void update_camera_para_from_reg(void);


void load_camera_para(void);


void camera_para_to_isp(void);
void isp_to_camera_para(void);


void camera_para_to_ae(void);


nvram_camera_para_struct *get_camera_para(void);
void set_camera_para(const nvram_camera_para_struct *p_cam_para);

void apply_camera_shading_to_reg(camera_comp_set_num p_set_mode);
void update_camera_shading_from_reg(camera_comp_set_num p_set_mode);
void apply_camera_autodefect_to_reg(camera_comp_set_num p_set_mode);
void update_camera_autodefect_from_reg(camera_comp_set_num p_set_mode);
nvram_camera_defect_struct *get_camera_defect(void);
void set_camera_defect(const nvram_camera_defect_struct *p_cam_defect);
nvram_camera_lens_struct *get_camera_lens(void);
void set_camera_lens(const nvram_camera_lens_struct *p_cam_lens);
kal_uint8 Set_camera_shading_mode(camera_shading_mode_set_num p_shading_set);
kal_uint8 Get_camera_shading_mode(void);


nvram_camera_gamma_struct *get_camera_gamma(void);
void set_camera_gamma(const nvram_camera_gamma_struct *p_cam_gamma);



const nvram_camera_para_struct *get_default_camera_para(void);


void init_camera_operation_para(camera_operation_para_struct *oper_data);






void set_camera_mode_para(kal_uint8 mode);
void set_anti_low_light_para(kal_uint8 aeidx);

 
extern nvram_camera_para_struct	camera_para;
extern const nvram_camera_para_struct CAMERA_PARA_DEFAULT_VALUE;


const nvram_camera_defect_struct *get_default_camera_defect(void);
const nvram_camera_lens_struct *get_default_camera_lens(void);
void load_defect_table_para(kal_uint8	table_id);

extern nvram_camera_defect_struct	camera_defect;
extern nvram_camera_lens_struct	camera_lens;
extern const nvram_camera_defect_struct CAMERA_DEFECT_DEFAULT_VALUE;
extern const nvram_camera_lens_struct CAMERA_LENS_DEFAULT_VALUE;



const nvram_camera_gamma_struct *get_default_camera_gamma(void);

extern nvram_camera_gamma_struct	camera_gamma;
extern const nvram_camera_gamma_struct CAMERA_GAMMA_DEFAULT_VALUE;

	

const exposure_lut_struct *get_ae_lut(ae_lut_info_struct info);
const kal_uint8 *get_iris_lut(ae_lut_info_struct info);
extern dsc_info_struct		dsc_support_info;
extern device_info_struct	device_support_info;
extern ae_iso_sensor_gain_struct ae_iso_sensor_gain_info;


extern kal_uint8 	camera_horizontal_flag;


extern kal_uint8	g_CCT_PreviewImageMirror;



void apply_take_image_with_gamma_1024_by_flag(void);
void recover_preview_with_gamma_1024_disabled(void);




#line 455 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"


#line 1 "custom\common\PLUTO_MMI\custom_mmi_default_value.h"
 


































 

























































































































































































































































































































































































































#line 1 "kal\include\kal_non_specific_general_types.h"
#line 447 "custom\common\PLUTO_MMI\custom_mmi_default_value.h"



#line 1 "ps\gen\mcd\mcd_l4_common.h"
#line 450 "custom\common\PLUTO_MMI\custom_mmi_default_value.h"









 















 





















































 


typedef enum
{
    MMI_ALERT_NONE,
    MMI_RING,
    MMI_VIBRATION_ONLY,
    MMI_VIBRATION_AND_RING,
    MMI_VIBRATION_THEN_RING,
    MMI_SILENT
} MMI_ALERT_TYPE;











typedef struct
{
    kal_uint8 setsec;
} SET_TIMER;

typedef struct
{
    kal_uint8 status;

    unsigned short lcdBacklight;

    SET_TIMER timer;
} LIGHT;

typedef struct
{
    kal_uint16 ringTone;
    kal_uint16 videoCallTone;
    kal_int16 powerOffTone;
    kal_int16 powerOnTone;

    kal_int16 coverOpenTone;
    kal_int16 coverCloseTone;

    kal_int16 messageTone;
    kal_uint8 keypadTone;
    kal_uint16 alarmTone;
    kal_uint16 card2_ringTone;
    kal_int16 card2_messageTone;
} TONE_SETUP;

typedef struct
{

    unsigned short coverAnswer;

    unsigned short anyKey;
    unsigned short automatic;
} MMI_ANSWERING_MODE;

typedef struct
{
    unsigned short errorTone;
    unsigned short connectTone;
    unsigned short campOnTone;
    unsigned short warningTone;
} EXTRA_TONE;

typedef enum
{
    MMI_INTELLIGENT_CALL_ALERT_OFF,
    MMI_INTELLIGENT_CALL_ALERT_ON
} MMI_INTELLIGENT_CALL_ALERT_TYPE;

typedef struct
{
    kal_uint8 ringVolumeLevel;
    kal_uint8 keypadVolumeLevel;
    kal_uint8 loudSpeakerVolumeLevel;
    MMI_ALERT_TYPE mtCallAlertTypeEnum;
    LIGHT light;
    kal_uint8 ringTypeEnum;
    TONE_SETUP toneSetup;
    MMI_ANSWERING_MODE answeringMode;
    kal_uint8 fontSizeEnum;


    MMI_INTELLIGENT_CALL_ALERT_TYPE intelligentCallAlert;


    EXTRA_TONE extraTone;
} PROFILE;

 

 
































 
typedef enum
{
    MMI_PHB_FIELD_NAME,      
    MMI_PHB_FIELD_NUMBER,    

    MMI_PHB_FIELD_HOME,
    MMI_PHB_FIELD_COMPANY_NAME,
    MMI_PHB_FIELD_EMAIL,
    MMI_PHB_FIELD_OFFICE,
    MMI_PHB_FIELD_FAX,


    MMI_PHB_FIELD_BIRTHDAY,

    MMI_PHB_FIELD_PIC,



    MMI_PHB_FIELD_RING,
    MMI_PHB_FIELD_GROUP,
    MMI_PHB_FIELD_TOTAL
} MMI_PHB_FIELD_ORDER_ENUM;

 
typedef enum
{






    MMI_PHB_EXTRA_FIELD_TOTAL
} MMI_PHB_EXTRA_FIELD_ORDER_ENUM;


typedef enum
{









    MMI_PHB_SERVICE_FIELD_TOTAL
} MMI_PHB_SERVICE_FIELD_TOTAL_ENUM;


typedef struct
{
    kal_uint8 type;
    kal_uint8 storage;
    kal_uint16 record_index;
    kal_uint8 number[( 40  + 1 + 1) * 2 ];
    kal_uint8 name[( 30  + 1) * 2 ];
} SpeedDialInfo;

typedef struct
{
    kal_uint8 groupName[( 20  + 1) * 2 ];
    kal_uint16 ringToneID;
    kal_uint16 pictureTagID;
    kal_uint16 LEDPatternId;
    kal_uint16 VideoID;  
    kal_uint8 alertType;
    kal_uint8 is_modified;
} PHB_CALLER_GROUP_STRUCT;

typedef struct
{
    kal_uint16 pictureTagID;
    kal_uint16 ringToneID;
    kal_uint8 callerGroupID;
} PHB_OPTIONAL_IDS_STRUCT;

 

 

















typedef struct MYTIME
{
    kal_uint16 nYear;
    kal_uint8 nMonth;
    kal_uint8 nDay;
    kal_uint8 nHour;
    kal_uint8 nMin;
    kal_uint8 nSec;
    kal_uint8 DayIndex;  
} MYTIME;

typedef struct _todo_list_node
{

    MYTIME StartTime;                             

    MYTIME EndTime;                         
    kal_uint8 Type;                          
    kal_uint8 Completed;                 
    kal_uint8 Priority;                     
    kal_uint8 Class;
    kal_uint8 Location[  36  *  2  ];  




    kal_uint8 Note[  36  *  2  ];  
    kal_uint8 Alarm;                     
    kal_uint8 Repeat;                    
    kal_uint8 Days;                      
    kal_uint8 Present;                   

} ToDoListNode;  



typedef struct
{
    kal_uint16 phonebookId;
    MYTIME Birthday;
} BirthdayReminderStruct;

 

 




typedef struct
{
    kal_uint8 ImageName[ ((13* 2 ) +  (5* 2 )  +  2 ) ];
    kal_int32 ImagesId;
} DYNIMAGEINFO;

 

 




typedef struct
{
    kal_uint8 AudioName[ ((13* 2 ) +  (5* 2 )  +  2 ) ];
    kal_uint16 AudioId;
} DYNAUDIOINFO;

 

 







typedef struct CB_CHANNEL_INDEX
{
    kal_uint8 L4Index[ 10 ];
} CB_CHANNEL_INDEX;

typedef struct CB_CHANNEL_NAME
{
    kal_uint8 NameDCS;
    kal_uint8 Name[16];
} CB_CHANNEL_NAME;

typedef struct CB_MESSAGE_LENGTH
{
    kal_uint16 CBMessageLength[5];
} CB_MESSAGE_LENGTH;

typedef struct CB_MESSAGE_CONTENT
{
    kal_uint8 CBMessageContent[ 162 ];
} CB_MESSAGE_CONTENT;

typedef struct EMS_OBJECT_NAME
{
    kal_uint8 object_name[( 13  * 2 ) +  2 ];
} EMS_OBJECT_NAME;

typedef struct
{
    EMS_OBJECT_NAME emsPictureNames1;
    EMS_OBJECT_NAME emsPictureNames2;
    EMS_OBJECT_NAME emsPictureNames3;
    EMS_OBJECT_NAME emsPictureNames4;
    EMS_OBJECT_NAME emsPictureNames5;
} nvram_ems_my_picture_name_struct;

typedef struct
{
    EMS_OBJECT_NAME emsAnimationNames1;
    EMS_OBJECT_NAME emsAnimationNames2;
    EMS_OBJECT_NAME emsAnimationNames3;
    EMS_OBJECT_NAME emsAnimationNames4;
    EMS_OBJECT_NAME emsAnimationNames5;
} nvram_ems_my_animation_name_struct;

typedef struct
{
    EMS_OBJECT_NAME emsMelodyNames1;
    EMS_OBJECT_NAME emsMelodyNames2;
    EMS_OBJECT_NAME emsMelodyNames3;
    EMS_OBJECT_NAME emsMelodyNames4;
    EMS_OBJECT_NAME emsMelodyNames5;
} nvram_ems_my_melody_name_struct;

typedef struct
{
    CB_CHANNEL_INDEX l4MidIndex;
    CB_CHANNEL_NAME chnlNames1;
    CB_CHANNEL_NAME chnlNames2;
    CB_CHANNEL_NAME chnlNames3;
    CB_CHANNEL_NAME chnlNames4;
    CB_CHANNEL_NAME chnlNames5;
    CB_CHANNEL_NAME chnlNames6;
    CB_CHANNEL_NAME chnlNames7;
    CB_CHANNEL_NAME chnlNames8;
    CB_CHANNEL_NAME chnlNames9;
    CB_CHANNEL_NAME chnlNames10;
} nvram_sms_cb_chnl_struct;



 

 


 

 

 

 

 

















typedef struct
{
    unsigned char Hour;
    unsigned char Min;
    unsigned char State;
    unsigned char Freq;
    unsigned char Snooze;    
    unsigned char Days;





    unsigned char AudioOption;           
    unsigned short AudioOptionValue;     


    unsigned char SnoozeInterval;


    unsigned char AlertType;

} alm_nvram_struct;

typedef struct
{
    unsigned char Type;
    unsigned char Status;
    unsigned char Hour;
    unsigned char Min;
} spof_nvram_struct;

















typedef struct
{
    kal_uint8 plmn[6];  
    kal_uint8 name[ 24  * 2 ];
    kal_uint8 add_ci;
} nitz_nw_name_struct;

 

 







 
typedef struct
{
    kal_uint8 qos_length;    
    kal_uint8 unused1;       
    kal_uint8 delay_class;
    kal_uint8 reliability_class;
    kal_uint8 peak_throughput;
    kal_uint8 unused2;       
    kal_uint8 precedence_class;
    kal_uint8 unused3;       
    kal_uint8 mean_throughput;
    kal_uint8 traffic_class;
    kal_uint8 delivery_order;
    kal_uint8 delivery_of_err_sdu;
    kal_uint8 max_sdu_size;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 residual_bit_err_rate;
    kal_uint8 sdu_err_ratio;
    kal_uint8 transfer_delay;
    kal_uint8 traffic_hndl_priority;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
} nvram_editor_qos_struct;

typedef struct
{
    kal_uint8 context_id;
    kal_uint8 name_length;
    kal_uint8 name_dcs;
    kal_uint8 authentication_type;
    kal_uint8 name[32];
    kal_uint8 user_name[ 32 ];
    kal_uint8 password[ 32 ];
    kal_uint8 dns[4];
    kal_uint8 apn[ 100 ];
    kal_uint8 apn_length;
    nvram_editor_qos_struct req_qos;
} nvram_ef_abm_gprs_profile_struct;

typedef struct
{
    l4_addr_bcd_struct addr;
    kal_uint8 csd_ur;
    kal_uint8 csd_type;
    kal_uint8 csd_module;
    kal_uint8 auth_type;
    kal_uint8 user_id[32];
    kal_uint8 user_pwd[32];
    kal_uint8 dns_addr[4];
    l4_name_struct name;
} nvram_ef_csd_profile_struct;


 
































































 












typedef struct
{
    kal_uint16 ActivityId[ 10 ];
    float CaloriePerActivity[ 10 ];
    kal_uint16 MinutesPerActivity[ 10 ];
} ActivityDetails;

typedef struct
{
    kal_uint8 shortcut_state;
    kal_uint16 shortcuts;
} shct_item_struct;




 



 
typedef enum
{
    NVRAM_PHONELOCK_INDEX,                   
    NVRAM_AUTOLOCK_TIMEOUT_INDEX,
    NVRAM_SETTING_PHONELOCK,
    NVRAM_SETTING_AUTOKEYPADLOCK,
    NVRAM_SETTING_AUTOREDIAL,
    NVRAM_SETTING_AUTOKEYPADLOCK_TIME,       
    NVRAM_SETTING_WELCOME_TEXT,
    NVRAM_SETTING_APHORISM_TEXT,
    NVRAM_SETTING_CALL_TIME_DISPLAY,
    NVRAM_SETTING_SPEED_DIAL,
    NVRAM_SETTING_CONTRAST_LEVEL,            
    NVRAM_SETTING_AUTOUPDATE_DT_TIME,
    NVRAM_SETTING_OWNER_NO,
    NVRAM_SETTING_STATUS_DT_TIME,
    NVRAM_SETTING_LANG,
    NVRAM_SETTING_CTR,                       
    NVRAM_SETTING_CONTRAST_SUBLCD_LEVEL,
    NVRAM_HELP_ENABLED_FLAG,
    NVRAM_PROFILES_ACTIVATED,
    NVRAM_CH_QUICK_END_FLAG,
    NVRAM_SMSCOUNTERS_SENT,                  
    NVRAM_SMSCOUNTERS_RECD,
    NVRAM_DOWNLOAD_IMAGE,
    NVRAM_DOWNLOAD_TONE,
    CURRENT_CITY,
    TIME_FORMAT,                             
    DATE_FORMAT,
    NVRAM_GAME_SNAKE_LEVEL,
    LUNAR_CALENDAR,
    NVRAM_DOWNLOAD_CITY1,
    NVRAM_DOWNLOAD_CITY2,                    
    NVRAM_SCREENSAVER_STATUS,
    NVRAM_SCREENSAVER_WAITING,
    NVRAM_CALLERID,
    NVRAM_GROUPINDEX,
    NVRAM_GAME_RICHES_STATUS,                
    NVRAM_RICHES_OPTION_STATUS,
    NVRAM_PROFILES_LASTACTIVATED,
    TOH_CURRENT_LEVEL,
    SMASH_CURRENT_LEVEL,
    NVRAM_SMS_ACTIVE_PROFILE_INDEX,          
    SMS_CONCAT_MSG_REF_VALUE,
    NVRAM_COLORBALLS_OPTION_STATUS,
    NVRAM_PROFILES_LOUDSPKR,
    RESTORE_DEFAULT_SPEED_DIAL,
    RESTORE_DEFAULT_CONTRAST_SUBLCD_LEVEL,   
    RESTORE_DEFAULT_CONTRAST_LEVEL,
    RESTORE_DEFAULT_WELCOME_TEXT,
    RESTORE_DEFAULT_APHORISM_TEXT,
    RESTORE_DEFAULT_OWNER_NO,
    RESTORE_DEFAULT_STATUS_SHOW_DT_TIME,     
    RESTORE_DEFAULT_AUTOUPDATE_TIME,
    RESTORE_DEFAULT_SCREENSAVER_STATUS,
    RESTORE_DEFAULT_SCREENSAVER_WAITING,
    RESTORE_DEFAULT_PROFILES_ACTIVATED,
    RESTORE_DEFAULT_TIME_FORMAT,             
    RESTORE_DEFAULT_DATE_FORMAT,
    NVRAM_DOWNLOAD_MELODY,
    NVRAM_NORMAL_MODE_VOICE_LEVEL,
    NVRAM_LDSPK_MODE_VOICE_LEVEL,
    NVRAM_HDSET_MODE_VOICE_LEVEL,            
    NVRAM_NITZTIMEZONE,
    NVRAM_WALLPAPER_ROTATE_STATUS,
    NVRAM_GX_MAJUNG_LEVEL,
    NVRAM_GX_MEMORY_LEVEL,
    NVRAM_DEFAULT_USB_APP,                   
    NVRAM_FMRDO_BACKGROUND_PLAY,
    NVRAM_FMRDO_SKIN,
    NVRAM_FMRDO_VOLUME,
    NVRAM_AUDPLY_LIST_AUTO_GEN,
    NVRAM_AUDPLY_VOLUME,                     
    NVRAM_AUDPLY_PREFER_LIST,
    NVRAM_AUDPLY_SKIN,
    NVRAM_AUDPLY_REPEAT,
    NVRAM_AUDPLY_SHUFFLE,
    NVRAM_AUDPLY_BACKGROUND_PLAY,            
    NVRAM_SNDREC_STORAGE,
    NVRAM_SNDREC_FORMAT,
    NVRAM_IP_NUMBER_SETTING,
    NVRAM_SET_MAINMENU_STYLE,
    NVRAM_EF_FMGR_SORT_OPTION_LID,           
    NVRAM_GFX_AUDIO_SETTING,
    NVRAM_GFX_AUDIO_VOLUMN,
    NVRAM_GFX_VIBRATION_SETTING,
    NVRAM_GX_PUZZLE_LEVEL,
    NVRAM_GX_STAIR_LEVEL,                    
    NVRAM_SETTING_DEF_ENCODING,
    NVRAM_STOPWATCH_TOTAL_RECORDS,
    NVRAM_JAVA_SETTING_SOUND,
    NVRAM_JAVA_SETTING_PROF_ID,
    NVRAM_ALM_SNOOZE_TIME,                   
    NVRAM_VDOPLY_VOLUMN,
    NVRAM_SETTING_OPN_DISPLAY,
    RESTORE_DEFAULT_OPN_DISPLAY,
    NVRAM_BLACK_LIST_SETTING,
    NVRAM_VRSD_RCG_SETTING,
    NVRAM_PHB_SPEAK_NAME_ON_OFF,             
    NVRAM_JAVA_SETTING_VIB,
    NVRAM_JAVA_SETTING_BKL,
    NVRAM_JAVA_SETTING_LED,
    NVRAM_VRSI_RCG_SETTING,
    NVRAM_IRDA_STORAGE,                      
    NVRAM_PEN_SPEED,
    NVRAM_PEN_COLOR,
    NVRAM_SETTING_DT_DST,
    NVRAM_SSC_DISABLE_FLAG,
    NVRAM_ABREPEAT_VOLUME,                   
    NVRAM_IMGVIEW_VIEW_SYTLE,
    NVRAM_ABREPEAT_STORAGE,
    NVRAM_WC_DST,
    NVRAM_GFX_BACKGROUND_MUSIC_SETTING,
    NVRAM_GFX_SOUND_EFFECT_SETTING,          
    NVRAM_PHNSET_IDLE_CLOCK_TYPE,
    RESOTRE_DEFAULT_IDLE_CLOCK_TYPE,
    NVRAM_FMRDO_RECORD_FORMAT,
    NVRAM_FMRDO_RECORD_STORAGE,
    NVRAM_BYTE_FONT_SIZE,                    
    NVRAM_BYTE_LED_SETTING,
    NVRAM_BYTE_BL_SETTING_LEVEL,
    NVRAM_BYTE_BL_SETTING_HFTIME,
    NVRAM_BYTE_COVER_CLOSE_BACK_TO_IDLE,
    NVRAM_BYTE_COVER_CLOSE_REJECT_CALL,      
    NVRAM_BYTE_COVER_CLOSE_KEYPAD_LOCK,
    NVRAM_MOTION_DICE_DICE_COUNT,
    NVRAM_MOTION_DICE_EVENT_ON,
    NVRAM_AUDPLY_SPECTRUM_DISPLAY_STYLE,
    NVRAM_FTP_ACCESS_RIGHT,
    NVRAM_CTM_MODE,
    NVRAM_CTM_SETTING,
    NVRAM_CCONV_SELECTED_CURRENCY1,
    NVRAM_CCONV_SELECTED_CURRENCY2,
    NVRAM_CCONV_SETTING_CURRENCY1,
    NVRAM_CCONV_SETTING_CURRENCY2,
    NVRAM_CCONV_SETTING_CURRENCY3,
    NVRAM_CCONV_SETTING_CURRENCY4,
    NVRAM_CCONV_SETTING_CURRENCY5,
    NVRAM_CCONV_SETTING_LOCALCURRENCY,
    NVRAM_BYTE_AUDIO_REVERB_INDEX,
    NVRAM_POC_ACTIVITY_PRESENT,
    NVRAM_POC_ACTIVITY,
    NVRAM_POC_MOOD_PRESENT,
    NVRAM_POC_MOOD,
    NVRAM_POC_ANS_MODE,
    NVRAM_POC_CALL_BAR_MODE,
    NVRAM_POC_ALERT_BAR_MODE,
    NVRAM_POC_MAO_MODE,
    NVRAM_POC_PRIVACY_MODE,
    NVRAM_POC_START_BOOTUP,
    NVRAM_POC_USE_XDM,
    NVRAM_POC_USE_PRES,
    NVRAM_POC_PROFILE_ACTIVE,
    NVRAM_JAVA_SETTING_VK,
    NVRAM_EM_SWDBG_MODE,
    NVRAM_GX_FRUIT_LEVEL,
    NVRAM_GX_VSMJ_LEVEL,
    NVRAM_BRW_SHOW_IMAGE_ON_OFF,
    NVRAM_BRW_SHOW_HISTORY_AS,
    NVRAM_PH_ACTIVATED_WAP_PROFILE_INDEX,
    NVRAM_PH_ACTIVATED_MMS_PROFILE_INDEX,
    NVRAM_BRW_SHOW_SERVICE_INBOX_MSG,
    NVRAM_FMRDO_SPEAKER_STATUS,
    NVRAM_AUTO_VM_SETTING_VM_SUPPORT,
    NVRAM_AUTO_VM_SETTING_AUTO_VM,    
    NVRAM_AUDPLY_LYRICS_DISPLAY,
    NVRAM_SWFLASH_STORAGE,
    NVRAM_SWFLASH_DATA_ACCOUNT,
    NVRAM_SWFLASH_VOLUME,
	NVRAM_BRW_IMAGE_SELECTION_ON_OFF,
    NVRAM_VOIP_PROF_ACTIVATED,
    NVRAM_CLNDR_PERIOD_INTERVAL,
    NVRAM_UC_PREFERRED_MSG_TYPE,
    NVRAM_VDOPLY_DATA_ACCOUNT_ID,
    NVRAM_VDOPLY_PROXY_IP1, 
    NVRAM_VDOPLY_PROXY_IP2,     
    NVRAM_VDOPLY_PROXY_IP3,    
    NVRAM_VDOPLY_PROXY_IP4,
    NVRAM_VDOPLY_PROXY_ON_OFF,
    NVRAM_NETSET_PREFERRED_MODE,
    NVRAM_BYTE_AUDIO_SURROUND_INDEX,
	NVRAM_BRW_SETTINGS_HOMEPAGE,
	NVRAM_BRW_SETTINGS_RENDER_MODE,
	NVRAM_BRW_SETTINGS_NAVIGATE_MODE,
	  
	NVRAM_BRW_SETTINGS_FONT_SIZE,
	  
	NVRAM_BRW_SETTINGS_THUMBNAIL,
	NVRAM_BRW_SETTINGS_SCREEN_SIZE,
	NVRAM_BRW_SETTINGS_ENCODE_METHOD_INDEX,
	NVRAM_BRW_SETTINGS_SHOW_VIDEO,
	NVRAM_BRW_SETTINGS_PLAY_SOUND,
	NVRAM_BRW_SETTINGS_LOAD_UNKOWN_MEDIA,
	NVRAM_BRW_SETTINGS_CSS,
	NVRAM_BRW_SETTINGS_SCRIPTS,
	NVRAM_BRW_SETTINGS_CACHE,
	NVRAM_BRW_SETTINGS_COOKIE,
	NVRAM_BRW_SETTINGS_SHORTCUTS,
	NVRAM_BRW_SETTINGS_SECURITY_WARNINGS,  
	NVRAM_BRW_SETTINGS_SEND_DEVICE_ID,
	NVRAM_BRW_RECENT_PAGES_SORTING_METHOD,
    NVRAM_DM_SELF_REGISTER_RESULT,
    NVRAM_DICTIANRY_TTS_ON_OFF,
    NVRAM_DICTIANRY_TTS_SPEAK_SPEED,
    NVRAM_DICTIANRY_TTS_SPEAK_VOLUME,
    NVRAM_SNDREC_QUALITY,
    NVRAM_FMRDO_RECORD_QUALITY,
    NVRAM_LANGLN_DRIVE,
    NVRAM_LANGLN_WK_REMINDER,
    NVRAM_LANGLN_WK_RMD_HOUR,
    NVRAM_LANGLN_WK_RMD_MIN,
    NVRAM_LANGLN_DK_TTS_STATUS,
    NVRAM_DM_OTA_PROFILE_INIT,
    NVRAM_SMS_BACKGROUND_SAVE_TO_SENT,
    NVRAM_LANGLN_DK_TTS_VOLUME,

    NVRAM_MOTION_DICE_SOUND_ON,
    NVRAM_MOTION_DICE_VOL,
    NVRAM_VT_ANSWER_MODE,
    NVRAM_VT_DIAL_MODE,
    NVRAM_VT_AUDIO_OPT_MIC,
    NVRAM_VT_AUDIO_OPT_SPEAKER,

    NVRAM_VOIP_LOG_ACTIVATE,
    NVRAM_VOIP_LOG_STORAGE,
    NVRAM_VOIP_LOG_DELETE_TIME,
    NVRAM_JAVA_SETTING_NET_ICON,
	NVRAM_BRW_SHOW_IMAGE_MODE,
    NVRAM_BRW_ACTIVATED_WAP_PROFILE_INDEX,
    NVRAM_BRW_ACTIVATED_MMS_PROFILE_INDEX,
    NVRAM_BYTE_AUDIO_EFFECT_INDEX,
    NVRAM_CLNDR_VIEW_TYPE,
    NVRAM_MTPNP_SETTING,
    NVRAM_MTPNP_STATUS,
    NVRAM_SLAVE_ACTIVE_PROFILE_IDX,
    NVRAM_SLAVE_NORMAL_MODE_VOICE_LEVEL,
    NVRAM_SLAVE_LDSPK_MODE_VOICE_LEVEL,
    NVRAM_SLAVE_HDSET_MODE_VOICE_LEVEL,
    NVRAM_SLAVE_IP_NUMBER_SETTING,
    NVRAM_CARD2_OWNER_NUMBER,
    NVRAM_MTPNP_SMS_SHOW_STYLE,
    
     
    RESTORE_DEFAULT_MTPNP_SETTING,
    RESTORE_DEFAULT_CARD2_OWNER_NUMBER,
    RESTORE_DEFAULT_MTPNP_SMS_SHOW_STYLE,
     


    NVRAM_ANALOG_TV_VOLUME,
    NVRAM_ANALOG_TV_VOLUME_MUTE,
    NVRAM_ANALOG_TV_MODE_SELECT,

	
     
    NVRAM_LAST_BYTE_ELEMENT
} BYTEDATA;

 
typedef enum
{
    NVRAM_SHORTDATA1_INDEX,              
    NVRAM_SHORTDATA2_INDEX,
    NVRAM_SNAKE_LEVEL1_SCORE,
    NVRAM_SNAKE_LEVEL2_SCORE,
    NVRAM_SNAKE_LEVEL3_SCORE,
    NVRAM_SNAKE_LEVEL4_SCORE,            
    NVRAM_F1RACE_SCORE,
    NVRAM_CURRENT_SCREENSVER_ID,
    NVRAM_PHB_STORAGE_LOCATION,
    NVRAM_FUNANDGAMES_SETWALLPAPER,
    NVRAM_GAME_DOLL_GRADE,               
    TOH_LEVEL1_HIGHEST_SCORE,
    TOH_LEVEL2_HIGHEST_SCORE,
    TOH_LEVEL3_HIGHEST_SCORE,
    TOH_LEVEL4_HIGHEST_SCORE,
    NVRAM_RICHES_EASY_SCORE,             
    NVRAM_RICHES_NORMAL_SCORE,
    NVRAM_RICHES_HARD_SCORE,
    NVRAM_COLORBALLS_EASY_SCORE,
    NVRAM_COLORBALLS_NORMAL_SCORE,
    NVRAM_COLORBALLS_HARD_SCORE,         
    NVRAM_SMASH_NORMAL_SCORE,
    NVRAM_SMASH_SPEEDY_SCORE,
    NVRAM_SMASH_ACCURACY_SCORE,
    NVRAM_SETTING_CTR_TIME,
    NVRAM_SETTING_PREFER_INPUT_METHOD,   
    RESTORE_DEFAULT_CURRENT_SCREENSVER_ID,
    RESTORE_DEFAULT_FUNANDGAMES_SETWALLPAPER,
    RESTORE_PREFER_INPUT_METHOD,
    NVRAM_GX_NINJA_SCORE,
    NVRAM_GX_MAJUNG_EASY_SCORE,          
    NVRAM_GX_MAJUNG_NORMAL_SCORE,
    NVRAM_GX_MAJUNG_HARD_SCORE,
    NVRAM_GX_MEMORY_EASY_SCORE,
    NVRAM_GX_MEMORY_NORMAL_SCORE,
    NVRAM_GX_MEMORY_HARD_SCORE,          
    NVRAM_GX_COPTER_SCORE,
    NVRAM_GX_PUZZLE_EASY_SCORE,
    NVRAM_GX_PUZZLE_NORMAL_SCORE,
    NVRAM_GX_PUZZLE_HARD_SCORE,
    NVRAM_GX_PANDA_SCORE,                
    NVRAM_GX_STAIR_EASY_SCORE,
    NVRAM_GX_STAIR_NORMAL_SCORE,
    NVRAM_GX_STAIR_HARD_SCORE,
    NVRAM_GX_UFO_SCORE,
    NVRAM_GX_DANCE_SCORE,                
    NVRAM_CAM_FILENAME_SEQ_NO,
    NVRAM_IMG_VIEWER_FILE_PATH,
    NVRAM_VDOREC_FILENAME_SEQ_NO,
    NVRAM_VDOPLY_SNAPSHOT_SEQ_NO,
    NVRAM_RESTORE_POWER_ON_DISPLAY,      
    NVRAM_RESTORE_POWER_OFF_DISPLAY,
    NVRAM_CURRENT_POWER_ON_DISPLAY,
    NVRAM_CURRENT_POWER_OFF_DISPLAY,
    NVRAM_POWER_ON_DISPLAY_SUCCESS,
    NVRAM_POWER_OFF_DISPLAY_SUCCESS,     
    NVRAM_SCREENSAVER_DISPLAY_SUCCESS,
    NVRAM_POWER_ON_FORCE_STOP_TIME,
    NVRAM_POWER_OFF_FORCE_STOP_TIME,
    NVRAM_SETWALLPAPER_SUB,
    RESTORE_DEFAULT_SETWALLPAPER_SUB,    
    NVRAM_CH_QUICK_END_TIME,
    NVRAM_GX_MAGICSUSHI_SCORE,
    NVRAM_SCR_SNAPSHOT_SEQ_NO,
    NVRAM_SETTING_TVOUT_FORMAT,
    NVRAM_SETTING_TVOUT_Y_GAMMA,         
    NVRAM_AUDIO_MIC_VOLUME_SET,
    NVRAM_SMS_CONCAT_MSG_REF_VALUE,
    NVRAM_GX_FRUIT_NO_USE,
    NVRAM_GX_FRUIT_EASY_SCORE,
    NVRAM_GX_FRUIT_NORMAL_SCORE,         
    NVRAM_GX_FRUIT_HARD_SCORE,
    NVRAM_AUDIO_SPEED_VALUE,
    NVRAM_SETTING_TVOUT_U,
    NVRAM_SETTING_TVOUT_V,
    NVRAM_IMGVIEW_STORAGE,               
    NVRAM_VDOPLY_STORAGE,
    NVRAM_VDOPLY_OPTION_BRIGHTNESS,
    NVRAM_VDOPLY_OPTION_CONTRAST,
    NVRAM_VDOPLY_OPTION_REPEAT,
    NVRAM_ALARM_FIRSTSAVE,               
    NVRAM_SMSCOUNTERS_SENT_SHORT,
    NVRAM_SMSCOUNTERS_RECD_SHORT,
    NVRAM_GX_VSMJ_LEVEL1,
    NVRAM_GX_VSMJ_LEVEL2,
    NVRAM_GX_VSMJ_LEVEL3,                
    NVRAM_IMGTILE_FILENAME_SEQ_NO,
    NVRAM_BRW_TIME_OUT_VALUE,
    NVRAM_EBOOK_NFO_LID,
    NVRAM_EBOOK_LAST_HIGHLIGHT_ID,
    NVRAM_BARCODE_FILENAME_SEQ_NO,       
    NVRAM_SETTING_TVOUT_AUD_PATH,
    NVRAM_FMRDO_LAST_CHANNEL,
    NVRAM_TIMEZONE,
    NVRAM_FM_FM_RADIO_CHANNEL_1,
    NVRAM_FM_FM_RADIO_CHANNEL_2,         
    NVRAM_FM_FM_RADIO_CHANNEL_3,
    NVRAM_PHB_NAME_LIST_FILTER,
    NVRAM_JMMS_LANGUAGE_CHANGE,
    NVRAM_VDOPLY_STREAM_SEQ_NO,
    NVRAM_CHIST_HAVE_MISSED_CALL,        
    NVRAM_SETTING_WRITING_LANG,
    NVRAM_SETTING_WRITING_LANG_SUB,
    NVRAM_UMMS_LANGUAGE_CHANGE,
    NVRAM_PHB_VCARD_VERSION,
	NVRAM_BRW_PAGE_TIME_OUT_VALUE,
    NVRAM_SLAVE_SMSCOUNTERS_SENT,
    NVRAM_SLAVE_SMSCOUNTERS_RECV,
    NVRAM_SLAVE_CHIST_HAVE_MISSED_CALL,



    NVRAM_ANALOG_TV_DISTRICT_SELECT,


     
    NVRAM_LAST_SHORT_ELEMENT
} SHORTDATA;

 
typedef enum
{
    CURRENCY_CONVERTOR_EXCHANGE_RATE,                
    NVRAM_RESTORE_DEFAULT_PEN_CALIBRATION_VALUE1,
    NVRAM_RESTORE_DEFAULT_PEN_CALIBRATION_VALUE2,
    NVRAM_RESTORE_DEFAULT_PEN_CALIBRATION_VALUE3,
    NVRAM_RESTORE_DEFAULT_PEN_CALIBRATION_VALUE4,
    NVRAM_RESTORE_DEFAULT_PEN_CALIBRATION_VALUE5,    
    NVRAM_RESTORE_DEFAULT_PEN_CALIBRATION_VALUE6,
    NVRAM_RESTORE_DEFAULT_PEN_CALIBRATION_VALUE7,
    NVRAM_RESTORE_DEFAULT_PEN_CALIBRATION_VALUE8,
    NVRAM_PEN_CALIBRATION_VALUE1,
    NVRAM_PEN_CALIBRATION_VALUE2,                    
    NVRAM_PEN_CALIBRATION_VALUE3,
    NVRAM_PEN_CALIBRATION_VALUE4,
    NVRAM_PEN_CALIBRATION_VALUE5,
    NVRAM_PEN_CALIBRATION_VALUE6,
    NVRAM_PEN_CALIBRATION_VALUE7,                    
    NVRAM_PEN_CALIBRATION_VALUE8,
    THEME_MANAGER_MAX_THEME_ID,
    THEME_MANAGER_CURR_THEME_ID,
    NVRAM_CCONV_EXCHANGE_RATE1,
    NVRAM_CCONV_EXCHANGE_RATE2,
    NVRAM_CCONV_EXCHANGE_RATE3,
    NVRAM_CCONV_EXCHANGE_RATE4,
    NVRAM_CCONV_EXCHANGE_RATE5,
    NVRAM_JMMS_RETRIEVAL_SETTINGS,
    NVRAM_JMMS_JAVA_MESSAGE_ID,
    NVRAM_JMMS_NORMAL_MESSAGE_ID,
    NVRAM_JMMS_CHINESE_TRANSACTION_ID,
    NVRAM_AUDIO_DEBUG_INFO1,
    NVRAM_AUDIO_DEBUG_INFO2,
    NVRAM_JMMS_RESTORE_RETRIEVAL_SETTINGS,
    NVRAM_USB_PREVIOUS_THEME_INDEX,
    THEME_MANAGER_DEFAULT_THEME_ID,
    NVRAM_VDOPLY_PROXY_PORT,     
    NVRAM_DISPCHAR_AVATAR_WPSS,
    NARAM_DISPCHAR_AVATAR_ONOFF,
    NVRAM_VDOPLY_HIGHEST_UDP_PORT,
    NVRAM_VDOPLY_LOWEST_UDP_PORT,    
    NVRAM_UMMS_RETRIEVAL_SETTINGS,
    NVRAM_UMMS_RESTORE_RETRIEVAL_SETTINGS,
    NVRAM_DISPCHAR_AVATAR_WPSS_SERIALNUM,
    NVRAM_DISPCHAR_AVATAR_ONOFF_SERIALNUM,
     
    NVRAM_LAST_DOUBLE_ELEMENT
} DOUBLEDATA;



#line 458 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"
#line 1 "custom\common\PLUTO_MMI\nvram_common_defs.h"
#line 459 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"


#line 1 "interface\hwdrv\Uart_sw.h"
#line 461 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"


 


 



























































 
































































































































































 



typedef struct
{
    kal_int32 dataAcct;
    kal_int32 autoLogin;
    kal_uint16 profName[ (33) ];
    kal_uint8 vmServer[ (65) ];
} mmi_voip_common_setting_struct;

typedef struct
{
    kal_uint16 sipPort;
    kal_uint16 dispName[ (17) ];
    kal_uint8 sipServer[ (65) ];
    kal_uint8 username[ (65) ];
    kal_uint8 password[ (17) ];
    kal_uint8 authName[ (65) ];
} mmi_voip_account_setting_struct;

typedef struct
{
    kal_int32 status;
    kal_uint16 port;
    kal_uint8 server[ (65) ];
    kal_uint8 username[ (65) ];
    kal_uint8 password[ (17) ];
} mmi_voip_server_struct;

typedef struct
{
    kal_int32 natStatus;
    kal_int32 refInterval;
    kal_uint16 stunPort;
    kal_uint8 natFirewall[ (4) ];
    kal_uint8 stunServer[ (65) ];
} mmi_voip_nat_setting_struct;

typedef struct
{
    mmi_voip_common_setting_struct comm_info;
    mmi_voip_account_setting_struct acct_info;
    mmi_voip_server_struct out_server_info;
    mmi_voip_server_struct reg_server_info;
    mmi_voip_nat_setting_struct nat_info;
} mmi_voip_prof_struct;



typedef struct
{
    nvram_ef_abm_gprs_profile_struct DataAccount1;
    nvram_ef_abm_gprs_profile_struct DataAccount2;
    nvram_ef_abm_gprs_profile_struct DataAccount3;
    nvram_ef_abm_gprs_profile_struct DataAccount4;
    nvram_ef_abm_gprs_profile_struct DataAccount5;
    nvram_ef_abm_gprs_profile_struct DataAccount6;
    nvram_ef_abm_gprs_profile_struct DataAccount7;
    nvram_ef_abm_gprs_profile_struct DataAccount8;
    nvram_ef_abm_gprs_profile_struct DataAccount9;
    nvram_ef_abm_gprs_profile_struct DataAccount10;



} nvram_meta_abm_gprs_profile_struct;

typedef struct
{
    kal_uint32 PWM1[ 5 ][2];   
    kal_uint32 PWM2[ 5 ][2];   
    kal_uint32 PWM3[ 5 ][2];   
    kal_uint32 MainLCD_Contrast[ 15 ];
    kal_uint32 MainLCD_Bias[ 5 ];
    kal_uint32 MainLCD_Linerate[ 5 ];
    kal_uint32 MainLCD_Temp[ 5 ];
    kal_uint32 SubLCD_Contrast[ 15 ];
    kal_uint32 SubLCD_Bias[ 5 ];
    kal_uint32 SubLCD_Linerate[ 5 ];
    kal_uint32 SubLCD_Temp[ 5 ];
    kal_uint32 BatteryLevel[ 10 ];
    kal_uint32 PMIC6318BLPWM[ 5 ][2];   
} custom_hw_level_struct;

typedef struct
{
    kal_uint8 text_length;
    kal_uint8 text_dcs;
    kal_uint8 text[ 62 ];
} rmi_greeting_text_struct;

typedef struct
{
    kal_uint8 volume_gain[MAX_VOL_CATE][MAX_VOL_TYPE][ 7 ];
    kal_uint8 volume[MAX_VOL_CATE][MAX_VOL_TYPE];
    kal_uint8 max_melody_volume_gain[MAX_VOL_CATE + 1];
    kal_uint8 melody_volume_gain_step[MAX_VOL_CATE + 1];
    kal_uint8 tv_out_volume_gain[ 7 ];
} custom_acoustic_struct;

 


typedef struct
{
    kal_int16 speech_input_FIR_coeffs[6][45];
    kal_int16 speech_output_FIR_coeffs[6][45];
    kal_uint16 selected_FIR_output_index;
    kal_uint16 speech_common_para[12];
    kal_uint16 speech_mode_para[8][8];
    kal_uint16 Media_Playback_Maximum_Swing;
    kal_int16 Melody_FIR_Coeff_Tbl[25];
    kal_int16 audio_compensation_coeff[2][45];
} nvram_ef_audio_param_struct;

 


typedef struct
{
    kal_uint8 name_length;
    kal_uint8 name_dcs;



    kal_uint8 name[32];

    kal_uint8 count;
    kal_uint8 addr_length;
    rtc_format_struct time;
    kal_uint8 addr_type;    



    kal_uint8 addr_bcd[41];

    kal_uint8 ccp2;         
    kal_uint8 adn_record_index;  
    kal_uint8 call_status;  
    kal_int32 call_duration;
} phb_ln_entry_struct;

typedef struct
{
    kal_uint8 no_entry;
    kal_uint8 padding1;
    kal_uint8 padding2;
    kal_uint8 padding3;
    phb_ln_entry_struct array[ 10 ];
} nvram_ef_phb_ln_struct;

typedef struct
{
    kal_uint8 type_seq[ ( (6* 2 ) *10/ 2 ) ];
} nvram_ef_phb_ln_type_seq_struct;

typedef struct
{
    PHB_OPTIONAL_IDS_STRUCT phb_ids[ 85 ];
} nvram_phb_ids_struct;


typedef struct
{
    kal_uint8 homeNumber[ 40  + 1 + 1];
    kal_uint8 companyName[( 20  + 1) * 2 ];
    kal_uint8 emailAddress[ 60  + 1];
    kal_uint8 officeNumber[ 40  + 1 + 1];
    kal_uint8 faxNumber[ 40  + 1 + 1];
} nvram_phb_fields_struct;


typedef struct
{
    kal_uint8 viewfieldStates[ 20 ];
} nvram_phb_settings_struct;

typedef struct
{
    PHB_CALLER_GROUP_STRUCT Friends;
    PHB_CALLER_GROUP_STRUCT Family;
    PHB_CALLER_GROUP_STRUCT VIP;
    PHB_CALLER_GROUP_STRUCT Business;
    PHB_CALLER_GROUP_STRUCT Others;
} nvram_phb_caller_groups_struct;

typedef struct
{
    kal_uint8 alpha_id[62];
    kal_uint8 BCD_length;
    kal_uint8 TON_NPI;
    kal_uint8 DialNum[20];
    kal_uint8 cc_ident;
    kal_uint8 pad;
} nvram_ef_phb_struct;

































typedef struct
{
    kal_uint8 nvram_ef_phb_birthday_field[ 1000 ];
} nvram_ef_phb_birthday_struct;












































typedef struct
{
    kal_uint8 me_manufacture_id[MAX_ME_ID_NUM][ 30 ];
} uem_context_manufacture_struct;

typedef struct
{

    kal_uint8 audio_mute_flag;   

    kal_uint8 gpio_status[MAX_GPIO_DEVICE_NUM];
    kal_uint8 silent_mode;

    kal_uint8 alert_mode;

    kal_uint8 country_code;
    kal_uint8 lang_id[2];

    kal_uint8 date_mode;
    kal_uint8 time_mode;

    kal_uint8 greeting_mode;
    rmi_greeting_text_struct greeting_text;

    rtc_alarm_info_struct alarm_info[ 3 ];
} uem_context_rmi_struct;

typedef struct _nvram_smsal_common_param_struct
{
    kal_uint8 bearer_service;
    kal_uint8 status_report;
    kal_uint8 reply_path;
    kal_uint8 vp_format;
    kal_uint8 prefer_mem1;
    kal_uint8 prefer_mem2;
    kal_uint8 prefer_mem3;
    kal_uint8 cbch_req;
    kal_uint8 all_lang_on;
    kal_uint8 rmi_act_pfile_id;
    kal_uint8 fo;
    kal_uint8 sms_fdn_off;
    kal_uint8 last_used_tp_mr;
    kal_uint8 mem_capacity_available;
} nvram_ef_smsal_common_param_struct;

typedef struct
{
    kal_uint8 context_id;
    kal_uint8 nsapi;
    kal_uint8 pdp_addr_type;
    kal_uint8 pdp_addr_len;
    kal_uint8 addr_val[4];
    nvram_editor_qos_struct req_qos;
    nvram_editor_qos_struct min_qos;
    kal_uint8 apn_len;
    kal_uint8 apn[100];
    kal_uint8 pcomp_algo;
    kal_uint8 dcomp_algo;
    kal_uint8 context_type;
    kal_uint8 primary_context_id;
    kal_uint8 is_sib_defined;
    kal_uint8 dns_val[4];
    kal_uint8 is_chap;
    kal_uint8 name_length;
    kal_uint8 name_dcs;
    kal_uint8 name[32];
    kal_uint8 user_name[16];
    kal_uint8 password[16];
    kal_uint8 reserved;
    kal_uint16 req_n201u; 
} nvram_ef_tcm_PDP_profile_record_struct;

typedef struct
{
    nvram_ef_csd_profile_struct DataAccount1;
    nvram_ef_csd_profile_struct DataAccount2;
    nvram_ef_csd_profile_struct DataAccount3;
    nvram_ef_csd_profile_struct DataAccount4;
    nvram_ef_csd_profile_struct DataAccount5;
    nvram_ef_csd_profile_struct DataAccount6;
    nvram_ef_csd_profile_struct DataAccount7;
    nvram_ef_csd_profile_struct DataAccount8;
    nvram_ef_csd_profile_struct DataAccount9;
    nvram_ef_csd_profile_struct DataAccount10;
} nvram_meta_csd_profile_struct;

typedef struct
{
    kal_uint8 testcount;
    kal_uint8 testlist[229];
    kal_uint8 rtc_sec;
    kal_uint8 rtc_min;
    kal_uint8 rtc_hour;
    kal_uint8 rtc_day;
    kal_uint8 rtc_mon;
    kal_uint8 rtc_wday;
    kal_uint8 rtc_year;
    kal_uint8 spare[18];
} nvram_ef_autotest_struct;

typedef struct
{
    kal_uint16 cbmi[10];
} nvram_ef_cb_default_ch_struct;

typedef struct
{
    kal_uint8 cust[ 16 ];
} nvram_ef_cust_struct;

typedef struct
{
    shct_item_struct shortcuts[ 250  / sizeof(shct_item_struct)];
}
nvram_shortcuts_struct;

typedef struct
{
    kal_uint8 setting[ 60 ];
} nvram_setting_struct;

typedef struct
{
    kal_uint8 ext_melody[ 1748 ];
} nvram_meta_ext_melody_struct;

typedef struct
{
    kal_uint8 imei[8];
    kal_uint8 svn;
    kal_uint8 pad;
} nvram_ef_imei_imeisv_struct;


typedef struct
{
    kal_char smsTemplate[ 84 ];
} nvram_sms_struct;



typedef struct
{
    kal_uint8 MsgContent[ 94 ];
} nvram_sms_cb_sms_struct;

typedef struct
{
    kal_uint8 MsgDCS[ 5 ];
    kal_uint8 MsgPage[ 5 ];
    kal_uint16 MsgMI[ 5 ];
} nvram_sms_cb_sms_info_struct;



typedef struct
{
    kal_char nickName[(8 + 1) *2];
    kal_uint8 destinationNo[(20 + 2)];
} nvram_chat_room_info_struct;

















typedef struct
{
    kal_uint8 data_account_record[ 200 ];
} nvram_data_account_record_struct;

typedef struct
{
    kal_uint8 type;  
    kal_uint8 length;
    kal_uint8 number[( 40  + 1 + 1) * 2 ];
} nvram_phonebook_sos_record_struct;

typedef struct
{
    SpeedDialInfo Number2;
    SpeedDialInfo Number3;
    SpeedDialInfo Number4;
    SpeedDialInfo Number5;
    SpeedDialInfo Number6;
    SpeedDialInfo Number7;
    SpeedDialInfo Number8;
    SpeedDialInfo Number9;

} nvram_phonebook_speeddial_record_struct;












typedef struct
{
    kal_uint8 nvram_todo_list_record[ sizeof(ToDoListNode) ];
} nvram_todo_list_record_struct;


typedef struct
{
    kal_uint8 name[34];
    kal_uint8 index;
    kal_uint8 dummy;
} nvram_group_lists_struct;

typedef struct
{
    kal_uint8 call_time[ 8 ];
} nvram_call_time_struct;



























 
typedef struct
{
    kal_uint8 nvram_ef_camera_setting[ 84 ];
} nvram_camera_setting_struct;



 
typedef struct
{
    kal_uint8 nvram_ef_video_setting[ 51 ];
} nvram_ef_video_setting_struct;










 
typedef struct
{
    kal_uint8 nvram_ef_fmgr_filepath_pool_head[ 510 ];
} nvram_ef_fmgr_filepath_pool_head_struct;

 
typedef struct
{
    kal_uint8 nvram_ef_fmgr_filepath_pool_tail[ 10 ];
} nvram_ef_fmgr_filepath_pool_tail_struct;

typedef struct
{
    PROFILE General;
    PROFILE Meeting;
    PROFILE Care;
    PROFILE Outdoor;
    PROFILE Indoor;
    PROFILE Reserve1;
    PROFILE Reserve2;
} nvram_meta_profile_struct;


typedef struct
{
    kal_uint8 nvram_ef_ip_number[ 22*3 ];
} nvram_ef_ip_number_struct;


typedef struct
{
    kal_uint8 nvram_alm_queue[ ( ( 50 + 1 + 5 + 4 + 1 + 0 )  * 10) ];
} nvram_alm_queue_struct;

typedef struct
{
    kal_uint8 nvram_alm_spof_data[  4  * sizeof(spof_nvram_struct) ];
} nvram_alm_spof_data_struct;

typedef struct
{
    kal_uint8 nvram_alm_alarm_data[  5  * sizeof(alm_nvram_struct) ];
} nvram_alm_alarm_data_struct;

typedef struct
{
    kal_uint8 nvram_ef_barcode_num[ 64 ];
} nvram_ef_barcode_num_struct;

typedef struct
{
    kal_uint8 CacheByte[ 8 ];
} nvram_sys_cache_octet_struct;

typedef struct
{
    kal_uint8 alpha_id[10];
    kal_uint8 BCD_length;
    kal_uint8 TON_NPI;
    kal_uint8 DialNum[10];
    kal_uint8 cc_ident;
    kal_uint8 pad;
} nvram_ef_smsal_mailbox_addr_struct;

typedef struct
{
    kal_uint8 status;
    kal_uint8 remainder[183];
} nvram_ef_smsal_sms_struct;

typedef struct
{
    kal_uint8 profile_name[12];  
    kal_uint8 para_ind;          
    kal_uint8 da[12];            
    kal_uint8 sca[12];           
    kal_uint8 pid;               
    kal_uint8 dcs;               
    kal_uint8 vp;                
} nvram_ef_smsal_smsp_struct;

typedef struct
{
    kal_uint8 nvram_wpss_filename[ 1228 ];
} nvram_wpss_filename_struct;


typedef struct
{
    kal_uint16 channel_name[9][21];
    kal_uint16 channel_freq[9];
} nvram_fm_radio_struct;


typedef struct
{
    kal_uint8 stopwatch_recored[ 1152 ];
} nvram_ef_stopwatch_struct;











































typedef struct
{
    kal_uint8 nvram_ef_bt_info[ 2000 ];
} nvram_ef_bt_info_struct;

typedef struct
{
   kal_uint8 BluetoothAddress[6];
   kal_uint8 MinEncryptionSize[1];
   kal_uint8 MaxEncryptionSize[1];
   kal_uint8 HCITransportLayerParameters[3];
   kal_uint8 FixedPIN[16];
   kal_uint8 FixedPINLength[1];
   kal_uint8 SleepEnableMask[1];
   kal_uint8 LowPowerClockParameter[8];
   kal_uint8 PowerControlConfiguration[13];
   kal_uint8 SleepControlParameters[12];
   kal_uint8 DebugControl[4];
   kal_uint8 LCandRMOverrideEnable[4];
   kal_uint8 RadioRegisterOverride[6];
   kal_uint8 CodecConfiguration[8];
   kal_uint8 CVSDGainVolumeSettings[6];
   kal_uint8 VoiceSettings[2];
   kal_uint8 UserBaudRate[3];

   kal_uint8 LowPowerDriftRate[1];
   kal_uint8 MaxTxPowerLevel[1];
   kal_uint8 AdaptiveFrequencyHoppingParameters[29];
   kal_uint8 BufferSize[4];
   kal_uint8 GpioMapping[16];
   kal_uint8 GpioPolarity[4];
}  nvram_ef_btradio_rfmd3500_struct;




typedef struct
{
    unsigned char BDAddr[6];
    unsigned char ClassOfDevice[3];
    unsigned char LinkKeyType[1];
    unsigned char UnitKey[16];
    unsigned char Encryption[3];
    unsigned char PinCodeType[1];
    unsigned char Voice[2];
    unsigned char Codec[1];
    unsigned char Radio[30];
    unsigned char Sleep[6];
    unsigned char MainOscillatorInfo[5];
    unsigned char LPOInfo[4];
    unsigned char AFH[9];
    unsigned char PTA[49];
    unsigned char WDT[2];
    unsigned char Debug[1];
    unsigned char UART[2];
}  nvram_ef_btradio_mt6601_struct;




typedef struct
{
    unsigned char BDAddr[6];
    unsigned char ClassOfDevice[3];
    unsigned char LinkKeyType[1];
    unsigned char UnitKey[16];
    unsigned char Encryption[3];
    unsigned char PinCodeType[1];
    unsigned char Voice[2];
    unsigned char Codec[1];
    unsigned char Radio[6];
    unsigned char Sleep[7];
}  nvram_ef_btradio_mt6611_struct;








































































































































































































typedef struct
{
  kal_uint8 nvram_ef_ebook_setting_field[ 8 ];
}nvram_ef_ebook_setting_struct;

typedef struct
{
  kal_uint8 nvram_ef_ebook_setting_field[ 8 ];
}nvram_ef_ebook_setting_default_struct;



typedef struct
{
  kal_uint8 nvram_ef_ebook_setting_field[ 1 ];
}nvram_ef_tv_channel_setting_struct;

typedef struct
{
  kal_uint8 nvram_ef_ebook_setting_field[ 1 ];
}nvram_ef_tv_channel_name_default_struct;





























typedef struct
{
    kal_uint32 lap;     
    kal_uint8 uap;      
    kal_uint16 nap;     
} nvram_ef_bt_addr;
typedef struct
{
    kal_uint32 cod;
    kal_uint8 name[47];  
    nvram_ef_bt_addr bd_addr;
    kal_uint8 authorise;
    kal_uint8 service_list_num;
    kal_uint32 service_list[23];
} nvram_ef_bt_dev_struct;
typedef struct
{
    kal_bool bt_a2dp_output;
    kal_bool bt_a2dp_headset_valid;
    nvram_ef_bt_dev_struct bt_a2dp_headset;
} nvram_ef_audio_player_bt_settings_struct;




typedef struct
{
    kal_uint32 group_filter;           
    kal_uint32 event_filter[EM_NW_MAX_NO_OF_GROUP];  
    kal_uint16 event_ring[ 100 ];
} nvram_ef_em_nw_event_setting_struct;






























typedef struct
{
    kal_uint8 band;
    kal_uint8 arg1;




} nvram_ef_rac_preference_struct;


typedef struct
{
	kal_uint8 nvram_ef_csb_settings[48];
} nvram_ef_csb_setting_struct;














































 


BEGIN_NVRAM_DATA
 











    LID_BIT   "003"   NVRAM_EF_CUST_ACOUSTIC_DATA_LID  
     custom_acoustic_struct * 1 
     {
         volume_gain:"Volume Gain:[Mode (Normal, Headset, LoudSpk)][Tone type (Tone, Keytone, MIC, Sound, Speech, SideTone, Melody) ][Level (1~7)]";
         volume:"Current Volume Level[Mode (Normal, Headset, LoudSpk)][Tone type (Tone, Keytone, MIC, Sound, Speech, SideTone, Melody) ]";
         max_melody_volume_gain: "Max Melody Volume Gain [Mode (Normal, Headset, LoudSpk, TvOut)]";
         melody_volume_gain_step: "Melody Volume Gain Step [Mode (Normal, Headset, LoudSpk, TvOut)]";
         tv_out_volume_gain: "Tv Out Melody Volume Gain";
     };

 











     LID_BIT MULTIPLE_LID   "001"   NVRAM_EF_AUDIO_PARAM_LID  
     nvram_ef_audio_param_struct * 1 
     {
       speech_input_FIR_coeffs:"speech_input_FIR_coeffs"
         {
         };
       speech_output_FIR_coeffs: "speech_output_FIR_coeffs"
         {
         };
       selected_FIR_output_index:"selected_FIR_output_index"
         {
         };
       speech_common_para:"speech_common_para"
         {
         };
       speech_mode_para: "speech_mode_para"
         {
         };
       Media_Playback_Maximum_Swing:"Media_Playback_Maximum_Swing"
         {
         };
       Melody_FIR_Coeff_Tbl:"Melody_FIR_Coeff_Tbl"
         {
         };
       audio_compensation_coeff:"audio_compensation_coeff"
         {
         };
     };

 











LID_BIT   "001"   NVRAM_EF_CUST_HW_LEVEL_TBL_LID  
     custom_hw_level_struct * 1 
     {
         PWM1:" PWM1[Level][0]: freq, PWM1[Level][1]: duty";
         PWM2:" PWM2[Level][0]: freq, PWM2[Level][1]: duty";
         PWM3:" PWM3[Level][0]: freq, PWM3[Level][1]: duty";

         MainLCD_Contrast:" MainLCD Contrast [Level 1 ~ 15]";
          




         SubLCD_Contrast:" SubLCD Contrast [Level 1 ~ 15]";
          




         BatteryLevel:" Battery Level [Level 1 ~ 10 ] ";

     };

 
     LID_BIT   "001"   NVRAM_EF_IP_NUMBER_LID  
     nvram_ef_ip_number_struct * 1 
     {
     };
 

     LID_BIT   "001"   NVRAM_EF_SHORTCUTS_LID  
     nvram_shortcuts_struct * 2 
     {
         shortcuts:"List of default shortcut menu IDs";
         shortcuts[0]
         {
           Shortcut1:24 "Menu ID of default shortcut 1"
             {
             };
         };
         shortcuts[1]
         {
           Shortcut2:24 "Menu ID of default shortcut 2"
             {
             };
         };
         shortcuts[2]
         {
           Shortcut3:24 "Menu ID of default shortcut 3"
             {
             };
         };
         shortcuts[3]
         {
           Shortcut4:24 "Menu ID of default shortcut 4"
             {
             };
         };
         shortcuts[4]
         {
           Shortcut5:24 "Menu ID of default shortcut 5"
             {
             };
         };
         shortcuts[5]
         {
           Shortcut6:24 "Menu ID of default shortcut 6"
             {
             };
         };
         shortcuts[6]
         {
           Shortcut7:24 "Menu ID of default shortcut 7"
             {
             };
         };
         shortcuts[7]
         {
           Shortcut8:24 "Menu ID of default shortcut 8"
             {
             };
         };
         shortcuts[8]
         {
           Shortcut9:24 "Menu ID of default shortcut 9"
             {
             };
         };
         shortcuts[9]
         {
           Shortcut10:24 "Menu ID of default shortcut 10"
             {
             };
         };
     };

LID_BIT   "001"   NVRAM_EF_SETTING_LID  
     nvram_setting_struct * 1 
     {
         setting:"Welcome text";
     };

 
     LID_BIT   "001"   NVRAM_EF_SMS_LID  
     nvram_sms_struct * 31 
     {
         smsTemplate:"SMS Template"
         {
         };
     };
 

 
LID_BIT   "001"   NVRAM_EF_SMS_CB_CHNL_LID  
     nvram_sms_cb_chnl_struct * 1 
     {
         l4MidIndex:"L4 Index"
         {
         };

       chnlNames1:"Channel 1"
         {
         };
       chnlNames1.NameDCS:"Channel 1 Name DCS"
         {
         };
       chnlNames1.Name:"Channel 1 Name"
         {
         };

       chnlNames2:"Channel 2"
         {
         };
       chnlNames2.NameDCS:"Channel 2 Name DCS"
         {
         };
       chnlNames2.Name:"Channel 2 Name"
         {
         };

       chnlNames3:"Channel 3"
         {
         };
       chnlNames3.NameDCS:"Channel 3 Name DCS"
         {
         };
       chnlNames3.Name:"Channel 3 Name"
         {
         };

       chnlNames4:"Channel 4"
         {
         };
       chnlNames4.NameDCS:"Channel 4 Name DCS"
         {
         };
       chnlNames4.Name:"Channel 4 Name"
         {
         };

       chnlNames5:"Channel 5"
         {
         };
       chnlNames5.NameDCS:"Channel 5 Name DCS"
         {
         };
       chnlNames5.Name:"Channel 5 Name"
         {
         };

       chnlNames6:"Channel 6"
         {
         };
       chnlNames6.NameDCS:"Channel 6 Name DCS"
         {
         };
       chnlNames6.Name:"Channel 6 Name"
         {
         };

       chnlNames7:"Channel 7"
         {
         };
       chnlNames7.NameDCS:"Channel 7 Name DCS"
         {
         };
       chnlNames7.Name:"Channel 7 Name"
         {
         };

       chnlNames8:"Channel 8"
         {
         };
       chnlNames8.NameDCS:"Channel 8 Name DCS"
         {
         };
       chnlNames8.Name:"Channel 8 Name"
         {
         };

       chnlNames9:"Channel 9"
         {
         };
       chnlNames9.NameDCS:"Channel 9 Name DCS"
         {
         };
       chnlNames9.Name:"Channel 9 Name"
         {
         };

       chnlNames10:"Channel 10"
         {
         };
       chnlNames10.NameDCS:"Channel 10 Name DCS"
         {
         };
       chnlNames10.Name:"Channel 10 Name"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_SMS_CB_SMS_LID  
     nvram_sms_cb_sms_struct * 30 
     {
         MsgContent:"Contents of CB Messages"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_SMS_CB_SMS_INFO_LID  
     nvram_sms_cb_sms_info_struct * 1 
     {
         MsgDCS:"DCS of CB Messages"
         {
         };

       MsgPage:"Page number of CB Messages"
         {
         };
       MsgMI:"MI of CB Messages"
         {
         };
     };
 

 
LID_BIT   "001"   NVRAM_EF_CHAT_ROOM_INFO_LID  
     nvram_chat_room_info_struct * 2 
     {
         nickName:"nickname"
         {
         };

       destinationNo:"destinationNo"
         {
         };
     };
 
 



























































































LID_BIT   "001"   NVRAM_EF_PHONEBOOK_SOS_LID  
     nvram_phonebook_sos_record_struct * 10 
     {
         type:"Number Type: 129-default, 145-international"
         {
         };

       length:"Number Length"
         {
         };
       number:"Number"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_PHONEBOOK_SPEEDDIAL_LID  
     nvram_phonebook_speeddial_record_struct * 1 
     {

         Number2:"Speed Dial Number Accociate with Key 2"
         {
         };

       Number2.type:"Number Type: 129-default, 145-international"
         {
         };
       Number2.storage:"Storage Location: 1-SIM 2-PHONE"
         {
         };
       Number2.record_index:"Record Index"
         {
         };
       Number2.number:"Number"
         {
         };
       Number2.name:"Name"
         {
         };

       Number3:"Speed Dial Number Accociate with Key 3"
         {
         };
       Number3.type:"Number Type: 129-default, 145-international"
         {
         };
       Number3.storage:"Storage Location: 1-SIM 2-PHONE"
         {
         };
       Number3.record_index:"Record Index"
         {
         };
       Number3.number:"Number"
         {
         };
       Number3.name:"Name"
         {
         };

       Number4:"Speed Dial Number Accociate with Key 4"
         {
         };
       Number4.type:"Number Type: 129-default, 145-international"
         {
         };
       Number4.storage:"Storage Location: 1-SIM 2-PHONE"
         {
         };
       Number4.record_index:"Record Index"
         {
         };
       Number4.number:"Number"
         {
         };
       Number4.name:"Name"
         {
         };

       Number5:"Speed Dial Number Accociate with Key 5"
         {
         };
       Number5.type:"Number Type: 129-default, 145-international"
         {
         };
       Number5.storage:"Storage Location: 1-SIM 2-PHONE"
         {
         };
       Number5.record_index:"Record Index"
         {
         };
       Number5.number:"Number"
         {
         };
       Number5.name:"Name"
         {
         };

       Number6:"Speed Dial Number Accociate with Key 6"
         {
         };
       Number6.type:"Number Type: 129-default, 145-international"
         {
         };
       Number6.storage:"Storage Location: 1-SIM 2-PHONE"
         {
         };
       Number6.record_index:"Record Index"
         {
         };
       Number6.number:"Number"
         {
         };
       Number6.name:"Name"
         {
         };

       Number7:"Speed Dial Number Accociate with Key 7"
         {
         };
       Number7.type:"Number Type: 129-default, 145-international"
         {
         };
       Number7.storage:"Storage Location: 1-SIM 2-PHONE"
         {
         };
       Number7.record_index:"Record Index"
         {
         };
       Number7.number:"Number"
         {
         };
       Number7.name:"Name"
         {
         };

       Number8:"Speed Dial Number Accociate with Key 8"
         {
         };
       Number8.type:"Number Type: 129-default, 145-international"
         {
         };
       Number8.storage:"Storage Location: 1-SIM 2-PHONE"
         {
         };
       Number8.record_index:"Record Index"
         {
         };
       Number8.number:"Number"
         {
         };
       Number8.name:"Name"
         {
         };

       Number9:"Speed Dial Number Accociate with Key 9"
         {
         };
       Number9.type:"Number Type: 129-default, 145-international"
         {
         };
       Number9.storage:"Storage Location: 1-SIM 2-PHONE"
         {
         };
       Number9.record_index:"Record Index"
         {
         };
       Number9.number:"Number"
         {
         };
       Number9.name:"Name"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_PROFILES_LID  
     nvram_meta_profile_struct * 2 
     {
         General:"General Profile"
         {
         };

       General.ringVolumeLevel:"Ring Volume Level"
         {
         };
       General.keypadVolumeLevel:"Keypad Volume Level "
         {
         };
       General.loudSpeakerVolumeLevel:"Loud Speaker Volume Level"
         {
         };
       General.mtCallAlertTypeEnum:"MT Call Alert Type"
         {
         };
       General.light:"Light"
         {
         };
       General.ringTypeEnum:"Ring type"
         {
         };
       General.toneSetup:"Tone Setup"
         {
         };
       General.answeringMode:"Answering mode"
         {
         };
       General.fontSizeEnum:"Font Size"
         {
         };
       General.intelligentCallAlert:"Intelligent Call Alert"
         {
         };
       General.extraTone:"Extra Tone"
         {
         };

       Meeting:"Meeting Profile"
         {
         };
       Meeting.ringVolumeLevel:"Ring Volume Level"
         {
         };
       Meeting.keypadVolumeLevel:"Keypad Volume Level "
         {
         };
       Meeting.loudSpeakerVolumeLevel:"Loud Speaker Volume Level"
         {
         };
       Meeting.mtCallAlertTypeEnum:"MT Call Alert Type"
         {
         };
       Meeting.light:"Light"
         {
         };
       Meeting.ringTypeEnum:"Ring type"
         {
         };
       Meeting.toneSetup:"Tone Setup"
         {
         };
       Meeting.answeringMode:"Answering mode"
         {
         };
       Meeting.fontSizeEnum:"Font Size"
         {
         };
       Meeting.intelligentCallAlert:"Intelligent Call Alert"
         {
         };
       Meeting.extraTone:"Extra Tone"
         {
         };

       Care:"Care Profile"
         {
         };
       Care.ringVolumeLevel:"Ring Volume Level"
         {
         };
       Care.keypadVolumeLevel:"Keypad Volume Level "
         {
         };
       Care.loudSpeakerVolumeLevel:"Loud Speaker Volume Level"
         {
         };
       Care.mtCallAlertTypeEnum:"MT Call Alert Type"
         {
         };
       Care.light:"Light"
         {
         };
       Care.ringTypeEnum:"Ring type"
         {
         };
       Care.toneSetup:"Tone Setup"
         {
         };
       Care.answeringMode:"Answering mode"
         {
         };
       Care.fontSizeEnum:"Font Size"
         {
         };
       Care.intelligentCallAlert:"Intelligent Call Alert"
         {
         };
       Care.extraTone:"Extra Tone"
         {
         };

       Outdoor:"Outdoor Profile"
         {
         };
       Outdoor.ringVolumeLevel:"Ring Volume Level"
         {
         };
       Outdoor.keypadVolumeLevel:"Keypad Volume Level "
         {
         };
       Outdoor.loudSpeakerVolumeLevel:"Loud Speaker Volume Level"
         {
         };
       Outdoor.mtCallAlertTypeEnum:"MT Call Alert Type"
         {
         };
       Outdoor.light:"Light"
         {
         };
       Outdoor.ringTypeEnum:"Ring type"
         {
         };
       Outdoor.toneSetup:"Tone Setup"
         {
         };
       Outdoor.answeringMode:"Answering mode"
         {
         };
       Outdoor.fontSizeEnum:"Font Size"
         {
         };
       Outdoor.intelligentCallAlert:"Intelligent Call Alert"
         {
         };
       Outdoor.extraTone:"Extra Tone"
         {
         };

       Indoor:"Indoor Profile"
         {
         };
       Indoor.ringVolumeLevel:"Ring Volume Level"
         {
         };
       Indoor.keypadVolumeLevel:"Keypad Volume Level "
         {
         };
       Indoor.loudSpeakerVolumeLevel:"Loud Speaker Volume Level"
         {
         };
       Indoor.mtCallAlertTypeEnum:"MT Call Alert Type"
         {
         };
       Indoor.light:"Light"
         {
         };
       Indoor.ringTypeEnum:"Ring type"
         {
         };
       Indoor.toneSetup:"Tone Setup"
         {
         };
       Indoor.answeringMode:"Answering mode"
         {
         };
       Indoor.fontSizeEnum:"Font Size"
         {
         };
       Indoor.intelligentCallAlert:"Intelligent Call Alert"
         {
         };
       Indoor.extraTone:"Extra Tone"
         {
         };

       Reserve1:"Reserve1 Profile"
         {
         };
       Reserve1.ringVolumeLevel:"Ring Volume Level"
         {
         };
       Reserve1.keypadVolumeLevel:"Keypad Volume Level "
         {
         };
       Reserve1.loudSpeakerVolumeLevel:"Loud Speaker Volume Level"
         {
         };
       Reserve1.mtCallAlertTypeEnum:"MT Call Alert Type"
         {
         };
       Reserve1.light:"Light"
         {
         };
       Reserve1.ringTypeEnum:"Ring type"
         {
         };
       Reserve1.toneSetup:"Tone Setup"
         {
         };
       Reserve1.answeringMode:"Answering mode"
         {
         };
       Reserve1.fontSizeEnum:"Font Size"
         {
         };
       Reserve1.intelligentCallAlert:"Intelligent Call Alert"
         {
         };
       Reserve1.extraTone:"Extra Tone"
         {
         };

       Reserve2:"Reserve2 Profile"
         {
         };
       Reserve2.ringVolumeLevel:"Ring Volume Level"
         {
         };
       Reserve2.keypadVolumeLevel:"Keypad Volume Level "
         {
         };
       Reserve2.loudSpeakerVolumeLevel:"Loud Speaker Volume Level"
         {
         };
       Reserve2.mtCallAlertTypeEnum:"MT Call Alert Type"
         {
         };
       Reserve2.light:"Light"
         {
         };
       Reserve2.ringTypeEnum:"Ring type"
         {
         };
       Reserve2.toneSetup:"Tone Setup"
         {
         };
       Reserve2.answeringMode:"Answering mode"
         {
         };
       Reserve2.fontSizeEnum:"Font Size"
         {
         };
       Reserve2.intelligentCallAlert:"Intelligent Call Alert"
         {
         };
       Reserve2.extraTone:"Extra Tone"
         {
         };
     };

 


















 
LID_BIT   "001"   NVRAM_EF_TODO_LIST_LID  
     nvram_todo_list_record_struct *  50  
     {
     };
 
     LID_BIT   "001"   NVRAM_EF_GROUPLIST_LID  
     nvram_group_lists_struct * 12 
     {
         name:"CUG Name"
         {
         };

       index:"CUG Index"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_CALL_TIME_LID  
     nvram_call_time_struct * (3 *  2 ) 
     {
     };

 
     LID_BIT   "001"   NVRAM_EF_CSD_PROFILE_LID  
     nvram_meta_csd_profile_struct * 1 
     {
         DataAccount1:"Data Account 1"
         {
         };

       DataAccount1.addr:"dial-up addr struct"
         {
         };
       DataAccount1.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount1.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount1.csd_ur:"data call user rate"
         {
         };
       DataAccount1.csd_type:"data call type"
         {
         };
       DataAccount1.csd_module:"data module to be used"
         {
         };
       DataAccount1.auth_type:"authentication type"
         {
         };
       DataAccount1.user_id:"user authentication ID"
         {
         };
       DataAccount1.user_pwd:"user authentication password"
         {
         };
       DataAccount1.dns_addr:"DNS server address"
         {
         };
       DataAccount1.name:"Profile name struct"
         {
         };
       DataAccount1.name.name_length:"Profile name length"
         {
         };
       DataAccount1.name.name_dcs:"name_dcs"
         {
         };
       DataAccount1.name.name:"Profile name";

       DataAccount2:"Data Account 2"
         {
         };
       DataAccount2.addr:"dial-up addr struct"
         {
         };
       DataAccount2.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount2.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount2.csd_ur:"data call user rate"
         {
         };
       DataAccount2.csd_type:"data call type"
         {
         };
       DataAccount2.csd_module:"data module to be used"
         {
         };
       DataAccount2.auth_type:"authentication type"
         {
         };
       DataAccount2.user_id:"user authentication ID"
         {
         };
       DataAccount2.user_pwd:"user authentication password"
         {
         };
       DataAccount2.dns_addr:"DNS server address"
         {
         };
       DataAccount2.name:"Profile name struct"
         {
         };
       DataAccount2.name.name_length:"Profile name length"
         {
         };
       DataAccount2.name.name_dcs:"name_dcs"
         {
         };
       DataAccount2.name.name:"Profile name";

       DataAccount3:"Data Account 3"
         {
         };
       DataAccount3.addr:"dial-up addr struct"
         {
         };
       DataAccount3.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount3.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount3.csd_ur:"data call user rate"
         {
         };
       DataAccount3.csd_type:"data call type"
         {
         };
       DataAccount3.csd_module:"data module to be used"
         {
         };
       DataAccount3.auth_type:"authentication type"
         {
         };
       DataAccount3.user_id:"user authentication ID"
         {
         };
       DataAccount3.user_pwd:"user authentication password"
         {
         };
       DataAccount3.dns_addr:"DNS server address"
         {
         };
       DataAccount3.name:"Profile name struct"
         {
         };
       DataAccount3.name.name_length:"Profile name length"
         {
         };
       DataAccount3.name.name_dcs:"name_dcs"
         {
         };
       DataAccount3.name.name:"Profile name";

       DataAccount4:"Data Account 4"
         {
         };
       DataAccount4.addr:"dial-up addr struct"
         {
         };
       DataAccount4.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount4.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount4.csd_ur:"data call user rate"
         {
         };
       DataAccount4.csd_type:"data call type"
         {
         };
       DataAccount4.csd_module:"data module to be used"
         {
         };
       DataAccount4.auth_type:"authentication type"
         {
         };
       DataAccount4.user_id:"user authentication ID"
         {
         };
       DataAccount4.user_pwd:"user authentication password"
         {
         };
       DataAccount4.dns_addr:"DNS server address"
         {
         };
       DataAccount4.name:"Profile name struct"
         {
         };
       DataAccount4.name.name_length:"Profile name length"
         {
         };
       DataAccount4.name.name_dcs:"name_dcs"
         {
         };
       DataAccount4.name.name:"Profile name";

       DataAccount5:"Data Account 5"
         {
         };
       DataAccount5.addr:"dial-up addr struct"
         {
         };
       DataAccount5.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount5.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount5.csd_ur:"data call user rate"
         {
         };
       DataAccount5.csd_type:"data call type"
         {
         };
       DataAccount5.csd_module:"data module to be used"
         {
         };
       DataAccount5.auth_type:"authentication type"
         {
         };
       DataAccount5.user_id:"user authentication ID"
         {
         };
       DataAccount5.user_pwd:"user authentication password"
         {
         };
       DataAccount5.dns_addr:"DNS server address"
         {
         };
       DataAccount5.name:"Profile name struct"
         {
         };
       DataAccount5.name.name_length:"Profile name length"
         {
         };
       DataAccount5.name.name_dcs:"name_dcs"
         {
         };
       DataAccount5.name.name:"Profile name";

       DataAccount6:"Data Account 6"
         {
         };
       DataAccount6.addr:"dial-up addr struct"
         {
         };
       DataAccount6.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount6.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount6.csd_ur:"data call user rate"
         {
         };
       DataAccount6.csd_type:"data call type"
         {
         };
       DataAccount6.csd_module:"data module to be used"
         {
         };
       DataAccount6.auth_type:"authentication type"
         {
         };
       DataAccount6.user_id:"user authentication ID"
         {
         };
       DataAccount6.user_pwd:"user authentication password"
         {
         };
       DataAccount6.dns_addr:"DNS server address"
         {
         };
       DataAccount6.name:"Profile name struct"
         {
         };
       DataAccount6.name.name_length:"Profile name length"
         {
         };
       DataAccount6.name.name_dcs:"name_dcs"
         {
         };
       DataAccount6.name.name:"Profile name";

       DataAccount7:"Data Account 7"
         {
         };
       DataAccount7.addr:"dial-up addr struct"
         {
         };
       DataAccount7.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount7.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount7.csd_ur:"data call user rate"
         {
         };
       DataAccount7.csd_type:"data call type"
         {
         };
       DataAccount7.csd_module:"data module to be used"
         {
         };
       DataAccount7.auth_type:"authentication type"
         {
         };
       DataAccount7.user_id:"user authentication ID"
         {
         };
       DataAccount7.user_pwd:"user authentication password"
         {
         };
       DataAccount7.dns_addr:"DNS server address"
         {
         };
       DataAccount7.name:"Profile name struct"
         {
         };
       DataAccount7.name.name_length:"Profile name length"
         {
         };
       DataAccount7.name.name_dcs:"name_dcs"
         {
         };
       DataAccount7.name.name:"Profile name";

       DataAccount8:"Data Account 8"
         {
         };
       DataAccount8.addr:"dial-up addr struct"
         {
         };
       DataAccount8.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount8.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount8.csd_ur:"data call user rate"
         {
         };
       DataAccount8.csd_type:"data call type"
         {
         };
       DataAccount8.csd_module:"data module to be used"
         {
         };
       DataAccount8.auth_type:"authentication type"
         {
         };
       DataAccount8.user_id:"user authentication ID"
         {
         };
       DataAccount8.user_pwd:"user authentication password"
         {
         };
       DataAccount8.dns_addr:"DNS server address"
         {
         };
       DataAccount8.name:"Profile name struct"
         {
         };
       DataAccount8.name.name_length:"Profile name length"
         {
         };
       DataAccount8.name.name_dcs:"name_dcs"
         {
         };
       DataAccount8.name.name:"Profile name";

       DataAccount9:"Data Account 9"
         {
         };
       DataAccount9.addr:"dial-up addr struct"
         {
         };
       DataAccount9.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount9.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount9.csd_ur:"data call user rate"
         {
         };
       DataAccount9.csd_type:"data call type"
         {
         };
       DataAccount9.csd_module:"data module to be used"
         {
         };
       DataAccount9.auth_type:"authentication type"
         {
         };
       DataAccount9.user_id:"user authentication ID"
         {
         };
       DataAccount9.user_pwd:"user authentication password"
         {
         };
       DataAccount9.dns_addr:"DNS server address"
         {
         };
       DataAccount9.name:"Profile name struct"
         {
         };
       DataAccount9.name.name_length:"Profile name length"
         {
         };
       DataAccount9.name.name_dcs:"name_dcs"
         {
         };
       DataAccount9.name.name:"Profile name";

       DataAccount10:"Data Account 10"
         {
         };
       DataAccount10.addr:"dial-up addr struct"
         {
         };
       DataAccount10.addr.addr_length:"dial-up phone number length"
         {
         };
       DataAccount10.addr.addr_bcd:"dial-up phone number in BCD"
         {
         };
       DataAccount10.csd_ur:"data call user rate"
         {
         };
       DataAccount10.csd_type:"data call type"
         {
         };
       DataAccount10.csd_module:"data module to be used"
         {
         };
       DataAccount10.auth_type:"authentication type"
         {
         };
       DataAccount10.user_id:"user authentication ID"
         {
         };
       DataAccount10.user_pwd:"user authentication password"
         {
         };
       DataAccount10.dns_addr:"DNS server address"
         {
         };
       DataAccount10.name:"Profile name struct"
         {
         };
       DataAccount10.name.name_length:"Profile name length"
         {
         };
       DataAccount10.name.name_dcs:"name_dcs"
         {
         };
       DataAccount10.name.name:"Profile name";
     };
 


























 
LID_BIT   "001"   NVRAM_EF_CAMERA_SETTING_LID  
     nvram_camera_setting_struct * 1 
     {
     };


 
 
     LID_BIT   "001"   NVRAM_EF_VIDEO_SETTING_LID  
     nvram_ef_video_setting_struct * 1 
     {
     };
 
 






 
 
 
     LID_BIT   "001"   NVRAM_EF_FMGR_FILEPATH_POOL_HEAD_LID  
     nvram_ef_fmgr_filepath_pool_head_struct *  ( 1  +  1  +  0  +  0  +  0  +  0 )  
     {
     };
     LID_BIT   "001"   NVRAM_EF_FMGR_FILEPATH_POOL_TAIL_LID  
     nvram_ef_fmgr_filepath_pool_tail_struct *  ( 1  +  1  +  0  +  0  +  0  +  0 )  
     {
     };
 
 
     LID_BIT   "001"   NVRAM_EF_ABM_GPRS_PROFILE_LID  
     nvram_meta_abm_gprs_profile_struct * 10 
     {
     };
 
     LID_BIT   "001"   NVRAM_EF_EXT_MELODY_INFO_LID  
     nvram_meta_ext_melody_struct * 1 
     {
     };

     LID_BIT MULTIPLE_LID   "001"   NVRAM_EF_IMEI_IMEISV_LID  
     nvram_ef_imei_imeisv_struct * (1 *  2 ) 
     {
         imei:"The IMEI is 15 digit"
         {
         };

       svn:"Software version number"
         {
         };
       pad:"Padding Byte"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_ALM_QUEUE_LID  
     nvram_alm_queue_struct * 1 
     {
     };

     LID_BIT   "001"   NVRAM_EF_ALM_SPOF_DATA_LID  
     nvram_alm_spof_data_struct * 1 
     {
     };

     LID_BIT MULTIPLE_LID   "001"   NVRAM_EF_ADC_LID  
     ADC_CALIDATA * 1 
     {
         ADCSlope:"ADC Slop";
         ADCOffset:"ADC Offset";
     };

     LID_BIT MULTIPLE_LID   "001"   NVRAM_EF_BARCODE_NUM_LID  
     nvram_ef_barcode_num_struct * 1 
     {
         nvram_ef_barcode_num:"Barcode Serial Number"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_SYS_CACHE_OCTET_LID  
     nvram_sys_cache_octet_struct * 50 
     {
     };

     LID_BIT   "001"   NVRAM_EF_PHB_IDS_LID  
     nvram_phb_ids_struct * ((  300  -1) /  85  + 1) 
     {
         phb_ids:"phonebook IDs"
         {
         };

       phb_ids.pictureTagID:"Picture tag ID"
         {
         };
       phb_ids.ringToneID:"Ring tone ID"
         {
         };
       phb_ids.callerGroupID:"Caller group ID"
         {
         };
     };


LID_BIT   "001"   NVRAM_EF_PHB_FIELDS_LID  
     nvram_phb_fields_struct *  300  
     {
         homeNumber:"Home Number"
         {
         };

       companyName:"Company Name"
         {
         };
       emailAddress:"Email Address"
         {
         };
       officeNumber:"Office Number"
         {
         };
       faxNumber:"Fax Number"
         {
         };
     };
 

LID_BIT   "001"   NVRAM_EF_PHB_SETTINGS_LID  
     nvram_phb_settings_struct * 1 
     {
         viewfieldStates:"Home # / Company Name / Email / Business # / Fax / Picture / Ring Tone / Caller Group"
         {
         };

         viewfieldStates[0]
         {
           Home:8 "Home # Setting"
             {
               0x00:"Set indication inactive";
               0x01:"Set indication active";
             };
         };

         viewfieldStates[1]
         {
           Company:8 "Company Name Setting"
             {
               0x00:"Set indication inactive";
               0x01:"Set indication active";
             };
         };

         viewfieldStates[2]
         {
           Email:8 "Email Setting"
             {
               0x00:"Set indication inactive";
               0x01:"Set indication active";
             };
         };

         viewfieldStates[3]
         {
           Business:8 "Business # Setting"
             {
               0x00:"Set indication inactive";
               0x01:"Set indication active";
             };
         };

         viewfieldStates[4]
         {
           Fax:8 "Fax Setting"
             {
               0x00:"Set indication inactive";
               0x01:"Set indication active";
             };
         };

         viewfieldStates[5]
         {
           Picture:8 "Picture Setting"
             {
               0x00:"Set indication inactive";
               0x01:"Set indication active";
             };
         };

         viewfieldStates[6]
         {
           RingTone:8 "Ring Tone Setting"
             {
               0x00:"Set indication inactive";
               0x01:"Set indication active";
             };
         };

         viewfieldStates[7]
         {
           CallerGroup:8 "Caller Group Setting"
             {
               0x00:"Set indication inactive";
               0x01:"Set indication active";
             };
         };
     };
LID_BIT   "001"   NVRAM_EF_PHB_CALLER_GROUPS_LID  
     nvram_phb_caller_groups_struct * 1 
     {
         Friends:"Friends Caller Group"
         {
         };

       Friends.groupName:"Name"
         {
         };
       Friends.alertType:"Alert Type"
         {
         };
       Friends.ringToneID:"Ring Tone ID"
         {
         };
       Friends.pictureTagID:"Picture ID"
         {
         };
       Friends.LEDPatternId:"LED Pattern ID"
         {
         };
       Friends.VideoID:"VideoID"
         {
         };
       Friends.is_modified:"Is record modified"
         {
         };

       Family:"Family Caller Group"
         {
         };
       Family.groupName:"Name"
         {
         };
       Family.alertType:"Alert Type"
         {
         };
       Family.ringToneID:"Ring Tone ID"
         {
         };
       Family.pictureTagID:"Picture ID"
         {
         };
       Family.LEDPatternId:"LED Pattern ID"
         {
         };
       Family.VideoID:"VideoID"
         {
         };
       Family.is_modified:"Is record modified"
         {
         };

       VIP:"VIP Caller Group"
         {
         };
       VIP.groupName:"Name"
         {
         };
       VIP.alertType:"Alert Type"
         {
         };
       VIP.ringToneID:"Ring Tone ID"
         {
         };
       VIP.pictureTagID:"Picture ID"
         {
         };
       VIP.LEDPatternId:"LED Pattern ID"
         {
         };
       VIP.VideoID:"VideoID"
         {
         };
       VIP.is_modified:"Is record modified"
         {
         };

       Business:"Business Caller Group"
         {
         };
       Business.groupName:"Name"
         {
         };
       Business.alertType:"Alert Type"
         {
         };
       Business.ringToneID:"Ring Tone ID"
         {
         };
       Business.pictureTagID:"Picture ID"
         {
         };
       Business.LEDPatternId:"LED Pattern ID"
         {
         };
       Business.VideoID:"VideoID"
         {
         };
       Business.is_modified:"Is record modified"
         {
         };

       Others:"Others Caller Group"
         {
         };
       Others.groupName:"Name"
         {
         };
       Others.alertType:"Alert Type"
         {
         };
       Others.ringToneID:"Ring Tone ID"
         {
         };
       Others.pictureTagID:"Picture ID"
         {
         };
       Others.LEDPatternId:"LED Pattern ID"
         {
         };
       Others.VideoID:"VideoID"
         {
         };
       Others.is_modified:"Is record modified"
         {
         };

     };
LID_BIT   "001"   NVRAM_EF_PHB_VCARD_LID  
     kal_uint8 * 338 
     {
     };

LID_BIT   "001"   NVRAM_EF_PHB_LID  
     nvram_ef_phb_struct *  300  
     {
         alpha_id:"Alpha identifier"
         {
         };

       BCD_length:"Length of BCD number"
         {
         };
       TON_NPI:"TON and NPI"
         {
         };
       DialNum:"Dailling number"
         {
         };
       cc_ident:"Capability/ configuration identifier"
         {
         };
       pad:"Extension 1 record identifier"
         {
         };
     };


LID_BIT   "001"   NVRAM_EF_PHB_LN_ENTRY_LID  
     nvram_ef_phb_ln_struct * (6* 2 ) 
     {
         no_entry:"Numbers of entries"
         {
         };
         padding1:"padding1"
         {
         };

         padding2:"padding2"
         {
         };
         padding3:"padding3"
         {
         };
       array:"Last Number information"
         {
         };
       array.name_length:"name length"
         {
         };
       array.name_dcs:"name dcs"
         {
         };
       array.name:"name"
         {
         };
       array.count:"count"
         {
         };
       array.addr_length:"addr length"
         {
         };
       array.addr_type:"addr type"
         {
         };
       array.addr_bcd:"addr bcd"
         {
         };
       array.ccp2:"ccp2"
         {
         };
       array.adn_record_index:"adn record index"
         {
         };
       array.call_status:"call status"
         {
         };
       array.call_duration:"call duration"
         {
         };
       array.time:"Call time"
         {
         };
       array.time.rtc_sec:"Second"
         {
         };
       array.time.rtc_min:"Minute"
         {
         };
       array.time.rtc_hour:"Hour"
         {
         };
       array.time.rtc_day:"Day"
         {
         };
       array.time.rtc_mon:"Month"
         {
         };
       array.time.rtc_wday:"Week day"
         {
         };
       array.time.rtc_year:"Year"
         {
         };
     };

 





 





     LID_BIT   "001"   NVRAM_EF_PHB_LN_TYPE_SEQ_LID  
     nvram_ef_phb_ln_type_seq_struct * (1* 2 ) 
     {
     };
     LID_BIT   "001"   NVRAM_EF_PHB_COMPARE_DIGIT_LID  
     kal_uint8 * 1 
     {
     };
 
     LID_BIT   "001"   NVRAM_EF_PHB_BIRTHDAY_LID  
     nvram_ef_phb_birthday_struct * ((  300  -1) /  250  + 1) 
     {
     };
 
 





 





 





 





 






     LID_BIT   "001"   NVRAM_EF_UEM_MANUFACTURE_DATA_LID  
     uem_context_manufacture_struct * 1 
     {
         me_manufacture_id:""
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_UEM_RMI_DATA_LID  
     uem_context_rmi_struct * 1 
     {

         audio_mute_flag:"Audio mute flag"
         {
         };

       gpio_status:"GPIO status"
         {
         };
       silent_mode:"Silent mode ON/OFF"
         {
         };
       alert_mode:"Alert mode"
         {
         };
       country_code:"Country code"
         {
         };
       lang_id:"Language identifier"
         {
         };
       date_mode:"Date mode"
         {
         };
       time_mode:"Time mode"
         {
         };
       greeting_mode:"Greeting mode"
         {
         };
       greeting_text:"Greeting Text"
         {
         };
       greeting_text.text_dcs:"dcs"
         {
         };
       greeting_text.text_length:"Length"
         {
         };
       greeting_text.text:"context"
         {
         };

       alarm_info:"Alarm Information"
         {
         };
       alarm_info.alarm_format:"Alarm format"
         {
         };
       alarm_info.alarm_index:"Alarm index"
         {
         };
       alarm_info.type:"Alarm Type"
         {
         };
       alarm_info.text:"Alarm Text"
         {
         };
       alarm_info.recurr:"Alarm recurrence"
         {
         };

       alarm_info.data_time:"Alarm date and time"
         {
         };
       alarm_info.data_time.rtc_sec:"Second"
         {
         };
       alarm_info.data_time.rtc_min:"Minute"
         {
         };
       alarm_info.data_time.rtc_hour:"Hour"
         {
         };
       alarm_info.data_time.rtc_mon:"Month"
         {
         };
       alarm_info.data_time.rtc_wday:"Week day"
         {
         };
       alarm_info.data_time.rtc_year:"Year"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_SMSAL_COMMON_PARAM_LID  
     nvram_ef_smsal_common_param_struct * (1 *  2 ) 
     {
         bearer_service:" Preferred Service"
         {
           bearer:8 "Prefered band"
             {
               0x0:"GPRS only";
                 0x1:"GSM only";
                 0x2:"GPRS prefer";
                 0x3:"GSM prefer";
             };
         };

       status_report:" Status Report"
         {
           status_rep:8 "Status Report"
             {
               0x0:"Not Supported (or request)";
               0x1:"Supported (or request)";
             };
         };

       reply_path:" Reply Path"
         {
           reply_p:8 "Reply Path"
             {
               0x0:"Not Supported (or request)";
               0x1:"Supported (or request)";
             };
         };

       vp_format:" VP Format"
         {
           vp_f:8 "VP Format"
             {
               0x0:"VP not present";
               0x1:"Enhanced format";
               0x2:"Relative format (default)";
               0x3:"Absolute format";
             };
         };

       prefer_mem1:" Preferred Memory 1"
         {
           p_mem1:8 "Preferred Memory 1"
             {
               0x0:"SIM";
               0x1:"ME";
               0x2:"SR";
               0x3:"BM";
               0x4:"TA";
               0x5:"SM_PREFER";
               0x6:"ME_PREFER";
               0x7:"Not Specified (default)";
             };
         };
       prefer_mem2:" Preferred Memory 2"
         {
           p_mem2:8 "Preferred Memory 2"
             {
               0x0:"SIM";
               0x1:"ME";
               0x2:"SR";
               0x3:"BM";
               0x4:"TA";
               0x5:"SM_PREFER";
               0x6:"ME_PREFER";
               0x7:"Not Specified (default)";
             };
         };
       prefer_mem3:" Preferred Memory 3"
         {
           p_mem3:8 "Preferred Memory 3"
             {
               0x0:"SIM";
               0x1:"ME";
               0x2:"SR";
               0x3:"BM";
               0x4:"TA";
               0x5:"SM_PREFER";
               0x6:"ME_PREFER";
               0x7:"Not Specified (default)";
             };
         };

       cbch_req:"CB status"
         {
         };
       all_lang_on:"CB all language ON "
         {
         };
       rmi_act_pfile_id:"Activated profile ID for AT command"
         {
         };
       fo:"First Octet of TP Header"
         {
         };
       sms_fdn_off:"Turn Off SMS FDN"
         {
         };

       last_used_tp_mr:"last used tp message reference"
         {
         };

       mem_capacity_available:"mem_capacity_available"
         {
           mem_cap_available:8 "mem_capacity_available"
             {
               0x0:"means flag unset; memory capacity available";
               0x1:"means flag set";
             };
         };
     };

LID_BIT   "001"   NVRAM_EF_SMSAL_MAILBOX_ADDR_LID  
     nvram_ef_smsal_mailbox_addr_struct * (2 *  2 ) 
     {
         alpha_id:"Alpha identifier"
         {
         };

       BCD_length:"Length of BCD number"
         {
         };
       TON_NPI:"TON and NPI"
         {
         };
       DialNum:"Dailling number"
         {
         };
       cc_ident:"Capability/ configuration identifier"
         {
         };
       pad:"Extension 1 record identifier"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_SMSAL_SMS_LID  
     nvram_ef_smsal_sms_struct * (100 *  2 ) 
     {
         status:"Status"
         {
         };

       remainder:"Reminder"
         {
         };

     };

LID_BIT   "001"   NVRAM_EF_SMSAL_SMSP_LID  
     nvram_ef_smsal_smsp_struct * (2 *  2 ) 
     {
         profile_name:"store alpha-identifier"
         {
         };

       para_ind:"Parameter Indicator"
         {
         };
       da:"Destination Address"
         {
         };
       sca:"Service Centre Address"
         {
         };
       pid:"Protocol identifier"
         {
         };
       dcs:"Data coding scheme"
         {
         };
       vp:"Validity period"
         {
         };
     };

 
LID_BIT   "001"   NVRAM_EF_TCM_PDP_PROFILE_LID  
     nvram_ef_tcm_PDP_profile_record_struct * 11 
     {
         context_id:"Context identifier"
         {
         };

       nsapi:"NSAPI"
         {
         };
       pdp_addr_type:"PDP address type"
         {
         };
       pdp_addr_len:"PDP address length"
         {
         };
       addr_val:"Static PDP address value, in MSB"
         {
         };

       req_qos:"Requested QoS";
       req_qos.qos_length:"Length of Qos"
         {
         };
       req_qos.unused1:"Unused Byte"
         {
         };
       req_qos.delay_class:"Delay class"
         {
         };
       req_qos.reliability_class:"Reliability class"
         {
         };
       req_qos.peak_throughput:"Peak throughput"
         {
         };
       req_qos.unused2:"Unused Byte"
         {
         };
       req_qos.precedence_class:"Precedence class"
         {
         };
       req_qos.unused3:"Unused Byte"
         {
         };
       req_qos.mean_throughput:"Mean throughput"
         {
         };
       req_qos.traffic_class:"Traffic class"
         {
         };
       req_qos.delivery_order:"Delivery order"
         {
         };
       req_qos.delivery_of_err_sdu:"Delivery of error SDU"
         {
         };
       req_qos.max_sdu_size:"Maximum SDU size"
         {
         };
       req_qos.max_bitrate_up_lnk:"Max bitrate for uplink"
         {
         };
       req_qos.max_bitrate_down_lnk:"Max bitrate for downlink"
         {
         };
       req_qos.residual_bit_err_rate:"Residual bit error rate"
         {
         };
       req_qos.sdu_err_ratio:"SDU error ratio"
         {
         };
       req_qos.transfer_delay:"Transfer delay"
         {
         };
       req_qos.traffic_hndl_priority:"Traffic handle priority"
         {
         };
       req_qos.guarntd_bit_rate_up_lnk:"Guaranteed bitrate for uplink"
         {
         };
       req_qos.guarntd_bit_rate_down_lnk:"Guaranteed bitrate for downlink"
         {
         };

       min_qos:"Minimum QoS requirement"
         {
         };
       min_qos.qos_length:"Length of Qos"
         {
         };
       min_qos.unused1:"Unused Byte"
         {
         };
       min_qos.delay_class:"Delay class"
         {
         };
       min_qos.reliability_class:"Reliability class"
         {
         };
       min_qos.peak_throughput:"Peak throughput"
         {
         };
       min_qos.unused2:"Unused Byte"
         {
         };
       min_qos.precedence_class:"Precedence class"
         {
         };
       min_qos.unused3:"Unused Byte"
         {
         };
       min_qos.mean_throughput:"Mean throughput"
         {
         };
       min_qos.traffic_class:"Traffic class"
         {
         };
       min_qos.delivery_order:"Delivery order"
         {
         };
       min_qos.delivery_of_err_sdu:"Delivery of error SDU"
         {
         };
       min_qos.max_sdu_size:"Maximum SDU size"
         {
         };
       min_qos.max_bitrate_up_lnk:"Max bitrate for uplink"
         {
         };
       min_qos.max_bitrate_down_lnk:"Max bitrate for downlink"
         {
         };
       min_qos.residual_bit_err_rate:"Residual bit error rate"
         {
         };
       min_qos.sdu_err_ratio:"SDU error ratio"
         {
         };
       min_qos.transfer_delay:"Transfer delay"
         {
         };
       min_qos.traffic_hndl_priority:"Traffic handle priority"
         {
         };
       min_qos.guarntd_bit_rate_up_lnk:"Guaranteed bitrate for uplink"
         {
         };
       min_qos.guarntd_bit_rate_down_lnk:"Guaranteed bitrate for downlink"
         {
         };

       apn_len:"APN length"
         {
         };
       apn:"APN string";
       pcomp_algo:"Protocol (header) compression algorithm"
         {
         };
       dcomp_algo:"Data compression algorithm"
         {
         };
       context_type:"Padding"
         {
         };
       primary_context_id:"Primary context identifier"
         {
         };
       is_sib_defined:"SIB defination flag"
         {
         };
       dns_val:"DNS"
         {
         };
       is_chap:"CHAP Authentication"
         {
         };
       name_length:"Name Length"
         {
         };
       name_dcs:"Name DCS"
         {
         };
       name:"Name"
         {
         };
       user_name:"Username"
         {
         };
       password:"Password"
         {
         };
       reserved:"Reserved"
         {
         };

     };
 

 
LID_BIT   "001"   NVRAM_EF_CAMERA_PARA_LID  
     nvram_camera_para_struct * 1 
     {
         ISP:"ISP Register";
         PREDGAMMA:"Predefine Gamma"
         {
         };

       PREDGAMMA.gamma_select:"Selected Gamma"
         {
         };
       PREDGAMMA.gamma:"Gamma"
         {
         };
     
       COMP:"Auto defect & Shading"
         {
         };
       COMP.shading_cap:"shading setting for cap"
         {
         };
       COMP.autodefect_pre_low:"auto defect setting for preview under low light"
         {
         };
       COMP.autodefect_cap_nor:"auto defect setting for take under normal light"
         {
         };
       COMP.autodefect_cap_low:"auto defect setting for take under low light"
         {
         };
       COMP.shading_spare_1:"shading setting for spare 1"
         {
         };
       COMP.shading_spare_2:"shading setting for spare 2"
         {
         };
     
       AE:"AE"
         {
         };
       AE.iniShutter:"initial Shutter"
         {
         };
       AE.TargetLum:"Target Luminance"
         {
         };
       AE.StepperEV:"Step per EV"
         {
         };
       AWB:"AWB"
         {
         };
       AWB.LightSource:"Light Source, Rgain, Ggain, Bgain"
         {
         };
       AWB.AWB_rgain_max:"AWB Max RGain"
         {
         };
       AWB.AWB_ggain_max:"AWB Max GGain"
         {
         };
       AWB.AWB_bgain_max:"AWB Max BGain"
         {
         };
       SENSOR:"Sensor Register";
  
         ISO_PRIORITY_INFO:"ISO_PRIORITY_INFO"
         {
         };
       ISO_PRIORITY_INFO.ISO_Gain:"ISO_Gain"
         {
         };
       ISO_PRIORITY_INFO.ISO_Value:"ISO_Value"
         {
         };
  
     };
 
 






 





 






     LID_BIT   "001"   NVRAM_EF_WPSS_FILENAME_LID  
     nvram_wpss_filename_struct * 3 
     {
     };

     LID_BIT   "001"   NVRAM_EF_AUTOTEST_LID  
     nvram_ef_autotest_struct * 2 
     {
     };

     LID_BIT   "001"   NVRAM_EF_PORT_SETTING_LID  
     port_setting_struct * 1 
     {
     };
 
     LID_BIT   "001"   NVRAM_EF_STOPWATCH_LID  
     nvram_ef_stopwatch_struct * 1 
     {
     };
 
 





 










 





 





 
     LID_BIT   "001"   NVRAM_EF_FM_RADIO_LID  
     nvram_fm_radio_struct * 1 
     {
     };
 

 
     LID_BIT   "001"   NVRAM_EF_BT_INFO_LID  
     nvram_ef_bt_info_struct * 1 
     {
     };







     LID_BIT   "001"   NVRAM_EF_BTRADIO_MT6601_LID  
     nvram_ef_btradio_mt6601_struct *  1 
     {
     };







 

 






 






 










 














     LID_BIT   "001"   NVRAM_EF_CB_DEFAULT_CH_LID  
     nvram_ef_cb_default_ch_struct * (1 *  2 ) 
     {
         cbmi:"Default CB Channel ID";
     };

 






 










 
     LID_BIT   "001"   NVRAM_EF_EONS_INFO_LID  
     kal_uint8 * 1 
     {
     };
 

 











     LID_BIT   "001"   NVRAM_EF_ALM_SPOF_DATA_LID  
     nvram_alm_spof_data_struct * 1 
     {
     };
     LID_BIT   "001"   NVRAM_EF_ALM_ALARM_DATA_LID  
     nvram_alm_alarm_data_struct * 1 
     {
     };

 










 











 






 
     LID_BIT   "001"   NVRAM_EF_AUDIO_PLAYER_BT_SETTINGS_LID  
     nvram_ef_audio_player_bt_settings_struct *1
     {
         bt_a2dp_output:"BT A2DP Output is On/Off";
         bt_a2dp_headset_valid:"BT A2DP Headset field is valid or not";
         bt_a2dp_headset:"Selected BT A2DP Headset";
     };
 


LID_BIT   "001"   NVRAM_EF_EBOOK_SETTINGS_LID   nvram_ef_ebook_setting_struct*  1  {};
LID_BIT   "001"   NVRAM_EF_EBOOK_DEFAULT_SETTINGS_LID   nvram_ef_ebook_setting_default_struct*  1  {};


 











    LID_BIT   "001"   NVRAM_EF_EM_NW_EVENT_RINGS_LID  
    kal_uint8 * 1 
    {
    };



LID_BIT   "001"   NVRAM_EF_NITZ_NW_NAME_LID  
    nitz_nw_name_struct*  2 
    {
    };

 














LID_BIT   "001"   NVRAM_EF_RAC_PREFERENCE_LID  
     nvram_ef_rac_preference_struct * (1 *  2 ) 
     {
         band:"Prefered band"
         {
           pf_band:8 "Prefered band"
             {
                 0x02: "GSM 900";
                 0x08: "DCS 1800";
                 0x10: "PCS 1900";
                 0x80: "GSM 850";
                 0x0A: "Dual mode, GSM 900 and DCS 1800";
                 0x12: "Dual mode, GSM 900 and PCS 1900";
             };
         };

       arg1:"PLMN selection mode / Preferred Service in NMO III"
         {
           plmn_sel_mode:1 "PLMN select mode"
             {
               0x0:"Automatic";
               0x1:"Manual";
             };

           pf_serv:2 "Preferred service"
             {
               0x0:"CS_ONLY";
               0x1:"PS_ONLY";
               0x2:"BOTH_PREFER_CS";
               0x3:"BOTH_PREFER_PS";
             };

           unused:5 "Unused"
             {
             };
         };
























     };

LID_BIT   "001"   NVRAM_EF_CSB_SETTINGS_LID  
     nvram_ef_csb_setting_struct*  1 
     {
     };









































































 
LID_BIT   "001"   NVRAM_EF_CARD2_CB_CHNL_LID  
     nvram_sms_cb_chnl_struct * 1 
     {
         l4MidIndex:"L4 Index"
         {
         };

       chnlNames1:"Channel 1"
         {
         };
       chnlNames1.NameDCS:"Channel 1 Name DCS"
         {
         };
       chnlNames1.Name:"Channel 1 Name"
         {
         };

       chnlNames2:"Channel 2"
         {
         };
       chnlNames2.NameDCS:"Channel 2 Name DCS"
         {
         };
       chnlNames2.Name:"Channel 2 Name"
         {
         };

       chnlNames3:"Channel 3"
         {
         };
       chnlNames3.NameDCS:"Channel 3 Name DCS"
         {
         };
       chnlNames3.Name:"Channel 3 Name"
         {
         };

       chnlNames4:"Channel 4"
         {
         };
       chnlNames4.NameDCS:"Channel 4 Name DCS"
         {
         };
       chnlNames4.Name:"Channel 4 Name"
         {
         };

       chnlNames5:"Channel 5"
         {
         };
       chnlNames5.NameDCS:"Channel 5 Name DCS"
         {
         };
       chnlNames5.Name:"Channel 5 Name"
         {
         };

       chnlNames6:"Channel 6"
         {
         };
       chnlNames6.NameDCS:"Channel 6 Name DCS"
         {
         };
       chnlNames6.Name:"Channel 6 Name"
         {
         };

       chnlNames7:"Channel 7"
         {
         };
       chnlNames7.NameDCS:"Channel 7 Name DCS"
         {
         };
       chnlNames7.Name:"Channel 7 Name"
         {
         };

       chnlNames8:"Channel 8"
         {
         };
       chnlNames8.NameDCS:"Channel 8 Name DCS"
         {
         };
       chnlNames8.Name:"Channel 8 Name"
         {
         };

       chnlNames9:"Channel 9"
         {
         };
       chnlNames9.NameDCS:"Channel 9 Name DCS"
         {
         };
       chnlNames9.Name:"Channel 9 Name"
         {
         };

       chnlNames10:"Channel 10"
         {
         };
       chnlNames10.NameDCS:"Channel 10 Name DCS"
         {
         };
       chnlNames10.Name:"Channel 10 Name"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_CARD2_CB_SMS_LID  
     nvram_sms_cb_sms_struct * 30 
     {
         MsgContent:"Contents of CB Messages"
         {
         };
     };

LID_BIT   "001"   NVRAM_EF_CARD2_CB_SMS_INFO_LID  
     nvram_sms_cb_sms_info_struct * 1 
     {
         MsgDCS:"DCS of CB Messages"
         {
         };

       MsgPage:"Page number of CB Messages"
         {
         };
       MsgMI:"MI of CB Messages"
         {
         };
     };


END_NVRAM_DATA





#line 145 "tst\database\msglog_db\custom_parse_db.c"
#line 1 "custom\app\UNIRISE25_GEMINI_BB\custom_nvram_editor_data_item.h"
 


































 







































































 



#line 1 "custom\app\UNIRISE25_GEMINI_BB\nvram_user_defs.h"
#line 113 "custom\app\UNIRISE25_GEMINI_BB\custom_nvram_editor_data_item.h"


#line 1 "custom\common\PLUTO_MMI\common_nvram_editor_data_item.h"
#line 115 "custom\app\UNIRISE25_GEMINI_BB\custom_nvram_editor_data_item.h"

 


 










 




 


typedef struct
{
    kal_uint8 reg_ps_key[ 8 ];
    kal_uint8 security_indication;
    kal_uint8 auto_lock_item;
    kal_uint8 np_code[ 3  * 3 ];
    kal_uint8 np_key[ 8 ];
    kal_uint8 nsp_code[ 5  * 3 ];
    kal_uint8 nsp_key[ 8 ];
    kal_uint8 np_of_sp[ 3 ];
    kal_uint8 np_of_cp[ 3 ];
    kal_uint8 gid1[ 20 ];
    kal_uint8 gid2[ 20 ];
    kal_uint8 sp_key[ 8 ];
    kal_uint8 cp_key[ 8 ];
    kal_uint8 imsi_code[ 9 ];
    kal_uint8 imsi_key[ 8 ];
    kal_uint8 phone_key[ 8 ];
    kal_uint8 last_imsi[ 9 ];
    kal_uint8 pin1[ 8 ];
    kal_uint8 pin1_valid;
    kal_uint8 phone_lock_verified;   
    kal_uint8                iccid[ 10 ];
} smu_security_info_struct;


typedef struct
{
    kal_uint8 CacheByte[ 512 ];
} nvram_cache_byte_struct;

typedef struct
{
    kal_uint16 CacheShort[ 512  / 2];
} nvram_cache_short_struct;

typedef struct
{
    kal_uint64 Cachedouble[ 512  / 8];
} nvram_cache_double_struct;

 



BEGIN_NVRAM_DATA
 











    LID_BIT   "010"   NVRAM_EF_CACHE_BYTE_LID  
     nvram_cache_byte_struct * 1 
     {
         CacheByte:"One-byte parameter setting";
         CacheByte[14]
         {
           default_lang:8 "Default Language"
             {
             };
         };

         CacheByte[24]
         {
           time_zone:8 "Time Zone (Current City)"
             {
             };
         };

         CacheByte[25]
         {
           date_format:8 "Time Format"
             {
             };
         };

         CacheByte[26]
         {
           date_format:8 "Date Format"
             {
             };
         };
     };

 











LID_BIT   "010"   NVRAM_EF_CACHE_SHORT_LID  
     nvram_cache_short_struct * 1 
     {
         CacheShort:"Two-byte parameter setting";
         CacheShort[13]
         {
           Wallpaper:16 "Wallpaper"
             {
             };
         };
     };

 











LID_BIT   "010"   NVRAM_EF_CACHE_DOUBLE_LID  
     nvram_cache_double_struct * 1 
     {
     };

LID_BIT MULTIPLE_LID   "001"   NVRAM_EF_MS_SECURITY_LID  
     smu_security_info_struct * (1 *  2 ) 
     {
         reg_ps_key:"Registeration personalization key"
         {
         };

       security_indication:"Security indication"
         {
           pl:1 "Phone lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           nl:1 "Network lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           nsbl:1 "Network subset lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           spl:1 "Service provide lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           cl:1 "Corporate lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           il:1 "IMSI lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           al:1 "Auto lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           res:1 "Reserved"
             {
                  



             };

         };

       auto_lock_item:"Auto lock item"
         {
           nl:1 "Network lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           nsbl:1 "Network subset lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           spl:1 "Service provide lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           cl:1 "Corporate lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           il:1 "IMSI lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           res:3 "Reserved"
             {
                  



             };

         };

       np_code:"Network personalization code"
         {
         };
       np_key:"Network personalization key"
         {
         };
       nsp_code:"Network subset personalization code"
         {
         };
       nsp_key:"Network subset personalization key"
         {
         };
       np_of_sp:"NP of SP"
         {
         };
       np_of_cp:"NP of CP"
         {
         };
       gid1:"EF_GID 1"
         {
         };
       gid2:"EF_GID 2"
         {
         };
       sp_key:"Service provide personalization key"
         {
         };
       cp_key:"Corporate personalization key"
         {
         };
       imsi_code:"IMSI personalization code"
         {
         };
       imsi_key:"IMSI personalization key"
         {
         };
       phone_key:"Phone key"
         {
         };
       last_imsi:"Last IMSI code"
         {
         };

       pin1:"Last IMSI code"
         {
         };
       pin1_valid:"Last IMSI code"
         {
         };
       phone_lock_verified:"Phone Lock verified"
         {
         };
     };


END_NVRAM_DATA


 







#line 146 "tst\database\msglog_db\custom_parse_db.c"


 
#line 1 "custom\audio\UNIRISE25_GEMINI_BB\resource_audio.h"
 


































 





























typedef enum
{
   MIN_TONE_ID = 0,                         
   TONE_DTMF_0 = MIN_TONE_ID,            	 
   TONE_DTMF_1,            					 
   TONE_DTMF_2,            					 
   TONE_DTMF_3,            					 
   TONE_DTMF_4,            					 
   TONE_DTMF_5,            					 
   TONE_DTMF_6,            					 
   TONE_DTMF_7,            					 
   TONE_DTMF_8,            					 
   TONE_DTMF_9,								 
   TONE_KEY_STAR,          					 
   TONE_KEY_HASH,          					 
   TONE_KEY_NORMAL,							 
   TONE_KEY_VOL_UP = TONE_KEY_NORMAL,         
   TONE_KEY_VOL_DOWN = TONE_KEY_NORMAL,      
   TONE_KEY_UP = TONE_KEY_NORMAL,             
   TONE_KEY_DOWN = TONE_KEY_NORMAL,          
   TONE_KEY_LEFT = TONE_KEY_NORMAL,           
   TONE_KEY_RIGHT = TONE_KEY_NORMAL,          
   TONE_KEY_MENU = TONE_KEY_NORMAL,           
   TONE_KEY_FUNCTION = TONE_KEY_NORMAL,       
   TONE_KEY_SK_LEFT = TONE_KEY_NORMAL,        
   TONE_KEY_SK_RIGHT = TONE_KEY_NORMAL,       
   TONE_KEY_SEND = TONE_KEY_NORMAL,           
   TONE_KEY_END = TONE_KEY_NORMAL,            
   TONE_KEY_POWER = TONE_KEY_NORMAL,         

   TONE_KEY_CLICK,						 

   TONE_CALL_CONNECT,					 
   TONE_MT_SMS_IN_CALL,					 
   TONE_CALL_TIME_REMINDER,				 

   TONE_DIAL_CALL_GSM,    				 
   TONE_DIAL_CALL_PCS,     				 
   TONE_BUSY_CALL_GSM,    				 
   TONE_BUSY_CALL_PCS,    				 
   TONE_CONGESTION_GSM,  				  
   TONE_CONGESTION_PCS,   				 
   TONE_RADIO_PATH,       				 
   TONE_RADIO_NA,         				 
   TONE_ERROR_INFO,        				 
   TONE_NUM_UNOBTAIN,     				 
   TONE_AUTH_ERROR,       				 
   TONE_CALL_WAITING,      				 
   TONE_RINGING_CALL_GSM, 				 
   TONE_RINGING_CALL_PCS, 				 
   TONE_POSITIVE_ACK,      				 
   TONE_NEGATIVE_ACK,     				    
													
   TONE_DIAL_CALL_GSM_STK,				 
   TONE_DIAL_CALL_PCS_STK,				 
   TONE_BUSY_CALL_GSM_STK,				 
   TONE_BUSY_CALL_PCS_STK,				 
   TONE_CONGESTION_GSM_STK,				 
   TONE_CONGESTION_PCS_STK,				 
   TONE_RADIO_PATH_STK,   				 
   TONE_RADIO_NA_STK,     				 
   TONE_ERROR_INFO_STK,   			     
   TONE_NUM_UNOBTAIN_STK, 				 
   TONE_AUTH_ERROR_STK,   				 
   TONE_CALL_WAITING_STK, 				 
   TONE_RINGING_CALL_GSM_STK,			 
   TONE_RINGING_CALL_PCS_STK,			 
   TONE_POSITIVE_ACK_STK, 				 
   TONE_NEGATIVE_ACK_STK, 				 
			
			
   TONE_WARNING1,						 
   TONE_WARNING2,						 
   TONE_ERROR1,							 
   TONE_ERROR2,							 
   TONE_GENERAL_BEEP,					 
   TONE_BATTERY_LOW,					 
   TONE_BATTERY_WARNING,				 
   TONE_AUX_IND,						 
   TONE_DATA_CALL,						 
   TONE_VIBRATOR,                                        

   MAX_TONE_ID = 80,

   MIN_EMS_SND_ID = 81,							 
   EMS_CHIMES_HIGH = MIN_EMS_SND_ID,			 
   EMS_CHIMES_LOW,								 
   EMS_DING,									 
   EMS_TADA,									 
   EMS_NOTIFY,									 
   EMS_DRUM,									 
   EMS_CLAPS,									 
   EMS_FANFAR,									 
   EMS_CHORE_HGH,								 
   EMS_CHORE_LOW,								 
   MAX_EMS_SND_ID = EMS_CHORE_LOW				 
   
}audio_id_enum;





 


typedef struct {
   kal_uint16   freq1;             
   kal_uint16   freq2;             
   kal_uint16   on_duration;       
   kal_uint16   off_duration;      
   kal_int8     next_operation;    
} device_tones_struct;

typedef struct {
   const unsigned char *data;
   kal_uint32  len;
   kal_int32 format;
}
audio_resource_struct;

typedef struct {
	short start;
	short end;
}
start_end_t;
       
extern device_tones_struct** resource_tones;
extern audio_resource_struct* resource_midis;
extern audio_resource_struct* resource_sounds;
extern audio_resource_struct* resource_message_sounds;
extern audio_resource_struct* resource_imelodys;
extern audio_resource_struct* resource_ems_imelodys;
extern audio_resource_struct* resource_ems_sounds;
extern audio_resource_struct* resource_mms_sounds;
extern audio_resource_struct* resource_human_voice_tones;
extern audio_resource_struct* resource_tts_sounds;
extern start_end_t* TTS_UCS2_MSB_index;
extern unsigned char* TTS_UCS2_LSB;
extern unsigned short* TTS_index_table;
extern audio_resource_struct* resource_keypad_tones;

void custom_get_fixed_imelody_range(kal_uint8 *min_id, kal_uint8 *max_id);
void custom_get_fixed_sound_range(kal_uint8 *min_id, kal_uint8 *max_id);
void custom_get_fixed_midi_range(kal_uint8 *min_id, kal_uint8 *max_id);
void custom_get_fixed_message_sound_range(kal_uint8 *min_id, kal_uint8 *max_id);
void custom_get_fixed_ems_imelody_range(kal_uint8 *min_id, kal_uint8 *max_id);
void custom_get_fixed_mms_sound_range(kal_uint8 *min_id, kal_uint8 *max_id);

 









































































typedef struct {

	kal_uint32 midis_count;
	const audio_resource_struct mtk_resource_midis[ 165  -  151  + 1];









































} custpack_audio_header;




#line 150 "tst\database\msglog_db\custom_parse_db.c"
