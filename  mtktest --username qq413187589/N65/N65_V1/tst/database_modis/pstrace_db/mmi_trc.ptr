#line 1 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"


































 































































































































































































































































































































































































































































































































































































































































































































































































   #line 1 "..\\..\\kal\\include\\kal_trace.h"













































































































































































#line 1 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"















#pragma once
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"






#line 25 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"







#pragma pack(push,8)
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"














typedef char *  va_list;
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"

#line 52 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"




































































































#line 153 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"







#pragma pack(pop)
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"

#line 164 "C:\\Program Files\\Microsoft Visual Studio\\VC98\\INCLUDE\\stdarg.h"
#line 175 "..\\..\\kal\\include\\kal_trace.h"




















   
   
   





#line 204 "..\\..\\kal\\include\\kal_trace.h"





#line 210 "..\\..\\kal\\include\\kal_trace.h"




typedef enum
{
   TRACE_FUNC,
   TRACE_STATE,
   TRACE_INFO,
   TRACE_WARNING,
   TRACE_ERROR,
   TRACE_GROUP_1,
   TRACE_GROUP_2,
   TRACE_GROUP_3,
   TRACE_GROUP_4,
   TRACE_GROUP_5,
   TRACE_GROUP_6,
   TRACE_GROUP_7,
   TRACE_GROUP_8,
   TRACE_GROUP_9,
   TRACE_GROUP_10,
   TRACE_PEER
}trace_class_enum;






#line 240 "..\\..\\kal\\include\\kal_trace.h"






extern void kal_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
extern void kal_trace_for_3rd_party( trace_class_enum, kal_uint32, const kal_char* , va_list);
extern void kal_lib_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
extern void kal_assert_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
extern void kal_wap_trace(module_type mod_id, trace_class_enum trc_class, const char *fmt,...);
extern void kal_buffer_trace(trace_class_enum trc_class, kal_uint32 msg_index, const kal_char* fmt, kal_uint32 buf_len, const kal_uint8* pData);
extern void kal_dev_trace(trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type,...);



















































#line 305 "..\\..\\kal\\include\\kal_trace.h"

extern void kal_prompt_trace(module_type, const kal_char *fmt,...);























































#line 363 "..\\..\\kal\\include\\kal_trace.h"


typedef void (*TST_VC_CallBack)(const kal_uint8* pData, kal_uint32 nLen);





typedef enum
{
	TVCI_GPS_LOGGING,
	TVCI_LAST_ID
}
tst_virtual_channel_id;

#line 379 "..\\..\\kal\\include\\kal_trace.h"


#line 804 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 805 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"






#line 1 "..\\..\\kal\\include\\kal_release.h"






























































































































































































































































































































































































#line 384 "..\\..\\kal\\include\\kal_release.h"
#line 1 "..\\..\\MoDIS\\oscar\\include\\osc_release.h"













































































#line 1 "..\\..\\MoDIS\\oscar\\include\\osc_type.h"




































































































































































































typedef enum
{
   OSC_ISR_SRC_RESERVED,
   OSC_ISR_SRC_CTIRQ1,
   OSC_ISR_SRC_SYS_END,

   
   OSC_ISR_SRC_BT_BCHS_RX,              
   OSC_ISR_SRC_BT_BCHS_TX,              
   OSC_ISR_SRC_BT_BCHS_RESTART,         
   OSC_ISR_SRC_USB,			
   OSC_ISR_SRC_UART,                    
   OSC_ISR_SRC_MTE_MMI_RX,							
   OSC_ISR_SRC_MTE_MMI_TX,							
   

   
   OSC_ISR_SRC_CUSTOM1,
   OSC_ISR_SRC_CUSTOM2,
   OSC_ISR_SRC_CUSTOM3,
   OSC_ISR_SRC_CUSTOM4,
   OSC_ISR_SRC_CUSTOM5,
   OSC_ISR_SRC_CUSTOM6,
   OSC_ISR_SRC_CUSTOM7,
   OSC_ISR_SRC_CUSTOM8,
   OSC_ISR_SRC_CUSTOM9,
   OSC_ISR_SRC_CUSTOM10,
   

   OSC_ISR_SRC_END = 64
}  osc_enum_isr_src;

typedef enum
{
   OSC_BOOL_FALSE,
   OSC_BOOL_TRUE
}  osc_enum_bool;

typedef enum
{
   OSC_STATE_INIT,            
   OSC_STATE_READY,           
   OSC_STATE_RUNNING,         
   OSC_STATE_SUSPEND_FOREVER, 
   OSC_STATE_SUSPEND_SLEEP,   
   OSC_STATE_SUSPEND_SEMA,    
   OSC_STATE_SUSPEND_QUEUE,   
   OSC_STATE_SUSPEND_EVENT,   
   OSC_STATE_EXPIRE,          
   OSC_STATE_STOP,            
   OSC_STATE_DELETED,         
   OSC_STATE_END              = 0xFFFFFFFF 
}  osc_enum_state;

typedef enum
{
   OSC_TIMEOUT_NONE           = 0,
   OSC_TIMEOUT_LOCK,
   OSC_TIMEOUT_ABANDON,
   OSC_TIMEOUT_FOREVER        = 0xFFFFFFFF 
}  osc_enum_timeout;





typedef  signed   char     osc_type_s8;
typedef  unsigned char     osc_type_u8;
typedef  signed   short    osc_type_s16;
typedef  unsigned short    osc_type_u16;
typedef  signed   int      osc_type_s32;
typedef  unsigned int      osc_type_u32;
#line 270 "..\\..\\MoDIS\\oscar\\include\\osc_type.h"

typedef void*  osc_type_void_ptr;
typedef void*  (* osc_type_func_ptr)(void * param1, ...);








struct osc_struct_dd_hdr;
struct osc_struct_dd_list;
struct osc_struct_thread;
struct osc_struct_timer;
struct osc_struct_sema;
struct osc_struct_queue;
struct osc_struct_event;
struct osc_struct_buffer;

#line 291 "..\\..\\MoDIS\\oscar\\include\\osc_type.h"




typedef struct _osc_struct_dd_hdr
{
   osc_type_u8                name[60 + 30]; 
   osc_type_u32               dd_list_count;
   struct _osc_struct_dd_list *ptr_first;
   struct _osc_struct_dd_list *ptr_last;
}  osc_struct_dd_hdr;




typedef struct _osc_struct_dd_list
{
   void                       *ptr_this;
   struct _osc_struct_dd_list *ptr_prev;
   struct _osc_struct_dd_list *ptr_next;
   void                       *ptr_extend;
}  osc_struct_dd_list;




typedef struct _osc_struct_thread
{
   osc_type_u32               guard;      
   void                       *handle;
   osc_type_u8				      name[60];
   osc_enum_state			      state;
   osc_type_u32				   priority;
   osc_type_u32				   time_slice;
   osc_type_u32               time_left;
   osc_type_u32				   stack_size;
   osc_type_u32				   stack_addr; 
   osc_type_u32				   stack_ptr;
   osc_type_func_ptr		      entry_func;
   osc_type_void_ptr          entry_param;
   struct _osc_struct_dd_hdr  *timer;
   osc_type_void_ptr          waiting_list;
   osc_type_void_ptr          extend;
}  osc_struct_thread;




typedef struct _osc_struct_timer
{
   osc_type_u32               guard;
   osc_type_u8				      name[60];
   osc_enum_state			      state;
   osc_type_u32				   time_default;
   osc_type_u32				   time_periodic;
   osc_type_u32               time_left;
   osc_type_func_ptr		      expiry_func;
   osc_type_void_ptr		      expiry_param;
   struct _osc_struct_dd_hdr  *waiting_list;
   osc_type_void_ptr          extend;
}  osc_struct_timer;




typedef struct _osc_struct_sema
{
   osc_type_u32               guard;
   void                       *handle;
   osc_type_u8				      name[60];
   osc_type_u32				   count_num;
   osc_type_u32				   count_left;
   struct _osc_struct_dd_hdr  *owner_list;
   struct _osc_struct_dd_hdr  *waiting_list;
   osc_type_void_ptr          extend;
}  osc_struct_sema;




typedef struct _osc_struct_queue
{
   osc_type_u32               guard;
   osc_type_u8				      name[60];
   osc_type_u32				   queue_size;
   osc_type_u32				   *queue_addr;
   osc_type_u32				   msg_size;
   osc_type_u32				   msg_num_total;
   struct _osc_struct_dd_hdr  *msg_free_list;   
   struct _osc_struct_dd_hdr  *msg_used_list;   
   struct _osc_struct_dd_hdr  *waiting_list;
   osc_type_void_ptr          extend;
}  osc_struct_queue;




typedef struct _osc_struct_event
{
   osc_type_u32               guard;
   osc_type_u8				      name[60];
   osc_type_u32				   event_flag;
   struct _osc_struct_dd_hdr  *waiting_list;
   osc_type_void_ptr          extend;
}  osc_struct_event;

typedef struct _osc_struct_event_waiting
{
   struct _osc_struct_thread  *thread;
   osc_type_u32               event_need;
   osc_type_u32               event_actual;
   osc_type_u32               action;
   osc_type_void_ptr          extend;
}  osc_struct_event_waiting;




typedef struct _osc_struct_buffer
{
   osc_type_u32               guard;
   osc_type_u8				      name[60];
   osc_type_u32				   pool_size;
   osc_type_u32				   *pool_addr;
   osc_type_u32				   block_size;
   osc_type_u32				   block_num_total;
   struct _osc_struct_dd_hdr  *block_free_list;
   struct _osc_struct_dd_hdr  *block_used_list;
   osc_type_void_ptr          extend;
}  osc_struct_buffer;

typedef struct _osc_struct_block_hdr
{
   osc_type_u32               threadid;
   osc_struct_buffer          *pool;
   osc_type_void_ptr          extend;
}  osc_struct_block_hdr;

#line 430 "..\\..\\MoDIS\\oscar\\include\\osc_type.h"
#line 79 "..\\..\\MoDIS\\oscar\\include\\osc_release.h"
#line 1 "..\\..\\MoDIS\\oscar\\include\\osc_func.h"
































































































extern osc_struct_dd_hdr g_osc_timer_list;

extern osc_type_u32      g_osc_system_tick;



extern osc_type_s32        osc_platform_print_msg ( const char *format, ... );

extern void                OSC_Register_ISR ( 
                                       osc_enum_isr_src  src_idx, 
                                       osc_type_func_ptr isr_func );

extern void                OSC_Activate_ISR ( osc_enum_isr_src isr_idx );

extern void                OSC_Sys_Schedule_Enable ( osc_type_u32 bEnable);

extern osc_type_s32				 OSC_Sys_if_lisr (void);




extern osc_type_s32 OSC_Thread_Create (
         osc_type_u8          *name,
         osc_type_u32         *stack_addr,
         osc_enum_state       state_init,
         osc_type_u32         priority,
         osc_type_u32         time_slice,
         osc_type_u32         stack_size,
         osc_type_func_ptr    entry_func,
         osc_type_void_ptr    entry_param,
         osc_type_void_ptr    *thread_return );

extern osc_type_s32 OSC_Thread_Delete (
         osc_struct_thread    *thread );

extern osc_type_s32 OSC_Thread_Suspend (
         osc_struct_thread    *thread,
         osc_type_u32         timeout );

extern osc_type_s32 OSC_Thread_Resume (
         osc_struct_thread    *thread );

extern osc_type_s32 OSC_Thread_Config (
         osc_struct_thread    *thread,
         osc_type_u32         flag,
         osc_type_void_ptr    value,
         osc_type_u32         priority,
         osc_type_u32         time_slice,
         osc_type_u32         time_left );

extern osc_type_s32 OSC_Thread_Query (
         osc_struct_thread    *thread,
         osc_type_u32         flag,
         osc_type_void_ptr    value,
         osc_type_u8          *name,
         osc_type_u32         *state,
         osc_type_u32         *priority,
         osc_type_u32         *time_slice,
         osc_type_u32         *time_left,
         osc_type_u32         *stack_size,
         osc_type_u32         *stack_addr,
         osc_type_u32         *stack_ptr );

extern osc_type_s32 OSC_Thread_Current (
         osc_type_void_ptr    *thread );




extern osc_type_s32 OSC_Timer_Create (
         osc_type_u8          *name,
         osc_enum_state       state_init,
         osc_type_u32         time_default,
         osc_type_u32         time_periodic,
         osc_type_func_ptr    expiry_func,
         osc_type_void_ptr    expiry_param,
         osc_type_void_ptr    *timer_return );

extern osc_type_s32 OSC_Timer_Delete (
         osc_struct_timer     *timer );

extern osc_type_s32 OSC_Timer_Config (
         osc_struct_timer     *timer,
         osc_type_u32         flag,
         osc_type_void_ptr    value,
         osc_type_u32         state,
         osc_type_u32         time_default,
         osc_type_u32         time_periodic,
         osc_type_func_ptr    expiry_func,
         osc_type_void_ptr    expiry_param );


extern osc_type_s32 OSC_Timer_Query (
         osc_struct_timer     *timer,
         osc_type_u32         flag,
         osc_type_void_ptr    value,
         osc_type_u8          *name,
         osc_type_u32         *state,
         osc_type_u32         *time_default,
         osc_type_u32         *time_periodic,
         osc_type_u32         *time_left,
         osc_struct_dd_hdr    *waiting_list );

extern osc_type_s32 OSC_Get_Current_Tick (
         osc_type_u32         *current_tick );

extern osc_type_s32 OSC_Adjust_Tick_Unit (
         osc_type_u32         ms_unit );

extern osc_type_s32 OSC_Adjust_Tick_Time (
         osc_type_s32         delta );




extern osc_type_s32 OSC_Semaphore_Create (
         osc_type_u8          *name,
         osc_type_u32         count,
         osc_type_void_ptr    *sema_return );

extern osc_type_s32 OSC_Semaphore_Delete (
         osc_struct_sema      *sema );

extern osc_type_s32 OSC_Semaphore_Take (
         osc_struct_sema      *sema,
         osc_type_u32         timeout);

extern osc_type_s32 OSC_Semaphore_Give (
         osc_struct_sema      *sema );

extern osc_type_s32 OSC_Semaphore_Config (
         osc_struct_sema      *sema,
         osc_type_u32         flag,
         osc_type_void_ptr    value );

extern osc_type_s32 OSC_Semaphore_Query (
         osc_struct_sema      *sema,
         osc_type_u32         flag,
         osc_type_void_ptr    value,
         osc_type_u8          *name,
         osc_type_u32         *count_num,
         osc_type_u32         *count_left,
         osc_struct_dd_hdr    *owner_list,
         osc_struct_dd_hdr    *waiting_list );




extern osc_type_s32 OSC_Queue_Create (
         osc_type_u8          *name,
         osc_type_u32         *queue_addr,
         osc_type_u32         queue_size,
         osc_type_u32         msg_size,
         osc_type_void_ptr    *queue_return );

extern osc_type_s32 OSC_Queue_Delete (
         osc_struct_queue     *queue );

extern osc_type_s32 OSC_Queue_Write (
         osc_struct_queue     *queue,
         osc_type_u32         msg_size,
         osc_type_void_ptr    msg_buff,
         osc_type_u32         action );

extern osc_type_s32 OSC_Queue_Read (
         osc_struct_queue     *queue,
         osc_enum_bool        need_wait,
         osc_type_void_ptr    msg_buff, 
         osc_type_u32         *return_size );

extern osc_type_s32 OSC_Queue_Config (
         osc_struct_queue     *pool,
         osc_type_u32         flag,
         osc_type_void_ptr    value );

extern osc_type_s32 OSC_Queue_Query (
         osc_struct_queue     *queue,
         osc_type_u32         flag,
         osc_type_void_ptr    value,
         osc_type_u8          *name,
         osc_type_u32         *queue_size,
         osc_type_u32         *queue_addr,
         osc_type_u32         *msg_size,
         osc_type_u32         *msg_num_total,
         osc_struct_dd_hdr    *msg_free_list,
         osc_struct_dd_hdr    *msg_used_list,
         osc_struct_dd_hdr    *waiting_list );




extern osc_type_s32 OSC_Event_Create (
         osc_type_u8          *name,
         osc_type_void_ptr    *event_return );

extern osc_type_s32 OSC_Event_Delete (
         osc_struct_event     *event );

extern osc_type_s32 OSC_Event_Write (
         osc_struct_event     *event,
         osc_type_u32         event_flag,
         osc_type_u32         action );

extern osc_type_s32 OSC_Event_Read (
         osc_struct_event     *event,
         osc_enum_bool        need_suspend,
         osc_type_u32         event_flag,
         osc_type_u32         action,
         osc_type_u32         *event_flag_actual );

extern osc_type_s32 OSC_Event_Config (
         osc_struct_event     *event,
         osc_type_u32         flag,
         osc_type_void_ptr    value );

extern osc_type_s32 OSC_Event_Query (
         osc_struct_event     *event,
         osc_type_u32         flag,
         osc_type_void_ptr    value,
         osc_type_u8          *name,
         osc_type_u32         *event_flag,
         osc_struct_dd_hdr    *waiting_list );




extern osc_type_s32 OSC_Buffer_Create (
         osc_type_u8          *name,
         osc_type_u32         *pool_addr,
         osc_type_u32         pool_size,
         osc_type_u32         block_size,
         osc_type_void_ptr    *return_pool );

extern osc_type_s32 OSC_Buffer_Delete (
         osc_struct_buffer    *pool );

extern osc_type_s32 OSC_Buffer_Alloc (
         osc_struct_buffer    *pool,
         osc_type_void_ptr    *block_addr );

extern osc_type_s32 OSC_Buffer_Free (
         osc_type_void_ptr    block_addr );

extern osc_type_s32 OSC_Buffer_Config (
         osc_struct_buffer    *pool,
         osc_type_u32         flag,
         osc_type_void_ptr    value );

extern osc_type_s32 OSC_Buffer_Query (
         osc_struct_buffer    *pool,
         osc_type_u32         flag,
         osc_type_void_ptr    value,
         osc_type_u8          *name,
         osc_type_u32         *pool_size,
         osc_type_u32         *pool_addr,
         osc_type_u32         *block_size,
         osc_type_u32         *block_num_total,
         osc_struct_dd_hdr    *block_free_list, 
         osc_struct_dd_hdr    *block_used_list );

#line 358 "..\\..\\MoDIS\\oscar\\include\\osc_func.h"
#line 80 "..\\..\\MoDIS\\oscar\\include\\osc_release.h"
#line 1 "..\\..\\MoDIS\\oscar\\include\\osc_errcode.h"



















































































































#line 117 "..\\..\\MoDIS\\oscar\\include\\osc_errcode.h"
#line 81 "..\\..\\MoDIS\\oscar\\include\\osc_release.h"

#line 83 "..\\..\\MoDIS\\oscar\\include\\osc_release.h"
#line 385 "..\\..\\kal\\include\\kal_release.h"


#line 388 "..\\..\\kal\\include\\kal_release.h"

#line 1 "..\\..\\config\\include\\stack_config.h"




















































































































































































































































































































































































































































































































































































































typedef enum {
   INDX_NIL =   0x00,

   
   INDX_NVRAM,


   INDX_TST,
   INDX_TST_READER,
#line 607 "..\\..\\config\\include\\stack_config.h"

























   
   INDX_MM,
   INDX_CC,
   INDX_CISS,
   INDX_SMS,
   INDX_SIM,

   INDX_SIM_2,
#line 641 "..\\..\\config\\include\\stack_config.h"
   INDX_L4,
   INDX_RR,
   INDX_REASM,

   
   INDX_LLC,
   INDX_SNDCP,
   INDX_SM,

   
   INDX_DATA,

   
   INDX_MED,

   







   
   INDX_MMI,









   INDX_DUMMYL1,

   INDX_DUMMYL1_2,
#line 679 "..\\..\\config\\include\\stack_config.h"
#line 680 "..\\..\\config\\include\\stack_config.h"
   INDX_L1,

   INDX_L1_2,
#line 684 "..\\..\\config\\include\\stack_config.h"
   INDX_L1SP,
   INDX_IDLE,

   INDX_TP_TASK,





   INDX_DRVKBD,
   INDX_BMT,


   INDX_AUX,
#line 699 "..\\..\\config\\include\\stack_config.h"

   
   INDX_IRDA,
   INDX_OBEX,
   INDX_IRCOMM,

   INDX_USB,


   INDX_FMT,
#line 710 "..\\..\\config\\include\\stack_config.h"


   INDX_MED_V,
#line 714 "..\\..\\config\\include\\stack_config.h"






   INDX_SYSDEBUG,


   INDX_FLC,
#line 725 "..\\..\\config\\include\\stack_config.h"

   INDX_ABM,

   INDX_PPP,

   INDX_TCPIP,

   INDX_SOC,

   INDX_WAP,

   INDX_WPS,

   INDX_J2ME,
   INDX_JASYN,

   INDX_EMAIL,






   INDX_DT,
#line 750 "..\\..\\config\\include\\stack_config.h"


   INDX_GDC,
   INDX_GDD,
#line 755 "..\\..\\config\\include\\stack_config.h"

   INDX_IMPS,
   
   INDX_SIP,
   
   INDX_POC,

   INDX_BT,

   INDX_XDM,

   INDX_WNDRV,

   INDX_SUPC,

   INDX_DHCP,

   INDX_TFTP,

   INDX_SAF,

   INDX_VOIP,


   INDX_VUART,
#line 781 "..\\..\\config\\include\\stack_config.h"


   INDX_MED_C,
#line 785 "..\\..\\config\\include\\stack_config.h"

   INDX_IDLER,

   INDX_SYNCML, 

















   INDX_RTSP,

   INDX_DM,





   INDX_TDMB,







#line 823 "..\\..\\config\\include\\stack_config.h"





   INDX_CERTMAN,

   INDX_TLS,





   RPS_CUSTOM_TASKS_BEGIN,

   RPS_TOTAL_STACK_TASKS = (RPS_CUSTOM_TASKS_BEGIN - 1 + 16)
} task_indx_type;































     


















































#line 923 "..\\..\\config\\include\\stack_config.h"

























































































#line 1013 "..\\..\\config\\include\\stack_config.h"


























#line 1040 "..\\..\\config\\include\\stack_config.h"







#line 1048 "..\\..\\config\\include\\stack_config.h"












#line 1061 "..\\..\\config\\include\\stack_config.h"







typedef enum {
   
   MOD_NIL = 0,

   MOD_NVRAM,

   MOD_TST,
   MOD_TST_READER,




























































   MOD_ATCI,

   
   
   MOD_MM,

   MOD_MM_2,
#line 1144 "..\\..\\config\\include\\stack_config.h"
   MOD_CC,

   MOD_CC_2,
#line 1148 "..\\..\\config\\include\\stack_config.h"
   MOD_CISS,

   MOD_CISS_2,
#line 1152 "..\\..\\config\\include\\stack_config.h"
   MOD_SMS,

   MOD_SMS_2,
#line 1156 "..\\..\\config\\include\\stack_config.h"
   MOD_SIM,

   MOD_SIM_2,
#line 1160 "..\\..\\config\\include\\stack_config.h"

   
   MOD_L4C,

   MOD_L4C_2,
#line 1166 "..\\..\\config\\include\\stack_config.h"
   MOD_TCM,

   MOD_TCM_2,
#line 1170 "..\\..\\config\\include\\stack_config.h"
   MOD_SMSAL,

   MOD_SMSAL_2,
#line 1174 "..\\..\\config\\include\\stack_config.h"
   MOD_UEM,
   MOD_RAC,

   MOD_RAC_2,
#line 1179 "..\\..\\config\\include\\stack_config.h"
   MOD_SMU,

   MOD_SMU_2,
#line 1183 "..\\..\\config\\include\\stack_config.h"
   MOD_USAT,
   MOD_CSM,

   MOD_CSM_2,
#line 1188 "..\\..\\config\\include\\stack_config.h"
   MOD_ENG,

   MOD_ENG_2,
#line 1192 "..\\..\\config\\include\\stack_config.h"
   MOD_PHB,

   MOD_PHB_2,
#line 1196 "..\\..\\config\\include\\stack_config.h"

   
   MOD_RRM,

   MOD_RRM_2,
#line 1202 "..\\..\\config\\include\\stack_config.h"




#line 1207 "..\\..\\config\\include\\stack_config.h"
   MOD_AS,

   MOD_AS_2,
#line 1211 "..\\..\\config\\include\\stack_config.h"
   MOD_RMPC = MOD_AS,

   MOD_RMPC_2 = MOD_AS_2,
#line 1215 "..\\..\\config\\include\\stack_config.h"
   MOD_RMC,

   MOD_RMC_2,
#line 1219 "..\\..\\config\\include\\stack_config.h"
#line 1220 "..\\..\\config\\include\\stack_config.h"
   MOD_RLC,

   MOD_RLC_2,
#line 1224 "..\\..\\config\\include\\stack_config.h"
   MOD_MAC,

   MOD_MAC_2,
#line 1228 "..\\..\\config\\include\\stack_config.h"
   MOD_LAPDM,

   MOD_LAPDM_2,
#line 1232 "..\\..\\config\\include\\stack_config.h"
   MOD_MPAL,

   MOD_MPAL_2,
#line 1236 "..\\..\\config\\include\\stack_config.h"







   MOD_REASM,

   MOD_REASM_2,
#line 1247 "..\\..\\config\\include\\stack_config.h"

   
   MOD_SNDCP,

   MOD_SNDCP_2,
#line 1253 "..\\..\\config\\include\\stack_config.h"
   MOD_SM,

   MOD_SM_2,
#line 1257 "..\\..\\config\\include\\stack_config.h"
   MOD_LLC,

   MOD_LLC_2,
#line 1261 "..\\..\\config\\include\\stack_config.h"

   
   MOD_TDT,

   MOD_TDT_2,
#line 1267 "..\\..\\config\\include\\stack_config.h"
   MOD_RLP,

   MOD_RLP_2,
#line 1271 "..\\..\\config\\include\\stack_config.h"
   MOD_L2R,

   MOD_L2R_2,
#line 1275 "..\\..\\config\\include\\stack_config.h"
   MOD_T30,

   MOD_T30_2,
#line 1279 "..\\..\\config\\include\\stack_config.h"
   MOD_FA,

   MOD_FA_2,
#line 1283 "..\\..\\config\\include\\stack_config.h"

   
   MOD_MED,
   MOD_AUD=MOD_MED,


   MOD_MED_V,
#line 1291 "..\\..\\config\\include\\stack_config.h"










   MOD_MMI,

   MOD_L1,

   MOD_L1_2,
#line 1307 "..\\..\\config\\include\\stack_config.h"
   MOD_L1HISR,
   MOD_L1SP,
   MOD_L1SPHISR,



#line 1314 "..\\..\\config\\include\\stack_config.h"

   MOD_IDLE,

   MOD_TP_TASK,





   MOD_DRVKBD,
   MOD_BMT,

   MOD_AUX,
#line 1328 "..\\..\\config\\include\\stack_config.h"

   MOD_OBEX,
   MOD_IRCOMM,
   MOD_LAP, 
   MOD_LMP,
   MOD_TTP,
   MOD_IRDA_HISR,

   MOD_USB,


   MOD_FMT, 
#line 1341 "..\\..\\config\\include\\stack_config.h"

   MOD_DRV_HISR,

   MOD_EINT_HISR,

   MOD_UART1_HISR,
   MOD_UART2_HISR,
   MOD_UART3_HISR,

   MOD_KEYPAD_HISR,
   MOD_GPT_HISR,
   MOD_RTC_HISR,
   MOD_VISUAL_HISR,

   MOD_USB_HISR,

   MOD_JPEG_HISR,
   MOD_RESIZER_HISR,

   MOD_MSDC_HISR,


   MOD_ISP_HISR,
#line 1365 "..\\..\\config\\include\\stack_config.h"










   MOD_TIMER,
   MOD_SYSTEM,
   MOD_SYSDEBUG,


   MOD_FLC,
#line 1382 "..\\..\\config\\include\\stack_config.h"

   MOD_ABM,

   MOD_PPP,

   MOD_TCPIP,

   MOD_SOC,

   MOD_WAP,

   MOD_WPS,

   MOD_J2ME,
   MOD_JASYN,
   
   MOD_EMAIL,







   MOD_DT,
#line 1408 "..\\..\\config\\include\\stack_config.h"


   MOD_GDC,
   MOD_GDD,
#line 1413 "..\\..\\config\\include\\stack_config.h"

   MOD_IMPS,
   
   MOD_SIP,   
   MOD_POC,

   MOD_BT,

   MOD_XDM,

   MOD_WNDRV,
   MOD_WNDRV_HISR,
   MOD_SUPC,

   MOD_DHCP,
   MOD_TFTP,
   MOD_SAF,
   MOD_VOIP,

   MOD_IDLER,


   MOD_VUART,
#line 1437 "..\\..\\config\\include\\stack_config.h"


   MOD_MED_C,
#line 1441 "..\\..\\config\\include\\stack_config.h"

   MOD_SYNCML,

















   MOD_RTSP,
   MOD_DM,





   MOD_TDMB,







#line 1476 "..\\..\\config\\include\\stack_config.h"





   MOD_CERTMAN,

   MOD_TLS,






   MOD_CUSTOM_BEGIN,
   LAST_MOD_ID = (MOD_CUSTOM_BEGIN - 1 + 16),

   
   MOD_LIBRARY_BEGIN,

   MOD_SST_COMMON,
   MOD_SST_INIT,
   MOD_SST_TASK,
   MOD_SST_ITC,
   MOD_SST_TIMER,
   MOD_SST_MEM,
   MOD_SST_BUFF,
   MOD_SST_MISC,
   MOD_EMS,
   MOD_DP_ENGINE,
   MOD_SDP,
   MOD_SSL,
   MOD_MMI_FW,
   MOD_MMI_COMMON_APP,
   MOD_MMI_MEDIA_APP,
   MOD_MMI_CONN_APP,
   MOD_MMI_INET_APP,

   END_OF_MOD_ID
} module_type;
















#line 1533 "..\\..\\config\\include\\stack_config.h"


#line 390 "..\\..\\kal\\include\\kal_release.h"
#line 1 "..\\..\\kal\\include\\kal_non_specific_general_types.h"





























































































































































typedef unsigned char           kal_uint8;
typedef signed char             kal_int8;
typedef char                    kal_char;
typedef unsigned short          kal_wchar;

typedef unsigned short int      kal_uint16;
typedef signed short int        kal_int16;

typedef unsigned int            kal_uint32;
typedef signed int              kal_int32;






#line 175 "..\\..\\kal\\include\\kal_non_specific_general_types.h"
   typedef unsigned long long   kal_uint64;
   typedef signed long long     kal_int64;
#line 178 "..\\..\\kal\\include\\kal_non_specific_general_types.h"


   typedef int kal_jmpbuf[64];




#line 186 "..\\..\\kal\\include\\kal_non_specific_general_types.h"

typedef enum 
{
  KAL_FALSE,
  KAL_TRUE
} kal_bool;

typedef void (*kal_func_ptr)(void);






#line 201 "..\\..\\kal\\include\\kal_non_specific_general_types.h"











#line 213 "..\\..\\kal\\include\\kal_non_specific_general_types.h"



















#line 233 "..\\..\\kal\\include\\kal_non_specific_general_types.h"

#line 235 "..\\..\\kal\\include\\kal_non_specific_general_types.h"


#line 391 "..\\..\\kal\\include\\kal_release.h"


#line 1 "..\\..\\init\\include\\task_main_func.h"
























































































typedef struct task_entry_struct
{
   task_indx_type task_indx;
} task_entry_struct;




extern void stack_generic_layer_task( task_entry_struct *task_entry_ptr);

#line 100 "..\\..\\init\\include\\task_main_func.h"

#line 394 "..\\..\\kal\\include\\kal_release.h"
#line 395 "..\\..\\kal\\include\\kal_release.h"

#line 1 "..\\..\\kal\\common\\include\\kal_common_defs.h"















































































































































































































typedef enum {
    KAL_NO_WAIT,
    KAL_INFINITE_WAIT
} kal_wait_mode;

typedef enum {
    KAL_SUCCESS,
    KAL_ERROR,
    KAL_Q_FULL,
    KAL_Q_EMPTY,
    KAL_SEM_NOT_AVAILABLE,
    KAL_WOULD_BLOCK,
    KAL_MESSAGE_TOO_BIG,
    KAL_INVALID_ID,
    KAL_NOT_INITIALIZED,
    KAL_INVALID_LENGHT,
    KAL_NULL_ADDRESS,
    KAL_NOT_RECEIVE,
    KAL_NOT_SEND,
    KAL_MEMORY_NOT_VALID,
    KAL_NOT_PRESENT,
    KAL_MEMORY_NOT_RELEASE
} kal_status;

typedef enum {
    KAL_SEM_GIVEN,
    KAL_SEM_TAKEN
} kal_sem_state;

typedef enum {
    KAL_MUTEX_GIVEN,
    KAL_MUTEX_TAKEN
} kal_mutex_state;

typedef enum {
    
    KAL_ERROR_KAL_INTERNAL_FAIL                     = 0,

    KAL_ERROR_KAL_SUB_ERROR_CODE1                   = 1,
    KAL_ERROR_KAL_SUB_ERROR_CODE2                   = 2,
    KAL_ERROR_KAL_SUB_ERROR_CODE3                   = 3,
    KAL_ERROR_KAL_SUB_ERROR_CODE4                   = 4,
    KAL_ERROR_KAL_SUB_ERROR_CODE5                   = 5,
    KAL_ERROR_KAL_SUB_ERROR_CODE6                   = 6,
    KAL_ERROR_KAL_SUB_ERROR_CODE7                   = 7,
    KAL_ERROR_KAL_SUB_ERROR_CODE8                   = 8,

    
    KAL_ERROR_KALINIT_INIT_FAILED                   = 0x0101,
    KAL_ERROR_KALINIT_INIT_CREATE_SEM_FAILED,
    KAL_ERROR_KALINIT_INIT_CREATE_QU_MUTEX_FAILED,
    KAL_ERROR_KALINIT_INIT_CREATE_POOL_MUTEX_FAILED,
    KAL_ERROR_KALINIT_INIT_CREATE_TIMER_MUTEX_FAILED,
    KAL_ERROR_KALINIT_INIT_CREATE_MEM_MUTEX_FAILED,
    KAL_ERROR_KALINIT_INIT_MEMFAILED,
    KAL_ERROR_KALINIT_MEMINIT_FAILED,
    KAL_ERROR_KALINIT_CACHEINIT_FAILED,
    KAL_ERROR_KALINIT_CRCCHECK_FAILED,

    
    KAL_ERROR_TASKMNGT_CREATE_MEMFAILED             = 0x0201,
    KAL_ERROR_TASKMNGT_CREATE_STACKFAILED,
    KAL_ERROR_TASKMNGT_CREATE_FAILED,
    KAL_ERROR_TASKMNGT_DELETE_FAILED,
    KAL_ERROR_TASKMNGT_SLEEP_FAILED,
    KAL_ERROR_TASKMNGT_GETID_FAILED,
    KAL_ERROR_TASKMNGT_STACKOVERFLOW,

    
    KAL_ERROR_HISRMNGT_CREATE_MEMFAILED             = 0x0211,
    KAL_ERROR_HISRMNGT_CREATE_STACKFAILED,
    KAL_ERROR_HISRMNGT_CREATE_FAILED,
    KAL_ERROR_HISRMNGT_DELETE_FAILED,
    KAL_ERROR_HISRMNGT_SLEEP_FAILED,
    KAL_ERROR_HISRMNGT_ACTIVATE_FAILED,
    KAL_ERROR_HISRMNGT_GETID_FAILED,
    KAL_ERROR_HISRMNGT_STACKOVERFLOW,
    KAL_HISRMNGT_REG_FAILED,

    
    KAL_ERROR_ITC_QCREATE_MEMFAILED                 = 0x0301,
    KAL_ERROR_ITC_QCREATE_DATAMEMFAILED,
    KAL_ERROR_ITC_QCREATE_FAILED,    
    KAL_ERROR_ITC_QCREATE_FAILED_INT,
    KAL_ERROR_ITC_QDELETE_FAILED = KAL_ERROR_ITC_QCREATE_FAILED_INT,
    KAL_ERROR_ITC_QENQUE_FAILED,
    KAL_ERROR_ITC_QENQUE_MEMFAILED,
    KAL_ERROR_ITC_QDEQUE_FAILED,

    KAL_ERROR_ITC_MCREATE_MEMFAILED                 = 0x0401,
    KAL_ERROR_ITC_MDELETE_FAILED,
    KAL_ERROR_ITC_MCREATE_FAILED,
    KAL_ERROR_ITC_MTAKE_FAILED,
    KAL_ERROR_ITC_MGIVE_FAILED,
    KAL_ERROR_ITC_MTAKE_INTERNAL_FAILED,
    KAL_ERROR_ITC_MGIVE_INTERNAL_FAILED,

    KAL_ERROR_ITC_SCREATE_MEMFAILED                 = 0x0411,
    KAL_ERROR_ITC_SDELETE_FAILED,
    KAL_ERROR_ITC_SCREATE_FAILED,
    KAL_ERROR_ITC_STAKE_FAILED,
    KAL_ERROR_ITC_SGIVE_FAILED,

    KAL_ERROR_ITC_EGCREATE_MEMFAILED                = 0x0421,
    KAL_ERROR_ITC_EGDELETE_FAILED,
    KAL_ERROR_ITC_EGCREATE_FAILED,
    KAL_ERROR_ITC_EGSET_FAILED,
    KAL_ERROR_ITC_EGRETRIEVE_FAILED,

    KAL_ERROR_ITC_ILM_MULTIALLOC                    = 0x0431,
    KAL_ERROR_ITC_ILM_NOT_ALLOC,

    KAL_ERROR_ITC_MSGID_CODE_EXCEED                 = 0x441,

    
    KAL_ERROR_TIMER_CREATE_MEMFAILED                = 0x0601,
    KAL_ERROR_TIMER_CREATE_FAILED,
    KAL_ERROR_TIMER_DELETE_FAILED,
    KAL_ERROR_TIMER_SET_FAILED,
    KAL_ERROR_TIMER_CANCEL_FAILED,
    KAL_ERROR_TIMER_GETTIME_FAILED,
    KAL_ERROR_TIMER_GETTIMEREMAINING_FAILED,
    KAL_ERROR_TIMER_SCHED_FAILED,
    KAL_ERROR_TIMER_CONTROL_FAILED,

    
    KAL_ERROR_MEMMNGT_ALLOC_FAILED                  = 0x0701,
    KAL_ERROR_MEMMNGT_ALLOC_DEBUGMEM_FAILED,
    KAL_ERROR_MEMMNGT_DEALLOC_FAILED,
    KAL_ERROR_MEMMNGT_DEALLOC_DEBUGMEM_FAILED,
    KAL_ERROR_MEMMNGT_MEMCPY_FAILED,
    KAL_ERROR_MEMMNGT_MEMSET_FAILED,

    
    KAL_ERROR_BUFFMNGR_CREATE_MEMFAILED             = 0x0801,
    KAL_ERROR_BUFFMNGR_CREATE_FAILED,
    KAL_ERROR_BUFFMNGR_DELETE_FAILED,
    KAL_ERROR_BUFFMNGR_GETBUFF_FAILED,
    KAL_ERROR_BUFFMNGR_GETBUFF_SIZE_FAILED,
    KAL_ERROR_BUFFMNGR_GET_DATABUFF_FAILED,
    KAL_ERROR_BUFFMNGR_RELEASEBUFF_FAILED,
    KAL_ERROR_BUFFMNGR_RELEASE_DATABUFF_FAILED,
    KAL_ERROR_BUFFMNGR_ISVALID_FAILED,
    KAL_ERROR_BUFFMNGR_FOOTER_FAILED,
    KAL_ERROR_BUFFMNGR_HEADER_FAILED,
    KAL_ERROR_BUFFMNGR_FOOTER_FAILED_GET,
    KAL_ERROR_BUFFMNGR_HEADER_FAILED_GET,   
    KAL_ERROR_BUFFMNGR_STAMP_FAILED,
    KAL_ERROR_BUFFMNGR_GETBUFF_INTERNAL_FAILED,
    KAL_ERROR_BUFFMNGR_FREEBUFF_INTERNAL_FAILED,

    
    KAL_ERROR_ERRORMNGR_FATALHANDLER_FAILED         = 0x0901,
    KAL_ERROR_ERRORMNGR_REGISTERHANDLER_FAILED,

    
    KAL_ERROR_FILESYS_INTERNAL_FAILED               = 0x0a01,

    
    KAL_ERROR_NUCLEUS_INTERNAL_FAILED               = 0x0b01,
    KAL_ERROR_DIV_BY_0_FAILED,
    KAL_ERROR_ABNORMAL_RESET_FAILED,
    KAL_ERROR_NON_REGISTERED_LISR,
    KAL_ERROR_DEBUGJ2ME_INTERNAL_ALERT,
    KAL_ERROR_SHOULD_NOT_EXECUTE,

    
    KAL_ERROR_EVTSCH_CREATE_MEMFAILED               = 0x0c01,
    KAL_ERROR_EVTSCH_CREATE_FAILED,
    KAL_ERROR_EVTSCH_GETBUFF_FAILED,
    KAL_ERROR_EVTSCH_RELEASEBUFF_FAILED,
    KAL_ERROR_EVTSCH_CANCEL_FAILED,

    
    KAL_ERROR_DEBUGBUFFMNGR_GETPOOLSTAT_FAILED      = 0x1001,
    KAL_ERROR_DEBUGBUFFMNGR_RESETPOOLSTAT_FAILED,
    KAL_ERROR_DEBUGBUFFMNGR_GETBUFFSTAT_FAILED,
    KAL_ERROR_DEBUGBUFFMNGR_RESETBUFFSTAT_FAILED,
    KAL_ERROR_DEBUGBUFFMNGR_POOLID_VALIDATION_FALIED,
    KAL_ERROR_DEBUGBUFFMNGR_BUFF_OVERRUN_FAILED,

    KAL_ERROR_DEBUGERRORMNGR_REGISTERPRINT_FAILED   = 0x1101,
    KAL_ERROR_DEBUGERRORMNGR_PRINT_FAILED,

    KAL_ERROR_DEBUGITC_GETQSTAT_FAILED              = 0x1201,
    KAL_ERROR_DEBUGITC_RESETQSTAT_FAILED,

    KAL_ERROR_DEBUGTIMER_GETTIMERSTAT_FAILED        = 0x1301,
    KAL_ERROR_DEBUGTIMER_RESETTIMERSTAT_FAILED,

    KAL_ERROR_CUSTOMER_TASK_ID_EXCEED_UPPER_BOUND   = 0x1501,
    KAL_ERROR_CUSTOMER_MOD_ID_EXCEED_UPPER_BOUND,
    KAL_ERROR_CUSTOMER_MEESAGE_ID_EXCEED_UPPER_BOUND,
    KAL_ERROR_CUSTOMER_SAP_ID_EXCEED_UPPER_BOUND,

    KAL_ERROR_ESM_ADD_INSTANCE_FAILED                = 0x1601,
    KAL_ERROR_ESM_ADD_1stINSTANCEENTRY_FAILED,
    KAL_ERROR_ESM_DEL_INSTANCEENTRY_FAILED,
    KAL_ERROR_ESM_EXEC_CONTEXT_FAILED,
    KAL_ERROR_ESM_GET_INSTANCEPOINTER_FAILED,
    KAL_ERROR_ESM_POPULATE_FAILED,
    KAL_ERROR_ESM_INIT_INSTANCEARRAY_FAILED,
    KAL_ERROR_FSM_ADD_EVENTS2LIST_FAILED,
    KAL_ERROR_FSM_ADD_INSTANCEENTRY_FAILED,
    KAL_ERROR_FSM_DEL_INSTANCE_FAILED,
    KAL_ERROR_FSM_EXEC_TRANSITIONFUNC_FAILED,
    KAL_ERROR_FSM_GET_FREEINSTANCE_FAILED,
    KAL_ERROR_FSM_GET_INSTANCEDATA_FAILED,
    KAL_ERROR_FSM_HANDLE_SAVEDEVENTS_FAILED,
    KAL_ERROR_FSM_INIT_CONTEXT_FAILED,
    KAL_ERROR_FSM_PROCESS_EVENTS_FAILED,
    KAL_ERROR_LSM_DEL_EVENTLIST_FAILED,
    KAL_ERROR_LSM_UNDEL_LISTOBJ_FAILED,
    KAL_ERROR_MSM_TRANSITION_FAILED


} kal_error_type;

typedef struct
{
    kal_uint32 param1;
    kal_uint32 param2;
    kal_uint32 param3;
    kal_uint32 param4;
    kal_uint32 param5;
    kal_uint32 param6;
    kal_uint32 param7;
} kal_error_param;




typedef struct {
   kal_uint32	mutex_id;
   kal_uint8	priority;
   kal_uint8	index;
   kal_uint8	head;   
   kal_uint8	tail;   
} *kal_internal_enh_mutexid, kal_enh_mutex_type;


typedef void (* kal_task_func_ptr)(task_entry_struct *task_entry_ptr);
typedef void (* kal_hisr_func_ptr)(void);
typedef void (* kal_error_func_ptr)(kal_char *, kal_uint32, kal_uint32);
typedef void (* kal_timer_func_ptr)(void *);
#line 454 "..\\..\\kal\\common\\include\\kal_common_defs.h"

#line 456 "..\\..\\kal\\common\\include\\kal_common_defs.h"


#line 397 "..\\..\\kal\\include\\kal_release.h"
#line 1 "..\\..\\kal\\common\\include\\kal_internal_macros.h"
































































































#line 98 "..\\..\\kal\\common\\include\\kal_internal_macros.h"


#line 398 "..\\..\\kal\\include\\kal_release.h"














#line 413 "..\\..\\kal\\include\\kal_release.h"



#line 417 "..\\..\\kal\\include\\kal_release.h"

#line 419 "..\\..\\kal\\include\\kal_release.h"















#line 435 "..\\..\\kal\\include\\kal_release.h"







typedef enum
{
    KAL_PRIORITY_CLASS0        =     0,
    KAL_PRIORITY_CLASS1        =     10,
    KAL_PRIORITY_CLASS2        =     20,
    KAL_PRIORITY_CLASS3        =     30,
    KAL_PRIORITY_CLASS4        =     40,
    KAL_PRIORITY_CLASS5        =     50,
    KAL_PRIORITY_CLASS6        =     60,
    KAL_PRIORITY_CLASS7        =     70,
    KAL_PRIORITY_CLASS8        =     80,
    KAL_PRIORITY_CLASS9        =     90,
    KAL_PRIORITY_CLASS10       =     100,
    KAL_PRIORITY_CLASS11       =     110,
    KAL_PRIORITY_CLASS12       =     120,
    KAL_PRIORITY_CLASS13       =     130,
    KAL_PRIORITY_CLASS14       =     140,
    KAL_PRIORITY_CLASS15       =     150,
    KAL_PRIORITY_CLASS16       =     160,
    KAL_PRIORITY_CLASS17       =     170,
    KAL_PRIORITY_CLASS18       =     180,
    KAL_PRIORITY_CLASS19       =     190,
    KAL_PRIORITY_CLASS20       =     200,
    KAL_PRIORITY_CLASS21       =     210,
    KAL_PRIORITY_CLASS22       =     220,
    KAL_PRIORITY_CLASS23       =     230,
    KAL_PRIORITY_CLASS24       =     240,
    KAL_PRIORITY_CLASS25       =     250
} kal_priority_type;
#line 472 "..\\..\\kal\\include\\kal_release.h"

typedef void *kal_taskid;

typedef void *kal_hisrid;

typedef struct
{
    kal_uint8 unused;
} *kal_semid;

typedef struct 
{
    kal_uint8 unused;
} *kal_msgqid;

typedef struct
{
    kal_uint32 pending_msgs;
    kal_uint32 max_msgs;
} kal_msgq_info;

typedef struct
{
    kal_uint8 unused;
} *kal_mutexid;

typedef struct 
{
    kal_uint8 unused;
} *kal_eventgrpid;

typedef struct
{
    kal_uint8 unused;
} *kal_poolid;

typedef struct
{
    kal_uint8 unused;
} *kal_timerid;

typedef void *KAL_ADM_ID;

typedef enum
{
    INVAID_EXCEPTION                =  0,
    UNDEF_EXCEPTION                 =  1,
    SWI_EXCEPTION                   =  2,
    PREFETCH_EXCEPTION              =  3,
    DATAABORT_EXCEPTION             =  4,
    ASSERT_FAIL_EXCEPTION           =  5,
    SYS_FATALERR_EXT_TASK_EXCEPTION =  6,
    SYS_FATALERR_EXT_BUF_EXCEPTION  =  7,
    SYS_LOCKUP                      =  8,
    ASSERT_DUMP_EXTENDED_RECORD     =  9,
    NUM_EXCEPTION
} exception_type;

enum { ASSERT_DUMP_PARAM_MAX = 10 };

typedef struct ASSERT_DUMP_PARAM
{
    kal_uint32 addr[ASSERT_DUMP_PARAM_MAX];
    kal_uint32 len[ASSERT_DUMP_PARAM_MAX];  
} ASSERT_DUMP_PARAM_T;

typedef enum
{
    FACTORY_BOOT = 0,
    NORMAL_BOOT = 1,
    USBMS_BOOT =  2,
    NUM_OF_BOOT_MODE,
    UNKNOWN_BOOT_MODE = 0xff
} boot_mode_type;

typedef unsigned short WCHAR;























__inline boot_mode_type stack_query_boot_mode(void)
{
	extern boot_mode_type system_boot_mode;
	return system_boot_mode;
} 

__inline void * kal_mem_cpy(void* dest, const void* src, kal_uint32 size)
{
    return memcpy ( dest, src, size );
}


__inline void * kal_mem_set(void* dest, kal_uint8 value, kal_uint32 size)
{
    return memset ( dest, value, size );
}

__inline kal_int32 kal_mem_cmp(const void* src1, const void* src2, kal_uint32 size)
{
    return memcmp ( src1, src2, size );
}










void kal_initialize(void);
void kal_initialize_mem(void);
kal_bool kal_query_systemInit(void);





kal_taskid kal_create_task(kal_char *task_name_ptr, kal_uint8 priority, kal_uint32 stack_size, \
                           kal_task_func_ptr entry_func_ptr, void *entry_param_ptr, kal_uint8 options);
void kal_delete_task(kal_taskid task_id);
void kal_sleep_task(kal_uint32 time_in_ticks);
kal_hisrid kal_create_hisr(kal_char* hisr_name, kal_uint8 priority, kal_uint32 stack_size, \
                           kal_hisr_func_ptr entry_func, kal_uint8 options);
void kal_activate_hisr(kal_hisrid ext_hisr_id);
kal_uint32 kal_change_priority(kal_taskid taskid, kal_uint32 new_priority);
kal_uint32 stack_change_priority_by_module_ID(module_type mod_ID, kal_uint32 new_priority);
kal_uint32 stack_change_default_priority_by_module_ID(module_type mod_ID, kal_uint32 new_priority);
void *kal_get_task_stack_ptr(kal_taskid taskid);
kal_uint32 kal_get_task_remain_stack_size(kal_taskid task);
kal_bool kal_if_hisr(void);
kal_taskid kal_get_task_self_id(void);
void kal_get_my_task_index(kal_uint32 *index);
kal_bool kal_if_lisr(void);






kal_msgqid kal_create_msg_q(kal_char* queue_name_ptr, kal_uint16 msg_size, kal_uint16 max_msgs);
void kal_delete_msg_q(kal_msgqid queue_id);
kal_status kal_enque_msg(kal_msgqid ext_msg_q_id, void *buffer_ptr, kal_uint16 msg_size, 
                         kal_wait_mode wait_mode, kal_bool message_to_head);
kal_status kal_deque_msg(kal_msgqid ext_msg_q_id, void* buffer_ptr, kal_uint16 *msg_size,
                         kal_wait_mode wait_mode);
kal_bool kal_get_queue_info(kal_msgqid task_ext_qid, kal_msgq_info *msgq_info);





kal_mutexid kal_create_mutex(kal_char* mutex_name_ptr);
void kal_take_mutex(kal_mutexid mutex_id);
void kal_give_mutex(kal_mutexid mutex_id);

kal_mutexid kal_create_enh_mutex( kal_char* mutex_name_ptr);
void kal_take_enh_mutex( kal_mutexid    mutex_id );
void kal_give_enh_mutex( kal_mutexid    mutex_id );





kal_semid kal_create_sem(kal_char *sem_name_ptr, kal_uint32 initial_count);
kal_status kal_take_sem(kal_semid sem_id, kal_wait_mode wait_mode);
void kal_give_sem(kal_semid sem_id);
kal_uint32 kal_query_sem_value(kal_semid ext_sem_id_ptr);





kal_eventgrpid kal_create_event_group(kal_char *eventgrp_name);
void kal_delete_eventgrp(kal_eventgrpid eg_id);
kal_status kal_set_eg_events(kal_eventgrpid eg_id, kal_uint32 events, kal_uint8 operation);
kal_status kal_retrieve_eg_events(kal_eventgrpid eg_id, kal_uint32 requested_events, kal_uint8 operation, 
                                  kal_uint32 *retrieved_events, kal_uint32 suspend);





void kal_evshed_create_pool(void);
void* kal_evshed_get_mem(kal_uint32 size);
void kal_evshed_free_mem(void* buff_ptr);





extern KAL_ADM_ID kal_adm_create(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_bool islogging);
extern void *kal_adm_internal_alloc(KAL_ADM_ID adm_id, kal_uint32 size, char *filename, kal_uint32 line);

extern void *kal_adm_internal_alloc_with_info(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);

extern void kal_adm_free(KAL_ADM_ID adm_id, void *mem_addr);
extern kal_status kal_adm_delete(KAL_ADM_ID adm_id);
extern kal_uint32 kal_adm_get_max_alloc_size(KAL_ADM_ID adm_id);
extern kal_uint32 kal_adm_get_total_left_size(KAL_ADM_ID adm_id);
extern void kal_adm_print_log(KAL_ADM_ID adm_id);
extern void *kal_adm_check_integrity(KAL_ADM_ID adm_id);





extern kal_uint32 kal_sys_mem_query_freesize(void);
extern kal_uint32 kal_debug_mem_query_freesize(void);






kal_poolid kal_create_buff_pool(kal_uint32 buff_size, kal_uint16 num_buffs);
void kal_delete_buff_pool(kal_poolid pool_id);
void *kal_get_buffer(kal_poolid ext_pool_id, kal_uint32 alloc_id, kal_uint32 size,
                     kal_uint32 *num_free_buffs_p, kal_char *alloc_file, kal_uint32 alloc_line,
                     kal_bool alloc_check);
void kal_release_buffer(void *usr_buff, kal_uint32 dealloc_id, kal_char *dealloc_file, 
                        kal_uint32 dealloc_line);
kal_poolid kal_get_poolid_from_usr_buff(void* usr_buff_p);
kal_uint32 kal_get_num_free_buffs( kal_poolid pool_id );
kal_bool kal_query_ctrlbuf_max_consumption(kal_uint32 *ptr);






kal_timerid kal_create_timer(kal_char* timer_name_ptr);
void kal_set_timer(kal_timerid timer_id, kal_timer_func_ptr handler_func_ptr, void* handler_param_ptr, \
                   kal_uint32 delay, kal_uint32 reschedule_time);
void kal_cancel_timer(kal_timerid timer_id);
void kal_get_time(kal_uint32* ticks_ptr);
kal_uint32 kal_get_time_remaining(kal_timerid timer_id);
kal_uint32 kal_secs_to_ticks(kal_uint32 secs);
kal_uint32 kal_milli_secs_to_ticks(kal_uint32 milli_secs);
kal_uint32 kal_ticks_to_secs(kal_uint32 ticks);
kal_uint32 kal_ticks_to_milli_secs(kal_uint32 ticks);
kal_uint32 kal_check_allowed_sleep_clock(kal_uint32 period_ticks);
void kal_recover_clock(kal_uint32 delayed_ticks);
void kal_invoke_expired_events(kal_uint32 delayed_ticks);



void kal_adjust_sim_tick(kal_uint32 new_msec);
#line 741 "..\\..\\kal\\include\\kal_release.h"






void kal_fatal_error_handler(kal_char* error_message_ptr, kal_uint32 error_code, kal_uint32 os_error_code);
void kal_register_fatal_error_handler(kal_error_func_ptr fatal_handler_ptr);
void kal_exit(void);




























#line 779 "..\\..\\kal\\include\\kal_release.h"

extern void stack_print(char* string);





#line 787 "..\\..\\kal\\include\\kal_release.h"






extern kal_char *kal_str_dup(kal_char *string);
extern kal_char *kal_strtok_r(kal_char *string, const kal_char *seperators, kal_char **ppLast);

extern char *basename(char *file);


extern void kal_assert_fail(char* expr, char* file, kal_uint32 line, kal_bool isext, kal_uint32 ex1, kal_uint32 ex2, kal_uint32 ex3, ASSERT_DUMP_PARAM_T *dump_param);


#line 803 "..\\..\\kal\\include\\kal_release.h"



#line 807 "..\\..\\kal\\include\\kal_release.h"
























#line 832 "..\\..\\kal\\include\\kal_release.h"






#line 839 "..\\..\\kal\\include\\kal_release.h"

#line 841 "..\\..\\kal\\include\\kal_release.h"









#line 851 "..\\..\\kal\\include\\kal_release.h"
#line 852 "..\\..\\kal\\include\\kal_release.h"






int kal_wstrlen(const WCHAR *wstr);
WCHAR *kal_wstrcpy(WCHAR *to, const WCHAR *from);
WCHAR *kal_wstrncpy(WCHAR *to, const WCHAR *from, int n);
int kal_wstrcmp(const WCHAR *s1, const WCHAR *s2);
int kal_wstrncmp(const WCHAR *s1, const WCHAR *s2, int n);
WCHAR *kal_wstrcat(WCHAR *s1, const WCHAR *s2);
WCHAR *kal_wstrncat(WCHAR *s1, const WCHAR *s2, int n);
WCHAR *kal_wstrchr(const WCHAR *s, int c);
WCHAR *kal_wstrrchr(const WCHAR *str, int ch);


int kal_dchar_strlen(const char *wstr);
char *kal_dchar_strcpy(char *to, const char *from);
char *kal_dchar_strncpy(char *to, const char *from, int n);
int kal_dchar_strcmp(const char *s1, const char *s2);
int kal_dchar_strncmp(const char *s1, const char *s2, int n);
char *kal_dchar_strcat(char *s1, const char *s2);
char *kal_dchar_strncat(char *s1, const char *s2, int n);
char *kal_dchar_strchr(const char *s, int c);
char *kal_dchar_strrchr(const char *str, int ch);
void kal_dchar2char(WCHAR *outstr, char* tostr);

void kal_wsprintf(WCHAR *outstr, char *fmt,...);










#line 892 "..\\..\\kal\\include\\kal_release.h"
#line 1 "..\\..\\kal\\oscar\\include\\kal_oscar_common_defs.h"

























































































   
   
   
   
   
   
   
   
   
   










typedef osc_struct_thread  kal_os_task_type;
typedef osc_struct_thread  kal_os_hisr_type;
typedef osc_struct_queue   kal_os_queue_type;
typedef osc_struct_sema    kal_os_mutex_type;
typedef osc_struct_sema    kal_os_sem_type;
typedef osc_struct_event   kal_os_eventgrp_type;
typedef osc_struct_timer   kal_os_timer_type;
typedef osc_struct_buffer  kal_os_pool_type;

typedef osc_type_func_ptr kal_nu_task_func_ptr;
typedef osc_type_func_ptr kal_nu_hisr_func_ptr;
typedef osc_type_func_ptr kal_nu_timer_func_ptr;

typedef struct {
   struct kal_int_pool_struct*  pool_id;
   void *                       start_address;
   void *                       end_address;
} kal_buff_pool_info;





   



   



   


#line 145 "..\\..\\kal\\oscar\\include\\kal_oscar_common_defs.h"
#line 893 "..\\..\\kal\\include\\kal_release.h"
#line 1 "..\\..\\kal\\oscar\\include\\kal_oscar.h"









































































































#line 107 "..\\..\\kal\\oscar\\include\\kal_oscar.h"









#line 117 "..\\..\\kal\\oscar\\include\\kal_oscar.h"











#line 129 "..\\..\\kal\\oscar\\include\\kal_oscar.h"
typedef struct kal_int_task_struct {
   kal_os_task_type task_id;
   kal_char *task_name;
   kal_uint32 task_index;
} *kal_internal_taskid, kal_task_type;
#line 135 "..\\..\\kal\\oscar\\include\\kal_oscar.h"

typedef struct kal_int_hisr_struct {
   kal_os_hisr_type hisr_id;
   kal_char *hisr_name;
} *kal_internal_hisrid, kal_hisr_type;














#line 155 "..\\..\\kal\\oscar\\include\\kal_oscar.h"







typedef struct kal_int_queue_statistics_struct {
   



   kal_uint16    current_num_msgs;
   kal_uint16    max_num_msgs_enqued;
} *kal_internal_queue_statistics, kal_queue_stat_type;

typedef struct {
   kal_os_queue_type    queue_id;
   kal_uint16           max_msg_size;
   kal_internal_queue_statistics    q_stat;
} *kal_internal_msgqid, kal_queue_type;

typedef struct kal_int_mutex_statistics_struct {
   
   struct kal_int_task_struct    *owner_task;
   kal_mutex_state               mutex_state;
} *kal_internal_mutex_statistics, kal_mutex_stat_type;

typedef struct {
   kal_os_mutex_type                         mutex_id;
   kal_os_task_type                          *owner_task;
   kal_mutex_state                           mutex_state;
   struct kal_int_mutex_statistics_struct    *mutex_stat;
} *kal_internal_mutexid, kal_mutex_type;

typedef struct kal_int_sem_statistics {
   
   kal_uint16           current_value;
   kal_uint16           max_value;
   kal_uint16           min_value;
} *kal_internal_sem_statistics, kal_sem_stat_type;

typedef struct {
   kal_os_sem_type                           sem_id;
   kal_sem_state                             sem_state;
   struct kal_int_sem_statistics             *sem_stat;
}*kal_internal_semid, kal_sem_type;
















#line 219 "..\\..\\kal\\oscar\\include\\kal_oscar.h"

typedef kal_os_eventgrp_type *kal_internal_eventgrpid, kal_eventgrp_type;





























#line 251 "..\\..\\kal\\oscar\\include\\kal_oscar.h"

typedef struct {
   kal_os_timer_type       timer_id;
   kal_timer_func_ptr      func_ptr;
   void *                  timer_param_ptr;
   kal_uint32              set_time;
} * kal_internal_timerid, kal_timer_type;

#line 260 "..\\..\\kal\\oscar\\include\\kal_oscar.h"









typedef struct kal_int_pool_struct {
   kal_os_pool_type        pool_id;
   kal_bool                pool_debug_mask;
   kal_uint32              buff_size;

   struct kal_int_pool_statistics_struct    *pool_stat;
   kal_mutexid             protecting_mutex;
#line 277 "..\\..\\kal\\oscar\\include\\kal_oscar.h"
} *kal_internal_poolid, kal_pool_type;

typedef struct {
   kal_uint32 hdr_stamp;
   kal_internal_taskid task_id;
   kal_internal_poolid pool_id;
   kal_uint8 usr_buff[1];
} buff_hdr_t;







#line 293 "..\\..\\kal\\oscar\\include\\kal_oscar.h"


















#line 312 "..\\..\\kal\\oscar\\include\\kal_oscar.h"





extern kal_char sys_info_str[128];





kal_uint32 kal_milli_secs_to_ticks( kal_uint32 milli_secs );
kal_uint32 kal_secs_to_ticks ( kal_uint32 secs );

#line 327 "..\\..\\kal\\oscar\\include\\kal_oscar.h"

#line 894 "..\\..\\kal\\include\\kal_release.h"


#line 897 "..\\..\\kal\\include\\kal_release.h"



#line 1 "..\\..\\kal\\common\\include\\kal_internal.h"
























































































   




extern void* kal_internal_allocate_buffer( void* pool_id, unsigned short buff_size);
extern void kal_internal_release_buffer( void* );


   void* kal_debug_mem_alloc(kal_uint32 size);
   void kal_debug_mem_free(void* mem_ptr);
#line 101 "..\\..\\kal\\common\\include\\kal_internal.h"




#line 106 "..\\..\\kal\\common\\include\\kal_internal.h"
   void* kal_int_mem_alloc( kal_uint32  size );
   void kal_int_mem_free( void* mem_ptr );
#line 109 "..\\..\\kal\\common\\include\\kal_internal.h"

#line 111 "..\\..\\kal\\common\\include\\kal_internal.h"


#line 901 "..\\..\\kal\\include\\kal_release.h"
#line 1 "..\\..\\stacklib\\include\\lcd_ip_cqueue.h"























































































































































    
#line 154 "..\\..\\stacklib\\include\\lcd_ip_cqueue.h"









































#line 196 "..\\..\\stacklib\\include\\lcd_ip_cqueue.h"


































#line 231 "..\\..\\stacklib\\include\\lcd_ip_cqueue.h"




































#line 268 "..\\..\\stacklib\\include\\lcd_ip_cqueue.h"





































#line 306 "..\\..\\stacklib\\include\\lcd_ip_cqueue.h"

































#line 340 "..\\..\\stacklib\\include\\lcd_ip_cqueue.h"



















#line 360 "..\\..\\stacklib\\include\\lcd_ip_cqueue.h"


#line 902 "..\\..\\kal\\include\\kal_release.h"


#line 1 "..\\..\\kal\\common\\include\\kal_debug_common_defs.h"






























































































































































typedef enum {
   KAL_BUFF_DEALLOCATED,
   KAL_BUFF_ALLOCATED,
   KAL_BUFF_CORRUPTED
} kal_buff_state;

typedef struct kal_history_node {
   kal_buff_state                 buffer_state;
   struct kal_int_task_struct*    owner_task;
   kal_char*                      file_name;
   kal_uint32                     line;
   kal_uint32                     alloc_id;



   kal_uint32                     size;
#line 176 "..\\..\\kal\\common\\include\\kal_debug_common_defs.h"
} kal_history_node_t;

typedef struct kal_int_buff_stats {
   kal_internal_taskid owner_task;
   kal_uint8 buffer_state;
   struct { unsigned int head; unsigned int tail; unsigned int multiple; unsigned int max_used_item; kal_bool is_full; kal_history_node_t queue[3]; } buff_history;




} *kal_internal_buff_statistics, kal_buff_stat_type;

#line 189 "..\\..\\kal\\common\\include\\kal_debug_common_defs.h"







extern void kal_debug_validate_poolid(kal_internal_poolid pool_id, kal_uint32* pool_index_p);

extern void kal_debug_update_buff_history(buff_hdr_t* buff_hdr_p,
                                          kal_buff_state buff_state,
                                          kal_uint32 size,
                                          kal_char* file,
                                          kal_uint32 line,
                                          kal_uint32 alloc_id);

extern kal_bool is_buff_over_run(void* dest_ptr, kal_uint32 size, kal_uint32 pool_index);

extern void kal_reset_pool(kal_internal_poolid pool_id);

extern void kal_debug_validate_buff_hdr(buff_hdr_t* buff_hdr);

extern kal_bool kal_debug_is_buff_footer_corrupted(kal_uint8* usr_buff,
                                                   kal_history_node_t* tail_node_p);

extern void kal_debug_get_last_history_node(void* buff_ptr, kal_history_node_t* tail_node_ptr);





#line 221 "..\\..\\kal\\common\\include\\kal_debug_common_defs.h"

extern kal_bool kal_debug_get_poolindex(void* buff_ptr, kal_uint32* index_p);






extern kal_uint16 kal_get_buff_num(void *buff_ptr);

extern void kal_debug_validate_buff_hdr( buff_hdr_t* buff_hdr );

extern void kal_debug_validate_buff_footer(kal_uint8* usr_buff, kal_history_node_t* tail_node_p);



#line 238 "..\\..\\kal\\common\\include\\kal_debug_common_defs.h"

extern void kal_uint_2_hex_str( kal_uint32 num, kal_char* string );

extern void kal_uint_2_str( kal_uint32 num, kal_char* string );

extern kal_bool kal_debug_is_history_empty( kal_internal_poolid pool_id, void*  buff_ptr );



#line 248 "..\\..\\kal\\common\\include\\kal_debug_common_defs.h"

extern void kal_validate_buff_footer(void *buff_ptr, kal_uint32 buff_size );

extern void kal_take_reentrant_mutex(kal_os_mutex_type *mutex_id);

extern void kal_give_reentrant_mutex(kal_os_mutex_type *mutex_id);











extern kal_buff_pool_info   pool_info_g [ 40 ];
extern kal_uint8            num_buff_pools_created_g;







extern kal_internal_taskid  kal_task_ptrs_g [ RPS_TOTAL_STACK_TASKS ];
extern kal_internal_hisrid  kal_hisr_ptrs_g [ 20 ];

#line 278 "..\\..\\kal\\common\\include\\kal_debug_common_defs.h"


#line 905 "..\\..\\kal\\include\\kal_release.h"
#line 906 "..\\..\\kal\\include\\kal_release.h"



#line 910 "..\\..\\kal\\include\\kal_release.h"
#line 1 "..\\..\\kal\\oscar\\include\\kal_debug_oscar.h"











































































   
   
   
   

   



   

   
   

   
   
#line 93 "..\\..\\kal\\oscar\\include\\kal_debug_oscar.h"

#line 911 "..\\..\\kal\\include\\kal_release.h"
#line 912 "..\\..\\kal\\include\\kal_release.h"

#line 1 "..\\..\\kal\\include\\kal_debug.h"


































































































































struct ptr_node {
	void* ptr;
	kal_uint32 size;
	struct ptr_node* next_ptr;
};







#line 144 "..\\..\\kal\\include\\kal_debug.h"

typedef struct kal_pool_statistics_struct {
	kal_uint16 num_buffs;



	kal_uint32 buff_size;
#line 152 "..\\..\\kal\\include\\kal_debug.h"
	
	kal_uint16 current_allocation;
	kal_uint16 max_num_allocated;
	kal_uint16 max_size_requested;


#line 159 "..\\..\\kal\\include\\kal_debug.h"
} *kal_pool_statistics;

















#line 178 "..\\..\\kal\\include\\kal_debug.h"



extern kal_bool                  kal_buff_over_run_check_g;

typedef struct kal_ext_buff_stats {
	kal_buff_state  buffer_state;
	kal_char*       task_name;
} *kal_ext_buff_statistics, kal_ext_buff_stat_type;

typedef struct kal_buff_stats {
	kal_uint8   unused;
}* kal_buff_statistics;

typedef struct kal_int_pool_statistics_struct {
	struct kal_pool_statistics_struct   pool_info;
	struct kal_int_buff_stats*          buff_stat;
} *kal_internal_pool_statistics, kal_pool_stat_type;

#line 198 "..\\..\\kal\\include\\kal_debug.h"

typedef void(*kal_print_string_func_ptr)(kal_char*);

typedef enum {
	KAL_DEBUG_DISABLE,
	KAL_DEBUG_ENABLE
} kal_debug_state;

typedef enum {
	KAL_BUFFMGR     = 0x1,
	KAL_TIMERMGR    = 0x2,
	KAL_TASKMGR     = 0x4,
	KAL_ITC         = 0x8
} kal_module;





#line 218 "..\\..\\kal\\include\\kal_debug.h"



typedef struct kal_queue_statistics_struct {
	kal_uint8   unused;
}* kal_queue_statistics;

typedef struct kal_mutex_statistics_struct {
	kal_uint8   unused;
}* kal_mutex_statistics;

typedef struct kal_sem_statistics_struct {
	kal_uint8   unused;
}* kal_sem_statistics;

#line 234 "..\\..\\kal\\include\\kal_debug.h"





#line 240 "..\\..\\kal\\include\\kal_debug.h"























#line 264 "..\\..\\kal\\include\\kal_debug.h"




#line 269 "..\\..\\kal\\include\\kal_debug.h"












void kal_debug_get_q_statistics( kal_msgqid  queue_id, kal_queue_statistics* stat_ptr );
void kal_debug_reset_q_statistics( kal_msgqid    queue_id );






#line 290 "..\\..\\kal\\include\\kal_debug.h"







void kal_debug_get_all_buff_statistics(kal_poolid pool_id, kal_ext_buff_statistics buff_stat_ptr);
void kal_debug_reset_pool_statistics(kal_poolid pool_id);
void kal_debug_get_buffer_statistics(void* buffer_ptr, kal_buff_statistics* stat_ptr);
void kal_debug_reset_buffer_statistics(void* buffer_ptr);






















#line 324 "..\\..\\kal\\include\\kal_debug.h"

void kal_debug_is_valid_buffer(void* buff_ptr, kal_bool* status_ptr);












#line 339 "..\\..\\kal\\include\\kal_debug.h"




















#line 360 "..\\..\\kal\\include\\kal_debug.h"




#line 365 "..\\..\\kal\\include\\kal_debug.h"













void kal_debug_register_print_string_function (kal_print_string_func_ptr func_ptr);
void kal_debug_print(kal_char* string_to_be_printed);
void kal_debug_print_int(kal_int32 int_to_be_printed);
void kal_debug_print_uint(kal_uint32 int_to_be_printed);
void kal_debug_print_uint_in_hex(kal_uint32 int_to_be_printed);
void kal_debug_enable_debug( kal_module debug_code, kal_debug_state    flag);
void kal_debug_abort( void );
void kal_debug_reset( void );






























#line 417 "..\\..\\kal\\include\\kal_debug.h"

#line 419 "..\\..\\kal\\include\\kal_debug.h"

#line 421 "..\\..\\kal\\include\\kal_debug.h"

#line 914 "..\\..\\kal\\include\\kal_release.h"
#line 1 "..\\..\\kal\\include\\kal_trace.h"




























































































































































































































































































































































































#line 915 "..\\..\\kal\\include\\kal_release.h"

#line 917 "..\\..\\kal\\include\\kal_release.h"

#line 1 "..\\..\\kal\\common\\include\\kal_active_module.h"








































































































extern module_type stack_int_get_active_module_id( void );

extern void stack_int_set_active_module_id( kal_uint32 task_index, module_type module_id );
#line 109 "..\\..\\kal\\common\\include\\kal_active_module.h"


#line 919 "..\\..\\kal\\include\\kal_release.h"


#line 922 "..\\..\\kal\\include\\kal_release.h"


#line 812 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\kal\\include\\kal_trace.h"




























































































































































































































































































































































































#line 813 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"





       














































#line 866 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
       

#line 1 "..\\..\\kal\\include\\kal_release.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 869 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\kal\\include\\kal_trace.h"




























































































































































































































































































































































































#line 870 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"





       
































#line 909 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"


#line 1 "..\\..\\kal\\include\\kal_release.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 912 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\kal\\include\\kal_trace.h"




























































































































































































































































































































































































#line 913 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"






































#line 952 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"


#line 1 "..\\..\\kal\\include\\kal_release.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 955 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\kal\\include\\kal_trace.h"




























































































































































































































































































































































































#line 956 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"






































#line 995 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"


#line 1 "..\\..\\kal\\include\\kal_release.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 998 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\kal\\include\\kal_trace.h"




























































































































































































































































































































































































#line 999 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"





   
































#line 1038 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"


START_MODULE_MSG MOD_MMI 20

   
   
   
   

   
   
   
   
#line 1 "..\\..\\plutommi\\mmi\\inc\\MMI_fw_trc.h"













































































































    
    
    MMI_FRM_FUN_EVENT_INIT "InitFramework"
    MMI_FRM_FUN_EVENT_DEINIT_KEY_EVENT "[Key] DeInitFramework_KeyAndEventHandler"
    MMI_FRM_FUN_EVENT_DEINIT_HISTORY "[History] DeInitFramework_History"
    MMI_FRM_FUN_EVENT_DEINIT "DeInitFramework"
    
    MMI_FRM_INFO_EVENT_EXECURKEY_HDLR "[Key] [Keypad Lock] ExecuteCurrKeyHandler: Timer %d start"
    MMI_FRM_INFO_EVENT_EXECURKEY_KEYCODE_HDLR "[Key] ExecuteCurrKeyHandler: <keyHandler 0x%x, keyCode %Mmmi_keypads_enum, keyType %Mmmi_key_types_enum>   "
    MMI_FRM_INFO_EVENT_EXECURPTO_INTP_HDLR "[Protocol] ExecuteCurrProtocolHandler: <execute interrupt handler <id %Mmsg_type>"
    MMI_FRM_INFO_EVENT_EXECURPTO_HDLR "[Protocol] ExecuteCurrProtocolHandler: <execute protocol handler <id %Mmsg_type>"
    MMI_FRM_INFO_EVENT_EXECURPTO_NO_HDLR "[Protocol] ExecuteCurrProtocolHandler: <message is not process <id %Mmsg_type>"
    MMI_FRM_INFO_EVENT_EXIT_HDLR "[Screen] ExecuteCurrExitHandler_Ext: <execute exit handler>"
    MMI_FRM_INFO_EVENT_EXIT_SUBLCD_HDLR "[Screen] ExecuteCurrSubLcdExitHandler"
    
    MMI_FRM_INFO_EVENT_EXECURHILIHTE_HDLR "[Menu] ExecuteCurrHiliteHandler: execute hilite handler id %MGLOBALMENUITEMSID  funcPtr 0x%x>"
    MMI_FRM_ERROR_EVENT_EXECURHILIHTE_HDLR "[Menu] ExecuteCurrHiliteHandler: In ExecuteCurrHiliteHandler but the Parent is Zero"
    MMI_FRM_INFO_EVENT_SETCURHILIHTE_HDLR "[Menu] SetHiliteHandler: <set hilite item handler id %MGLOBALMENUITEMSID funcPtr 0x%x>"
    MMI_FRM_INFO_EVENT_CLRCURHILIHTE_HDLR "[Menu] ClearHiliteHandler: <clear hilite item handler id %MGLOBALMENUITEMSID>"
    MMI_FRM_INFO_EVENT_CLRALLHILIHTE_HDLR "[Menu] ClearAllHiliteHandler: <clears hilite item handler >"
    
    MMI_FRM_INFO_EVENT_SETHINT_HDLR "[Menu] SetHintHandler: <set hint item handler id %MGLOBALMENUITEMSID funcPtr 0x%x>"
    MMI_FRM_INFO_EVENT_CLRHINT_HDLR "[Menu] ClearHintHandler: <clear hint item handler id %MGLOBALMENUITEMSID>"
    
    MMI_FRM_INFO_EVENT_SETPARENT_HDLR "[Menu] SetParentHandler: <set parent item id %MGLOBALMENUITEMSID>"
    
    MMI_FRM_INFO_EVENT_SETKEY_HDLR "[Key] SetKeyHandler: <register key handler; keyCode %Mmmi_keypads_enum, keyType %Mmmi_key_types_enum, funcPtr 0x%x>"
    MMI_FRM_INFO_EVENT_SETGROUPKEY_HDLR "[Key] SetGroupKeyHandler: < Group size %d, keyType %Mmmi_key_types_enum, funcPtr 0x%x >"
    MMI_FRM_INFO_EVENT_CLRKEY_HDLR "[Key] ClearKeyHandler: <clear key handler <keyCode %Mmmi_keypads_enum, keyType %Mmmi_key_types_enum>"
    MMI_FRM_INFO_EVENT_CLRALLKEY_HDLR "[Key] ClearAllKeyHandler: <clear all key handlers>"
    
    MMI_FRM_INFO_EVENT_SETPTO_HDLR "[Protocol] SetProtocolEventHandler: <event, handler>=%Mmsg_type, 0x%x;  <used/max>=%d, %d"
    MMI_FRM_INFO_EVENT_CLRPTO_HDLR "[Protocol] ClearProtocolEventHandler: <clears protocol event handler %Mmsg_type>"
    MMI_FRM_INFO_EVENT_CLRALLPTO_HDLR "[Protocol] ClearAllProtocolEventHandler: <clears all the protocol event handler>"
    MMI_FRM_INFO_EVENT_SETSLPTO_HDLR "[Protocol][SLAVE] SetSlaveProtocolEventHandler: <event, handler>=%Mmsg_type, 0x%x;  <used/max>=%d, %d"
    MMI_FRM_INFO_EVENT_CLRSLPTO_HDLR "[Protocol][SLAVE] ClearSlaveProtocolEventHandler: <clears protocol event handler %Mmsg_type>"
    MMI_FRM_INFO_EVENT_CLRSLALLPTO_HDLR "[Protocol][SLAVE] ClearAllSlaveProtocolEventHandler: <clears all the protocol event handler>"
    
    MMI_FRM_INFO_EVENT_ENTRYSCR_HDLR "[Screen] EntryNewScreen: <Enter the new screen ID=%Mmmi_screen_id_cgen_enum ExitFuncPtr = 0x%x EntryFuncPtr = 0x%x>"
    MMI_FRM_INFO_EVENT_SETENTRY_HDLR "[Screen] SetEntryHandler: <set current screen ID=%Mmmi_screen_id_cgen_enum entry handler FuncPtr = 0x%x>"
    MMI_FRM_INFO_EVENT_SETEXIT_HDLR "[Screen] SetExitHandler: <sets current screen ID=%Mmmi_screen_id_cgen_enum exit handler FuncPtr = 0x%x>"
    MMI_FRM_INFO_EVENT_CLRENTRY_HDLR "[Screen] ClearEntryHandler: <clear current screen entry handler>"
    MMI_FRM_INFO_EVENT_CLREXIT_HDLR "[Screen] ClearExitHandler: <clear current screen exit handler>"
    
    MMI_FRM_INFO_EVENT_SETGEN_EXIT_HDLR "[Screen] SetGenericExitHandler: <sets generic screen ID=%Mmmi_screen_id_cgen_enum exit handler>"
    MMI_FRM_INFO_EVENT_EXEGEN_EXIT_HDLR "[Screen] GenericExitScreen: <exec generic screen ID=%Mmmi_screen_id_cgen_enum exit handler EntryFuncPtr = 0x%x>"
    MMI_FRM_INFO_EVENT_GETGEN_EXIT_HDLR "[Screen] GetExitScrnID: <Get the screen ID=%Mmmi_screen_id_cgen_enum  that will be exited.>"
    
    MMI_FRM_INFO_EVENT_SETINTP_HDLR "[Protocol] SetInterruptEventHandler: <set interrupt event handler %Mmsg_type>"
    MMI_FRM_INFO_EVENT_SETGRPINTP_HDLR "[Protocol] SetGroupInterruptEventHandler: <set group interruptEvent handler %Mmsg_type>"
    MMI_FRM_INFO_EVENT_CLRINTP_HDLR "[Protocol] ClearInterruptEventHandler: <clears interrupt event handler %Mmsg_type>"
    MMI_FRM_INFO_EVENT_CLRALLINTP_HDLR "[Protocol] ClearAllInterruptEventHandler: <clears all the interrupt event handler>"
    
    MMI_FRM_INFO_EVENT_BLOCK_INT_HDLR "[Event handler] mmi_frm_block_interrupt_event_handler: <block interrupt event %d>"
    MMI_FRM_INFO_EVENT_BLOCK_GEN_INT_HDLR "[Event handler] mmi_frm_block_general_interrupt_event: <block interrupt event %d>"

    
    MMI_FRM_INFO_HIST_ADD_HISTREFMEMREC_HDLR "[History] AddHistoryReferenceMemoryRecord: <exe(bool) = %d>"
    MMI_FRM_INFO_HIST_ADD_HISTREF_HDLR "[History] AddHistoryReference: <exe(bool) = %d>"
    MMI_FRM_INFO_HIST_ADD_NHIST_HDLR "[History] AddNHistory: <size =%d, exe(bool) =%d>"
    MMI_FRM_INFO_HIST_ADD_HIST_EX_HDLR "[History] AddHistoryEx: <exe(bool) = %d>"
    MMI_FRM_INFO_HIST_GET_HIST_HDLR "[History] GetHistory: <screen ID =%Mmmi_screen_id_cgen_enum, history index=%d>"
    MMI_FRM_INFO_HIST_GET_HIST_SCRID_HDLR "[History] GetHistoryScrID: <screen ID =%Mmmi_screen_id_cgen_enum, history index=%d>"
    MMI_FRM_INFO_HIST_GET_NHIST_HDLR "[History] GetNHistory: <screen ID =%Mmmi_screen_id_cgen_enum, history index=%d>"
    MMI_FRM_INFO_HIST_GO_BACK_HIST_HDLR "[History] GoBackHistory"
    MMI_FRM_INFO_HIST_GO_BACK_TO_HIST_HDLR "[History] GoBackToHistory: <screen ID=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_HIST_GO_BACK_NHIST_HDLR "[History] GoBacknHistory: <nHistory ID=%d>"
    MMI_FRM_INFO_HIST_EXE_POP_HIST_HDLR "[History] ExecutePopHistory: <top/exit scrnid = %Mmmi_screen_id_cgen_enum/%Mmmi_screen_id_cgen_enum, IsBackHistory=%d, CheckMainLCDHistoryBack=%d>"
    MMI_FRM_INFO_HIST_EXE_SMALL_SCREEN_BEGIN "[History] [Small Screen] Begin <target idx=%d, full-screen idx=%d> "
    MMI_FRM_INFO_HIST_EXE_SMALL_SCREEN "[History] [Small Screen] <ScrnId = %Mmmi_screen_id_cgen_enum, entryFuncPtr = %x>"
    MMI_FRM_INFO_HIST_EXE_SMALL_SCREEN_END "[History] [Small Screen] End, then active screen <ScrnId = %Mmmi_screen_id_cgen_enum, entryFuncPtr = %x>"
    MMI_FRM_INFO_DEL_SCRS_HDLR "[History] DeleteScreens: <startScrId=%Mmmi_screen_id_cgen_enum, EndScrId=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_HIST_DEL_BEYOND_SCR_TILL_SCR_HDLR "[History] DeleteBeyondScrTillScr: <beyondScrnid=%Mmmi_screen_id_cgen_enum, tillScrnid=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_HIST_DEL_BETWEEN_SCR_HDLR "[History] DeleteBetweenScreen: <StartScrId=%Mmmi_screen_id_cgen_enum, EndScrId=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_HIST_DEL_SCR_IF_PRESENT_HDLR "[History] DeleteScreenIfPresent: <ScrId=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_HIST_DEL_SCR_FROM_TO_N_NODE_HDLR "[History] DeleteScreenFromToNnodes: <ScrId=%Mmmi_screen_id_cgen_enum, DeleteCount = %d>"
    MMI_FRM_INFO_HIST_DEL_FROM_SCR_UPTO_SCR_HDLR "[History] DeleteFromScrUptoScr: <FromScrId=%Mmmi_screen_id_cgen_enum, UptoScrId=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_INSERT_HIST_BEFORE_SCREEN_HDLR "[History] InsertHistoryBeforeThisScrnReference: <ScrId=%Mmmi_screen_id_cgen_enum>"   
    MMI_FRM_INFO_HIST_GET_CUR_INPUT_BUF_HDLR "[History] GetCurrInputBuffer: <ScrId=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_HIST_GET_CUR_NINPUT_BUF_HDLR "[History] GetCurrNInputBuffer: <ScrId=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_HIST_GET_CUR_GUI_BUF_HDLR "[History] GetCurrGuiBuffer: <ScrId=%Mmmi_screen_id_cgen_enum, cur History idx=%d>"
    MMI_FRM_INFO_HIST_DUMP_HDLR "[History] HistoryDump: <History Dump><SCRN_ID>index = %d [%Mmmi_screen_id_cgen_enum]"
    MMI_FRM_INFO_HIST_REPLACE_HDLR "[History] HistoryReplace: <History Replace><dst_id=%Mmmi_screen_id_cgen_enum, scr_id=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_EXEC_CURR_HIST_HDLR "[History] ExecutecurrHisIndEntryFunc"
    MMI_FRM_INFO_DEL_NHIST_HDLR "[History] DeleteNHistory: <DeleteCount = %d>"
    MMI_FRM_INFO_DEL_UPTO_SCRID_HDLR "[History] DeleteUptoScrID: <scrnid = %Mmmi_screen_id_cgen_enum, cur History idx=%d>"
    MMI_FRM_INFO_GO_BEYOND_MARKER_SCR_HDLR "[History] GoBeyondMarkerScr: <scrnid = %Mmmi_screen_id_cgen_enum, cur History idx=%d>"
    MMI_FRM_INFO_DEL_NSCRID_HDLR "[History] DeleteNScrId: <scrnid = %Mmmi_screen_id_cgen_enum, cur History idx=%d>"
    MMI_FRM_INFO_IS_SCR_PRESENT_HDLR "[History] IsScreenPresent: <scrnid = %Mmmi_screen_id_cgen_enum, present(bool)=%d>"
    MMI_FRM_INFO_GET_PREVIOUS_SCR_IDOF_HDLR "[History] GetPreviousScrnIdOf: <scrnid = %Mmmi_screen_id_cgen_enum, previousScrnId=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_GET_PREVIOUS_SCR_IDOF_2_HDLR "[History] GetPreviousScrnIdOf: <scrnid = %Mmmi_screen_id_cgen_enum, NO previousScrnId>"
    MMI_FRM_INFO_IS_CUR_MARKER_SCR_HDLR "[History] IsCurrMarkerScreen: <scrnid = %Mmmi_screen_id_cgen_enum, historyData[currHistoryIndex].scrnID=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_DSPL_IDLE_SCR_HDLR "[History] DisplayIdleScreen: <historyData[0].entryFuncPtr=%x>"
    MMI_FRM_INFO_EXEC_ROOT_HIST_HDLR "[History] [History] ExecuteRootMainHistoryScreen: <currHistoryIndex=%d, Status=%d>"
    MMI_FRM_INFO_DINIT_HIST_HDLR "[History] DinitHistory"
    MMI_FRM_INFO_DEL_BETWEEN_SCRS_HDLR "[History] DeleteBetweenScreens: <StartScrId=%Mmmi_screen_id_cgen_enum, EndScrId=%Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SET_SCREEN_ID_CB_HDLR "[History] SetDelScrnIDCallbackHandler: <ScrnID=%Mmmi_screen_id_cgen_enum, funcPtr=%x>"
    MMI_FRM_INFO_CLR_SCREEN_ID_CB_HDLR "[History] ClearDelScrnIDCallbackHandler: <ScrnID=%Mmmi_screen_id_cgen_enum, funcPtr=%x>"
    MMI_FRM_INFO_EXEC_TOP_SCRN_CB_HDLR "[History] ExecTopScrnCallbackHandler: <is_stop_delete=%d>"
    MMI_FRM_INFO_EXEC_HIST_SCRN_CB_HDLR "[History] ExecHistoryScrnCallBackHandle: <is_stop_allow=TRUE !!, history_idx=%d> "
    MMI_FRM_INFO_SRCH_DEL_SCRN_CB_HDLR "[History] SearchDelScrnIDCallbackHandler: <ScrnID=%Mmmi_screen_id_cgen_enum is found in history_idx=%d>"
    MMI_FRM_INFO_DEL_HISTORY_HDLR "[History] DeleteHistory: <startId=%Mmmi_screen_id_cgen_enum, inc=%d, count=%d, endId=%Mmmi_screen_id_cgen_enum, inc=%d>"   
    MMI_FRM_INFO_DEL_HISTORY_INDEX_HDLR "[History] DeleteHistory: <currHistoryIndex=%d, startIdx=%d, endIdx=%d>"

    
    MMI_FRM_INFO_SUBHIST_EXE_SUBLCD_CUR_EXIT_HDLR "[Sub-History] ExecSubLCDCurrExitHandler"
    MMI_FRM_INFO_SUBHIST_ADD_SUBLCD_HIST_HDLR "[Sub-History] AddSubLCDHistory"
    MMI_FRM_INFO_SUBHIST_ADD_SUBLCD_HIST_WITHSCRID_HDLR "[Sub-History] AddSubLCDHistoryWithScrID: <scrnid = %Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SUBHIST_ADD_SUBLCD_EXIT_HDLR "[Sub-History] SetSubLCDExitHandler: %x"
    MMI_FRM_INFO_SUBHIST_ADD_SUBLCD_ENTRY_HDLR "[Sub-History] SetSubLCDEntryHandler: %x"
    MMI_FRM_INFO_SUBHIST_INIT "[Sub-History] InitSubLCDHistory: %x"
    MMI_FRM_INFO_SUBHIST_DEINIT "[Sub-History] DinitSubLCDHistory"
    MMI_FRM_INFO_SUBHIST_SHOW_SUBLCD_HDLR "[Sub-History] ShowSubLCDScreen: %x"
    MMI_FRM_INFO_SUBHIST_FORCE_SUBLCD_HDLR "[Sub-History] ForceSubLCDScreen: %x"
    MMI_FRM_INFO_SUBHIST_DISPLAY_SUBLCD_HDLR "[Sub-History] DisplaySubLCDScreen: %x, <scrnid = %Mmmi_screen_id_cgen_enum>, <force_display = %d>"
    MMI_FRM_INFO_SUBHIST_GO_BACK_SUBLCD_HDLR "[Sub-History] GoBackSubLCDHistory"
    MMI_FRM_INFO_SUBHIST_GO_BACK_N_SUBLCD_HDLR "[Sub-History] GoBacknSubLCDHistory: %d"
    MMI_FRM_INFO_SUBHIST_GO_BACK_TO_SUBLCD_HDLR "[Sub-History] GoBackToSubLCDHistory: <scrnid = %Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SUBHIST_GO_BEYOND_SUBLCD_HDLR "[Sub-History] GoBeyondSubLCDMarkerScr: <scrnid = %Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SUBHIST_BACK_BOTHLCD_HIST_HDLR "[Sub-History] GoBackBothLCDHistory"
    MMI_FRM_INFO_SUBHIST_SUBLCD_IDLE_SCRN_HDLR "[Sub-History] SubLCDIdleScreen"
    MMI_FRM_INFO_SUBHIST_DEL_UPTO_SUBLCD_SCR_HDLR "[Sub-History] DeleteUptoSubLCDScrID: <scrnid = %Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SUBHIST_DEL_N_SUBLCD_SCR_HDLR "[Sub-History] DeleteNSubLCDScrId: <scrnid = %Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SUBHIST_DEL_SUBLCD_SCR_HDLR "[Sub-History] DeleteSubLCDScreen: <scrnid = %Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SUBHIST_DEL_SUBLCD_SCR_NUM "[Sub-History] DeleteNSubLCDHistory: %d"
    MMI_FRM_INFO_SUBHIST_DEL_BEYOND_TILL_SUBLCD_SCR_HDLR "[Sub-History] DeleteBeyondSubLCDScrTillScr: <Beyond scrnid = %Mmmi_screen_id_cgen_enum>, <Till scrnid = %Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SUBHIST_DEL_BETWEEN_SUBLCD_SCR_HDLR "[Sub-History] DeleteBetweenSubLCDScreen: <scrnid = %Mmmi_screen_id_cgen_enum> to <scrnid = %Mmmi_screen_id_cgen_enum>"
    MMI_FRM_INFO_SUBHIST_REPLACE_SUBLCD_SCR_HDLR "[Sub-History] SubLCDHistoryReplace: <out_scrn_id = %Mmmi_screen_id_cgen_enum> <in_scrn_id = %Mmmi_screen_id_cgen_enum, in_src_func = %x>"
    MMI_FRM_INFO_SUBHIST_DUMP_HDLR "[Sub-History] SubLCDHistoryDump: <SubLCDHistory Dump> index,<SCRN_ID>,(entryFuncPtr) = %d,[%Mmmi_screen_id_cgen_enum],(%d)"
    MMI_FRM_INFO_SUBHIST_DUMP_ROOTHDLR "[Sub-History] SubLCDHistoryDump: <SubLCDHistory Dump> index = -1,[0],(RootSubLcdHistoryScreenPtr)"

    MMI_FRM_SUBHIST_SWITCH_MODE_S2M "[Sub-History] SwitchSubLCDHistory (S2M)"
    MMI_FRM_SUBHIST_SWITCH_MODE_M2S "[Sub-History] SwitchSubLCDHistory (M2S)"
    MMI_FRM_SUBHIST_CLEAR_MASTER_HIST "[Sub-History] ClearSubLCDMasterHistory"
    MMI_FRM_SUBHIST_FORCE_EXIT_CURR_SCR "[Sub-History] ForceExitCurrScr"
    MMI_FRM_SUBHIST_MASTER_GOBACK_HIST "[Sub-History] SubLCDMasterGoBackHistory"

    
    MMI_FRM_ENTRY_SUBLCDMASTER_FROM_IDLE "[Sub-Master] EntrySubLCDMasterFromIdle"
    MMI_FRM_FORCE_ENTRY_SUBLCD_MASTER "[Sub-Master] ForceEntrySubLCDMaster"
    MMI_FRM_FORCE_ENTRY_SUBLCD_SLAVE "[Sub-Master] ForceEntrySubLCDSlave"
    MMI_FRM_EXIT_MAINLCD_DUMMY_SCRN_TIMEOUT "[Sub-Master] ExitMainLCDDummyScreenTimeOut"
    MMI_FRM_ENTRY_MAINLCD_DUMMY_SCRN "[Sub-Master] EntryMainLCDDummyScreen"
    MMI_FRM_SET_SUBLCD_IN_MASTER_MODE "[Sub-Master] SetSubLCDInMasterMode"
    MMI_FRM_SET_SUBLCD_IN_SLAVE_MODE "[Sub-Master] SetSubLCDInSlaveMode"
    MMI_FRM_MASTER_MODE_CLAM_OPEN "[Sub-Master] SubLCDMasterModeClamOpen"
    MMI_FRM_MASTER_MODE_CLAM_CLOSED "[Sub-Master] SubLCDMasterModeClamclosed"



    
    MMI_FRM_INFO_PROC_KEYEVENT_HDLR "[Key] ProcessKeyEvent: <MsgType=%Mmmi_key_types_enum, Keycode=%Mmmi_keypads_enum>"
    MMI_FRM_ERROR_PROC_KEYEVENT_HDLR "[Key] ProcessKeyEvent not handler"
    MMI_FRM_ERROR_KEY_TIMER_EXPIRY_HDLR "(win32) KeyTimerExpiryProc: Unknown timer id =%d"
    MMI_FRM_INFO_CLEAR_KEY_EVENTS_HDLR "[Key] ClearKeyEvents"
    MMI_FRM_INFO_PROC_TIMER_EVENT_HDLR "(win32) ProcessTimerEvent: <MsgType=%d, Keycode=%d>"
    MMI_FRM_KEY_CONCURRENT_MODE "[Key] set concurrent mode to [%Mmmi_frm_concurrent_key_mode_enum]"

    
    MMI_FRM_INFO_QUEUE_READ_HDLR "OslReadCircularQ: <#[%d], read:[%d], write:[%d]>"
    MMI_FRM_INFO_QUEUE_WRITE_HDLR "OslWriteCircularQ: <#[%d], read:[%d], write:[%d]>"

    
    MMI_FRM_INFO_L4DRV_CBTIMER_HDLR "[Timer] L4CallBackTimer: <expire timer id=%MMMI_TIMER_IDS, address=0x%8x>"
    MMI_FRM_INFO_L4DRV_STARTTIMER_HDLR "[Timer] L4StartTimer: <start timer id=%MMMI_TIMER_IDS, address=0x%8x, dur=%d, ali=%d>"
    MMI_FRM_INFO_L4DRV_STOPTIMER_HDLR "[Timer] L4StopTimer: <stop timer id=%MMMI_TIMER_IDS>"

    
    MMI_FRM_INFO_NVM_WRITE_HDLR "After Calling Send_ILM from SendNVRAMWriteReq!"
    MMI_FRM_INFO_NVM_READ_REC_INT_HDLR "Request of Reading record <from NvramID: [%d] RecID: [%d]>"
    MMI_FRM_INFO_NVM_WRITE_REC_INT_HDLR "Request of Writing record <from NvramID: [%d] RecID: [%d]>"
    MMI_FRM_INFO_NVM_DELETE_REC_INT_HDLR "Inside Delete record"
    MMI_FRM_INFO_NVM_READ_VAL_INT_HDLR "ReadValueInt: <nDataItemId: [%d] nDataType : [%d]>"
    MMI_FRM_INFO_NVM_READ_VAL_INT_INFO_HDLR "NVRAM is already read, reading DataType: [%d]"
    MMI_FRM_INFO_NVM_READ_VAL_INT_INFO2_HDLR "NVRAM record read then reading DataType: [%d]"
    MMI_FRM_ERROR_NVM_READ_VAL_INT_HDLR "ERROR in NVRAM record read"

    MMI_FRM_INFO_NVM_WRITE_VAL_INT_HDLR "WriteValueInt: <nDataItemId: [%d] nDataType : [%d]>"
    MMI_FRM_INFO_NVM_WRITE_VAL_INT_INFO_HDLR "NVRAM is already read, writing <DataType: [%d]>"
    MMI_FRM_INFO_NVM_WRITE_VAL_INT_INFO2_HDLR "NVRAM record read then writing <DataType: [%d]>"
    MMI_FRM_ERROR_NVM_WRITE_VAL_INT_HDLR "ERROR in NVRAM record write!"

    MMI_FRM_INFO_NVM_FLASH_CATCH_DATA_HDLR "SetFlashNVRAMCatchData: <DataType: [%d], WriteFlashFlag: [%d]>"
    MMI_FRM_INFO_NVM_FLASH_CATCH_ALL_DATA_HDLR "SetFlashAllNVRAMCatchData: <WriteFlashFlag: [%d]>"
    MMI_FRM_INFO_NVM_WRITE_NVM_CATCH_DATA_HDLR "WriteFlashNVRAMCatchData: <DataType: [%d]>"
    MMI_FRM_WARN_NVM_WRITE_HDLR "No this case!!"
    MMI_FRM_INFO_NVM_FLASH_ALL_CATCH_DATA_HDLR "WriteFlashAllNVRAMCatchData!"

    
    
    MMI_FRM_ASM_ENTRY_PROGRESSING_SCREEN "[ASM] entry progressing screen: [%Mkal_bool]"
    MMI_FRM_ASM_STOP_CONFIRM_YES "[ASM] yes to stop confirm screen: app[%Mapplib_mem_ap_id_enum] StopState[%Mmmi_frm_appmem_stop_state_enum]"
    MMI_FRM_ASM_ENTRY_PROMPT_SCREEN "[ASM] entry prompt screen: [%Mkal_bool]"
    MMI_FRM_ASM_INVOKE_SUCCESS_CB "[ASM] invoke success cb: app[%Mapplib_mem_ap_id_enum] cb[0x%8x]"
    MMI_FRM_ASM_STOP_FINISHED_HANDLER "[ASM] stop finished handler: msg[%MSTRINGID_LIST_COMMON_SCREENS] cb[0x%x]"
    MMI_FRM_ASM_PROMPT_TO_RELEASE_MEM "[ASM] prompt to release mem: app[%Mapplib_mem_ap_id_enum] size[%d]"
    MMI_FRM_ASM_PROMPT_TO_RELEASE_FULL_POOL "[ASM] prompt to release full pool: app[%Mapplib_mem_ap_id_enum]"

    
     MMI_PEN_TRC_DROP_LOOKAHEAD_BUF "[Pen] Drop lookahead buffer (%d - %d) \n"
     MMI_PEN_TRC_POLL_HDLR "[Pen] mmi_pen_poll_hdlr() - %d %d \n"
     MMI_PEN_TRC_POLL_HDLR_NO_BL "[Pen] mmi_pen_poll_hdlr() - no backlight\n"
     MMI_PEN_TRC_POLL_HDLR_DELAY_POLLING_TIMER "[Pen] mmi_pen_poll_hdlr() - delay polling timer \n"
     MMI_PEN_TRC_TOUCH_PANEL_EVENT_IND "[Pen] mmi_pen_touch_panel_event_in - %d, %d\n"
     MMI_PEN_TRC_ENABLE "[Pen] mmi_pen_enable()\n"
     MMI_PEN_TRC_DISABLE "[Pen] mmi_pen_disable()\n"
     MMI_PEN_TRC_RESET "[Pen] mmi_pen_reset()\n"
     MMI_PEN_TRC_CALIBRATION "[Pen] mmi_pen_start_calibration()\n"
     MMI_PEN_TRC_START_CAPTURE_STROKES "[Pen] mmi_pen_start_capture_strokes()\n"
     MMI_PEN_TRC_CHANGE_HANDWRITING_AREA "[Pen] mmi_pen_change_handwriting_area()\n"
     MMI_PEN_TRC_STOP_CAPTURE_STROKES "[Pen] mmi_pen_stop_capture_strokes()\n"
     MMI_PEN_TRC_PEEK_STROKE_STATE "[Pen] mmi_pen_peek_stroke_state() - %d\n"
     MMI_PEN_TRC_BEGIN_STROKES_OF_CHAR "[Pen] mmi_pen_begin_strokes_of_character()\n"
     MMI_PEN_TRC_END_STROKES_OF_CHAR "[Pen] mmi_pen_end_strokes_of_character()\n"
     MMI_PEN_TRC_PEN_DOWN_HDLR "[Pen] mmi_general_pen_down_handler (%d, %d)"
     MMI_PEN_TRC_PEN_UP_HDLR "[Pen] mmi_general_pen_up_handler (%d, %d)"
     MMI_PEN_TRC_PEN_LONG_TAP_HDLR "[Pen] mmi_general_pen_long_tap_handler (%d, %d)"
     MMI_PEN_TRC_PEN_REPEAT_HDLR "[Pen] mmi_general_pen_repeat_handler (%d, %d)"
     MMI_PEN_TRC_PEN_MOVE_HDLR "[Pen] mmi_general_pen_move_handler (%d, %d)"
     MMI_PEN_TRC_PEN_ABORT_HDLR "[Pen] mmi_general_pen_abort_handler (%d, %d)"
     MMI_PEN_TRC_SET_DEFAULT_HDLR "[Pen] mmi_frm_setup_default_pen_handler (%d, %d)"
     MMI_PEN_TRC_SET_EVENT_HDLR_CB "[Pen] mmi_pen_set_callback: pre:%x, post:%x"
     MMI_PEN_TRC_RESET_EVENT_HDLR_CB "[Pen] mmi_pen_set_callback: pre:%x, post:%x"

    
    GDI_TRC_1 "******* gdi_image_codec_draw PRE type=%d src=%d size=%d x=%d y=%d w=%d h=%d flag=%x frame_pos=%d"
    GDI_TRC_2 "gdi_image_codec_draw image type=%d src=%d size=%d x=%d y=%d w=%d h=%d flag=%x frame_pos=%d"
    GDI_TRC_3 "------- decode time=%d delay time=%d ret=%d"
    GDI_TRC_5 "gdi_image_gif_draw(hw) src=%x,size=%d,x=%d,y=%d,frame_number=%d ret=%d"
    GDI_TRC_6 "gdi_image_gif_draw(sw) src=%x,size=%d,x=%d,y=%d,frame_number=%d ret=%d"
    GDI_TRC_7 "gdi_image_gif_draw_resized(hw) src=%x,size=%d,x=%d,y=%d,rw=%d,rh=%d,frame_number=%d ret=%d"
    GDI_TRC_8 "gdi_image_gif_draw_resized(sw) src=%x,size=%d,x=%d,y=%d,rw=%d,rh=%d,frame_number=%d ret=%d"
    GDI_TRC_9 "gdi_image_gif_draw_with_background_color(hw) src=%x,size=%d,frame_number=%d ret=%d"
    GDI_TRC_10 "gdi_image_gif_draw_with_background_color(sw) src=%x,size=%d,frame_number=%d ret=%d"
    GDI_TRC_11 "gdi_image_gif_draw_file(hw) id=%x,x=%d,y=%d,frame_number=%d cached_by_hw=%d ret=%d"
    GDI_TRC_12 "gdi_image_gif_draw_file(sw) id=%x,x=%d,y=%d,frame_number=%d ret=%d"
    GDI_TRC_13 "gdi_image_gif_draw_resized_file(sw) id=%x,x=%d,y=%d,rw=%d,rh=%d,frame_number=%d ret=%d"
    GDI_TRC_14 "sw disposal method: restore background(%d,%d)-(%d,%d) clip=(%d,%d)-(%d,%d) color=%x"
    GDI_TRC_15 "GDI_HW_JPG set_ext_memory size=%d"
    GDI_TRC_16 "GDI_HW_JPG set_source_image file mem_size=%d"
    GDI_TRC_17 "try gdi_image_hwjpeg_enlarge_file_buffer "
    GDI_TRC_18 "gdi_image_hwjpeg_enlarge_file_buffer size=%d"
    GDI_TRC_19 "---- GDI_HW_JPG INIT BEGIN----"
    GDI_TRC_20 "---- GDI_HW_JPG INIT END ret=%d----"
    GDI_TRC_21 "gdi_image_hwjpeg_msg_handler cause=%d"
    GDI_TRC_22 "---- GDI_HW_JPG decode BEGIN ----"
    GDI_TRC_23 "jpeg_decode_process cause=%d"
    GDI_TRC_24 "---- GDI_HW_JPG decode END ----"
    GDI_TRC_25 "[%d] LAYER[%x] %x cf=%x (%d,%d) wh(%d,%d) size=%d ptr=%x ptr1=%x R%d"
    GDI_TRC_26 "-- GDI free lazy layer --"
    GDI_TRC_27 "gdi_layer_create cf=%x (%d,%d) wh(%d,%d) is_double(%d) size=%d ptr=%x ptr1=%x"
    GDI_TRC_28 "gdi_layer_free [%d] %x"
    GDI_TRC_29 "gdi_layer_lazy_free [%d] %x"
    GDI_TRC_30 "GDI_RAISE gdi_bytestream_get_byte_mem %d/%d"
    GDI_TRC_31 "GDI_RAISE gdi_bytestream_peek_byte_mem %d/%d"
    GDI_TRC_32 "GDI_RAISE gdi_bytestream_peek_byte_n_mem %d/%d"
    GDI_TRC_33 "GDI_RAISE gdi_bytestream_get_word_mem %d/%d"
    GDI_TRC_34 "GDI_RAISE gdi_bytestream_get_3bytes_mem %d/%d"
    GDI_TRC_35 "GDI_RAISE gdi_bytestream_get_dword_mem %d/%d"
    GDI_TRC_36 "GDI_RAISE gdi_bytestream_get_array_mem %d/%d"
    GDI_TRC_37 "GDI_RAISE gdi_bytestream_flush_mem %d/%d"
    GDI_TRC_38 "GDI_RAISE gdi_bytestream_seek_mem %d/%d"
    GDI_TRC_39 "GDI_RAISE gdi_bytestream_buffer_load_file %d/%d"
    GDI_TRC_40 "GDI_RAISE gdi_bytestream_seek_file %d/%d"
    GDI_TRC_41 "GDI_BMP_EXCEPTION_ESCAPE_MODE_END_OF_BITMAP"
    GDI_TRC_42 "GDI_RAISE GDI_IMAGE_GIF_CODEC %d"
    GDI_TRC_43 "GDI_RAISE gdi_image_gif_progress_callback"
    GDI_TRC_44 "GDI_RAISE y <= src_clipy2"
    GDI_TRC_45 "GIF(sw) hit cache fn=%d, lcd=%d, frame_count = %d, offset = %d"
    GDI_TRC_46 "GIF(sw) NOT hit cache background color (%d,%d) =%x"
    GDI_TRC_47 "resized width x height = %dx %d"
    GDI_TRC_48 "jpeg spatial dithering buffer size = %d"
    GDI_TRC_49 "jpeg spatial dithering enable"
    GDI_TRC_50 "jpeg spatial dithering disable"
    GDI_TRC_51 "jpeg spatial_dithering888_565 [%x -> %x] , (%d,%d)  (%d x %d)"
    GDI_TRC_52 "FORCE ABORT!!"
    GDI_TRC_53 "gdi_image_codec set timeout = %d seconds"
    GDI_TRC_54 "gdi_image_codec clean timeout"
    GDI_TRC_55 "FORCE ABORT SUCCEED"
    GDI_TRC_56 "gdi_image_set_update_area %d %d %d %d"

    MMI_BUFFER_TRACE " *** Get data in [lower Panel] ***"

    
    MMI_WGUI_TRC_DM_REDRAW "[DM] Redraw DM_Main_Status = [%d], CatID = [%MMMI_CATEGORY_ID_LIST]"
    MMI_WGUI_TRC_DM_SUB_STATUS "[DM] Redraw DM_SUB_Status = [%d]"





    
    MMI_CTK_SCREEN_GENERAL_ENTRY_FUNC "[CTK] ctk_screen_general_entry_function() - enter"
    MMI_CTK_SCREEN_GENERAL_ENTRY_FUNC_END "[CTK] ctk_screen_general_entry_function() - end"
    MMI_CTK_SCREEN_GENERAL_EXIT_HDLR "[CTK] ctk_screen_general_exit_handler() - enter"
    MMI_CTK_SCREEN_GENERAL_EXIT_HDLR_END "[CTK] ctk_screen_general_exit_handler() - end"
    MMI_CTK_SCREEN_GENERAL_KEY_HDLR "[CTK] ctk_screen_general_key_handler() - enter"
    MMI_CTK_SCREEN_ADD_HIST "[CTK] ctk_screen_add_history()"
    MMI_CTK_SCREEN_CLOSE "[CTK] ctk_screen_close()"
    MMI_CTK_SCREEN_INVOKE_ON_ENTER "[CTK] ctk_screen_invoke_on_enter()"
    MMI_CTK_SCREEN_INVOKE_ON_EXIT "[CTK] ctk_screen_invoke_on_exit()"
    MMI_CTK_SCREEN_INVOKE_REDRAW "[CTK] ctk_screen_invoke_redraw()"
    MMI_CTK_SCREEN_INVOKE_REDRAW_NOT_ACTIVE "[CTK] ctk_screen_invoke_redraw() - screen not active"
    MMI_CTK_SCREEN_ENTER "[CTK] ctk_screen_enter() - enter"
    MMI_CTK_SCREEN_ENTER_END "[CTK] ctk_screen_enter() - end"
    MMI_CTK_SCREEN_REDRAW "[CTK] ctk_screen_redraw() - enter"
    MMI_CTK_SCREEN_REDRAW_NOT_ACTIVE "[CTK] ctk_screen_redraw() - end - screen not active"
    MMI_CTK_SCREEN_REDRAW_END "[CTK] ctk_screen_redraw() - end - finished"
    MMI_CTK_SCREEN_EXIT "[CTK] ctk_screen_exit() - enter"
    MMI_CTK_SCREEN_EXIT_ADD_HIST "[CTK] ctk_screen_exit() - backup history data and add history"
    MMI_CTK_SCREEN_EXIT_NO_IN_HIST "[CTK] ctk_screen_exit() - backup history data"
    MMI_CTK_SCREEN_EXIT_END "[CTK] ctk_screen_exit() - exit"
    MMI_CTK_INLINE_GENERAL_HILITE_HDLR "[CTK] ctk_inline_general_highlight_handler()"
    MMI_CTK_INLINE_GENERAL_CANCEL_HDLR "[CTK] ctk_inline_general_cancel_handler()"
    MMI_CTK_INLINE_SHOW "[CTK] ctk_inline_show()"
    MMI_CTK_INLINE_CLOSE_DISPLAY "[CTK] ctk_inline_close_display()"
    MMI_CTK_PCATEGORY_GENERAL_HILITE_HDLR "[CTK] ctk_pcategory_general_highlight_handler()"
    MMI_CTK_PCATEGORY_SHOW "[CTK] ctk_pcategory_show(%x)"
    MMI_CTK_PCATEGORY_CLOSE_DISPLAY "[CTK] ctk_pcategory_close_display()"
    
    


    
    MMI_WIDGET_RELEASE_VIDEO_RAWFILE_ID "[Widget] widget_image_release() - release video rawfile id"
    MMI_WIDGET_WIDGET_VIDEO_NONE "[Widget] current_video_state is WIDGET_VIDEO_NONE"
    MMI_WIDGET_IMAGE_RESIZING "[Widget] HDIa_widgetExtImageResizing()"
    MMI_WIDGET_IMAGE_RESIZING_TOO_LARGE "[Widget] HDIa_widgetExtImageResizing() - the original image is too large"
    MMI_WIDGET_IMAGE_RESIZING_END "[Widget] HDIa_widgetExtImageResizing() - %d"
    MMI_WIDGET_OPEN_VIDEO_FILE_DONE_HDLR_FAILED "[Widget] widget_MMI_open_video_file_done_hdlr() - Failed"
    MMI_WIDGET_OPEN_VIDEO_FILE_DONE_HDLR_SUCCEED "widget_MMI_open_video_file_done_hdlr() - Succeed"
    MMI_WIDGET_VIDEO_CREATE_RESOURCE "[Widget] HDIa_widgetExtVideoCreateResource()"
    MMI_WIDGET_PLAY_VIDEO "[Widget] HDIa_widgetExtPlayVideo()"
    MMI_WIDGET_STOP_VIDEO "[Widget] HDIa_widgetExtStopVideo()"
    MMI_WIDGET_CLOSE_VIDEO_WHEN_FILE_IS_OPENED "[Widget] HDIa_widgetExtCloseVideo() in video file is opened"
    MMI_WIDGET_DISABLE_VIDEO_PLAY "[Widget] HDIa_widgetExtDisableVideoPlay()"
    MMI_WIDGET_ENABLE_VIDEO_PLAY "[Widget] HDIa_widgetExtEnableVideoPlay()"
    MMI_WIDGET_ON_WINDOW_FOCUS_CHANGED "[Widget] widget_on_window_focus_changed()"
    MMI_WIDGET_ON_WINDOW_FOCUS_CHANGED_END "[Widget] widget_on_window_focus_changed() - end"
    MMI_WIDGET_SET_IN_FOCUS_TRUE "[Widget] HDIa_widgetSetInFocus(1) handle:%x, a:%x"
    MMI_WIDGET_SET_POSITION "[Widget] HDIa_widgetSetPosition() for gadgets of sliding SMIL"
    MMI_WIDGET_SET_SIZE "[Widget] HDIa_widgetSetSize() for gadgets of sliding SMIL"
    MMI_WIDGET_WAP_INTERNET_KEY_HDLR "[Widget] wap_internet_key_hdlr()"
    MMI_WIDGET_GOTO_MOBILE_SUITE_SCREEN "[Widget] goto_mobile_suite_screen()"
    MMI_WIDGET_IN_USB_MODE_AND_EXIT "[Widget] In USB mode - exit"
    MMI_WIDGET_GOTO_MMS_SCREEN "[Widget] goto_mms_screen() - enter"
    MMI_WIDGET_GOTO_MMS_SCREEN_AND_MEA_RUNNING "[Widget] goto_mms_screen() - MEA already running"
    MMI_WIDGET_GOTO_MMS_SCREEN_AND_MEA_NOT_RUNNING "[Widget] goto_mms_screen() - MEA already not running"
    MMI_WIDGET_MMS_TEXT_INSERT_HDLR "[Widget] mms_text_insert_hdlr()"
    MMI_WIDGET_MMS_CONTENT_INSERT_HDLR "[Widget] mms_content_insert_hdlr()"
    MMI_WIDGET_MMS_CONTENT_INSERT_HDLR_WITH_CALLBACK "[Widget] mms_content_insert_hdlr_with_callback()"
    MMI_WIDGET_MMS_ADDRESS_INSERT_HDLR "[Widget] mms_address_insert_hdlr()"
    MMI_WIDGET_FORM_UPDATE_FOR_SLIDING_SMIL "[Widget] widget_form_update_for_sliding_SMIL() - incorrect number of image gadgets"
    MMI_WIDGET_HOLD_DRAW_PAINTBOX "[Widget] HDIa_widgetHoldDraw() - paintbox"
    MMI_WIDGET_HOLD_DRAW_IMAGE "[Widget] HDIa_widgetHoldDraw() - image"
    MMI_WIDGET_HOLD_DRAW_UNSUPPORTED "[Widget] HDIa_widgetHoldDraw() - Unsupported Type"
    MMI_WIDGET_PERFORM_DRAW_PAINTBOX "[Widget] HDIa_widgetPerformDraw() - paintbox "
    MMI_WIDGET_PERFORM_DRAW_IMAGE "[Widget] HDIa_widgetPerformDraw() - image"
    MMI_WIDGET_PERFORM_DRAW_UNSUPPORTED "[Widget] HDIa_widgetPerformDraw() - Unsupported Type"
    MMI_WIDGET_MMI_DRAW_IMAGE_OP "[Widget] widget_MMI_draw_image() - image containing drawing op"
    MMI_WIDGET_MMI_DRAW_IMAGE_IN_PAINTBOX "[Widget] widget_MMI_draw_image() - simple image drawn in paintbox"
    MMI_WIDGET_MMI_DRAW_IMAGE_IN_MSFIMAGE "[Widget] widget_MMI_draw_image() - simple image drawn in MsfImage"
    MMI_WIDGET_DRAW_IMAGE "[Widget] HDIa_widgetDrawImage()"
    MMI_WIDGET_MMI_CTK_LEAVE_SCREEN_IF_PRESENT "[Widget] widget_MMI_ctk_leave_screen_if_present()"
    MMI_WIDGET_MMI_CTK_LEAVE_SCREEN_IF_PRESENT_END "[Widget] widget_MMI_ctk_leave_screen_if_present() - end"
    MMI_WIDGET_MMI_CTK_LEAVE_SCREEN_IF_PRESENT_ENTERED "[Widget] widget_MMI_ctk_leave_screen_if_present() - WIDGET_CTK_STATE_ENTERED"
    MMI_WIDGET_MMI_CTK_LEAVE_SCREEN_IF_PRESENT_PAUSED "[Widget] widget_MMI_ctk_leave_screen_if_present() - WIDGET_CTK_STATE_PAUSED"
    MMI_WIDGET_CTK_LEAVE_IF_PRESENT "[Widget] widget_ctk_leave_screen_if_present() %d, %d"
    MMI_WIDGET_CTK_LEAVE_IF_PRESENT_RETURN_TO_IDLE "[Widget] widget_ctk_leave_screen_if_present() - returns to idle screen"
    MMI_WIDGET_CTK_ON_EXIT "[Widget] widget_ctk_on_exit()"
    MMI_WIDGET_CTK_ON_EXIT_FREE_SCRMEM "[Widget] mmi_frm_scrmem_free() when leaving SMIL editor screen"
    MMI_WIDGET_CTK_ON_EXIT_BACK_TO_WIDGET_SCREEN "[Widget] widget_ctk_on_exit() - back to widget screen"
    MMI_WIDGET_CTK_ON_EXIT_INTERRUPT "[Widget] widget_ctk_on_exit() - interrupted by MMI"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_TAKE_WAP_Q_LOCK "[Widget] widget_ctk_dynamic_list_menu_take_WAP_extq_lock()" 
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_TAKE_WAP_Q_LOCK_END "[Widget] widget_ctk_dynamic_list_menu_get_WAP_extq_lock() - end"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_GIVE_WAP_Q_LOCK "[Widget] widget_ctk_dynamic_list_menu_give_WAP_extq_lock() - release mutex"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_GET_ITEM_HDLR "[Widget] widget_ctk_dynamic_list_menu_get_item_hdlr()"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_GET_ITEM_HDLR_INDEX_ERROR "[Widget] widget_ctk_dynamic_list_menu_get_item_hdlr index<%d, %d> (return 0 directly)"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_GET_ITEM_HDLR_SHOW_ERROR "[Widget] widget_ctk_dynamic_list_menu_get_item_hdlr is_shown:%d (return 0 directly)"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_GET_HINT_HDLR "[Widget] widget_ctk_dynamic_list_menu_get_hint_hdlr()"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_GET_HINT_HDLR_INDEX_ERROR "[Widget] widget_ctk_dynamic_list_menu_get_hint_hdlr index<%d, %d> (return 0 directly)"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU_GET_HINT_HDLR_STR_ERROR "[Widget] widget_ctk_dynamic_list_menu_get_hint_hdlr hint is NULL (return 0 directly)"
    MMI_WIDGET_CTK_DYNAMIC_LIST_MENU "[Widget] widget_ctk_show_dynamic_list_menu()"
    MMI_WIDGET_UPDATE_LIST_MENU_CALLBACK "[Widget] HDIa_widgetExtUpdateListMenuByCallback()"
    MMI_WIDGET_CTK_SMIL_IMAGE_NB_DRAW_DONE_CALLBACK "[Widget] widget_ctk_smil_image_nb_draw_done_callback() result:%d"
    MMI_WIDGET_CTK_SMIL_IMAGE_NB_DRAW_DONE_CALLBACK_END "[Widget] widget_ctk_smil_image_nb_draw_done_callback() - end"
    MMI_WIDGET_CTK_SHOW_SMIL_EDITOR_SCRMEM_ALLOC "[Widget] mmi_frm_scrmem_alloc in widget_ctk_show_smil_editor"
    MMI_WIDGET_GIVE_CONTROL_TO_MMI "[Widget] HDIa_widgetExtGiveControlToMMI()"
    MMI_WIDGET_MMI_KEY_HANDLER "[Widget] widget_MMI_key_handler() - enter"
    MMI_WIDGET_MMI_KEY_HANDLER_END_WAP_NOT_RUNNING "[Widget] widget_MMI_key_handler() - end - WAP not running"
    MMI_WIDGET_ENQUEUE_KEYPAD_EVENT_END_DROP_KEYEVENT "[Widget] widget_enqueue_keypad_event() - end - drop key event"
    MMI_WIDGET_ENQUEUE_KEYPAD_EVENT_END_TIME_TOO_LONG "[Widget] widget_enqueue_keypad_event() - end - last keypad takes too much time"
    MMI_WIDGET_WAP_MMI_KEY_IND "[Widget] widget_wap_mmi_key_ind() - enter"
    MMI_WIDGET_WAP_MMI_KEY_IND_END_DISCARD_KEY "[Widget] widget_wap_mmi_key_ind() - discard key !!!"
    MMI_WIDGET_WAP_MMI_KEY_IND_PUT_IN_Q "[Widget] widget_wap_mmi_key_ind() - put indication"
    MMI_WIDGET_WAP_MMI_KEY_IND_END_TIME_TOO_LONG "[Widget] widget_wap_mmi_key_ind() - end - last keypad takes too much time"
    MMI_WIDGET_WAP_MMI_KEY_IND_END_Q_EMPTY "[Widget] widget_wap_mmi_key_ind() - end - queue empty"
    MMI_WIDGET_WAP_READY_TO_LEAVE_SCREEN "[Widget] widget_ready_to_leave_screen() - return TRUE"
    MMI_WIDGET_MMI_LEAVE_SCREEN_GOBACK "[Widget] widget_MMI_leave_screen_goback() still window left"
    MMI_WIDGET_LEAVE_SCREEN_HDLR_WITH_WINDOW "[Widget] widget_leave_screen_hdlr() but window left"
    MMI_WIDGET_LEAVE_SCREEN_HDLR_NOT_IN_WIDGET_SCREEN "[Widget] widget_leave_screen_hdlr() not in widget screen"
    MMI_WIDGET_LEAVE_SCREEN_HDLR "[Widget] widget_leave_screen_hdlr() start to leave screen"
    MMI_WIDGET_PREPARE_TO_LEAVE_SCREEN "[Widget] widget_prepare_to_leave_screen()"
    MMI_WIDGET_MMI_SHUTDOWN_WAP_UI "[Widget] widget_MMI_shutdown_WAP_UI() - enter"
    MMI_WIDGET_MMI_SHUTDOWN_WAP_UI_END "[Widget] widget_MMI_shutdown_WAP_UI() - end"
    MMI_WIDGET_MMI_SHUTDOWN_WAP_WIDGET_UI "[Widget] widget_MMI_shutdown_WAP_Widget_UI() - enter"
    MMI_WIDGET_MMI_SHUTDOWN_WAP_WIDGET_UI_END "[Widget] widget_MMI_shutdown_WAP_Widget_UI() - end"
    MMI_WIDGET_WAP_EXIT_WIDGET_SCREEN "[Widget] wap_exit_widget_screen() - enter"
    MMI_WIDGET_WAP_EXIT_WIDGET_SCREEN_IN_WIDGET_SCREEN "[Widget] wap_exit_widget_screen() - WGUI_CTX->is_widget_screen"
    MMI_WIDGET_WAP_EXIT_WIDGET_SCREEN_END_TO_LEAVE "[Widget] wap_exit_widget_screen() - end - ready to leave"
    MMI_WIDGET_WAP_EXIT_WIDGET_SCREEN_END_IN_HIST "[Widget] wap_exit_widget_screen() - end - put into history"
    MMI_WIDGET_DEL_WIDGET_SCREEN_IF_PRESENT "[Widget] HDIa_widgetExtDeleteWidgetScreenIfPresent()"
    MMI_WIDGET_REG_SWITCH_WIDGET_SCREEN_CB "[Widget] HDIa_widgetExtRegisterSwitchWidgetScreenCallback()"
    MMI_WAP_DELETE_WIDGET_SCREEN_CB "[Widget] wap_delete_widget_screen_cb()"
    MMI_WIDGET_WAP_ENTRY_WIDGET_SCREEN "[Widget] wap_entry_widget_screen() - enter"
    MMI_WIDGET_WAP_ENTRY_WIDGET_SCREEN_END_WAP_NOT_RUNNING "[Widget] wap_entry_widget_screen() - end - WAP not running"
    MMI_WIDGET_WAP_ENTRY_WIDGET_SCREEN_NO_MSFWINDOW "[Widget] wap_entry_widget_screen() - no window left"
    MMI_WIDGET_WAP_ENTRY_WIDGET_SCREEN_NO_MSFWINDOW_2 "[Widget] wap_entry_widget_screen() - no window - previous exit handler executed"
    MMI_WIDGET_WAP_ENTRY_WIDGET_SCREEN_PREVIOUS_EXIT_HDLE_DONE "[Widget] wap_entry_widget_screen() - previous exit handler executed"
    MMI_WIDGET_WAP_ENTRY_WIDGET_SCREEN_END "[Widget] wap_entry_widget_screen() - end - normal"
    MMI_WIDGET_ALLOW_CREATE_NEW_MMI_SCREEN_FAILED_BY_SHUTDOWN "[Widget] widget_allow_create_new_MMI_screen() - FALSE is shutdown UI "
    MMI_WIDGET_ALLOW_CREATE_NEW_MMI_SCREEN_FAILED_BY_GOTO_IDLE_SCREEN "[Widget] widget_allow_create_new_MMI_screen() -FALSE in idle screen"
    MMI_WIDGET_MMI_GOBACK_TO_WIDGET_SCREEN "[Widget] widget_MMI_goback_to_widget_screen()"
    MMI_WIDGET_GOBACK_TO_WIDGET_SCREEN "[Widget] widget_goback_to_widget_screen()"
    MMI_WIDGET_MMI_GOBACK_TO_WAP_SCREEN_CTK "[Widget] widget_MMI_goback_to_WAP_screens() - to CTK"
    MMI_WIDGET_MMI_GOBACK_TO_WAP_SCREEN_WIDGET "[Widget] widget_MMI_goback_to_WAP_screens() - to widget"
    MMI_WIDGET_MMI_GOBACK_TO_WAP_SCREEN_OTHERS "[Widget] widget_MMI_goback_to_WAP_screens() - No Window to go"
    MMI_WIDGET_GOBACK_TO_WAP_SCREEN "[Widget] widget_goback_to_WAP_screens()"
    MMI_WIDGET_MMI_NOT_READY_GOBACK_HDLR "[Widget] widget_MMI_not_ready_goback_hdlr()"
    MMI_WIDGET_WAP_EXIT_WIDGET_NOT_READY "[Widget] wap_exit_widget_not_ready()"
    MMI_WAP_ENTRY_IMAGE_PRECACHE "[Widget] wap_entry_image_precache()"
    MMI_WIDGET_WAP_ENTRY_WIDGET_NOT_READY "[Widget] wap_entry_widget_not_ready()"
    MMI_WIDGET_DISPLAY_TRANSITION_ANIMATION_NOT_ALLOW "[Widget] HDIa_widgetExtDisplayTransitionAnimation() - not allowed"
    MMI_WIDGET_DISPLAY_TRANSITION_ANIMATION_ALREADY_EXIST "[Widget] HDIa_widgetExtDisplayTransitionAnimation() - already exist"
    MMI_WIDGET_DISPLAY_TRANSITION_ANIMATION "[Widget] HDIa_widgetExtDisplayTransitionAnimation()"
    MMI_WIDGET_MMI_CLOSE_TRANSITION_ANIMATION "[Widget] widget_MMI_close_transition_animation()"
    MMI_WIDGET_MMI_ON_ENTER_IDLE_SCREEN "[Widget] widget_MMI_on_enter_idle_screen()"
    MMI_WAP_ENTRY_BUSY_PROCESSING_SCREEN "[Widget] wap_entry_busy_progressing_screen_in_idle()"
    MMI_WIDGET_GOTO_IDLE_SCREEN "[Widget] widget_goto_idlescreen()!!!!"
    MMI_WIDGET_GOTO_IDLE_SCREEN_END "[Widget] widget_goto_idlescreen()!!!! (end)"
    MMI_WIDGET_MMS_CONTENT_INSERT_HDLR_WITH_MEA_RUNNING "[Widget] mms_content_insert_hdlr() - MEA already running"
    MMI_WIDGET_MMI_DISPLAY_POPUP "[Widget] widget_MMI_display_popup() - enter"
    MMI_WIDGET_MMI_DISPLAY_POPUP_GOTO_IDLE_SCREEN "[Widget] widget_MMI_display_popup() - go to idle screen"
    MMI_WIDGET_MMI_DISPLAY_POPUP_DIRECTLY "[Widget] widget_MMI_display_popup() - display popup; flag=%d"
    MMI_WIDGET_SHOW_POPUP_EXT_NOT_ALLOW "[Widget] HDIa_widgetExtShowPopupExt() - cannot create new popup"
    MMI_WIDGET_SHOW_POPUP_EXT "[Widget] HDIa_widgetExtShowPopupExt()"
    MMI_WIDGET_SHOW_POPUP "[Widget] HDIa_widgetExtForcePopup()"
    MMI_WIDGET_WAP_ENTRY_DELETE_ALL_SCREEN "[Widget] wap_entry_delete_all_screen()"
    MMI_WIDGET_LEAVE_DELETE_ALL_SCREEN "[Widget] widget_leave_delete_all_screen()"
    MMI_WIDGET_CONFIG_MMS_ICON "[Widget] widget_config_mms_icon() statusType:%d, sim_status:%d, setting_mode:%d"
    MMI_WIDGET_MMS_SET_INDICATOR_DIRECTLY "[Widget] mms_set_indicator (directly)"
    MMI_WIDGET_MMS_SET_INDICATOR_DIRECTLY_END "[Widget] mms_set_indicator (directly) (end)"
    MMI_WIDGET_MMS_SET_INDICATOR "[Widget] mms_set_indicator (mmiapi) scrnID:%d, WGUI_CTX->is_painted_after_first_focus_changed:%d"
    MMI_WIDGET_WAP_ENTRY_FULLSCREEN_EDITOR_OPTION "[Widget] wap_entry_fullscreen_editor_option()"
    MMI_WIDGET_WAP_ENTRY_WCSS_EDITOR "[Widget] wap_entry_WCSS_editor()"
    MMI_WIDGET_EXIT_FULLSCREEN_EDITOR "[Widget] widget_exit_fullscreen_editor()"
    MMI_WIDGET_MMI_GOBACK_FULLSCREEN_EDITOR "[Widget] widget_MMI_goback_fullscreen_editor()"
    MMI_WIDGET_WAP_ENTRY_FULLSCREEN_EDITOR "[Widget] wap_entry_fullscreen_editor()"
    MMI_WIDGET_WAP_ENTRY_FULLSCREEN_RADIO_MENU "[Widget] wap_entry_fullscreen_radio_menu()"
    MMI_WIDGET_WAP_ENTRY_FULLSCREEN_CHECKBOX_MENU "[Widget] wap_entry_fullscreen_checkbox_menu()"
    MMI_WIDGET_MMI_FMGR_ENTER_MEDIA_INPUT "[Widget] widget_MMI_fmgr_enter_media_input()"
    MMI_WIDGET_FMGR_MEDIA_INPUT_NOT_ALLOW "[Widget] HDIa_widgetExtFmgrMediaInput() - cannot create new window"
    MMI_WIDGET_FMGR_MEDIA_INPUT "[Widget] HDIa_widgetExtFmgrMediaInput()"
    MMI_WIDGET_FMGR_MEDIA_INPUT_ABORT "[Widget] HDIa_widgetExtFmgrMediaInputAbort()"
    MMI_WIDGET_MMI_FMGR_MEDIA_INPUT_DONE_HDLR "[Widget] widget_MMI_fmgr_media_input_done_hdlr()"
    MMI_WIDGET_MMI_FMGR_MEDIA_INPUT_DONE_HDLR_GOBACK_TO_WIDGET_SCREEN "[Widget] Go back to widget screen from FMGR done hdlr"
    MMI_WIDGET_MMI_FMGR_MEDIA_INPUT_DONE_HDLR_GOBACK_HIST "[Widget] GoBackHistory from FMGR done hdlr"
    MMI_WIDGET_MMI_FMGR_GET_SAVE_FILE_NAME "[Widget] HDIa_widgetExtFmgrGetSaveFileName() - enter"
    MMI_WIDGET_MMI_FMGR_GET_SAVE_FILE_NAME_NOT_ALLOW "[Widget] HDIa_widgetExtFmgrGetSaveFileName() - cannot create new window"
    MMI_WIDGET_MMI_FMGR_GET_SAVE_FILE_NAME_DRM "[Widget] HDIa_widgetExtFmgrGetSaveFileName() - DRM object"
    MMI_WIDGET_MMI_FMGR_GET_SAVE_FILE_NAME_END "[Widget] HDIa_widgetExtFmgrGetSaveFileName() - end"
    MMI_WIDGET_MMI_FMGR_GET_SAVE_FILE_NAME_ABORT "[Widget] HDIa_widgetExtFmgrSaveFileNameAbort()"
    MMI_WIDGET_FMGR_CLOSE_GET_SAVE_PATH "[Widget] widget_fmgr_close_get_save_path()"
    MMI_WIDGET_MMI_FMGR_CLOSE_GET_SAVE_FILE_NAME "[Widget] widget_MMI_fmgr_get_save_filename()"
    MMI_WIDGET_FMGR_GET_SAVE_PATH_CALLBACK "[Widget] widget_fmgr_get_save_path_callback()"
    MMI_WIDGET_MMI_FMGR_GET_SAVE_PATH_DONE_HDLR "[Widget] widget_MMI_fmgr_get_save_path_done_hdlr()"
    MMI_WIDGET_MMI_SAVE_NAME_CANCEL "[Widget] widget_MMI_savename_cancel()"
    MMI_WIDGET_MMI_SAVE_NAME_EDITOR_DONE "[Widget] widget_MMI_savename_editor_done()"
    MMI_WIDGET_MMI_SAVE_NAME_EDITOR_DONE_WITH_NULL_FOLDER "[Widget] filename_folder==NULL in widget_MMI_savename_editor_done"
    MMI_WIDGET_MMI_SAVE_NAME_EDITOR_DONE_WITH_INVALID_FOLDER "[Widget] filename_folder not existed in widget_MMI_savename_editor_done"
    MMI_WIDGET_MMI_SAVE_NAME_EDITOR_DONE_WITH_REMOVE_FILE "[Widget] widget_MMI_savename_editor_done() - remove file"
    MMI_WIDGET_WAP_ENTRY_SAVE_FILE_NAME_EDITOR_OPTION "[Widget] wap_entry_save_filename_editor_option()"
    MMI_WIDGET_WAP_ENTRY_SAVE_FILE_NAME_EDITOR "[Widget] wap_entry_save_filename_editor()"
    MMI_WIDGET_MMIAPI_REMOTE_PROC_CALL_REQ "[Widget] widget_mmiapi_remote_proc_call_req()"
    MMI_WIDGET_UNLOCK_MMI_LOCK "[Widget] To unlock MMI lock"
    MMI_WIDGET_EXECUTE_MMI "[Widget] widget_execute_MMI(%x, %d)"
    MMI_WIDGET_EXECUTE_MMI_IN_MMI_TASK "[Widget] widget_execute_MMI() in MMI task"
    MMI_WIDGET_EXECUTE_MMI_WAIT_WAP_TASK "[Widget] widget_execute_MMI() - MMI is already waiting WAP"
    MMI_WIDGET_EXECUTE_MMI_UNLOCK_Q_MUTEX "[Widget] widget_execute_MMI() - unlock extq mutex before send wait event group"
    MMI_WIDGET_EXECUTE_MMI_WAP_BLOCKED "[Widget] widget_execute_MMI() - WAP blocked for MMI"
    MMI_WIDGET_EXECUTE_MMI_ASYNC "[Widget] widget_execute_MMI() - async"
    MMI_WIDGET_EXECUTE_WAP "[Widget] widget_execute_WAP(%x, %d)"
    MMI_WIDGET_EXECUTE_WAP_IN_WAP_TASK "[Widget] widget_execute_WAP() in WAP task"
    MMI_WIDGET_EXECUTE_WAP_WAIT_MMI_TASK "[Widget] widget_execute_WAP() - WAP is already waiting MMI"
    MMI_WIDGET_EXECUTE_WAP_MMI_BLOCKED "[Widget] widget_execute_WAP() - MMI blocked for WAP"
    MMI_WIDGET_EXECUTE_WAP_ASYNC "[Widget] widget_execute_WAP() - async"
    MMI_WIDGET_EXECUTE_MMI_I "[Widget] widget_execute_MMI_i(%x, %d, %d)"
    MMI_WIDGET_EXECUTE_MMI_I_IN_MMI_TASK "[Widget] widget_execute_MMI_i() in MMI task"
    MMI_WIDGET_EXECUTE_MMI_I_WAIT_WAP_TASK "[Widget] widget_execute_MMI_i() - MMI is already waiting WAP"
    MMI_WIDGET_EXECUTE_MMI_I_UNLOCK_Q_MUTEX "[Widget] widget_execute_MMI_i() - unlock extq mutex before send wait event group"
    MMI_WIDGET_EXECUTE_MMI_I_WAP_BLOCKED "[Widget] widget_execute_MMI_i() - WAP blocked for MMI"
    MMI_WIDGET_EXECUTE_MMI_I_ASYNC "[Widget] widget_execute_MMI_i() - async"
    MMI_WIDGET_EXECUTE_WAP_I "[Widget] [Widget] widget_execute_WAP_i(%x, %d, %d)"
    MMI_WIDGET_EXECUTE_WAP_I_IN_WAP_TASK "[Widget] widget_execute_WAP_i() in WAP task"
    MMI_WIDGET_EXECUTE_WAP_I_WAIT_MMI_TASK "[Widget] widget_execute_WAP_i() - WAP is already waiting MMI"
    MMI_WIDGET_EXECUTE_WAP_I_MMI_BLOCKED "[Widget] widget_execute_WAP_i() - MMI blocked for WAP"
    MMI_WIDGET_EXECUTE_WAP_I_ASYNC "[Widget] widget_execute_WAP_i() - async"
    MMI_WIDGET_PLAY_MSG_ARRIVAL_TONE_IN_CALL "[Widget] widget_play_msg_arrival_tone (SMS_IN_CALL_TONE)"
    MMI_WIDGET_PLAY_MSG_ARRIVAL_TONE_DRM_RIGHT_MSG "[Widget] widget_play_msg_arrival_tone (drm_right)"
    MMI_WIDGET_PLAY_MSG_ARRIVAL_TONE_MMS_SIM2 "[Widget] widget_play_msg_arrival_tone (mms sim2)"
    MMI_WIDGET_PLAY_MSG_ARRIVAL_TONE_PROV_SIM2 "[Widget] widget_play_msg_arrival_tone (prov sim2)"
    MMI_WIDGET_PLAY_MSG_ARRIVAL_TONE "[Widget] widget_play_msg_arrival_tone (MESSAGE_TONE) mms:%d, prov:%d, text:%d"
    MMI_WIDGET_EXIT_WIDGET_MSG_NOTIFICATION_POPUP "[Widget] exit_widget_msg_notification_popup()"
    MMI_WIDGET_WAP_ENTRY_MSG_NOTIFICATION_POPUP "[Widget] wap_entry_msg_notification_popup()"
    MMI_WIDGET_WAP_ENTRY_MSG_NOTIFICATION_POPUP_END "[Widget] wap_entry_msg_notification_popup (end) text:%d"
    MMI_WIDGET_MSG_NOTIFY_PUSH "[Widget] widget_msg_notifiy_push()"
    MMI_WIDGET_MSG_NOTIFY_URGENT_SERVICE_LOADING "[Widget] widget_msg_notifiy_urgent_service_loading()"
    MMI_WIDGET_MSG_NOTIFY_URGENT_SERVICE_INDICATION "[Widget] widget_msg_notifiy_urgent_service_indication()"
    MMI_WIDGET_MSG_NOTIFY_PROVISION "[Widget] widget_msg_notifiy_provision()"
    MMI_WIDGET_MSG_NOTIFY_DRM_RIGHT "[Widget] widget_msg_notifiy_DRM_right()"
    MMI_WIDGET_MSG_DISPLAY_OTA_SETTING "[Widget] widget_msg_display_OTA_setting_msg()"
    MMI_WIDGET_MSG_NOTIFY_MMS "[Widget] widget_msg_notifiy_MMS()"
    MMI_WIDGET_MMI_REGISTER_NEW_MSG "[Widget] widget_MMI_register_new_msg() - enter (%d)"
    MMI_WIDGET_MMI_REGISTER_NEW_MSG_GOTO_IDLE_SCREEN "[Widget] widget_MMI_register_new_msg() - go to idle screen"
    MMI_WIDGET_MMI_REGISTER_NEW_MSG_IN_CALL "[Widget] widget_MMI_register_new_msg() - in call "
    MMI_WIDGET_MMI_REGISTER_NEW_MSG_POPUP_DIRECTLY "[Widget] widget_MMI_register_new_msg() - display popup "
    MMI_WIDGET_REGISTER_SYSTEM_MSG "[Widget] HDIa_widgetExtRegisterSystemMsg()- discard the action"
    MMI_WIDGET_REGISTER_NEW_PUSH "[Widget] HDIa_widgetExtRegisterNewPush()"
    MMI_WIDGET_REGISTER_URGENT_SERVICE_LOADING "[Widget] HDIa_widgetExtRegisterUrgentServiceLoading()"
    MMI_WIDGET_REGISTER_URGENT_SERVICE_INDICATION "[Widget] HDIa_widgetExtRegisterUrgentServiceIndication()"
    MMI_WIDGET_REGISTER_NEW_PROVISION "[Widget] HDIa_widgetExtRegisterNewProvision()"
    MMI_WIDGET_REGISTER_DRM_RIGHT "[Widget] HDIa_widgetExtRegisterDRMRightNotification()"
    MMI_WIDGET_REGISTER_OTA_SETTING "[Widget] HDIa_widgetExtRegisterOTASettingMsg()"
    MMI_WIDGET_REGISTER_NEW_MMS "[Widget] HDIa_widgetExtRegisterNewMMS(%d, %d, %d)"
    MMI_WIDGET_CLEAR_MMS "[Widget] HDIa_widgetExtClearMMS()"
    MMI_WIDGET_MMI_ON_EXIT_CM "[Widget] widget_MMI_on_exit_CM() - with pending message"
    MMI_WIDGET_MMI_CHECK_AND_DISPLAY_NEW_MSG_WHEN_KEYPAD_LOCK "[Widget] widget_MMI_check_and_display_new_msg_when_keypad_lock() - with message"
    MMI_WIDGET_ENTRY_DISPLAY_SYSTEM_MSG "[Widget] wap_entry_display_system_msg "
    MMI_WIDGET_MMI_CHECK_AND_DISPLAY_MSG "[Widget] widget_MMI_check_and_display_new_msg() - ret=%d"
    MMI_WIDGET_MMI_CHECK_AND_DISPLAY_MSG_NOT_IN_WIDGET_SCREEN "[Widget] widget_MMI_check_and_display_new_msg() - not in widget screen. return true"
    MMI_WIDGET_MMI_CHECK_AND_DISPLAY_MSG_REQUEST_TO_DISPLAY_WIDGET_SCREEN "[Widget] widget_MMI_check_and_display_new_msg() - WAP request MMI to display widget screen"

    MMI_WIDGET_PAINT_ACTION_IN_CTK "[Widget] MsfAction in CTK window"
    MMI_WIDGET_STRING_NOT_FOUND "[Widget] String not found!"
    MMI_WIDGET_MMI_PAINT_BLINKING_HDLR "[Widget] widget_MMI_paint_blinking_hdlr()"
    MMI_WIDGET_GENEREAL_KEYBOARD_HANDLER_DROP_KEY "[Widget] widget_general_keyboard_handler() - Drop key in menu item index selection process"
    MMI_WIDGET_FORM_SCROLL_UP_SLIDING_SMIL "[Widget] widget_form_scroll_up_sliding_SMIL() - incorrect number of gadgets"
    MMI_WIDGET_FORM_SCROLL_DOWN_SLIDING_SMIL "[Widget] widget_form_scroll_down_sliding_SMIL() - incorrect number of gadgets"
    MMI_WIDGET_SET_CURRENT_FOCUS_IN_NON_WIDGET_SCREEN "[Widget] widget_set_current_focus type:%d, level=%d, present=%d, status=%d, shutdown=%d, poweroff=%d"
    MMI_WIDGET_PAINT_OBJECT "[Widget] widget_paint_object()"
    MMI_WIDGET_PAINT_OBJECT_PAINTBOX "[Widget] widget_paint_object() - paintbox"
    MMI_WIDGET_PAINT_OBJECT_FORM "[Widget] widget_paint_object() - form"
    MMI_WIDGET_PAINT_OBJECT_EDITOR "[Widget] widget_paint_object() - editor"
    MMI_WIDGET_PAINT_OBJECT_DIALOG "[Widget] widget_paint_object() - dialog"
    MMI_WIDGET_PAINT_OBJECT_MENU "[Widget] widget_paint_object() - menu"
    MMI_WIDGET_PAINT_OBJECT_CTK "[Widget] widget_paint_object() - CTK"
    MMI_WIDGET_PAINT_OUTSIDE_LOOK "[Widget] widget_paint_outside_look()"
    MMI_WIDGET_CLEAR_ALL_HANDLER "[Widget] widget_clear_all_handler() - enter"
    MMI_WIDGET_CLEAR_ALL_HANDLER_END "[Widget] widget_clear_all_handler() - end"
    MMI_WIDGET_PAINT_HDLR "[Widget] widget_paint_hdlr()"
    MMI_WIDGET_PAINTBOX_REDRAW "[Widget] widget_paintbox_redraw()"
    MMI_WIDGET_PAINT "[Widget] widget_paint()"
    MMI_WIDGET_MMI_PAINT_COMMAND_HDLR "[Widget] widget_MMI_paint_command_hdlr()"
    MMI_WIDGET_PAINT_COMMAND_HDLR "[Widget] widget_paint_command_hdlr()"
    MMI_WIDGET_PAINT_SCROLLBAR_IND_HDLR "[Widget] widget_paint_scrollbar_ind_hdlr()"
    MMI_WIDGET_PROCESS_PENDING_PEN_EVENT_H_BAR "[Widget] widget_process_pending_pen_event() h_bar"
    MMI_WIDGET_PROCESS_PENDING_PEN_EVENT_V_BAR "[Widget] widget_process_pending_pen_event() v_bar"
    MMI_WIDGET_MMI_SOUND_PLAY_CALLBACK "[Widget] widget_MMI_sound_play_callback(%d) %x"
    MMI_WIDGET_PLAY_SOUND_FILE "[Widget] widget_play_sound_file(%x) success"
    MMI_WIDGET_PLAY_SOUND_FILE_FAIL "[Widget] widget_play_sound_file(%x) failed"
    MMI_WIDGET_STOP_SOUND_FILE_IF_PRESENT "[Widget] widget_stop_sound_file_if_present(%x)"
    MMI_WIDGET_MMI_SOUND_PAUSE_CALLBACK "[Widget] widget_MMI_sound_pause_callback(%d) %x"
    MMI_WIDGET_PAUSE_SOUND_FILE_IF_PRESENT "[Widget] widget_pause_sound_file_if_present(%x)"
    MMI_WIDGET_RESUME_SOUND_FILE "[Widget] widget_resume_sound_file(%x)"
    MMI_WIDGET_SOUND_PLAY "[Widget] HDIa_widgetSoundPlay(%x)"
    MMI_WIDGET_SOUND_PLAY_IN_WIDGET_SCREEN "[Widget] HDIa_widgetSoundPlay() in widget_screen (%x, %x)"
    MMI_WIDGET_SOUND_PLAY_IN_PENDING_FOR_PLAYING "[Widget] WSND_CTX->state:WIDGET_SOUND_PENDING_FOR_PLAYING (%x, %x)"
    MMI_WIDGET_SOUND_PLAY_IN_PENDING_ON_DISPLAYED "[Widget] WSND_CTX->state:WIDGET_SOUND_PENDING_ON_DISPLAYED (%x, %x)"
    MMI_WIDGET_MMI_SOUND_STOP "[Widget] widget_MMI_sound_stop(%x)"
    MMI_WIDGET_SOUND_STOP "[Widget] HDIa_widgetSoundStop(%x)"
    MMI_WIDGET_RESUME_PENDING_SOUND_ON_DISPLAYED "[Widget] widget_resume_pending_sound_on_displayed (curr_sound:%x, curr_wnd:%x, state:%d, owner:%x)"
    MMI_WIDGET_MMI_SOUND_GET_DURATION_NO_BUFFER "[Widget] widget_MMI_sound_get_duration() - can't get buffer"
    MMI_WIDGET_MMI_SOUND_GET_DURATION "[Widget] widget_MMI_sound_get_duration(%d)"
    MMI_WIDGET_MMI_IMAGE_NB_DRAW_DONE_CALLBACK "[Widget] widget_MMI_image_nb_draw_done_callback() result:%d"
    MMI_WIDGET_STOP_IMAGE_NB_DRAW "[Widget] widget_stop_image_nb_draw() image:%x"
    MMI_WIDGET_MMI_IMAGE_DRAW_FILE "[Widget] widget_MMI_image_draw_file() is_resized:%d, ret:%d"
    MMI_WIDGET_MMI_IMAGE_DRAW "[Widget] widget_MMI_image_draw() is_resized:%d, ret:%d"
    MMI_WIDGET_MMI_PAINT_GIF_ANOMATION_HDLR_END_WRONG_SCREEN "[Widget] widget_MMI_paint_GIF_animation_hdlr() - !WGUI_CTX->is_widget_screen"
    MMI_WIDGET_MMI_PAINT_GIF_ANOMATION_HDLR_END_NO_IMAGE "[Widget] widget_MMI_paint_GIF_animation_hdlr() - no image to display"
    MMI_WIDGET_MMI_PAINT_GIF_ANOMATION_HDLR_END_WRONG_STATE "[Widget] widget_MMI_paint_GIF_animation_hdlr() - !WGUI_CTX->is_painted"
    MMI_WIDGET_MMI_PAINT_GIF_ANOMATION_HDLR "[Widget] widget_MMI_paint_GIF_animation_hdlr() - start to animate"
    MMI_WIDGET_PAINT_GIF_ANOMATION_HDLR_END_WRONG_SCREEN "[Widget] widget_paint_GIF_animation_hdlr() - !WGUI_CTX->is_widget_screen"
    MMI_WIDGET_PAINT_GIF_ANOMATION_HDLR_END_NO_IMAGE "[Widget] widget_paint_GIF_animation_hdlr() - no image to display"
    MMI_WIDGET_GET_TOP_GDI_LAYER "[Widget] widget_get_video_gdi_layer() - top gdi layer"
    MMI_WIDGET_GET_VIDEO_GDI_LAYER "[Widget] widget_get_video_gdi_layer() - video gdi layer"
    MMI_WIDGET_FREE_VIDEO_GDI_LAYER "[Widget] widget_free_video_gdi_layer()"
    MMI_WIDGET_MMI_PREPARE_PLAY_VIDEO_GADGET_FIRST_OPEN "[Widget] widget_MMI_prepare_play_vido_gadget() - open file first"
    MMI_WIDGET_MMI_PREPARE_PLAY_VIDEO_GADGET_DIRECTLY "[Widget] widget_MMI_prepare_play_vido_gadget() - play directly"
    MMI_WIDGET_MMI_PLAY_VIDEO_GADGET "[Widget] widget_MMI_play_vido_gadget()"
    MMI_WIDGET_MMI_SHOW_VIDEO_GADGET_PREVIEW "[Widget] widget_MMI_show_vido_gadget_preview()"
    MMI_WIDGET_PAINT_VIDEO_GADGET_IN_PREVIEW "[Widget] widget_paint_gadget_image() - video_in_preview"
    MMI_WIDGET_PAINT_VIDEO_GADGET_PLAY_VIDEO "[Widget] widget_paint_gadget_image() - play video"
    MMI_WIDGET_MMI_PAINT_MARQUEE_OBJECT "[Widget] widget_MMI_paint_marquee_object - %d"
    MMI_WIDGET_MMI_PAINT_MARQUEE_HDLR "[Widget] widget_MMI_paint_marquee_hdlr"
    MMI_WIDGET_EXT_CACHE_NONBLOCKING_IMAGE "[Widget] HDIa_widgetExtCacheNonBlockingImage cb:%x"
    MMI_WIDGET_EXT_CACHE_NONBLOCKING_IMAGE_RESULT "[Widget] HDIa_widgetExtCacheNonBlockingImage result:%d"
    MMI_WIDGET_CTK_SMIL_FREE_SCRMEM "[Widget] mmi_frm_scrmem_free when leaving SMIL editor screen"
    MMI_WIDGET_CTK_SMIL_ALLOC_SCRMEM "[Widget] mmi_frm_scrmem_alloc in widget_ctk_show_smil_editor"
    MMI_WIDGET_INIT_CTK "[Widget] widget_init_ctk() widget_ctk_appid:0x%x"
    MMI_WIDGET_DEINIT_CTK "[Widget] widget_deinit_ctk() widget_ctk_appid:0x%x"
    MMI_WIDGET_PAINT_CTK "[Widget] widget_paint_ctk widget_current_ctk:0x%x (End)"
    MMI_WIDGET_CTK_SMIL_EDITOR_CACHE_IMAGE "[Widget] widget_ctk_smil_editor_cache_image()"
    MMI_WIDGET_CTK_SMIL_EDITOR_CACHE_IMAGE_FREE_LAYER "[Widget] Free g_widget_ctk_se_image_cache_layer (is_nb_drawing == FALSE)"
    MMI_WIDGET_EXT_SMIL_EDITOR_CACHE_NONBLOCKING_IMAGE "[Widget] HDIa_widgetExtSmilEditorCacheNonBlockingImage()"
    MMI_WIDGET_EXT_SMIL_EDITOR_CACHE_NONBLOCKING_IMAGE_RETURN "[Widget] HDIa_widgetExtSmilEditorCacheNonBlockingImage() state:%d"

    
    MMI_WAP_UM_ENTRY_WRITE_MMS "wap_um_entry_write_mms() : cannot enter during USB mode"
    MMI_WAP_UM_ENTRY_MSG_MMS "wap_um_entry_msg_mms() : cannot enter during USB mode"
    MMI_WAP_UM_ENTRY_TEMPLATE_MMS "wap_um_entry_template_mms() : cannot enter during USB mode"
    MMI_WAP_UM_ENTRY_SETTING_MMS "wap_um_entry_setting_mms() : cannot enter during USB mode"
    


    
    MMI_RPC_REQ_MESSAGE "[RPC] mmiapi_remote_proc_call_req() %x"
    MMI_RPC_REQ_MESSAGE_CANCELED "[RPC] mmiapi_remote_proc_call_req() canceled"
    MMI_RPC_REQ_MESSAGE_END "[RPC] mmiapi_remote_proc_call_req() %x - finished"
    

#line 741 "..\\..\\plutommi\\mmi\\inc\\MMI_fw_trc.h"

#line 1052 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\plutommi\\mmi\\inc\\MMI_inet_app_trc.h"


















































































MMI_POC_ENTRY_CALL_HISTORY_INFO "*----[PoC] mmi_poc_entry_call_history_info----*"

MMI_POC_ENTRY_STATUS "*----[PoC] mmi_poc_entry_status----*"
MMI_POC_ENTRY_REGISTERING "*----[PoC] mmi_poc_entry_registering----*"
MMI_POC_ENTRY_INVITING "*----[PoC] mmi_poc_entry_inviting----*"
MMI_POC_ENTRY_MO_RINGING "*----[PoC] mmi_poc_entry_mo_ringing----*"
MMI_POC_ENTRY_MT_RINGING "*----[PoC] mmi_poc_entry_mt_ringing----*"
MMI_POC_ENTRY_MT_RINGING_ANSWERED "*----[PoC] mmi_poc_entry_mt_ringing_answered----*"
MMI_POC_ENTRY_CONNECTED_IDLE "*----[PoC] mmi_poc_entry_connected_idle----*"
MMI_POC_ENTRY_TALK_OPTIONS "*----[PoC] mmi_poc_entry_talk_options----*"
MMI_POC_ENTRY_CM_ADD_USER "*----[PoC] mmi_poc_entry_cm_add_user----*"
MMI_POC_ENTRY_CM_ADD_USER_CFRM "*----[PoC] mmi_poc_entry_cm_add_user_cfrm----*"
MMI_POC_ENTRY_REVOKE "*----[PoC] mmi_poc_entry_revoke----*"
MMI_POC_ENTRY_TALKING "*----[PoC] mmi_poc_entry_talking----*"
MMI_POC_ENTRY_MEDIA_PROCESSING "*----[PoC] mmi_poc_entry_media_processing----*"
MMI_POC_ENTRY_LISTENING "*----[PoC] mmi_poc_entry_listening----*"
MMI_POC_ENTRY_PERSONAL_ALERT "*----[PoC] mmi_poc_entry_personal_alert----*"

MMI_POC_EXIT_RELEASE_PTT "*----[PoC] mmi_poc_exit_release_ptt----*"
MMI_POC_EXIT_MO_RINGING "*----[PoC] mmi_poc_exit_mo_ringing----*"
MMI_POC_EXIT_MT_RINGING "*----[PoC] mmi_poc_exit_mt_ringing----*"
MMI_POC_EXIT_MT_RINGING_ANSWERED "*----[PoC] mmi_poc_exit_mt_ringing_answered----*"
MMI_POC_EXIT_CONNECTED_IDLE "*----[PoC] mmi_poc_exit_connected_idle----*"
MMI_POC_EXIT_TALKING "*----[PoC] mmi_poc_exit_talking----*"
MMI_POC_EXIT_LISTENING "*----[PoC] mmi_poc_exit_listening----*"
MMI_POC_EXIT_PERSONAL_ALERT "*----[PoC] mmi_poc_exit_personal_alert----*"

MMI_POC_PTT_PRESS "*----[PoC] mmi_poc_ptt_press----*"
MMI_POC_PTT_RELEASE "*----[PoC] mmi_poc_ptt_release----*"
MMI_POC_DISCONNECT_BACK "*----[PoC] mmi_poc_disconnect_back----*"
MMI_POC_DISCONNECT_END "*----[PoC] mmi_poc_disconnect_end----*"

MMI_POC_INVITE_RSP "*----[PoC] mmi_poc_invite_rsp, ptt:%d----*"
MMI_POC_MT_RINGING_YES "*----[PoC] mmi_poc_mt_ringing_yes----*"
MMI_POC_MT_RINGIN_NO "*----[PoC] mmi_poc_mt_ringin_no----*"
MMI_POC_MT_RINGING_END "*----[PoC] mmi_poc_mt_ringing_end----*"
MMI_POC_FLOOR_TAKE_KEY "*----[PoC] mmi_poc_floor_take_key----*"
MMI_POC_TALKING_RELEASE_PTT "*----[PoC] mmi_poc_talking_release_ptt----*"
MMI_POC_RESET_ALL_AUDIO "*----[PoC] mmi_poc_reset_all_audio----*"
MMI_POC_CALL_STATE "*----[PoC] mmi_call_state: %d----*"   

    
    MMI_EMAIL_PS_START_RSP "*----[Email] mmi_email_ps_start_rsp => entry_scr:[%d]----*"
    MMI_EMAIL_PS_STOP_RSP "*----[Email] mmi_email_ps_stop_rsp  => stop_cause:[%d], entry_src:[%d]----*"
    MMI_EMAIL_PS_LIST_FOLDERS_RSP "*----[Email] mmi_email_ps_list_folders_rsp  => listFolderReqState:[%d] ----*"
    MMI_EMAIL_PS_AUTOCHECK_EXPIRY_IND "*----[Email] mmi_email_ps_auto_chk_ind => ActionState:[%d] ----*"
    MMI_EMAIL_PS_ABORT_RSP "*----[Email] mmi_email_ps_abort_rsp => curr_fldr:[%d]----*"
    MMI_EMAIL_RENAME_ATTACH_DELETE_FILE "*----[Email] Rename attach delete file ret:[%d]----*"
    MMI_EMAIL_RENAME_ATTACH_RENAME_FILE "*----[Email] Rename attach rename file ret:[%d]----*"
    MMI_EMAIL_RENAME_TO_COMPOSE "*----[Email] rename_to_compose => updated total comp_info size:[%d]----*"
    MMI_EMAIL_RENAME_READ_TO_COMP_TYPE "*----[Email] rename_read_tp_comp => is_drm:[%d], mime_type:[%d], mime_subtype:[%d]----*"
    MMI_EMAIL_RENAME_READ_TO_COMP_SIZE "*----[Email] rename_read_to_comp => updated total comp_info size:[%d]----*"
    MMI_EMAIL_GET_MINE_TYPE "*----[Email] get_mine_type => mime_type:[%d], mime_subtype:[%d]----*"
    MMI_EMAIL_DRM_IS_FILE_LOCK "*----[Email] drm_is_file_lock => method:[%d], can_fwd:[%d], is_drm_file:[%d]----*"
    MMI_EMAIL_READ_TEMPLATE_ERROR "*----[Email] ERROR: mmi_email_read_template_from_nvram => index[%d] out of bound----*"
    MMI_EMAIL_GET_TEMPLATE_INDEX "*----[Email] mmi_email_get_template_index => index[%d]----*"
    MMI_EMAIL_PS_SEND_MSG "*----[Email] mmi_email_ps_send_msg => msg_id:[%d], stop_cause:[%d]----*"
    MMI_EMAIL_PS_DEINIT_REQ "*----[Email] mmi_email_ps_deinit_req => entry_src:[%d]"
    MMI_EMAIL_PS_DEINIT_RSP "*----[Email] mmi_email_ps_deinit_rsp => entry_src:[%d]"
    MMI_EMAIL_PS_COMPOSE_FILE_ATTACH "*----[Email] mmi_email_ps_compose_fill_attach => rename file[%d] attach[%d]----*"
    MMI_EMAIL_PS_COMPOSE_FILE_ATTACH_DRM "*----[Email] mmi_email_ps_compose_fill_attach => is_drm:[%d], mime_type:[%d], mime_subtype:[%d]----*"
    MMI_EMAIL_FLDR_GET_MSG_ATTACH_DRM "*----[Email] mmi_email_fldr_get_msg_attch => is_drm:[%d], mime_type:[%d], mime_subtype:[%d]----*"
    MMI_EMAIL_COMP_ADD_SIG_DELETE_FILE "*----[Email] mmi_email_comp_add_sig => delete file ret:[%d]----*"
    MMI_EMAIL_COMP_RESET_MEMBER_DELETE_FILE "*----[Email] mmi_email_comp_reset_member => delete file ret:[%d]----*"
    MMI_EMAIL_COMP_ADD_ATTACH_CALLBACK_DELETE_FILE "*----[Email] mmi_email_comp_add_attach_callback => delete file ret:[%d]----*"
    MMI_EMAIL_COMP_ADD_ATTACH_CALLBACK_FILE_SIZE "*----[Email] mmi_email_comp_add_attach_callback => File Size:[%d], total size:[%d]----*"
    MMI_EMAIL_COMP_ATTACH_COPY_CALLBACK_FILE_SIZE "*----[Email] mmi_email_comp_attach_copy_callback => File Size:[%d], total size:[%d]----*"
    MMI_EMAIL_COMP_PRE_ENTRY_VIEW_ATTACH_DRM "*----[Email] mmi_email_comp_pre_entry_view_attach => method:[%d], permission:[%d]----*"
    MMI_EMAIL_COMP_ATTCH_DEL_DONE_DEL_FILE "*----[Email] mmi_email_comp_attch_del_done => Delete file Ret:[%d]----*"
    MMI_EMAIL_COMP_ATTCH_DEL_DONE_FILE_SIE "*----[Email] mmi_email_comp_attch_del_done => File Size:[%d], Updated Total Size:[%d]----*"
    MMI_EMAIL_ENTRY_READ_ATTCH_VIEW_DRM "*----[Email] mmi_email_entry_read_attch_view => permission:[%d], method:[%d]----*"
    MMI_EMAIL_PROF_SAVE_SIG_DEL_FILE_NEW "*----[Email] mmi_email_prof_save_sig => Delete file Ret:[%d]----*"
    MMI_EMAIL_PROF_SAVE_SIG_DEL_FILE_OLD "*----[Email] mmi_email_prof_save_sig => Delete old file Ret:[%d]----*"
    MMI_EMAIL_PROF_SIG_SAVE_FILE_CALLBACK_DEL_FILE_OLD "*----[Email] mmi_email_prof_sig_save_file_callback => Delete old file Ret:[%d]----*"
    MMI_EMAIL_ENTRY_PROF_SIG_VIEW_ATTACH_DRM "*----[Email] mmi_email_entry_prof_sig_view_attach => method:[%d]----*"
    MMI_EMAIL_APP_EXEC_SENT_DEL_FILE "*----[Email] mmi_email_app_exec_send => Delete file Ret:[%d]----*"
    MMI_EMAIL_FMGR_EXEC_SENT_DEL_FILE "*----[Email] mmi_email_fmgr_exec_send => Delete file Ret:[%d]----*"
    MMI_EMAIL_INSERT_TEMPLATE "*----[Email] mmi_email_insert_template----*"
    MMI_EMAIL_ENTRY_TEMPLATE_LIST "*----[Email] mmi_email_entry_template_list----*"
    MMI_EMAIL_ENTRY_TEMPLATE_OPTION "*----[Email] mmi_email_entry_template_option----*"
    MMI_EMAIL_ENTRY_TEMPLATE_EDIT "*----[Email] mmi_email_entry_template_edit----*"
    MMI_EMAIL_ENTRY_TEMPLATE_EDIT_OPTION "*----[Email] mmi_email_entry_template_edit_option----*"

#line 167 "..\\..\\plutommi\\mmi\\inc\\MMI_inet_app_trc.h"

#line 1053 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\plutommi\\mmi\\inc\\MMI_media_app_trc.h"













































































































   
   
   
   MMI_LANGLN_GET_COURSE_TYPE "*---[langln_common.c] [function: langln_adapt_get_course_type] [Engine:DZD_KJ_FindExForFileName] => filename: [%d], type: [%d]---*"	
   MMI_LANGLN_GET_COURSE_INFO "*---[langln_common.c] [function: langln_adapt_get_course_info] [Engine:DZD_KJ_IsRegisted] => imei: [%d], return value: [%d]---*"	
   MMI_LANGLN_REGISTER_COURSE "*---[langln_common.c] [function: langln_adapt_register_course] [Engine:DZD_KJ_SaveKeyForFileName] => imei: [%d], key: [%d], return value: [%d]---*"	

   MMI_LANGLN_WK_OPEN_CHECK_TYPE "*---[langln_wk.c] [function: langln_adapt_wk_open] [Engine:langln_adapt_wk_check_course_type] => filename: [%d], ret: [%d]---*"	
   MMI_LANGLN_WK_OPEN_ALLOC_MEM "*---[langln_wk.c] [function: langln_adapt_wk_open] [Engine:DZD_KJ_AllocKJMem] => size: [%d], address: [%d]---*"	
   MMI_LANGLN_WK_OPEN_KJ_OPEN "*---[langln_wk.c] [function: langln_adapt_wk_open] [Engine:DZD_KJ_Open] => imei: [%d], ret: [%d]---*"	
   MMI_LANGLN_WK_OPEN_OPEN_INTERNAL "*---[langln_wk.c] [function: langln_adapt_wk_open] [Engine:langln_adapt_wk_open_internal] => clear: [%d], ret: FALSE---*"	
   MMI_LANGLN_WK_GET_WORD_CURVE_FAIL "*---[langln_wk.c] [function: langln_adapt_wk_get_word_by_curve] [Engine:DZD_WORD_GetShowWord] => ret: FALSE---*"	
   MMI_LANGLN_WK_GET_WORD_CURVE "*---[langln_wk.c] [function: langln_adapt_wk_get_word_by_curve] [Engine:DZD_WORD_GetShowWord] => view_type: [%d], index: [%d]---*"	
   MMI_LANGLN_WK_CHANGE_CONTENT_GROUP "*---[langln_wk.c] [function: langln_adapt_wk_change_content_group] [Engine:DZD_WORD_ChangeUseStat] => showtype: [%d], ret: [%d]---*"	
   MMI_LANGLN_WK_ADD_TO_NOTEBOOK_BEGIN "*---[langln_wk.c] [function: langln_adapt_wk_add_to_notebook] [Engine:Empty] Begin to add to notebook---*"	
   MMI_LANGLN_WK_ADD_TO_NOTEBOOK_NOT_OPENED "*---[langln_wk.c] [function: langln_adapt_wk_add_to_notebook] [Engine:langln_adapt_wk_course_is_opened] not opened!*"	
   MMI_LANGLN_WK_ADD_TO_NOTEBOOK_INDEX "*---[langln_wk.c] [function: langln_adapt_wk_add_to_notebook] [Engine:Empty] index: [%d]---*"	
   MMI_LANGLN_WK_ADD_TO_NOTEBOOK_GET_WORD_INFO "*---[langln_wk.c] [function: langln_adapt_wk_add_to_notebook] [Engine:DZD_WORD_GetWordInfo] Get word info returns FALSE---*"	
   MMI_LANGLN_WK_ADD_TO_NOTEBOOK_MARK_ADD "*---[langln_wk.c] [function: langln_adapt_wk_add_to_notebook] [Engine:DZD_WORD_Mark_Add] Add to notebook successfully---*"	
   MMI_LANGLN_WK_ADD_TO_NOTEBOOK_FAILED "*---[langln_wk.c] [function: langln_adapt_wk_add_to_notebook] [Engine:DZD_WORD_Mark_Add] Add to notebook failed---*"	
   MMI_LANGLN_WK_DELETE_FROM_NOTEBOOK "*---[langln_wk.c] [function: langln_adapt_wk_delete_from_notebook] [Engine:DZD_WORD_Mark_Del] index: [%d], ret: [%d]---*"	
   MMI_LANGLN_WK_GET_PICTURE "*---[langln_wk.c] [function: langln_adapt_wk_get_picture] [Engine:DZD_WORD_ReadImg] address: [%d], ret: [%d]---*"	

   MMI_LANGLN_DK_GET_IN_MEM "*---[LangLnDK.c] normal entry dictionary, the memory size is:%d"
   MMI_LANGLN_DK_GET_OUT_MEM "*---[LangLnDK.c] normal exit dictionary, the memory size is:%d"
   MMI_LANGLN_DK_GET_IN_MEM_2 "*---[LangLnDK.c] App entry dictionary, the memory size is:%d"
   MMI_LANGLN_DK_GET_OUT_MEM_2 "*---[LangLnDK.c] App exit dictionary, the memory size is:%d"
   MMI_LANGLN_DK_GET_SOUND_TIME "*---[LangLnDK.c] current word sound time is:begin:%d-end:%d"
   MMI_LANGLN_BK_GET_IN_MEM "*---[LangLnBK.c] entry ebook king, the memory size is:%d"
   MMI_LANGLN_BK_GET_OUT_MEM "*---[LangLnBK.c] exit ebook king, the memory size is:%d"
   MMI_LANGLN_SK_GET_IN_MEM "*---[LangLnSK.c] entry sentence king, the memory size is:%d"
   MMI_LANGLN_SK_GET_OUT_MEM "*---[LangLnSK.c] exit sentence king, the memory size is:%d"
   MMI_LANGLN_SK_GET_SOUND_TIME "*---[LangLnSK.c] current sentece sound time is:begine:%d-end:%d"

   
   MMI_LANGLN_LK_ENTER_PROCESS "[LANGLN_LK]Listening King enter process trace error=[%d]"
   MMI_LANGLN_LK_IMAGE_BUF "[LANGLN_LK]Listening King get image buffer pImage=[%x], length=[%d]"
   MMI_LANGLN_LK_TRACE_1_VALUE "[LANGLN_LK]Listening King common trace type=[%d], value=[%d]"
   MMI_LANGLN_LK_TRACE_2_VALUE "[LANGLN_LK]Listening King common trace type=[%d], value1=[%d], value2=[%d]"
   
   


   
   
   
   MMI_BGSND_MO_CALL_MAKE_CALL "--- [BGSoundInCall.c] bgsnd_mo_call_make_call() => sound index = [%d] ---"
   MMI_BGSND_MO_PLAY_SOUND "--- [BGSoundInCall.c] mmi_bgsnd_mo_play_sound() ---"
   MMI_BGSND_MT_PLAY_SOUND "--- [BGSoundInCall.c] mmi_bgsnd_mt_play_sound() ---"

   MMI_BGSND_UTIL_PLAY_SOUND "--- [BGSoundInCall.c] mmi_bgsnd_util_play_sound() => sound index = [%d] ---"
   MMI_BGSND_UTIL_PLAY_SOUND_IN_CALL "--- [BGSoundInCall.c] mmi_bgsnd_util_play_sound_in_call() => status = [%d], speech on = [%d] ---"
   MMI_BGSND_UTIL_PLAY_IN_CALL_CALLBACK "--- [BGSoundInCall.c] mmi_bgsnd_util_play_in_call_callback() => sound index = [%d] ---"

   MMI_BGSND_UTIL_STOP_PLAY_SOUND "--- [BGSoundInCall.c] mmi_bgsnd_util_stop_play_sound() => status = [%d] ---"
   MMI_BGSND_UTIL_STOP_PLAY_SOUND_IN_CALL "--- [BGSoundInCall.c] mmi_bgsnd_util_stop_play_sound_in_call() ---"
   MMI_BGSND_UTIL_STOP_PLAY_SOUND_END_CALL "--- [BGSoundInCall.c] mmi_bgsnd_util_stop_play_sound_end_call() ---"

   MMI_BGSND_UTIL_SWITCH_SPEECH "--- [BGSoundInCall.c] mmi_bgsnd_util_switch_speech() => speech on = [%d], request play = [%d]---"


   
   
   
    MMI_SWFLASH_DEP_CIM_MALLOC "*[swflash] cimMalloc: size=%d, ptr=[0x%x]"
    MMI_SWFLASH_DEP_CIM_FREE "*[swflash] cimFree: ptr=[0x%x]"
    MMI_SWFLASH_DEP_CIM_MEMCMP "*[swflash] cimMemCmp: [0x%x]<->[0x%x], size=%d, result=%d"
    MMI_SWFLASH_DEP_CIM_MEMCPY "*[swflash] cimMemCpy: [0x%x]-->[0x%x], size=%d"
    MMI_SWFLASH_DEP_CIM_ZEROMEM "*[swflash] cimZeroMem: [0x%x], size=%d"
    MMI_SWFLASH_DEP_CIM_MEMSET "*[swflash] cimMemset: [0x%x], size=%d, set as %d"


    MMI_SWFLASH_DEP_CIM_STRLEN "*[swflash] cimStrlen: [0x%x], len=%d"
    MMI_SWFLASH_DEP_CIM_STRCPY "*[swflash] cimStrCpy: [0x%x]-->[0x%x]"
    MMI_SWFLASH_DEP_CIM_STRCMP "*[swflash] cimStrCmp: [0x%x]<->[0x%x], result=%d"
    MMI_SWFLASH_DEP_CIM_STRCAT "*[swflash] cimStrCat: [0x%x]<--[0x%x], result=%d"
    MMI_SWFLASH_DEP_CIM_STRSTR "*[swflash] cimStrStr: [0x%x]<->[0x%x], result=%d"
    MMI_SWFLASH_DEP_CIM_STRLWR "*[swflash] cimStrLwr: [0x%x]"
    MMI_SWFLASH_DEP_CIM_WCSLEN "*[swflash] cimWcslen: [0x%x], len=%d"
    MMI_SWFLASH_DEP_CIM_WCSICMP "*[swflash] cimWcsicmp: [0x%x]<->[0x%x], result=%d"
    MMI_SWFLASH_DEP_CIM_WCSCMP "*[swflash] cimWcsicmp: [0x%x]<->[0x%x], result=%d"
    MMI_SWFLASH_DEP_CIM_WCSCHR "*[swflash] cimWcschr: [0x%x], c=%d, loc=%d"
    MMI_SWFLASH_DEP_CIM_WCSNCPY "*[swflash] cimWcsncpy: [0x%x]-->[0x%x], count=%d"

    MMI_SWFLASH_DEP_CIM_TIMER_EVTHDLR "*[swflash] cim_timer_expire_handler: HCIM=[0x%x], evt=%d, para1=%d, para2=%d, ret=%d"
    MMI_SWFLASH_DEP_CIM_SETTIMER "*[swflash] cimSetTimer: HCIM=[0x%x], interval=%d"
    MMI_SWFLASH_DEP_CIM_KILLTIMER "*[swflash] cimKillTimer: HCIM=[0x%x]"
    MMI_SWFLASH_DEP_CIM_GETTICK "*[swflash] cimGetTickCount: ticks=%d"

    MMI_SWFLASH_DEP_CIM_LOADPNG "*[swflash] cimLoadPNG: PNG=[0x%x], len=%d"
    MMI_SWFLASH_DEP_CIM_DIAL "*[swflash] cimDial: num=%d%d%d%d%d%d%d%d%d%d"
    MMI_SWFLASH_DEP_CIM_SENDSMS "*[swflash] cimSendSms: num=%d%d%d%d%d%d%d%d%d%d"

    MMI_SWFLASH_DEP_CIM_PL_VIB_SEND_IND "*[swflash] cim_pl_vib_send_ind, on=%d"
    MMI_SWFLASH_DEP_CIM_VIBRATE_EVTHDLR "*[swflash] cim_vibrate_expire_handler"
    MMI_SWFLASH_DEP_CIM_VIBRATE "*[swflash] cimVibrate: msec=%d"
    MMI_SWFLASH_DEP_CIM_GETBKBMP "*[swflash] cimGetBKBmp: [0x%x], cx=%d, cy=%d, pitch=%x"
    MMI_SWFLASH_DEP_CIM_GETIMEI "*[swflash] cimCDBGetPhoneIMEI: [0x%x], size=%d"

    MMI_SWFLASH_DEP_CIM_CREATEFONT "*[swflash] cimCreateFont: height=%d"
    MMI_SWFLASH_DEP_CIM_GETFONTSIZE "*[swflash] cimGetFontSize: font=[0x%x]"
    MMI_SWFLASH_DEP_CIM_GETTEXTWIDTH "*[swflash] cimGetTextWidth: font=[0x%x], str=[0x%x], len=%d"
    MMI_SWFLASH_DEP_CIM_DRAWTEXTEX "*[swflash] cimDrawTextEx: HCIM=[0x%x], font=[0x%x], x=%d, y=%d, str=[0x%x], len=%d, color=%d"
    MMI_SWFLASH_DEP_CIM_DESTROYFONT "*[swflash] cimDestroyFont: font=[0x%x]"

    MMI_SWFLASH_DEP_CIM_PL_AUD_SEND_IND "*[swflash] cim_pl_aud_send_ind, notify=%d"

    MMI_SWFLASH_DEP_CIM_AUD_EVTHDLR "*[swflash] cim_aud_event_hdlr: handle=[0x%x], evt=%d"
    MMI_SWFLASH_DEP_CIM_ESOUNDOPEN "*[swflash] cimESoundOpen: HCIM=[0x%x], len=%d, btype=%d, type=%d, loop=%d, flag=%d"
    MMI_SWFLASH_DEP_CIM_ESOUNDPLAY "*[swflash] cimESoundPlay: HCIM=[0x%x], es=[0x%x]"
    MMI_SWFLASH_DEP_CIM_ESOUNDPAUSE "*[swflash] cimESoundPause: HCIM=[0x%x], es=[0x%x]"
    MMI_SWFLASH_DEP_CIM_ESOUNDRESUME "*[swflash] cimESoundResume: HCIM=[0x%x], es=[0x%x]"
    MMI_SWFLASH_DEP_CIM_ESOUNDREPLAY "*[swflash] cimESoundReplay: HCIM=[0x%x], es=[0x%x]"
    MMI_SWFLASH_DEP_CIM_ESOUNDSTOP "*[swflash] cimESoundStop: HCIM=[0x%x], es=[0x%x]"
    MMI_SWFLASH_DEP_CIM_ESOUNDCLOSE "*[swflash] cimESoundClose: HCIM=[0x%x], es=[0x%x]"

    MMI_SWFLASH_DEP_CIM_DL_SOC_SEND_IND "*[swflash] cim_dl_soc_send_ind, notify=%d"
    MMI_SWFLASH_DEP_CIM_DL_SOC_IND_HDLR "*[swflash] cim_dl_soc_ind_handler, soc_id=%d, evt_type=%d, soc_state=%d"
    MMI_SWFLASH_DEP_CIM_DL_SOC_GET_IP_HDLR "*[swflash] cim_dl_soc_get_ip_handler, result=%d, soc_state=%d"

    MMI_SWFLASH_DEP_CIM_SESOCKET "*[swflash] cimSESocket: APN=[0x%x], soc_state=%d"
    MMI_SWFLASH_DEP_CIM_SECONNECT "*[swflash] cimSEConnect: ADD=[0x%x], port=%d, type=%d, soc_id=%d"
    MMI_SWFLASH_DEP_CIM_SERECV "*[swflash] cimSERecv: BUF=[0x%x], size=%d"
    MMI_SWFLASH_DEP_CIM_SESEND "*[swflash] cimSESend: BUF=[0x%x], size=%d"
    MMI_SWFLASH_DEP_CIM_SECLOSE "*[swflash] cimSEClose"
    MMI_SWFLASH_DEP_CIM_SENOTIFY "*[swflash] cimSENotify, msg=%d, para1=%d, param2=%d"

    MMI_SWFLASH_DEP_CIM_GETDISKSPACE "*[swflash] cimGetDiskSpace, size=%d"

    MMI_SWFLASH_APP_CIM_CREATEHANDLE "*[SWFLASH] CimCreateHandle, data=[0x%x], size=%d => HFILE=[0x%x]"
    MMI_SWFLASH_APP_CIM_FREEHANDLE "*[SWFLASH] CimFreeHandle, HFILE=[0x%x]"

    MMI_SWFLASH_APP_CIM_ADDWFDDATA "*[SWFLASH] CimAddWfdData, HFILE=[0x%x], data=[0x%x], size=%d"
    MMI_SWFLASH_APP_CIM_GETFILEDATA "*[SWFLASH] CimGetFileData, HFILE=[0x%x], data=[0x%x], size=%d"
    MMI_SWFLASH_APP_CIM_2OPEN "*[SWFLASH] Cim2Open, HFILE=[0x%x], mode=%d, err=%d => HCIM=[0x%x]"
    MMI_SWFLASH_APP_CIM_2SETBUFFER "*[SWFLASH] Cim2SetBuffer, HCIM=[0x%x], width=%d, height=%d, pitch=%d, bpp=%d, BUF=[0x%x]"
    MMI_SWFLASH_APP_CIM_2PLAY "*[SWFLASH] Cim2Play, HCIM=[0x%x]"
    MMI_SWFLASH_APP_CIM_2STOP "*[SWFLASH] Cim2Stop, HCIM=[0x%x]"
    MMI_SWFLASH_APP_CIM_2PAUSE "*[SWFLASH] Cim2Pause, HCIM=[0x%x]"
    MMI_SWFLASH_APP_CIM_2RESUME "*[SWFLASH] Cim2Resume, HCIM=[0x%x]"
    MMI_SWFLASH_APP_CIM_2CLOSE "*[SWFLASH] Cim2Close, HCIM=[0x%x]"

    MMI_SWFLASH_APP_CIM_SECREATE "*[SWFLASH] CimSECreate, HFILE=[0x%x] => HSE=[0x%x]"
    MMI_SWFLASH_APP_CIM_SEDESTROY "*[SWFLASH] CimSEDestroy, HSE=[0x%x]"
    MMI_SWFLASH_APP_CIM_SEHNDLEVT "*[SWFLASH] CimSEHandleEvent, HSE=[0x%x], msg=%d, para1=%d, para2=%d"

    MMI_SWFLASH_APP_CIM_DL_RESULT_CB "*[SWFLASH] dl_result_callback, ret=%d"
    MMI_SWFLASH_APP_CIM_DL_PROGRESS_CB "*[SWFLASH] dl_progress_callback, dl=%d, total=%d"

    MMI_SWFLASH_MDI_CIM_INIT_PRELOAD_FILE "*[SWFLASH] mdi_swflash_init_preload_file"
    MMI_SWFLASH_MDI_CIM_READFILE "*[SWFLASH] mdi_swflash_read_file"
    MMI_SWFLASH_MDI_CIM_WRITEFILE "*[SWFLASH] mdi_swflash_write_file"
    MMI_SWFLASH_MDI_CIM_OPENFILE "*[SWFLASH] mdi_swflash_open_file"
    MMI_SWFLASH_MDI_CIM_CLOSEFILE "*[SWFLASH] mdi_swflash_close_file"
    MMI_SWFLASH_MDI_CIM_UPDATEFILE "*[SWFLASH] mdi_swflash_update_file"
    MMI_SWFLASH_MDI_CIM_OPENID "*[SWFLASH] mdi_swflash_open_id"
    MMI_SWFLASH_MDI_CIM_CLOSEID "*[SWFLASH] mdi_swflash_close_id"
    MMI_SWFLASH_MDI_CIM_PLAY "*[SWFLASH] mdi_swflash_play"
    MMI_SWFLASH_MDI_CIM_STOP "*[SWFLASH] mdi_swflash_stop"
    MMI_SWFLASH_MDI_CIM_PAUSE "*[SWFLASH] mdi_swflash_pause"
    MMI_SWFLASH_MDI_CIM_RESUME "*[SWFLASH] mdi_swflash_resume"

    MMI_SWFLASH_MDI_CIM_ENABLE_VISUAL "*[SWFLASH] mdi_swflash_enable_visual"
    MMI_SWFLASH_MDI_CIM_DISABLE_VISUAL "*[SWFLASH] mdi_swflash_disable_visual"
    MMI_SWFLASH_MDI_CIM_ENABLE_AUDIO "*[SWFLASH] mdi_swflash_enable_audio"
    MMI_SWFLASH_MDI_CIM_DISABLE_AUDIO "*[SWFLASH] mdi_swflash_disable_audio"
    MMI_SWFLASH_MDI_CIM_ENABLE_VIBRATE "*[SWFLASH] mdi_swflash_enable_vibrate"
    MMI_SWFLASH_MDI_CIM_DISABLE_VIBRATE "*[SWFLASH] mdi_swflash_disable_vibrate"
    MMI_SWFLASH_MDI_CIM_ENABLE_INTERACT "*[SWFLASH] mdi_swflash_enable_interaction"
    MMI_SWFLASH_MDI_CIM_DISABLE_INTERACT "*[SWFLASH] mdi_swflash_disable_interaction"

    MMI_SWFLASH_MDI_CIM_START_DOWNLOAD_FILE "*[SWFLASH] mdi_swflash_start_download_file"
    MMI_SWFLASH_MDI_CIM_STOP_DOWNLOAD_FILE "*[SWFLASH] mdi_swflash_stop_download_file"
    MMI_SWFLASH_MDI_CIM_DL_SOC_IND_HDLR "*[SWFLASH] mdi_swflash_dl_socket_ind_handler"

    MMI_SWFLASH_MDI_CIM_PL_AUD_IND_HDLR "*[SWFLASH] mdi_swflash_pl_audio_ind_handler"
    MMI_SWFLASH_MDI_CIM_VERIFYPNG "*[SWFLASH] mdi_swflash_verify_png, len=%d, width=%d, height=%d, pitch=%d"
    MMI_SWFLASH_MDI_CIM_DECODEPNG "*[SWFLASH] mdi_swflash_decode_png, len=%d"
    MMI_SWFLASH_MDI_CIM_UPDATEFRAME "*[SWFLASH] mdi_swflash_update_frame"


    MMI_SWFLASH_CIM_DL_SOC_IND_HDLR "[cim] cim_dl_soc_ind_handler() - callback from SOC"
    MMI_SWFLASH_CIM_DL_SOC_IND_WRITE "[cim] event: SOC_WRITE"
    MMI_SWFLASH_CIM_DL_SOC_IND_READ "[cim] event: SOC_READ"
    MMI_SWFLASH_CIM_DL_SOC_IND_CONNECT "[cim] event: SOC_CONNECT"
    MMI_SWFLASH_CIM_DL_SOC_IND_CLOSE "[cim] event: SOC_CLOSE"
    MMI_SWFLASH_CIM_DL_SOC_GET_IP_HDLR "[cim] cim_dl_soc_get_ip_handler()"
    
    MMI_SWFLASH_CIM_SE_SOCKET "[cim] cimSESocket()" 
    MMI_SWFLASH_CIM_SE_SOCKET_ID "[cim] sock_id: %d"   
    MMI_SWFLASH_CIM_SE_SOCKET_CREATE_FAIL "[cim] socket create failed"

    MMI_SWFLASH_CIM_SOC_RET "[cim] soc ret: %d" 

    MMI_SWFLASH_CIM_SE_CONNECT "[cim] cimSEConnect()" 
    MMI_SWFLASH_CIM_SE_CONNECT_ADD "[cim] address: %d.%d.%d.%d:%d" 
    MMI_SWFLASH_CIM_SE_CONNECT_CON_TYPE_IP "[cim] con_type: IP" 
    MMI_SWFLASH_CIM_SE_CONNECT_CON_TYPE_HOST_NAME "[cim] con_type: HOST_NAME" 
    MMI_SWFLASH_CIM_SE_CONNECT_CALL_SOC_CONNECT "[cim] call soc_connect()" 

    MMI_SWFLASH_CIM_SE_RECV "[cim] cimSERecv()" 
    MMI_SWFLASH_CIM_SE_RECV_REQ_SIZE "[cim] recv buf size: %d" 
    MMI_SWFLASH_CIM_SE_RECV_CALL_SOC_RECV "[cim] call soc_recv()" 
    
    MMI_SWFLASH_CIM_SE_SEND "[cim] cimSESend()" 
    MMI_SWFLASH_CIM_SE_SEND_REQ_SIZE "[cim] send buf size: %d" 
    MMI_SWFLASH_CIM_SE_SEND_CALL_SOC_SEND "[cim] call soc_send()" 

    MMI_SWFLASH_CIM_SE_CLOSE "[cim] cimSEClose()" 
     
    MMI_SWFLASH_CIM_SE_NOTIFY "[cim] cimSENotify()" 
    MMI_SWFLASH_CIM_SE_NOTIFY_UNKNOWN "[cim] notify: SEN_UNKNOWN"    
    MMI_SWFLASH_CIM_SE_NOTIFY_VALIDATE_FAIL "[cim] notify: SEN_VALIDATE_FAIL"     
    MMI_SWFLASH_CIM_SE_NOTIFY_FILE_ERROR "[cim] notify: SEN_FILE_ERROR" 
    MMI_SWFLASH_CIM_SE_NOTIFY_DOWNLOAD_COMPLETE "[cim] notify: SEN_DOWNLOAD_COMPLETE" 
    MMI_SWFLASH_CIM_SE_NOTIFY_SERVER_ERROR "[cim] notify: SEN_SERVER_ERROR" 
    MMI_SWFLASH_CIM_SE_NOTIFY_FUN_ERROR "[cim] notify: SEN_SOCKET_FUN_ERROR" 
    MMI_SWFLASH_CIM_SE_NOTIFY_DISK_FULL "[cim] notify: SEN_DISK_FULL" 
    MMI_SWFLASH_CIM_SE_NOTIFY_CONNECT_FAIL "[cim] notify: SEN_CONNECT_FAIL" 
    MMI_SWFLASH_CIM_SE_NOTIFY_SEND_FAIL "[cim] notify: SEN_SEND_FAIL" 
    MMI_SWFLASH_CIM_SE_NOTIFY_RECV_FAIL "[cim] notify: SEN_RECV_FAIL" 
    MMI_SWFLASH_CIM_SE_NOTIFY_DNS_FAIL "[cim] notify: SEN_DNS_FAIL" 
    MMI_SWFLASH_CIM_SE_NOTIFY_HTTP_FAIL "[cim] notify: SEN_HTTP_FAIL" 
    MMI_SWFLASH_CIM_SE_NOTIFY_DB_FAIL "[cim] notify: SEN_DB_FAIL" 
    MMI_SWFLASH_CIM_SE_NOTIFY_DOWNLOADING_STATUS "[cim] notify: SEN_DOWNLOADING_STATUS: %d:%d" 

    
    
    
    MMI_SWFLASH_APP_STOP "*[SWFLASH] s3wi_stop hinstance=[%x]"
    MMI_SWFLASH_MEM_INIT "*[SWFLASH] s3wi_memory_init mem=[%x],size=%d"
    MMI_SWFLASH_APP_CREATE "*[SWFLASH] s3wi_create pdev=[%x],sys_ca=%x,mem_limit=%d,perform=%d,instance=%x"
    MMI_SWFLASH_APP_LOAD "*[SWFLASH] s3wi_load hinstan=[%x],datainfo=%x,data_type=%d,loop=%d,sound off=%d,ret=%d"
    MMI_SWFLASH_APP_RELEASE "*[SWFLASH] s3wi_release hinstance=[%x]"
    MMI_SWFLASH_APP_UNLOAD "*[SWFLASH] s3wi_unload hinstance=[%x],ret=%d"
    MMI_SWFLASH_APP_PLAY "*[SWFLASH] s3wi_play hinstance=[%x]"
    MMI_SWFLASH_APP_PAUSE "*[SWFLASH] s3wi_pause hinstance=[%x]"
    MMI_SWFLASH_APP_RESUMME "*[SWFLASH] s3wi_resume hinstance=[%x]"
    MMI_SWFLASH_APP_GET_CONTENT "*[SWFLASH] s3wi_get_content_info instance=[%x]"
    MMI_SWFLASH_APP_PROCESS "*[SWFLASH] s3wi_process hinstance=[%x],timer=%x,ret=%d"
    MMI_SWFLASH_APP_KEY_DOWN "*[SWFLASH] s3wi_key_down hinstance=[%x],key_code=%x"
    MMI_SWFLASH_APP_KEY_PRESSED "*[SWFLASH] s3wi_key_pressed hinstance=[%x],key_code=%x"
    MMI_SWFLASH_APP_KEY_RELEASED "*[SWFLASH] s3wi_key_released hinstance=[%x]"
    MMI_SWFLASH_APP_EXTRACE_CPCODE "*[SWFLASH] s3wi_extract_cpcode hinstance=[%x]"
    MMI_SWFLASH_APP_FONT "*[SWFLASH] s3wi_set_font hinstance=[%x]"
    MMI_SWFLASH_APP_TICK "*[SWFLASH] s3wa_tick hinstance=[%x]"
    MMI_SWFLASH_APP_DEFINE_TIMER "*[SWFLASH] s3wa_define_timer pdevice=[%x]"
    MMI_SWFLASH_APP_SET_TIMER "*[SWFLASH] s3wa_set_timer pdevice=[%x],timer=%x,inter=%d"
    MMI_SWFLASH_APP_CANCEL_TIMER "*[SWFLASH] s3wa_cancel_timer pdevice=[%x],timer=%x"
    MMI_SWFLASH_APP_TIMER_EXPIRED "*[SWFLASH] s3wa_timer_expired()"
    MMI_SWFLASH_APP_INIT_VIEW "*[SWFLASH] s3wa_init_view pdevice=[%x],content_finfo=%x,viewport=%x"
    MMI_SWFLASH_APP_UPDATE_FRAME "*[SWFLASH] s3wa_update_frame pdevice=[%x],frame_info=%x,offsetx=%d,offsety=%d"
    MMI_SWFLASH_APP_ON_END "*[SWFLASH] s3wa_on_end pdevice=[%x],lparam=%x"
    MMI_SWFLASH_APP_VOICE_PLAY "*[SWFLASH] s3wa_voice_play pdevice=[%x]"
    MMI_SWFLASH_APP_VOICE_STOP "*[SWFLASH] s3wi_voice_stop hinstance=[%x]"
    MMI_SWFLASH_APP_VOICE_PAUSE "*[SWFLASH] s3wa_voice_pause hinstance=[%x]"
    MMI_SWFLASH_APP_VOICE_RERUME "*[SWFLASH] s3wa_voice_resume hinstance=[%x]"
    MMI_SWFLASH_APP_MIDI_PLAY "*[SWFLASH] s3wa_midi_play pdevice=[%x]"
    MMI_SWFLASH_APP_MIDI_STOP "*[SWFLASH] s3wa_midi_stop pdevice=[%x]"
    MMI_SWFLASH_APP_MIDI_PAUSE "*[SWFLASH] s3wa_midi_pause pdevice=[%x]"
    MMI_SWFLASH_APP_MIDI_RESUME "*[SWFLASH] s3wa_midi_resume pdevice=[%x]"
    MMI_SWFLASH_APP_ON_EVENT "*[SWFLASH] MFLASH:%d/0-255 Playing.."
    MMI_SWFLASH_APP_ENTRY_PLAY "*[SWFLASH] mmi_swflash_option_play_entry_screen"
    MMI_SWFLASH_APP_ENTRY_PLAY2 "*[SWFLASH] mmi_swflash_option_play_entry_screen2"
    MMI_SWFLASH_APP_EXIT_PLAY "*[SWFLASH] mmi_swflash_option_play_exit_screen"
    MMI_SWFLASH_APP_PLAY_END "*[SWFLASH] mmi_swflash_play_callback,ret=%d"
    MMI_SWFLASH_APP_ENTER_INFO "*[SWFLASH] mmi_swflash_option_info_entry_screen"

    MMI_SWFLASH_APP_DECIPHER "*[SWFLASH]mmi_swflash_vis_decipher ret=%d"
    MMI_SWFLASH_DL_ZDD_GET_NAME "*[SWFLASH_DL]zdd_get_name ret=%d"
    MMI_SWFLASH_DL_ZDD_INIT "*[SWFLASH_DL]zdd_init ret=%d"
    MMI_SWFLASH_DL_ZDD_PARSER "*[SWFLASH_DL]zdd_parser ret=%d"
    MMI_SWFLASH_DL_ZDD_ENCRYPT_FAIL "*[SWFLASH_DL]zdd encrypt failed"
    MMI_SWFLASH_DL_VIS_ENCRYPT_RESULT "*[SWFLASH_DL]vis encrypt ret=%d"




    
    
    
    MDI_SWFLASH_CHECK_DOWNLAOD_FILE "[MDI_SWFLASH] mdi_swflash_check_download_file()"
    MDI_SWFLASH_START_DOWNLAOD_FILE "[MDI_SWFLASH] mdi_swflash_start_download_file()"
    MDI_SWFLASH_CIM_CREATE_HANDLE_RESULT "[MDI_SWFLASH] CimCreateHandle() result: %d"
    MDI_SWFLASH_CIM_SE_CREATE_RESULT "[MDI_SWFLASH] CimSECreate() result: %d"
    MDI_SWFLASH_STOP_DOWNLOAD_FILE "[MDI_SWFLASH] mdi_swflash_stop_download_file()"
    MDI_SWFLASH_DL_SOCKET_IND_HDLR "[MDI_SWFLASH] mdi_swflash_dl_socket_ind_handler()"
    MDI_SWFLASH_DL_SOCKET_IND_COMPLETE "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_DL_COMPLETE"
    MDI_SWFLASH_DL_SOCKET_IND_STATUS "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_DL_STATUS"
    MDI_SWFLASH_DL_SOCKET_IND_CONNET_OK "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_CONNECT_OK" 
    MDI_SWFLASH_DL_SOCKET_IND_SEND_OK "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_SEND_OK"
    MDI_SWFLASH_DL_SOCKET_IND_RECV_OK "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_RECV_OK"
    MDI_SWFLASH_DL_SOCKET_IND_DNS_OK "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_DNS_OK"
    MDI_SWFLASH_DL_SOCKET_IND_CONNECT_FAIL "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_CONNECT_FAILED"
    MDI_SWFLASH_DL_SOCKET_IND_SEND_FAIL "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_SEND_FAILED"
    MDI_SWFLASH_DL_SOCKET_IND_RECV_FAIL "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_RECV_FAILED"
    MDI_SWFLASH_DL_SOCKET_IND_DNS_FAIL "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_DNS_FAILED"
    MDI_SWFLASH_DL_SOCKET_IND_FILE_ERROR "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_FILE_ERROR"
    MDI_SWFLASH_DL_SOCKET_IND_DISK_FULL "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_DISK_FULL"
    MDI_SWFLASH_DL_SOCKET_IND_SOCKET_ERROR "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_SOCKET_ERROR"
    MDI_SWFLASH_DL_SOCKET_IND_SERVER_ERROR "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_SERVER_ERROR"
    MDI_SWFLASH_DL_SOCKET_IND_HTTP_FAIL "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_HTTP_FAILED"
    MDI_SWFLASH_DL_SOCKET_IND_UNKNOWN "[MDI_SWFLASH] event: CIM_DL_SOC_NOTIFY_UNKNOWN"
    MDI_SWFLASH_ON_END "[MDI_SWFLASH] mdi_swflash_on_end instance=%x"


    
    
    
    MDI_TRC_VIDEO_MEDIA_RET "[MDI_VIDEO] media ret: %d"
    MDI_TRC_VIDEO_CUR_TIME "[MDI_VIDEO] cur_time: %d"
    MDI_TRC_VIDEO_STOP_TIME "[MDI_VIDEO] stop_time: %d"    
    MDI_TRC_VIDEO_REC_ZOOM_FACTOR "[MDI_VIDEO] zoom_factor: %d"         
    MDI_TRC_VIDEO_PERCENTAGE "[MDI_VIDEO] pecentage: %d"     
    MDI_TRC_VIDEO_MAX_TIME "[MDI_VIDEO] max_time: %d" 
    MDI_TRC_VIDEO_FILE_SIZE "[MDI_VIDEO] file_size: %d" 

    MDI_TRC_VIDEO_REC_POWER_ON "[MDI_VIDEO] mdi_video_rec_power_on()"
    MDI_TRC_VIDEO_REC_POWER_OFF "[MDI_VIDEO] mdi_video_rec_power_off()"
    MDI_TRC_VIDEO_REC_PREVIEW_START "[MDI_VIDEO] mdi_video_rec_preview_start()"
    MDI_TRC_VIDEO_REC_PREVIEW_STOP "[MDI_VIDEO] mdi_video_rec_preview_stop()"
    MDI_TRC_VIDEO_REC_RECORD_START "[MDI_VIDEO] mdi_video_rec_record_start()"
    MDI_TRC_VIDEO_REC_RECORD_STOP "[MDI_VIDEO] mdi_video_rec_record_stop()"
    MDI_TRC_VIDEO_REC_RECORD_PAUSE "[MDI_VIDEO] mdi_video_rec_record_pause()"
    MDI_TRC_VIDEO_REC_RECORD_RESUME "[MDI_VIDEO] mdi_video_rec_record_resume()"
    MDI_TRC_VIDEO_REC_GET_CUR_RECORD_TIME "[MDI_VIDEO_EX] mdi_video_rec_get_cur_record_time()"
    MDI_TRC_VIDEO_REC_HAS_UNSAVED_FILE "[MDI_VIDEO] mdi_video_rec_has_unsaved_file()"
    MDI_TRC_VIDEO_REC_DELETE_UNSAVED_FILE "[MDI_VIDEO] mdi_video_rec_delete_unsaved_file()"    
    MDI_TRC_VIDEO_REC_SAVE_FILE "[MDI_VIDEO] mdi_video_rec_save_file()"    
    MDI_TRC_VIDEO_REC_STOP_SAVE "[MDI_VIDEO] mdi_video_rec_stop_save()"        
    MDI_TRC_VIDEO_REC_UPDATE_PARA_EV "[MDI_VIDEO] mdi_video_rec_update_para_ev(%d)"      
    MDI_TRC_VIDEO_REC_UPDATE_PARA_ZOOM "[MDI_VIDEO] mdi_video_rec_update_para_zoom(%d)"
    MDI_TRC_VIDEO_REC_UPDATE_PARA_EFFECT "[MDI_VIDEO] mdi_video_rec_update_para_effect(%d)"    
    MDI_TRC_VIDEO_REC_UPDATE_PARA_WB "[MDI_VIDEO] mdi_video_rec_update_para_wb(%d)"    
    MDI_TRC_VIDEO_REC_UPDATE_PARA_NIGHT "[MDI_VIDEO] mdi_video_rec_update_para_night(%d)"        
    MDI_TRC_VIDEO_REC_GET_MAX_ZOOM_FACTOR "[MDI_VIDEO] mdi_video_rec_get_max_zoom_factor()"   
    MDI_TRC_VIDEO_REC_GET_RECORD_FILE_SIZE "[MDI_VIDEO] mdi_video_rec_get_record_file_size()"       
    MDI_TRC_VIDEO_REC_SAVE_RESULT_HDLR "[MDI_VIDEO] mdi_video_rec_save_result_hdlr()"   
    MDI_TRC_VIDEO_REC_RECORD_RESULT_HDLR "[MDI_VIDEO] mdi_video_rec_record_result_hdlr()"   
    MDI_TRC_VIDEO_PLY_OPEN_FILE "[MDI_VIDEO] mdi_video_ply_open_file()"   
    MDI_TRC_VIDEO_PLY_CLOSE_FILE "[MDI_VIDEO] mdi_video_ply_close_file()"
    MDI_TRC_VIDEO_PLY_SNAPSHOT "[MDI_VIDEO] mdi_video_ply_snapshot()"
    MDI_TRC_VIDEO_PLY_PLAY "[MDI_VIDEO] mdi_video_ply_play()"
    MDI_TRC_VIDEO_PLY_STOP "[MDI_VIDEO] mdi_video_ply_stop()"    
    MDI_TRC_VIDEO_PLY_SEEK "[MDI_VIDEO] mdi_video_ply_seek()"    
    MDI_TRC_VIDEO_PLY_SEEK_AND_GET_FRAME "[MDI_VIDEO] mdi_video_ply_seek_and_get_frame()" 
    MDI_TRC_VIDEO_PLY_NON_BLOCK_SEEK "[MDI_VIDEO] mdi_video_ply_non_block_seek()" 
    MDI_TRC_VIDEO_PLY_NON_BLOCK_SEEK_AND_GET_FRAME "[MDI_VIDEO] mdi_video_ply_non_block_seek_and_get_frame()"     
    MDI_TRC_VIDEO_PLY_STOP_NON_BLOCK_SEEK "[MDI_VIDEO] mdi_video_ply_stop_non_block_seek()"     
    MDI_TRC_VIDEO_PLY_STOP_NON_BLOCK_SEEK_RESULT_HDLR "[MDI_VIDEO] mdi_video_ply_non_block_seek_result_hdlr()" 
    MDI_TRC_VIDEO_PLY_GET_CUR_PLAY_TIME "[MDI_VIDEO_EX] mdi_video_ply_get_cur_play_time()"
    MDI_TRC_VIDEO_PLY_PLAY_FINISH_RESULT_HDLR "[MDI_VIDEO] mdi_video_ply_play_finish_result_hdlr()"
    MDI_TRC_VIDEO_PLY_OPEN_FILE_RESULT_HDLR "[MDI_VIDEO] mdi_video_ply_open_file_result_hdlr()"
    MDI_TRC_VIDEO_PLY_SET_LCM_UPDATE "[MDI_VIDEO] mdi_video_ply_set_lcm_update(%d)"
    MDI_TRC_VIDEO_PLY_SET_BRIGHTNESS "[MDI_VIDEO] mdi_video_ply_set_brightness(%d)"
    MDI_TRC_VIDEO_PLY_SET_CONTRAST "[MDI_VIDEO] mdi_video_ply_set_contrast(%d)"    
    MDI_TRC_VIDEO_PLY_OPEN_CLIP_FILE "[MDI_VIDEO] mdi_video_ply_open_clip_file()"
    MDI_TRC_VIDEO_PLY_CLOSE_CLIP_FILE "[MDI_VIDEO] mdi_video_ply_close_clip_file()"
    MDI_TRC_VIDEO_PLY_OPEN_CLIP_ID "[MDI_VIDEO] mdi_video_ply_open_clip_id()"
    MDI_TRC_VIDEO_PLY_CLOSE_CLIP_ID "[MDI_VIDEO] mdi_video_ply_close_clip_id()"
    MDI_TRC_VIDEO_PLY_OPEN_CLIP_BUFFER "[MDI_VIDEO] mdi_video_ply_open_clip_buffer()"
    MDI_TRC_VIDEO_PLY_CLOSE_CLIP_BUFFER "[MDI_VIDEO] mdi_video_ply_close_clip_buffer()"    
    MDI_TRC_VIDEO_PLY_ENABLE_PARTIAL_DISPLAY "[MDI_VIDEO] mdi_video_ply_enable_partial_display()"
    MDI_TRC_VIDEO_PLY_SET_STOP_TIME "[MDI_VIDEO] mdi_video_ply_set_stop_time()"    
    MDI_TRC_VIDEO_PLY_SET_OVERLAY_PALETTE "[MDI_VIDEO] mdi_video_set_overlay_palette()"    
    MDI_TRC_VIDEO_BLOCKED_RECOVERY "[MDI_VIDEO] mdi_video_blocked_recovery()"    
    MDI_TRC_VIDEO_STREAM_INIT "[MDI_VIDEO] mdi_video_stream_init()"   
    MDI_TRC_VIDEO_STREAM_DEINIT "[MDI_VIDEO] mdi_video_stream_deinit()" 
    MDI_TRC_VIDEO_STREAM_CONNECT "[MDI_VIDEO] mdi_video_stream_connect()"     
    MDI_TRC_VIDEO_STREAM_DISCONNECT "[MDI_VIDEO] mdi_video_stream_disconnect()"      
    MDI_TRC_VIDEO_STREAM_IS_CONNECTED "[MDI_VIDEO] mdi_video_stream_is_connected()"      
    MDI_TRC_VIDEO_STREAM_START_BUFFERING "[MDI_VIDEO] mdi_video_stream_start_buffering()"        
    MDI_TRC_VIDEO_STREAM_STOP_BUFFERING "[MDI_VIDEO] mdi_video_stream_stop_buffering()"        
    MDI_TRC_VIDEO_STREAM_PLAY "[MDI_VIDEO] mdi_video_stream_play()"   
    MDI_TRC_VIDEO_STREAM_STOP "[MDI_VIDEO] mdi_video_stream_stop()"           
    MDI_TRC_VIDEO_STREAM_RESUME "[MDI_VIDEO] mdi_video_stream_resume()"  
    MDI_TRC_VIDEO_STREAM_PAUSE "[MDI_VIDEO] mdi_video_stream_pause()"      
    MDI_TRC_VIDEO_STREAM_CONNECT_RESULT_HDLR "[MDI_VIDEO] mdi_video_stream_connect_result_hdlr()"           
    MDI_TRC_VIDEO_STREAM_BUFFERING_RESULT_HDLR "[MDI_VIDEO] mdi_video_stream_buffering_result_hdlr()"    
    MDI_TRC_VIDEO_STREAM_PLAY_RESULT_HDLR "[MDI_VIDEO] mdi_video_stream_play_result_hdlr()"        
    MDI_TRC_VIDEO_STREAM_GET_BUF_PERCENTAGE "[MDI_VIDEO_EX] mdi_video_stream_get_buf_percentage()" 
    MDI_TRC_VIDEO_STREAM_GET_CUR_PLAY_TIME "[MDI_VIDEO_EX] mdi_video_stream_get_cur_play_time()" 
    MDI_TRC_VIDEO_STREAM_SET_BRIGHTNESS "[MDI_VIDEO] mdi_video_stream_set_brightness(%d)"
    MDI_TRC_VIDEO_STREAM_SET_CONTRAST "[MDI_VIDEO] mdi_video_stream_set_contrast(%d)"        
    MDI_TRC_VIDEO_STREAM_ENABLE_PARTIAL_DISPLAY "[MDI_VIDEO] mdi_video_stream_enable_partial_display()"
    MDI_TRC_VIDEO_STREAM_SET_STOP_TIME "[MDI_VIDEO] mdi_video_stream_set_stop_time()"        
    MDI_TRC_VIDEO_PROGRESSIVE_OPEN_FILE "[MDI_VIDEO] mdi_video_progressive_open_file()" 
    MDI_TRC_VIDEO_PROGRESSIVE_CLOSE_FILE "[MDI_VIDEO] mdi_video_progressive_close_file()"     
    MDI_TRC_VIDEO_PROGRESSIVE_GET_MAX_PLAY_TIME "[MDI_VIDEO_EX] mdi_video_progressive_get_max_play_time()" 
    MDI_TRC_VIDEO_PROGRESSIVE_GET_BUF_PERCENTAGE "[MDI_VIDEO_EX] mdi_video_progressive_get_buf_percentage()" 
    MDI_TRC_VIDEO_PROGRESSIVE_IS_PDL_FORMAT "[MDI_VIDEO] mdi_video_progressive_is_pdl_format()"     
    MDI_TRC_VIDEO_EDT_OPEN_FILE "[MDI_VIDEO] mdi_video_edt_open_file()"     
    MDI_TRC_VIDEO_EDT_CLOSE_FILE "[MDI_VIDEO] mdi_video_edt_close_file()"     
    MDI_TRC_VIDEO_EDT_ACTIVE "[MDI_VIDEO] mdi_video_edt_active(%d)"  
    MDI_TRC_VIDEO_EDT_DEACTIVE "[MDI_VIDEO] mdi_video_edt_deactive()"  
    MDI_TRC_VIDEO_SEQ_NOT_MATCHED "[MDI_VIDEO] seq num not matched!!"  
    MDI_TRC_VIDEO_EDT_ENCODE_OPEN "[MDI_VIDEO] mdi_video_edt_encode_open()"  
    MDI_TRC_VIDEO_EDT_ENCODE_CLOSE "[MDI_VIDEO] mdi_video_edt_encode_close()"  
    MDI_TRC_VIDEO_EDT_ENCODE_APPEND_IMAGE "[MDI_VIDEO] mdi_video_edt_encode_append_image()"  
    MDI_TRC_VIDEO_EDT_ENCODE_APPEND_VIDEO "[MDI_VIDEO] mdi_video_edt_encode_append_video()"  
    MDI_TRC_VIDEO_EDT_ENCODE_MERGE "[MDI_VIDEO] mdi_video_edt_encode_merge()"      
    MDI_TRC_VIDEO_EDT_ENCODE_STOP_MERGE "[MDI_VIDEO] mdi_video_edt_encode_stop_merge()"          
    MDI_TRC_VIDEO_EDT_ENCODE_OPEN_BGM "[MDI_VIDEO] mdi_video_edt_encode_open_bgm()"      
    MDI_TRC_VIDEO_EDT_ENCODE_CLOSE_BGM "[MDI_VIDEO] mdi_video_edt_encode_close_bgm()"      
    MDI_TRC_VIDEO_EDT_ENCODE_MERGE_RESULT_HDLR "[MDI_VIDEO] mdi_video_edt_encode_merge_result_hdlr()"   


    
    
    MMI_TRC_VDOPLY_PDL_DA_REPORT_HDLR "[VDOPLY_EX] mmi_vdoply_pdl_da_report_hdlr(), cause: %d, pdl_state: %d, session_id: %d, cur_session_id: %d"  
    MMI_TRC_VDOPLY_PDL_DA_FILEPATH_HDLR "[VDOPLY_EX] mmi_vdoply_pdl_da_filepath_hdlr()"  
    MMI_TRC_VDOPLY_PDL_DA_NOTIFY_FILE "[VDOPLY_EX] mmi_vdoply_pdl_da_notify_file()"  

    
    MMI_TRC_VDOPLY_STREAM_RECEIVE_DA_FILE "[VDOPLY] mmi_vdoply_stream_receive_da_file()"  

    
    MMI_TRC_VDOPLY_IS_KEY_PRESSED "[VDOPLY] is_key_pressed: %d"  
    MMI_TRC_VDOPLY_RET "[VDOPLY] ret: %d"  

    
    MMI_TRC_VDOPLY_SEPPD_INC_KEY_PRESS "[VDOPLY] mmi_vdoply_speed_inc_key_press()"
    MMI_TRC_VDOPLY_SEPPD_INC_KEY_RELEASE "[VDOPLY] mmi_vdoply_speed_inc_key_release()"  
    MMI_TRC_VDOPLY_SEPPD_DEC_KEY_PRESS "[VDOPLY] mmi_vdoply_speed_dec_key_press()"      
    MMI_TRC_VDOPLY_SEPPD_DEC_KEY_RELEASE "[VDOPLY] mmi_vdoply_speed_dec_key_release()"   
    MMI_TRC_VDOPLY_SEEK_KEY_PRESS "[VDOPLY] mmi_vdoply_seek_key_press()"           
    MMI_TRC_VDOPLY_SEEK_KEY_RELEASE "[VDOPLY] mmi_vdoply_seek_key_release()" 
    MMI_TRC_VDOPLY_SEEK_FOWARD_KEY_PRESS "[VDOPLY] mmi_vdoply_seek_foward_key_press()"     
    MMI_TRC_VDOPLY_SEEK_FOWARD_KEY_RELEASE "[VDOPLY] mmi_vdoply_seek_foward_key_release()"  
    MMI_TRC_VDOPLY_SEEK_BACKWARD_KEY_PRESS "[VDOPLY] mmi_vdoply_seek_backward_key_press()"     
    MMI_TRC_VDOPLY_SEEK_BACKWARD_KEY_RELEASE "[VDOPLY] mmi_vdoply_seek_backward_key_release()"  
    MMI_TRC_VDOPLY_SEEK_BACKWARD "[VDOPLY] mmi_vdoply_seek_backward()"      
    MMI_TRC_VDOPLY_SEEK_FOWARND "[VDOPLY] mmi_vdoply_seek_foward()"          
    MMI_TRC_VDOPLY_DEL_SCREEN_HDLR "[VDOPLY] mmi_vdoply_del_screen_hdlr()"   
    
    MMI_TRC_VDOPLY_CONNECT_BT "[VDOPLY] mmi_vdoply_connect_bt()"          
    MMI_TRC_VDOPLY_DISCONNECT_BT "[VDOPLY] mmi_vdoply_disconnect_bt()"      
    MMI_TRC_VDOPLY_IS_OUTPUT_TO_BT "[VDOPLY] mmi_vdoply_is_output_to_bt()"  
    MMI_TRC_VDOPLY_BT_CLOSE_CODEC "[VDOPLY] mmi_vdoply_bt_close_codec()"      
    MMI_TRC_VDOPLY_BT_OPEN_CALLBACK "[VDOPLY] mmi_vdoply_bt_open_callback(), result: %d"      


    
    MMI_TRC_VDOPLY_CALLING_AV_BT_CLOSE "[VDOPLY] calling: av_bt_close(), line: %d"    
    MMI_TRC_VDOPLY_CALLING_AV_BT_CLOSE_CODEC "[VDOPLY] calling: av_bt_close_codec(), line: %d" 
    MMI_TRC_VDOPLY_CALLING_AV_BT_OPEN_CODEC "[VDOPLY] calling: av_bt_open_codec(),line: %d"     
    MMI_TRC_VDOPLY_CALLING_AV_BT_OPEN_EX "[VDOPLY] calling: av_bt_open_ex(), line: %d" 

     
    MMI_TRC_VDOPLY_STATE_EXIT "[VDOPLY] state: VDOPLY_STATE_EXIT"      
    MMI_TRC_VDOPLY_STATE_OPENING "[VDOPLY] state: VDOPLY_STATE_OPENING"
    MMI_TRC_VDOPLY_STATE_IDLE "[VDOPLY] state: VDOPLY_STATE_IDLE"
    MMI_TRC_VDOPLY_STATE_PAUSE "[VDOPLY] state: VDOPLY_STATE_PAUSE"    
    MMI_TRC_VDOPLY_STATE_PLAY "[VDOPLY] state: VDOPLY_STATE_PLAY" 
    MMI_TRC_VDOPLY_STATE_BT_CONNECTING "[VDOPLY] state: VDOPLY_STATE_BT_CONNECTING"     
    MMI_TRC_VDOPLY_STATE_SEEKING "[VDOPLY] state: VDOPLY_STATE_SEEKING"    
    MMI_TRC_VDOPLY_STATE_PLAY_SEEKING "[VDOPLY] state: VDOPLY_STATE_PLAY_SEEKING"
    MMI_TRC_VDOPLY_STATE_INTERRUPTED_OPENING "[VDOPLY] state: VDOPLY_STATE_INTERRUPTED_OPENING"
    MMI_TRC_VDOPLY_STATE_INTERRUPTED_PAUSE "[VDOPLY] state: VDOPLY_STATE_INTERRUPTED_PAUSE"
    MMI_TRC_VDOPLY_STATE_INTERRUPTED_SEEKING "[VDOPLY] state: VDOPLY_STATE_INTERRUPTED_SEEKING"
    MMI_TRC_VDOPLY_STATE_SNAPSHOT "[VDOPLY] state: VDOPLY_STATE_SNAPSHOT"
    MMI_TRC_VDOPLY_STATE_FULLSCR_IDLE "[VDOPLY] state: VDOPLY_STATE_FULLSCR_IDLE"    
    MMI_TRC_VDOPLY_STATE_FULLSCR_PAUSE "[VDOPLY] state: VDOPLY_STATE_FULLSCR_PAUSE" 
    MMI_TRC_VDOPLY_STATE_FULLSCR_PLAY "[VDOPLY] state: VDOPLY_STATE_FULLSCR_PLAY" 
    MMI_TRC_VDOPLY_STATE_FULLSCR_BT_CONNECTING "[VDOPLY] state: VDOPLY_STATE_FULLSCR_BT_CONNECTING"    
    MMI_TRC_VDOPLY_STATE_FULLSCR_SEEKING "[VDOPLY] state: VDOPLY_STATE_FULLSCR_SEEKING" 
    MMI_TRC_VDOPLY_STATE_FULLSCR_PLAY_SEEKING "[VDOPLY] state: VDOPLY_STATE_FULLSCR_PLAY_SEEKING" 
    MMI_TRC_VDOPLY_STATE_STREAM_DISCONNECT "[VDOPLY] state: VDOPLY_STATE_STREAM_DISCONNECT"
    MMI_TRC_VDOPLY_STATE_STREAM_CONNECTING "[VDOPLY] state: VDOPLY_STATE_STREAM_CONNECTING"
    MMI_TRC_VDOPLY_STATE_STREAM_INTERRUPTED_CONNECTING "[VDOPLY] state: VDOPLY_STATE_STREAM_INTERRUPTED_CONNECTING"    
    MMI_TRC_VDOPLY_STATE_STREAM_CONNECTED "[VDOPLY] state: VDOPLY_STATE_STREAM_CONNECTED"
    MMI_TRC_VDOPLY_STATE_STREAM_BUFFERING "[VDOPLY] state: VDOPLY_STATE_STREAM_BUFFERING"
    MMI_TRC_VDOPLY_STATE_STREAM_PLAY_BUFFERING "[VDOPLY] state: VDOPLY_STATE_STREAM_PLAY_BUFFERING"
    MMI_TRC_VDOPLY_STATE_STREAM_PLAY "[VDOPLY] state: VDOPLY_STATE_STREAM_PLAY"    
    MMI_TRC_VDOPLY_STATE_STREAM_BT_CONNECTING "[VDOPLY] state: VDOPLY_STATE_STREAM_BT_CONNECTING"    
    MMI_TRC_VDOPLY_STATE_STREAM_FULLSCR_DISCONNECT "[VDOPLY] state: VDOPLY_STATE_STREAM_FULLSCR_DISCONNECT"        
    MMI_TRC_VDOPLY_STATE_STREAM_FULLSCR_INTERRUPTED_CONNECTING "[VDOPLY] state: VDOPLY_STATE_STREAM_FULLSCR_INTERRUPTED_CONNECTING"        
    MMI_TRC_VDOPLY_STATE_STREAM_FULLSCR_CONNECTING "[VDOPLY] state: VDOPLY_STATE_STREAM_FULLSCR_CONNECTING"            
    MMI_TRC_VDOPLY_STATE_STREAM_FULLSCR_CONNECTED "[VDOPLY] state: VDOPLY_STATE_STREAM_FULLSCR_CONNECTED"
    MMI_TRC_VDOPLY_STATE_STREAM_FULLSCR_BUFFERING "[VDOPLY] state: VDOPLY_STATE_STREAM_FULLSCR_BUFFERING"
    MMI_TRC_VDOPLY_STATE_STREAM_FULLSCR_PLAY "[VDOPLY] state: VDOPLY_STATE_STREAM_FULLSCR_PLAY"    
    MMI_TRC_VDOPLY_STATE_STREAM_FULLSCR_BT_CONNECTING "[VDOPLY] state: VDOPLY_STATE_STREAM_FULLSCR_BT_CONNECTING "        
    MMI_TRC_VDOPLY_STATE_PROGRESSIVE_OPENING "[VDOPLY] state: VDOPLY_STATE_PROGRESSIVE_OPENING"
    MMI_TRC_VDOPLY_STATE_PROGRESSIVE_INTERRUPTED_OPENING "[VDOPLY] state: VDOPLY_STATE_PROGRESSIVE_INTERRUPTED_OPENING"
    MMI_TRC_VDOPLY_STATE_PROGRESSIVE_BUFFERING "[VDOPLY] state: VDOPLY_STATE_PROGRESSIVE_BUFFERING"
    MMI_TRC_VDOPLY_STATE_PROGRESSIVE_PLAY_BUFFERING "[VDOPLY] state: VDOPLY_STATE_PROGRESSIVE_PLAY_BUFFERING"    
    MMI_TRC_VDOPLY_STATE_PROGRESSIVE_FULLSCR_BUFFERING "[VDOPLY] state: VDOPLY_STATE_PROGRESSIVE_FULLSCR_BUFFERING"
    MMI_TRC_VDOPLY_STATE_PROGRESSIVE_FULLSCR_PLAY_BUFFERING "[VDOPLY] state: VDOPLY_STATE_PROGRESSIVE_FULLSCR_PLAY_BUFFERING"

    
    MMI_TRC_VDOREC_SAVE_CONFIRM_CHECK "[VDOREC] save confirm check (1)mms:%d, (2)ext_req:%d, line: %d"    


    
    MMI_TRC_VDOEDT_S_EMPTY "[VDOEDT] state: VDOEDT_STAT_EMPTY"
    MMI_TRC_VDOEDT_S_EDIT "[VDOEDT] state: VEOEDT_STAT_EDIT"
    MMI_TRC_VDOEDT_S_EDIT_IDLE "[VDOEDT] state:"
    MMI_TRC_VDOEDT_S_EDIT_FRAME "[VDOEDT] state: VDOEDT_STAT_FRAME"
    MMI_TRC_VDOEDT_S_EDIT_FRAME_SEL "[VDOEDT] state: VDOEDT_STAT_FRAME_SEL"
    MMI_TRC_VDOEDT_S_EDIT_FRAME_IN "[VDOEDT] state: VDOEDT_STAT_FRAME_IN"
    MMI_TRC_VDOEDT_S_EDIT_FRAME_OUT "[VDOEDT] state: VDOEDT_STAT_FRAME_OUT"
    MMI_TRC_VDOEDT_S_EDIT_FRAME_TXT "[VDOEDT] state: VDOEDT_STAT_FRRAME_TXT"
    MMI_TRC_VDOEDT_S_EDIT_CUT "[VDOEDT] state: VDOEDT_STAT_CUT"
    MMI_TRC_VDOEDT_S_EDIT_CUT_IN "[VDOEDT] state: VDOEDT_STAT_CUT_IN"
    MMI_TRC_VDOEDT_S_EDIT_CUT_OUT "[VDOEDT] state: VDOEDT_STAT_CUT_OUT"
    MMI_TRC_VDOEDT_S_PLAY "[VDOEDT] state: VDOEDT_STAT_PLAY"
    MMI_TRC_VDOEDT_S_PREVIEW_PLAY "[VDOEDT] state: VDOEDT_STAT_PREVIEW_PLAY"
    MMI_TRC_VDOEDT_S_EDIT_PLAY "[VDOEDT] state: VDOEDT_STAT_EDIT_PLAY"
    MMI_TRC_VDOEDT_S_CUT_PLAY "[VDOEDT] state: VDOEDT_STAT_CUT_PLAY"
    MMI_TRC_VDOEDT_S_FRM_PLAY "[VDOEDT] state: VDOEDT_STAT_FRM_PLAY"
    MMI_TRC_VDOEDT_S_SEEK "[VDOEDT] state: VDOEDT_STAT_SEEK"
    MMI_TRC_VDOEDT_S_SEEK_DONE "[VDOEDT] state: VDOEDT_STAT_SEEK_DONE"
    MMI_TRC_VDOEDT_S_PLAY_SEEK "[VDOEDT] state: VDOEDT_STAT_PLAY_SEEK"
    MMI_TRC_VDOEDT_S_PLAY_SEEK_DONE "[VDOEDT] state: VDOEDT_STAT_PLAY_SEEK_DONE"
    MMI_TRC_VDOEDT_S_PREVIEW "[VDOEDT] state: VDOEDT_STAT_PREVIEW"
    MMI_TRC_VDOEDT_S_SAVING "[VDOEDT] state: VDOEDT_STAT_SAVING"
    MMI_TRC_VDOEDT_S_CONFIRM_SAVE "[VDOEDT] state: VDOEDT_STAT_CONFIRM_SAVE"
    
    MMI_TRC_VDOEDT_INS_VDO "[VDOEDT] video inserted, open_clip return: %d"
    MMI_TRC_VDOEDT_INS_IMG "[VDOEDT] image inserted, gdi draw return: %d"
    
    
    
   
   
    
    MDI_AUDIO_MMA_TRACE_STATE "[MDI][MMA] state: [%d][%d][%d], line = [%d]"    
    MDI_AUDIO_MMA_TRACE_VALUE "[MDI][MMA] value: [%d][%d][%d], line = [%d]"        
    MDI_AUDIO_MMA_MED_DIRECT_CALLBACK "[MDI][MMA] mdi_audio_mma_med_direct_callback(): handle = [%d], result = [%d]"
    MDI_AUDIO_MMA_CALLBACK_HDLR "[MDI][MMA] mdi_audio_mma_callback_hdlr(): player = [%d]"
    MDI_AUDIO_MMA_CALLBACK_APP "[MDI][MMA] mdi_audio_mma_callback_hdlr(): <Callback> "
    MDI_AUDIO_MMA_OPEN_FILE "[MDI][MMA] mdi_audio_mma_open_file()"
    MDI_AUDIO_MMA_OPEN_FILE_RESULT "[MDI][MMA] mdi_audio_mma_open_file(): handle = [%d], result = [%d]"
    MDI_AUDIO_MMA_OPEN_STRING "[MDI][MMA] mdi_audio_mma_open_string(): format = [%d]"
    MDI_AUDIO_MMA_OPEN_STRING_RESULT "[MDI][MMA] mdi_audio_mma_open_file(): handle = [%d], result = [%d]"
    MDI_AUDIO_MMA_PLAY "[MDI][MMA] mdi_audio_mma_play(): handle = [%d], player = [%d]"
    MDI_AUDIO_MMA_PAUSE "[MDI][MMA] mdi_audio_mma_pause(): handle = [%d], player = [%d]"
    MDI_AUDIO_MMA_RESUME "[MDI][MMA] mdi_audio_mma_resume(): handle = [%d], player = [%d]"
    MDI_AUDIO_MMA_STOP "[MDI][MMA] mdi_audio_mma_stop(): handle = [%d], player = [%d]"
    MDI_AUDIO_MMA_CLOSE "[MDI][MMA] mdi_audio_mma_close(): handle = [%d], player = [%d]"
    MDI_AUDIO_MMA_IS_IDLE "[MDI][MMA] mdi_audio_mma_is_idle(): idle = [%d]"


    
    EM_PROFILING_IMAGE_DEC_INFO " %d/%d, width = %d, height = %d, dec_width = %d, dec_height = %d, decode time = %d.%d ms"
    EM_PROFILING_IMAGE_DEC_FAIL " %d/%d, Error"    
    
    
    MDI_GPS_UART_TRC_CONFIGURE "[MDI_GPS_UART] mdi_gps_uart_configure port=%d baud=%d bits=%d stops=%d parity=%d"
    MDI_GPS_UART_TRC_OPEN "[MDI_GPS_UART] mdi_gps_uart_open port=%d callback=%d"
    MDI_GPS_UART_TRC_READ "[MDI_GPS_UART] mdi_gps_uart_read handle=%d buffer=%d length=%d &read=%d"
    MDI_GPS_UART_TRC_WRITE "[MDI_GPS_UART] mdi_gps_uart_write handle=%d buffer=%d length=%d &write=%d"
    MDI_GPS_UART_TRC_ARRIVE "[MDI_GPS_UART] mdi_gps_uart_is_data_arrive handle=%d"
    MDI_GPS_UART_TRC_CLOSE "[MDI_GPS_UART] mdi_gps_uart_close handle=%d"
    MDI_GPS_UART_TRC_INDICATE "[MDI_GPS_UART] mdi_gps_uart_indicate_hldr port=%d param=%d"
    MDI_GPS_UART_TRC_EXPECTED "[MDI_GPS_UART] g_gps_uart[%d].port = %d, expect = %d)"
    MDI_GPS_UART_TRC_CALLBACK "[MDI_GPS_UART] callback = %d"
    MDI_GPS_UART_TRC_ENABLE_PARSER "[MDI_GPS_UART] mdi_gps_enable_parser"
    MDI_GPS_UART_TRC_DISABLE_PARSER "[MDI_GPS_UART] mdi_gps_disable_parser"
    MDI_GPS_UART_TRC_SET_PARSER_MODE "[MDI_GPS_UART] mdi_gps_set_parser_mode mode=%d"
    MDI_GPS_UART_TRC_PARSER_READ_INFO "[MDI_GPS_UART] mdi_gps_parser_read_info nmea=%d data_ptr=%d"
    MDI_GPS_UART_TRC_MSG_DISPATCHER "[MDI_GPS_UART] mdi_gpsuart_message_dispatcher ilm_p->msg_id=%d"
    MDI_GPS_UART_TRC_DISPATCHER_READY_READ "[MDI_GPS_UART] dispatcher MSG_ID_UART_READY_TO_READ_IND"
    MDI_GPS_UART_TRC_DISPATCHER_READY_WRITE "[MDI_GPS_UART] dispatcher MSG_ID_UART_READY_TO_WRITE_IND"
    MDI_GPS_UART_TRC_DISPATCHER_PLUGOUT "[MDI_GPS_UART] dispatcher MSG_ID_UART_PLUGOUT_IND"
    MDI_GPS_UART_TRC_HDLR_READY_READ "[MDI_GPS_UART] mdi_gpsuart_spp_uart_ready_to_read_ind_hdler port=%d"
    MDI_GPS_UART_TRC_HDLR_PLUGOUT "[MDI_GPS_UART] mdi_gpsuart_spp_uart_plugout_ind_hdler port=%d"
    MDI_GPS_UART_TRC_HDLR_READY_WRITE "[MDI_GPS_UART] mdi_gpsuart_spp_uart_ready_to_write_ind_hdler port=%d"
    MDI_GPS_UART_TRC_OWNER_ERROR "[MDI_GPS_UART] PORT Owner Error"
    MDI_GPS_UART_TRC_READ_SIZE "[MDI_GPS_UART] mdi_gps_uart_read ret=%d"
    MDI_GPS_UART_TRC_OPEN_ALREADY_OPEN "[MDI_GPS_UART] MDI_RES_GPS_UART_ERR_PORT_ALREADY_OPEN"
    MDI_GPS_UART_TRC_FIND_SLOT "[MDI_GPS_UART] Find Slot = %d"
    MDI_GPS_UART_TRC_ON_BROAD_GPS "[MDI_GPS_UART] THIS port is on broad GPS"
    MDI_GPS_UART_TRC_DUMP_DATA "[MDI_GPS_UART] [DUMP] ret =%d"
    MDI_GPS_UART_TRC_DUMP_OK "[MDI_GPS_UART]  [DUMP] OK ret =%d"
    MDI_GPS_UART_TRC_OPEN_OK "[MDI_GPS_UART] OPEN OK"
    MDI_GPS_UART_TRC_OPEN_ERROR "[MDI_GPS_UART] OPEN ERROR"
    MDI_GPS_UART_TRC_OPEN_RETURN_OK "[MDI_GPS_UART] mdi_gps_uart_open return ok"
    MDI_GPS_UART_TRC_OPEN_RETURN_ERR "[MDI_GPS_UART] mdi_gps_uart_open return error"
    
   
    MMI_GIS_TRC_AUD_DISCONN_IND_CB "[MMI_GIS] mmi_gis_gps_audio_disconnect_ind_callback"
    MMI_GIS_TRC_AUD_DISCONN_CNF_CB "[MMI_GIS] mmi_gis_gps_audio_disconnect_cnf_callback"
    MMI_GIS_TRC_AUD_CONN_IND_CB "[MMI_GIS] mmi_gis_gps_audio_connect_ind_callback"
    MMI_GIS_TRC_AUD_CONN_CNF_CB "[MMI_GIS] mmi_gis_gps_audio_connect_cnf_callback"
    MMI_GIS_TRC_DISCONN_CNF_CB "[MMI_GIS] mmi_gis_gps_disconnect_cnf_callback"
    MMI_GIS_TRC_DISCONN_IND_CB "[MMI_GIS] mmi_gis_gps_disconnect_ind_callback"
    MMI_GIS_TRC_PLUGOUT_IND_CB "[MMI_GIS] mmi_gis_gps_uart_plugout_ind_callback"
    MMI_GIS_TRC_READY_TO_WRITE_CB "[MMI_GIS] mmi_gis_gps_uart_ready_to_write_ind_callback"
    MMI_GIS_TRC_READY_TO_READ_CB "[MMI_GIS] mmi_gis_gps_uart_ready_to_read_ind_callback"
    MMI_GIS_TRC_OWNER_IND_CB "[MMI_GIS] mmi_gis_gps_uart_owner_ind_callback"
    MMI_GIS_TRC_CONN_CNF_CB "[MMI_GIS] mmi_gis_gps_connect_cnf_callback resalt = %d,server_chnl_num = %d,con_id=%d,port=%d"
    MMI_GIS_TRC_SEARCH_CNF_CB "[MMI_GIS] mmi_gis_gps_sdp_search_cnf_callback result=%d"
    MMI_GIS_TRC_FUNC_CONN_REQ "[MMI_GIS] mmi_bth_spp_connect_req(%d,%d,%d,%d) ret=%d"
    MMI_GIS_TRC_RET_SPP_ACCEPT "[MMI_GIS] ACCEPT_SPP_CONNECT"
    MMI_GIS_TRC_FUNC_CHOOSE_PORT "[MMI_GIS] choose port and number=%d"
    MMI_GIS_TRC_SDP_RESULT_ERR "[MMI_GIS] sdp_search result error"
    MMI_GIS_TRC_RESULT_IND_CB "[MMI_GIS] mmi_gis_gps_sdp_result_ind_callback srv_chnl_num = %d"
    MMI_GIS_TRC_CONN_STATE_TO_LOST "[MMI_GIS] mmi_gis_gps_set_spp_conn_state_lost"
    MMI_GIS_TRC_FUNC_CLOSE_SPP "[MMI_GIS] mmi_gis_gps_close_spp_conn"
    MMI_GIS_TRC_NOT_PAIRED "[MMI_GIS] mmi_gis_gps_get_port_number return not paired"
    MMI_GIS_TRC_RETURN_NVRAM_PORT "[MMI_GIS] mmi_gis_gps_get_port_number return g_gps_ctx.nvram.v_uart.v_port = %d"
    MMI_GIS_TRC_VPORT_PAIRED "[MMI_GIS] mmi_gis_gps_get_port_number VPORT paired before"
    MMI_GIS_TRC_RETURN_ON_BROAD_PORT "[MMI_GIS] mmi_gis_gps_get_port_number return on broad port"
    MMI_GIS_TRC_GET_PORT_NUM "[MMI_GIS] mmi_gis_gps_get_port_number"
    MMI_GIS_TRC_PORT_CHOOSE_OVER "[MMI_GIS] mmi_gis_gps_port_choose_over"
    MMI_GIS_TRC_SEARCH_BT_CB "[MMI_GIS] mmi_gis_gps_setting_search_bt_device_callback result=%d, lap=%d,nap=%d,uap=%d"

    MMI_GIS_TRC_APP_DUMP_DATA "[MMI_GIS] mmi_gis_gps_uart_app_dumpdata_callback %d"
    MMI_GIS_TRC_APP_UART_READ "[MMI_GIS] mdi_gps_uart_read ret =%d read=%d"
    MMI_GIS_TRC_APP_CLOSE_UART "[MMI_GIS] mmi_gps_app_close_uart app port_handle=%d"
    MMI_GIS_TRC_APP_CLOSE_UART_EXEC "[MMI_GIS] mdi_gps_uart_close(%d)"
    MMI_GIS_TRC_APP_ENTER_APP_PORT "[MMI_GIS] enter app port nubmer get port = %d"
    MMI_GIS_TRC_APP_CONN_CALLBACK "[MMI_GIS] app conn callback get port = %d"
    MMI_GIS_TRC_APP_GPS_UART_OPEN "[MMI_GIS] mdi_gps_uart_open = %d"
    MMI_GIS_TRC_APP_ERROR_HANDLE_0 "[MMI_GIS] error open handler g_uart_port <0 "
    MMI_GIS_TRC_APP_PORT_ERROR "[MMI_GIS] port error"
    
    
    
    MMI_GIS_FRM_ENTRY_APP "[GIS] Enter GIS app"
    MMI_GIS_FRM_EXIT_APP "[GIS] Exit GIS app"
    MMI_GIS_FRM_DEL_CALLBACK "[GIS] GIS framework delete callback"
    MMI_GIS_FRM_STATE "[GIS] GIS framework state: %d"
    MMI_GIS_FRM_CHANGE_STATE "[GIS] GIS framework change state to: %d"
    MMI_GIS_FRM_MEM_POOL_SUCCESS_CALLBACK "[GIS] Alloc ASM success callback"
    MMI_GIS_FRM_MEM_POOL_STOP_CALLBACK "[GIS] Alloc ASM stop callback"
    MMI_GIS_MALLOC "[GIS] GIS malloc: [size] %d, [Ptr] %d"
    MMI_GIS_FREE "[GIS] GIS free: [Ptr] %d"
    MMI_GIS_FRM_SHOW_INPUT_EDITOR "[GIS] GIS framework show input editor"
    MMI_GIS_ENTRY_INPUT_EDITOR "[GIS] GIS entry input editor"
    MMI_GIS_EXIT_INPUT_EDITOR "[GIS] GIS exit input editor"
    MMI_GIS_ENTRY_INPUT_EDITOR_OPTION "[GIS] GIS entry input editor option"
    MMI_GIS_EXIT_INPUT_EDITOR_OPTION "[GIS] GIS exit input editor option"
    MMI_GIS_INPUT_EDITOR_OPTION_DONE "[GIS] GIS input editor option select [done]"
    MMI_GIS_INPUT_EDITOR_OPTION_CANCEL "[GIS] GIS input editor option select [cancel]"
    MMI_GIS_FRM_RESUME_TO_OWN_SCREEN_INTERRUPT "[GIS] GIS framework [resume] to own screen interrupt"
    MMI_GIS_FRM_PAUSE "[GIS] GIS framework [pause]"
    MMI_GIS_ENTRY_INPUT_METHOD_SCREEN "[GIS] GIS entry input method screen"
    MMI_GIS_EXIT_INPUT_METHOD_SCREEN "[GIS] GIS exit input method screen"
    MMI_GIS_ENTRY_SYMBOL_TABLE_SCREEN "[GIS] GIS entry input symbol table screen"
    MMI_GIS_EXIT_SYMBOL_TABLE_SCREEN "[GIS] GIS exit input symbol table screen"
    
    MMI_GIS_ADP_START_ENGINE "[GIS] Call adaptation layer API to [start] GIS engine "
    MMI_GIS_ADP_STOP_ENGINE "[GIS] Call adaptation layer API to [stop] GIS engine "
    MMI_GIS_ADP_PAUSE_ENGINE "[GIS] Call adaptation layer API to [pause] GIS engine "
    MMI_GIS_ADP_RESUME_ENGINE "[GIS] Call adaptation layer API to [resume] GIS engine "
    MMI_GIS_ADP_MOVE_ENGINE_TO_BACKGROUND "[GIS] Call adaptation layer API to move GIS engine to [background] run"
    MMI_GIS_ADP_MOVE_ENGINE_TO_FOREGROUND "[GIS] Call adaptation layer API to move GIS engine to [foreground] run"
    MMI_GIS_ADP_RESUME_ENGINE_TO_BACKGROUND "[GIS] Call adaptation layer API to [resume] GIS engine to background run"
    MMI_GIS_ADP_INPUT_EDITOR_DONE "[GIS] Call adaptation layer API to notify input done"
    MMI_GIS_ADP_ENTRY_INPUT_EDITOR "[GIS] Call adaptation layer API to entry input editor"
    
    MMI_GIS_TASK_AGENT_START_RENDER "[GIS] GIS task agent start render. seq_num: %d"
    MMI_GIS_TASK_AGENT_RENDER_CNF_HDLR "[GIS] GIS task agent render confim handler. seq_num: %d, result: %d"
    MMI_GIS_TASK_AGENT_STOP_RENDER "[GIS] GIS task agent stop render"
    MMI_GIS_TASK_AGENT_START_SEARCH "[GIS] GIS task agent start search. seq_num: %d"
    MMI_GIS_TASK_AGENT_SEARCH_CNF_HDLR "[GIS] GIS task agent search confim handler. seq_num: %d, result: %d"
    MMI_GIS_TASK_AGENT_STOP_SEARCH "[GIS] GIS task agent stop search"
    MMI_GIS_TASK_AGENT_SEND_MSG "[GIS] GIS task agent send message. src_mod_id: %d, msg_id: %d, is_blocking: %d"   

    
    
    
    MDI_MTV_ON_SERVICE_FOUND_IND "[MDI_MTV] service fonud ind"
    MDI_MTV_ON_SEARCH_PROGRESS_IND "[MDI_MTV] search progress ind"
    MDI_MTV_ON_COMPLETE_SAVING_IND "[MDI_MTV] complete saving ind"
    MDI_MTV_ON_SERVICE_EVENT_IND "[MDI_MTV] service event, service_id=%d, event=%d, param=%d"
    MDI_MTV_ON_RECORDER_EVENT_IND "[MDI_MTV] recorder event, service_id=%d, event=%d, param=%d"
    MDI_MTV_ON_PLAYER_EVENT_IND "[MDI_MTV] player event, service_id=%d, event=%d, param=%d"
    MDI_MTV_OPEN "[MDI_MTV] open engine"
    MDI_MTV_OPEN_RESULT "[MDI_MTV] open engine result=%d, context=%d"
    MDI_MTV_CLOSE "[MDI_MTV] close engine"
    MDI_MTV_RESTORE_UNSAVED_RECORDING "[MDI_MTV] restore unsaved recording"
    MDI_MTV_DISCARD_UNSAVED_RECORDING "[MDI_MTV] discard unsaved recording"
    MDI_MTV_SCAN_SERVICE_ON_AIR "[MDI_MTV] scan channel on air"
    MDI_MTV_SCAN_SERVICE_FROM_DATABASE "[MDI_MTV] scan channel from database"
    MDI_MTV_ABORT_SCAN_SERVICE "[MDI_MTV] abort scan service"
    MDI_MTV_START_SERVICE "[MDI_MTV] start service, service_id=%d"
    MDI_MTV_STOP_SERVICE "[MDI_MTV] stop service, service_id=%d"
    MDI_MTV_SERVICE_GET_STATUS "[MDI_MTV] get service status"
    MDI_MTV_PLAYER_START "[MDI_MTV] start play, service_id=%d"
    MDI_MTV_PLAYER_STOP "[MDI_MTV] stop play, service_id=%d"
    MDI_MTV_PLAYER_PAUSE "[MDI_MTV] pause play, service_id=%d"
    MDI_MTV_PLAYER_RESUME "[MDI_MTV] resume play, service_id=%d"
    MDI_MTV_PLAYER_PLAY_PAUSE "[MDI_MTV] play then pause, service_id=%d"
    MDI_MTV_PLAYER_GET_STATUS "[MDI_MTV] get player status"
    MDI_MTV_RECORDER_START "[MDI_MTV] start record, service_id=%d"
    MDI_MTV_RECORDER_STOP "[MDI_MTV] stop record, service_id=%d"
    MDI_MTV_RECORDER_SAVE_RECORDING "[MDI_MTV] recorder save recording, service_id=%d"
    MDI_MTV_RECORDER_DISCARD_RECORDING "[MDI_MTV] recorder discard recording, service_id=%d"
    MDI_MTV_RECORDER_GET_STATUS "[MDI_MTV] get recorder status"
    MDI_MTV_RECORDER_SEEK "[MDI_MTV] seek recorder"
    MDI_MTV_UPDATE_BRIGHTNESS "[MDI_MTV] update brightness"
    MDI_MTV_UPDATE_CONTRAST "[MDI_MTV] update contrast"
    MDI_MTV_UPDATE_PARAM "[MDI_MTV] update param"
    
    
    
    MMI_TRC_MTV_STATE_ALL "[MTV] States(%Mmmi_mtv_player_kernel_state_enum,%Mmmi_mtv_player_player_state_enum,%Mmmi_mtv_player_recorder_state_enum)"
    MMI_TRC_MTV_KERNEL_ENTER_STATE "[MTV] %Mmmi_mtv_player_module_enum enter from %Mmmi_mtv_player_kernel_state_enum to %Mmmi_mtv_player_kernel_state_enum"
    MMI_TRC_MTV_PLAYER_ENTER_STATE "[MTV] %Mmmi_mtv_player_module_enum enter from %Mmmi_mtv_player_player_state_enum to %Mmmi_mtv_player_player_state_enum"
    MMI_TRC_MTV_RECORDER_ENTER_STATE "[MTV] %Mmmi_mtv_player_module_enum enter from %Mmmi_mtv_player_recorder_state_enum to %Mmmi_mtv_player_recorder_state_enum"


   
   
   

   MMI_JAVA_SEND_MIDS_GETLIST_REQ "*---[JavaAgencySrc.c] SendMIDSGetListReq---*"
   MMI_JAVA_RECV_MIDS_GETLIST_CNF "*---[JavaAgencySrc.c] RecvMIDSGetListCnf---*"

   MMI_JAVA_GET_JAVA_APP_MIDS_INDEX "*---[JavaAgencySrc.c] GetJavaAppMIDSIndex---*"


   MMI_JAVA_SEND_MID_GETLIST_REQ "*---[JavaAgencySrc.c] SendMIDGetListReq---*"
   MMI_JAVA_RECV_MID_GETLIST_CNF "*---[JavaAgencySrc.c] RecvMIDGetListCnf---*"

   MMI_JAVA_SEND_MID_START_REQ "*---[JavaAgencySrc.c] SendMIDStartReq---*"
   MMI_JAVA_RECV_MID_START_CNF "*---[JavaAgencySrc.c] RecvMIDStartCnf---*"
   MMI_JAVA_RECV_MID_STOP_IND "*---[JavaAgencySrc.c] RecvMIDStopInd---*"

   MMI_JAVA_SEND_MIDS_GETINFO_REQ "*---[JavaAgencySrc.c] SendMIDSGetInfoReq---*"
   MMI_JAVA_RECV_MIDS_GETINFO_CNF "*---[JavaAgencySrc.c] RecvMIDSGetInfoCnf---*"

   MMI_JAVA_SEND_MIDS_GET_SETTING_REQ "*---[JavaAgencySrc.c] SendMIDSGetSettingReq---*"
   MMI_JAVA_RECV_MIDS_GET_SETTING_CNF "*---[JavaAgencySrc.c] RecvMIDSGetSettingCnf---*"

   MMI_JAVA_SEND_MIDS_SET_SETTING_REQ "*---[JavaAgencySrc.c] SendMIDSSetSettingReq---*"
   MMI_JAVA_RECV_MIDS_SET_SETTING_CNF "*---[JavaAgencySrc.c] RecvMIDSSetSettingCnf---*"

   MMI_JAVA_MIDS_REMOVE_REQ "*---[JavaAgencySrc.c] SendMIDSDeleteReq---*"
   MMI_JAVA_MIDS_REMOVE_CONFIRM_IND "*---[JavaAgencySrc.c] RecvMIDSDeleteCnfInd---*"
   MMI_JAVA_MIDS_REMOVE_CONFIRM_RES "*---[JavaAgencySrc.c] SendMIDSDeleteConfirmRes---*"
   MMI_JAVA_MIDS_REMOVE_CNF "*---[JavaAgencySrc.c] RecvMIDSDeleteCnf---*"

   MMI_JAVA_GET_JAVA_APP_MID_INDEX "*---[JavaAgencySrc.c] GetJavaAppMIDIndex---*"

   MMI_JAVA_SEND_SET_MODE_REQ "*---[JavaAgencyEM.c] SendJavaSetModeReq---*"
   MMI_JAVA_RECV_SET_MODE_CNF "*---[JavaAgencyEM.c] RecvJavaSetModeCnf---*"

   MMI_JAVA_RECV_INSTALL_MIDS_IND "*---[JavaAgencyMidsInstall.c] RecvMIDSInstallInd---*"
   MMI_JAVA_SEND_INSTALL_MIDS_RES "*---[JavaAgencyMidsInstall.c] SendMIDSInstallInd---*"
   MMI_JAVA_RECV_INSTALL_CONFIRM_IND "*---[JavaAgencyMidsInstall.c] RecvMIDSInstallCnnfirmInd---*"
   MMI_JAVA_SEND_INSTALL_CONFIRM_RES "*---[JavaAgencyMidsInstall.c] SendMIDSInstallConfirmRes---*"
   MMI_JAVA_RECV_INSTALL_MIDS_CNF "*---[JavaAgencyMidsInstall.c] RecvMIDSInstallCnf---*"
   MMI_JAVA_SEND_INSTALL_MIDS_REQ "*---[JavaAgencyMidsInstall.c] SendMIDSInstallReq---*"

   MMI_JAVA_RECV_RESET_RMS_IND "*---[JavaAgencyRMS.c] RecvResetRMSInd---*"
   MMI_JAVA_SEND_RESET_RMS_RES "*---[JavaAgencyRMS.c] SendResetRMSRes---*"

   MMI_JAVA_SEND_MIDS_UPDATE_REQ "*---[JavaAgencyMidsInstall.c] SendMIDSUpdateReq---*"
   MMI_JAVA_RECV_MIDS_UPDATE_CNF "*---[JavaAgencyMidsInstall.c] RecvMIDSUpdateCnf---*"

    MMI_WAP_GET_FILE_AND_SAVE_IND "*---[JavaAgencyMidsInstall.c] RecvGetFileAndSaveRes---*"
   MMI_WAP_GET_FILE_AND_SAVE_RES "*---[JavaAgencyMidsInstall.c] SendGetFileAndSaveRes---*"

   MMI_JAVA_RECV_TIMEALARM_PUSH_IND "*---[JavaAgencyTimeAlarm.c] RecvTimeAlarmPushInd---*"
   MMI_JAVA_SEND_TIMEALARM_PUSH_RES "*---[JavaAgencyTimeAlarm.c] SendTimeAlarmPushRes---*"
   MMI_JAVA_RECV_TIMEALARM_PUSH_GET_SETTING_CNF "*---[JavaAgencyTimeAlarm.c] RecvTimeAlarmPushGetSettingCnf---*"

   MMI_JAVA_SEND_ABORT_REQ "*---[JavaAgencyMidsInstall.c] SendJavaAbortReq---*"
   MMI_JAVA_RECV_ABORT_CNF "*---[JavaAgencyMidsInstall.c] RecvJavaAbortCnf---*"

   MMI_JAVA_LOCAL_INSTALL_CNF "*---[JavaAgencySrc.c] RecvJavaLocalInstallCnf---*"
   MMI_JAVA_LOCAL_INSTALL_REQ "*---[JavaAgencySrc.c] SendJavaLocalInstallReq---*"
   MMI_JAVA_AT_LOCAL_INSTALL_CNF "*---[JavaAgencySrc.c] RecvJavaATLocalInstallCnf---*"
   MMI_JAVA_AT_LOCAL_INSTALL_REQ "*---[JavaAgencySrc.c] RecvJavaATLocalInstallReq---*"

   MMI_JAVA_MIDS_INFO "*---[JavaAgencySrc.c] mids_index=%d, mids_count=%d, mid_index=%d---*"
   MMI_JAVA_DOWNLOAD_INFO "*---[JavaAgencySrc.c] dnld_size=%d, total_size=%d, level=%d---*"
   MMI_JAVA_RECV_GET_CONFIRM_IND "*---[JavaAgencyUtil.c] send_mids_get_confirm_ind ---*"
   MMI_JAVA_SEND_GET_CONFIRM_RES "*---[JavaAgencyUtil.c] send_mids_get_confirm_res res = %d---*"
   MMI_JAVA_RECV_SHOW_PERCENTAGE_IND "*-- [JavaAgencyMidsInstall.c] mmi_java_recv_show_percentage_ind current = %d, total = %d ---*"

#line 886 "..\\..\\plutommi\\mmi\\inc\\MMI_media_app_trc.h"

#line 1054 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\plutommi\\mmi\\inc\\MMI_common_app_trc.h"









































































































    
	MMI_IPERF_PRE_ENTRY_IPERF "*----[IPERF] PreEntry_Iperf ----*"
	MMI_IPERF_PRE_ENTRY_IPERF_TCP "*----[IPERF] PreEntry_Iperf_TCP ----*"
	MMI_IPERF_PRE_ENTRY_IPERF_UDP "*----[IPERF] PreEntry_Iperf_UDP ----*"
	MMI_IPERF_ENTRY_IPERF "*----[IPERF] Entry_Iperf ----*"
	MMI_IPERF_ENTRY_IPERF_REPORT "*----[IPERF] Entry_Iperf_Report ----*"
	MMI_IPERF_ENTRY_IPERF_SETTING "*----[IPERF] Entry_Iperf_Setting ----*"
	MMI_IPERF_ENTRY_PROGRESSING_SCREEN "*----[IPERF] Entry_Progressing_Screen ----*"
	MMI_IPERF_EXIT_IPERF "*----[IPERF] Exit_Iperf ----*"
	MMI_IPERF_EXIT_IPERF_TCP "*----[IPERF] Exit_Iperf_TCP ----*"
	MMI_IPERF_EXIT_IPERF_UDP "*----[IPERF] Exit_Iperf_TCP ----*"
	MMI_IPERF_DEL_CB "*----[IPERF] Iperf_Del_CB ----*"
	MMI_IPERF_SETTING_FILL_INLINE "*----[IPERF] Iperf_Setting_Fill_Inline ----*"
	MMI_IPERF_DT_CB "*----[IPERF] Iperf_DT_CB ----*"
	MMI_IPERF_NOT_RUN "*----[IPERF] Iperf_NOT_RUN ----*"
	MMI_IPERF_CHECK_SETTINGS "*----[IPERF] Iperf_Check_Settings ----*"
	MMI_IPERF_PROGRESS_ABORT "*----[IPERF] Iperf_Progres_Abort ----*"
	MMI_IPERF_REPORT_BACK "*----[IPERF] Iperf_Report_Back ----*"
	MMI_IPERF_SAVE "*----[IPERF] Iperf_Save_Settings ----*"
	MMI_IPERF_SAVE_OPEN_FAILED "*----[IPERF] Iperf_Save_Settings_Open_Failed ----*"
	MMI_IPERF_SAVE_SEEK_FAILED "*----[IPERF] Iperf_Save_Settings_Seek_Failed ----*"
	MMI_IPERF_WRITE_UDP_FAILED "*----[IPERF] Iperf_Save_Settings_Write_UDP_Failed ----*"
	MMI_IPERF_WRITE_TCP_FAILED "*----[IPERF] Iperf_Save_Settings_Write_TCP_Failed ----*"
	MMI_IPERF_READ "*----[IPERF] Iperf_Read_Settings ----*"
	MMI_IPERF_READ_OPEN_FAILED "*----[IPERF] Iperf_Read_Settings_Open_Failed ----*"
	MMI_IPERF_READ_UDP_FAILED "*----[IPERF] Iperf_Read_Settings_Read_UDP_Failed ----*"
	MMI_IPERF_READ_TCP_FAILED "*----[IPERF] Iperf_Read_Settings_Read_TCP_Failed ----*"
	MMI_IPERF_LOAD_DEFAULT "*----[IPERF] Iperf_Load_Default_Settings ----*"
	MMI_IPERF_SEND_REQ "*----[IPERF] Iperf_Send_Req Function----*"
	MMI_IPERF_SEND_REQ_ILM "*----[IPERF] Iperf_Send_Req ILM----*"
	MMI_IPERF_SEND_REQ_TOS "*----[IPERF] Iperf_Send_Req_ToS_Default(should never happens) ----*"
	MMI_IPERF_RUN_CNF_HF "*----[IPERF] Iperf_Run_Cnf_Hf ----*"
	MMI_IPERF_RUN_CNF_HF_FALSE "*----[IPERF] Iperf_Run_Cnf_Hf_False ----*"
	MMI_IPERF_REPORT_IND_HF "*----[IPERF] Iperf_Report_Ind_Hf ----*"
	MMI_IPERF_REPORT_IND_HF_FALSE "*----[IPERF] Iperf_Report_Ind_Hf_False ----*"
	MMI_IPERF_ENTRY_REPORT_SCREEN "*----[IPERF] Entry_Iperf_Report_Screen ----*"
    
    
    
    MMI_RTC_ALARM_EMPTY_QUEUE "*---[AlarmFramework.c] Empty Queue---*"
    MMI_RTC_ALARM_EXPIRY_STATE "*---[AlarmFramework.c] AlmIsExpireAllowed => call:[%d], pwron:[%d], disabled:[%d] ---*"
    MMI_RTC_ALARM_EXPIRY_TYPE "*---[AlarmFramework.c] Expiry => type:[%d] ---*"
    MMI_RTC_ALARM_PENDING_TIMEOUT "*---[AlarmFramework.c] AlmHandlePendingTimeout---*"
    MMI_RTC_ALARM_DISABLE_SPOF "*---[AlarmFramework.c]  AlmDisableSPOF---*"
    MMI_RTC_ALARM_ENABLE_SPOF "*---[AlarmFramework.c] AlmEnableSPOF---*"
    MMI_RTC_ALARM_DISABLE_ALARM "*---[AlarmFramework.c] AlmDisableExpiryHandler---*"
    MMI_RTC_ALARM_ENABLE_ALARM "*---[AlarmFramework.c] AlmEnableExpiryHandler---*"

    
    MMI_SHORTCUTS_NOT_FOUND "*---[Shortcut.c] Shortcut not Found: [%d]---*"

    
    MMI_POWER_ON_START_ANIMATION "*---[Power on] start mmi_pwron_entry_animation_screen---*"
    MMI_POWER_ON_BACK2_ANIMATION "*---[Power on] go back mmi_pwron_entry_animation_screen---*"
    MMI_POWER_ON_LEAVE_ANIMATION "*---[Power on] start mmi_pwron_exit_animation_screen---*"
    MMI_POWER_ON_ANIMATION_TIMEOUT "*---[Power on] start mmi_pwron_froce_terminate_display---*"
    MMI_POWER_ON_ANIMATION_FINISH "*---[Power on] start mmi_pwron_play_video_callback---*"
    MMI_POWER_ON_IMAGE_FINISH "*---[Power on] start mmi_pwron_show_image_callback---*"
    MMI_POWER_ON_RECV_SIM_PSWD "*---[Power on] receive SimPasswdReqResponse---*"
    MMI_POWER_ON_PROC_SIM_PSWD "*---[Power on] process SimPasswdReqResponse---*"
    MMI_POWER_ON_RECV_SIM_FAIL "*---[Power on] receive SimQueryFailureRsp---*"
    MMI_POWER_ON_PROC_SIM_FAIL "*---[Power on] process SimQueryFailureRsp---*"
    MMI_POWER_ON_SEND_MSG_2_MMI "*---[Power on] start mmi_ready_to_idle_screen_ind---*"
    MMI_POWER_ON_CALL_BEFORE_IDLE "*---[Power on] a call in mmi_ready_to_idle_screen_ind_hdlr---*"
    MMI_POWER_ON_READY_TO_IDLE "*---[Power on] start mmi_ready_to_idle_screen_ind_hdlr---*"
    MMI_POWER_ON_START_WELCOME "*---[Power on] start ShowWelcomeScr---*"
    MMI_POWER_ON_STOP_WELCOME "*---[Power on] start ExitWelcomeScreen---*"
    MMI_POWER_ON_REMOVE_ICONS "*---[Power on] start RemoveStatusIconsForSimRemoved---*"

   
   MMI_NETSET_GET_PLMN_LIST_REQ "[NetworkSetup.c] NETSETGetPLMNListReq"
   MMI_NETSET_GET_PLMN_LIST_RSP "[NetworkSetup.c] NETSETGetPLMNListRsp"
   MMI_NETSET_ABORT_PLMN_LIST_REQ "[NetworkSetup.c] NETSETAbortPLMNListReq"
   MMI_NETSET_ABORT_PLMN_LIST_TO_IDLE "[NetworkSetup.c] AbortGetPLMNListToIdle"
   MMI_NETSET_SHOW_PLMN_LIST "[NetworkSetup.c] EntryNETSETShowPlmnList"
   MMI_NETSET_SET_BAND_REQ "[NetworkSetup.c] NETSETSetBandSelectionReq"
   MMI_NETSET_SET_BAND_RSP "[NetworkSetup.c] NETSETSetBandSelectionRsp"
   MMI_NETSET_GET_BAND_REQ "[NetworkSetup.c] NETSETGetBandSelectionReq"
   MMI_NETSET_GET_BAND_RSP "[NetworkSetup.c] NETSETGetBandSelectionRsp"
   MMI_NETSET_MSG_Q_IDX_ADD_ONE "[NetworkSetup.c] NETSETMsgQueueIndexAddOne, Index:%d, Top:%d"
   MMI_NETSET_MSG_Q_TOP_ADD_ONE "[NetworkSetup.c] NETSETMsgQueueTopAddOne, Index:%d, Top:%d"
   MMI_NETSET_MSG_Q_TOP_MINUS_ONE "[NetworkSetup.c] NETSETMsgQueueTopMinusOne, Index:%d, Top:%d"
   MMI_NETSET_MSG_Q_PROT_HDLR "[NetworkSetup.c] NETSETMsgQueueProtocolHandler, Index:%d, Top:%d"
   MMI_NETSET_MSG_Q_PUSH_EXEC "[NetworkSetup.c] NETSETMsgQueuePush, Type:%d, Index=Top, Exec"
   MMI_NETSET_MSG_Q_PUSH_ONLY_ONE_ADD "[NetworkSetup.c] NETSETMsgQueuePush, Type:%d, Only One, Add"
   MMI_NETSET_MSG_Q_PUSH_ADD_RESTORE "[NetworkSetup.c] NETSETMsgQueuePush, Type:%d, Add Restore"
   MMI_NETSET_MSG_Q_PUSH_REPLACE_LAST "[NetworkSetup.c] NETSETMsgQueuePush, Type:%d, Replace Last"


    
    MMI_EM_ICMP_PROCESS_DONE "*--- ICMP: Tracert Process Done! ---*"
    MMI_EM_ICMP_PACKET_CONTNET "*--- ICMP: ICMP Packet Data: type:%d, code:%d, identifier:%d,%d, sequence number:%d,%d ---*"
    MMI_EM_ICMP_SENT_SOC "*--- ICMP: Sent %d Bytes to %d.%d.%d.%d. ---*"
    MMI_EM_ICMP_REC_SOC "*--- ICMP: Recieved Packet Type: %d ---*"
    MMI_EM_ICMP_WRONG_IDENTIFIER "*--- ICMP: Wrong Echo Indentifier! ---*"
    MMI_EM_ICMP_WRONG_SEQ_NUM "*--- ICMP: Wrong Echo Sequence Number! ---*"
    MMI_EM_ICMP_WRONG_DATA "*--- ICMP: Wrong Data Content! ---*"
    MMI_EM_ICMP_RCV_RLY "*--- ICMP: Rsp from %d.%d.%d.%d: Time= %d ms ---*"
    MMI_EM_ICMP_NEXT_NODE "*--- ICMP: Send ICMP to Next Node. ---*"
    MMI_EM_ICMP_DES_UNREACH "*--- ICMP: Destination Unreachable! ---*"
    MMI_EM_ICMP_OVERLOADED "*--- ICMP: Router Overloaded! ---*"
    MMI_EM_ICMP_IDLE_STATE "IDLE"
    MMI_EM_ICMP_DNS_WAIT "DNS_WAIT"
    MMI_EM_ICMP_ICMP_WAIT "ICMP_WAIT"
    


   
   
   
   
   
   MMI_CM_FUNC_EntryScrShowUserTimeToRedial "*** EntryScrShowUserTimeToRedial ***"
   MMI_CM_FUNC_IsRedialNeeded "*** IsRedialNeeded ***"
   MMI_CM_FUNC_CheckRedialOrShowError "*** CheckRedialOrShowError ***"
   MMI_CM_FUNC_CalculateSetBackOff "*** CalculateSetBackOff ***"
   MMI_CM_FUNC_UpdateStateMachine "*** UpdateStateMachine ***"
   MMI_CM_FUNC_MakeHold "*** MakeHold ***"
   MMI_CM_FUNC_MakeRetrieve "*** MakeRetrieve ***"
   MMI_CM_FUNC_MakeSwap "*** MakeSwap ***"
   MMI_CM_FUNC_MakeConf "*** MakeConf ***"
   MMI_CM_FUNC_StopRecord "*** CM stop record!! ***"
   MMI_CM_FUNC_ProcessIncomingFailureEvents "*** ProcessIncomingFailureEvents ***"
   MMI_CM_FUNC_OutgoingProcessCMFailureEvent "*** OutgoingProcessCMFailureEvent ***"
   MMI_CM_FUNC_ShowCallManagementErrorMessage "*** ShowCallManagementErrorMessage ***"
   MMI_CM_FUNC_ExitScrCMErrMsg "*** ExitScrCMErrMsg ***"
   MMI_CM_FUNC_GetOutOfCMApplication "*** GetOutOfCMApplication ***"
   MMI_CM_FUNC_GetOutOfCMforAdjustHistory "*** GetOutOfCMforAdjustHistory ***"
   MMI_CM_FUNC_GoBackfromNotifyScr "*** GoBackfromNotifyScr ***"
   MMI_CM_FUNC_AdjustHistoryForCM "*** AdjustHistoryForCM ***"
   MMI_CM_FUNC_MakePsSendUDUB "*** MakePsSendUDUB: CHLD CSMCC_REL_HELD_OR_UDUB ***"
   MMI_CM_FUNC_MakePsHangupallActiveAcceptOtherRequest "*** MakePsHangupallActiveAcceptOtherRequest: CHLD CSMCC_REL_ACTIVE_AND_ACCEPT ***"
   MMI_CM_FUNC_MakePsEndSelectiveCall "*** MakePsEndSelectiveCall: CHLD CSMCC_REL_SPECIFIC_CALL call id %d ***"
   MMI_CM_FUNC_MakePsActiveHold "*** MakePsActiveHold: CHLD CSMCC_HOLD_ACTIVE_AND_ACCEPT Retrieve ***"
   MMI_CM_FUNC_MakePsSplitRequest "*** MakePsSplitRequest: CHLD CSMCC_HOLD_ACTIVE_EXCEPT_SPECIFIC_CALL call_id %d ***"
   MMI_CM_FUNC_MakePsConfCallRequest "*** MakePsConfCallRequest: CHLD CSMCC_ADD_HELD_CALL ***"
   MMI_CM_FUNC_MakePsEctRequest "*** MakePsEctRequest: CHLD CSMCC_EXPLICIT_CALL_TRANSFER ***"
   MMI_CM_FUNC_MakePsActivateCCBS "*** MakePsActivateCCBS: CHLD CSMCC_ACTIVATE_CCBS_CALL ***"
   MMI_CM_FUNC_MakePsHangupallRequest "*** MakePsHangupallRequest: CHLD CSMCC_REL_ALL_EXCEPT_WAITING_CALL ***"
   MMI_CM_FUNC_MakePsSwapCallRequest "*** MakePsSwapCallRequest: CHLD CSMCC_SWAP_CALL Swap ***"
   MMI_CM_FUNC_MakePsSendRelHeld "*** MakePsSendRelHeld: CHLD CSMCC_REL_HELD ***"
   MMI_CM_FUNC_MakePsHangupallActiveRequest "*** MakePsHangupallActiveRequest: CHLD CSMCC_REL_ACTIVE ***"
   MMI_CM_FUNC_MakePsHangupallCallsRequest "*** MakePsHangupallCallsRequest: CHLD CSMCC_REL_ALL ***"
   MMI_CM_FUNC_MakePsCallDeflect "*** MakePsCallDeflect ***"
   MMI_CM_FUNC_MakePsDropUSSDReq "*** MakePsDropUSSDReq ***"
   MMI_CM_FUNC_MakePsSendDTMFTone "*** MakePsSendDTMFTone ***"
   MMI_CM_FUNC_MakePsStopDTMFTone "*** MakePsStopDTMFTone ***"
   MMI_CM_FUNC_MakePsSendDTMFString "*** MakePsSendDTMFString ***"
   MMI_CM_FUNC_MakePsStartVoiceRecord "*** MakePsStartVoiceRecord ***"
   MMI_CM_FUNC_MakePsStopVoiceRecord "*** MakePsStopVoiceRecord ***"
   MMI_CM_FUNC_StartVoiceRecordReqSucess "*** StartVoiceRecordReqSucess ***"
   MMI_CM_FUNC_HiliteMenuIncomingCallDeflection "*** HiliteMenuIncomingCallDeflection ***"
   MMI_CM_FUNC_HiliteMenuCCBSDial "*** HiliteMenuCCBSDial ***"
   MMI_CM_FUNC_HiliteMenuEndAllCalls "*** HiliteMenuEndAllCalls ***"
   MMI_CM_FUNC_PsCBackCallIncoming "*** PsCBackCallIncoming ***"
   MMI_CM_FUNC_PsCBackCallWait "*** PsCBackCallWait ***"
   MMI_CM_FUNC_PsCBackNetworkCallDropped "*** PsCBackNetworkCallDropped ***"
   MMI_CM_FUNC_PsCBackCcbsActivate "*** PsCBackCcbsActivate ***"
   MMI_CM_FUNC_PsCBackCCBSInvoked "*** PsCBackCCBSInvoked ***"
   MMI_CM_FUNC_PsCBackNotifySSInd "*** PsCBackNotifySSInd ***"
   MMI_CM_FUNC_PsCBackSpeechIndication "*** PsCBackSpeechIndication ***"
   MMI_CM_FUNC_PsCBackAocIndication "*** PsCBackAocIndication ***"
   MMI_CM_FUNC_PsCBackConfirmDTMFString "*** PsCBackConfirmDTMFString ***"
   MMI_CM_FUNC_HangupAllCalls "*** HangupAllCalls ***"
   MMI_CM_FUNC_IgnoreCCBS "*** IgnoreCCBS ***"
   MMI_CM_FUNC_ActivateCCBS "*** ActivateCCBS ***"
   MMI_CM_FUNC_ProcessIncomingEvents "*** ProcessIncomingEvents ***"
   MMI_CM_FUNC_ProcessIncomingCallEvent "*** ProcessIncomingCallEvent ***"
   MMI_CM_FUNC_ProcessCallWait "*** ProcessCallWait ***"
   MMI_CM_FUNC_ProcessInvokedCcbs "*** ProcessInvokedCcbs ***"
   MMI_CM_FUNC_ProcessIncomingCallRejected "*** ProcessIncomingCallRejected ***"
   MMI_CM_FUNC_ProcessEndCallIdAndGoBack "*** ProcessEndCallIdAndGoBack ***"
   MMI_CM_FUNC_ProcessAocIndication "*** ProcessAocIndication ***"
   MMI_CM_FUNC_ProcessStateCheckIncomingCall "*** ProcessStateCheckIncomingCall ***"
   MMI_CM_FUNC_PsCBackActiveCallsHeld "*** PsCBackActiveCallsHeld ***"
   MMI_CM_FUNC_ProcessCallsHeld "*** ProcessCallsHeld ***"
   MMI_CM_FUNC_PsCBackIncomingCallRejected "*** PsCBackIncomingCallRejected ***"
   MMI_CM_FUNC_ProcessAcceptIncomingCall "*** ProcessAcceptIncomingCall ***"
   MMI_CM_FUNC_PsCBackselectedCallEnded "*** PsCBackselectedCallEnded call id %d ***"
   MMI_CM_FUNC_PsCBackActiveCallEndedHeldRetrieved "*** PsCBackActiveCallEndedHeldRetrieved ***"
   MMI_CM_FUNC_ProcessEndAllActiveCall "*** ProcessEndAllActiveCall ***"
   MMI_CM_FUNC_CBackHangupAllActive "*** CBackHangupAllActive held calls %d ***"
   MMI_CM_FUNC_CBackHangupAllActiveAcceptOther "*** CBackHangupAllActiveAcceptOther held calls %d ***"
   MMI_CM_FUNC_ProcessHold2Active "*** ProcessHold2Active ***"
   MMI_CM_FUNC_ProcessCCBSDialRequest "*** ProcessCCBSDialRequest ***"
   MMI_CM_FUNC_CCBSDialResponse "*** CCBSDialResponse ***"
   MMI_CM_FUNC_ProcessCCBSRejectRequest "*** ProcessCCBSRejectRequest ***"
   MMI_CM_FUNC_PsCBackCCBSRejectResponse "*** PsCBackCCBSRejectResponse ***"
   MMI_CM_FUNC_EntryScrIncomingCallEvent "*** EntryScrIncomingCallEvent ***"
   MMI_CM_FUNC_EntryScrIncomingMultipleOptions "*** EntryScrIncomingMultipleOptions ***"
   MMI_CM_FUNC_EntryScrIncomingOptions "*** EntryScrIncomingOptions ***"
   MMI_CM_FUNC_EntryScrCCBSInvokeEvent "*** EntryScrCCBSInvokeEvent ***"
   MMI_CM_FUNC_EntryScrCCBSInvokeMultipleOptions "*** EntryScrCCBSInvokeMultipleOptions ***"
   MMI_CM_FUNC_EntryScrShowSSEvent "*** EntryScrShowSSEvent ***"
   MMI_CM_FUNC_ExitScrShowSSEvent "*** ExitScrShowSSEvent: Stopping  Notify Timer ***"
   MMI_CM_FUNC_EntryCallDeflectDigitHandler "*** EntryCallDeflectDigitHandler ***"
   MMI_CM_FUNC_AbortUSSDResultRequest "*** AbortUSSDResultRequest ***"
   MMI_CM_FUNC_AbortUSSDResultRequestEND "*** AbortUSSDResultRequestEND ***"
      
   MMI_CM_WARN_TEST "warning message"

	 MMI_CM_ERROR_CallList "PsCbackSyncStateMachine:Corrupted State Machine"
   MMI_CM_ERROR_CallListFail "PsCbackSyncStateMachine: Stack returned error"
   MMI_CM_ERROR_CallEnd "GetDateTimeAndNotifyEndCallDurationCBack:Corrupt Time structure"

   MMI_CM_INFO_SetCallState "SetCallState: Setting call state to %d, call_id %d"
   MMI_CM_INFO_CallListActive "PsCbackSyncStateMachine:Active call found"
   MMI_CM_INFO_CallListHeld "PsCbackSyncStateMachine:Held call found"
   MMI_CM_INFO_CallListOutgoing "PsCbackSyncStateMachine:MO call found"
   MMI_CM_INFO_CallListIncoming "PsCbackSyncStateMachine:MT call found"
   MMI_CM_INFO_CallListEmpty "PsCbackSyncStateMachine:No calls found, purging all calls"
   MMI_CM_INFO_MakeHoldSet "MakeHold : Setting state to HOLD"
   MMI_CM_INFO_MakeRetrieveSet "MakeRetrieve : Setting state to ACTIVE"
   MMI_CM_INFO_MakeSwapSetHeld "MakeSwap : Setting state to HOLD"
   MMI_CM_INFO_MakeSwapSetActive "MakeSwap : Setting state to ACTIVE"
   MMI_CM_INFO_AllowMoreCalls1 "AllowMoreCalls : Not Allowing more calls"
   MMI_CM_INFO_AllowMoreCalls2 "AllowMoreCalls : ECC call"
   MMI_CM_INFO_AllowMoreCalls3 "AllowMoreCalls : Dropping calls"
   MMI_CM_INFO_SetCurrentState "Setting Current state %d"
   MMI_CM_INFO_SetPreviousState "Setting Previous state %d"
   MMI_CM_INFO_UpdateActiveCallScrnIfPresent "UpdateActiveCallScrnIfPresent: Refreshing Active call screen"
   MMI_CM_INFO_StopRing1 "StopIncomingCallIndication: Stopping Call Wait tone"
   MMI_CM_INFO_StopRing2 "StopIncomingCallIndication: Stopping Ring tone"
   MMI_CM_INFO_PlayInternalTone "PsCBackPlayInternalTone"
   MMI_CM_INFO_ShowErrorAfterNotifySS "ShowCallManagementErrorMessage: Notify Flag Set"
   MMI_CM_INFO_ExitScrCMErrMsgRedial "Exit CM error pop up, add redial screen to history"
   MMI_CM_INFO_GetOutOfCMApplication1 "In GetOutOfCMApplication: not in cm screen, delete to marker"
   MMI_CM_INFO_GetOutOfCMApplication2 "In GetOutOfCMApplication: in cm screen, delete to marker"
   MMI_CM_INFO_GetOutOfCMforAdjustHistory1 "In GetOutOfCMforAdjustHistory: not in cm screen, delete to marker"
   MMI_CM_INFO_GetOutOfCMforAdjustHistory2 "In GetOutOfCMforAdjustHistory: in cm screen, delete to marker"
   MMI_CM_INFO_GoBackfromNotifyScr1 "GoBackfromNotifyScr: NotifySSFlag set.. so returning"
   MMI_CM_INFO_GoBackfromNotifyScr2 "GoBackfromNotifyScr:0 Calls,Getting out of GetOutOfCMApplication"
   MMI_CM_INFO_GoBackfromNotifyScr3 "GoBackfromNotifyScr:    OutgoingState"
   MMI_CM_INFO_GoBackfromNotifyScr4 "GoBackfromNotifyScr:    IncomingState"
   MMI_CM_INFO_GoBackfromNotifyScr5 "GoBackfromNotifyScr:    Dialpad Scr present"
   MMI_CM_INFO_GoBackfromNotifyScr6 "GoBackfromNotifyScr:    Active/Hold State"
   MMI_CM_INFO_GoBackfromNotifyScr7 "GoBackfromNotifyScr: Non CM Screen .. so just going back history"
   MMI_CM_INFO_GoBackfromNotifyScr8 "GoBackfromNotifyScr: WAP screen .. so just going back history"
   MMI_CM_INFO_GoBackfromNotifyScr9 "GoBackfromNotifyScr: active present .. go back to active"
   MMI_CM_INFO_GoBackfromNotifyScr10 "GoBackfromNotifyScr: in active screen .. just return"
   MMI_CM_INFO_GoBackfromNotifyScr11 "GoBackfromNotifyScr: entry active screen"
   MMI_CM_INFO_AdjustHistoryForCM1 "AdjustHistoryForCM: NotifySSFlag set.. so returning"
   MMI_CM_INFO_AdjustHistoryForCM2 "AdjustHistoryForCM:0 Calls,Getting out of CM"
   MMI_CM_INFO_AdjustHistoryForCM3 "AdjustHistoryForCM:    OutgoingState"
   MMI_CM_INFO_AdjustHistoryForCM4 "AdjustHistoryForCM:    IncomingState"
   MMI_CM_INFO_AdjustHistoryForCM5 "AdjustHistoryForCM:    Dialpad Scr present"
   MMI_CM_INFO_AdjustHistoryForCM6 "AdjustHistoryForCM:    Active/Hold State"
   MMI_CM_INFO_AdjustHistoryForCM7 "AdjustHistoryForCM: Non CM Screen .. so just going back history"
   MMI_CM_INFO_AdjustHistoryForCM8 "AdjustHistoryForCM: in active screen .. just return"
   MMI_CM_INFO_MakePsSendDTMFTone "DTMF Sent digit %c"
   MMI_CM_INFO_DeriveAndSetCallFeatures "Valid CC or SS Operation %d"
   MMI_CM_INFO_DeriveOutgoingCallIdRsp1 "Call ID of outgoing call is %d"
   MMI_CM_INFO_DeriveOutgoingCallIdRsp2 "In DeriveOutgoingCallIdRsp This is a bad call"
   MMI_CM_INFO_DeriveCallInfo "Call ID of Incoming call is %d"
   MMI_CM_INFO_DeriveCallInfoFromWait "Call ID of Waiting call is %d"
   MMI_CM_INFO_DeriveCcmValue "CCM Value is %d"
   MMI_CM_INFO_DeriveCcmWarning "AOC CCM value about to exceed"
   MMI_CM_INFO_CheckChldRequestSuccess "ERROR IN CHLD RESPONSE"
   MMI_CM_INFO_CheckFailureChld "Failed Chld %d"
   MMI_CM_INFO_PsCBackActivatedCCBS1 "PsCBackActivatedCCBS OK"
   MMI_CM_INFO_PsCBackActivatedCCBS2 "PsCBackActivatedCCBS FAIL"
   MMI_CM_INFO_KbCBackCallIncomingAccepted "dropping call, don't answer"
   MMI_CM_INFO_ProcessIncomingCallEvent1 "ProcessIncomingCallEvent in Idle State"
   MMI_CM_INFO_ProcessIncomingCallEvent2 "ProcessIncomingCallEvent in Outgoing State"
   MMI_CM_INFO_ProcessInvokedCcbs "ProcessCCBSInvokedEvent non incoming state"
   MMI_CM_INFO_ProcessEndCallIdAndGoBack1 "ProcessEndCallIdAndGoBack :IncomingState"
   MMI_CM_INFO_ProcessEndCallIdAndGoBack2 "ProcessEndCallIdAndGoBack :OutgoingState"
   MMI_CM_INFO_ProcessEndCallIdAndGoBack3 "ProcessEndCallIdAndGoBack: Redial Is Set"
   MMI_CM_INFO_ProcessEndCallIdAndGoBack4 "ProcessEndCallIdAndGoBack: HoldState"
   MMI_CM_INFO_ProcessEndCallIdAndGoBack5 "ProcessEndCallIdAndGoBack: ActiveState"
   MMI_CM_INFO_PsCBackIncomingCallAccepted1 "PsCBackIncomingCallAccepted OK"
   MMI_CM_INFO_PsCBackIncomingCallAccepted2 "PsCBackIncomingCallAccepted FAIL"
   MMI_CM_INFO_PsCBackCheckChldIncomingCallAccepted1 "PsCBackCheckChldIncomingCallAccepted OK"
   MMI_CM_INFO_PsCBackCheckChldIncomingCallAccepted2 "PsCBackCheckChldIncomingCallAccepted FAIL"
   MMI_CM_INFO_PsCBackActiveCallsHeld1 "PsCBackActiveCallsHeld OK"
   MMI_CM_INFO_PsCBackActiveCallsHeld2 "PsCBackActiveCallsHeld FAIL cause %d"
   MMI_CM_INFO_ProcessCallsHeld "ProcessCallsHeld incoming state"
   MMI_CM_INFO_CCBSDialResponse1 "CCBSDialResponse OK"
   MMI_CM_INFO_CCBSDialResponse2 "CCBSDialResponse FAIL"
   MMI_CM_INFO_EntryScrIncomingCallEvent "Converting waiting call to ringing call"
   MMI_CM_INFO_ExitScrShowSSEvent1 "ExitScrShowSSEvent: Cback Function called"
   MMI_CM_INFO_ExitScrShowSSEvent2 "ExitScrShowSSEvent: Going to Incomingcallscrn"
   MMI_CM_INFO_ExitScrShowSSEvent3 "ExitScrShowSSEvent: Going to Activecallscrn"
   MMI_CM_INFO_ExitScrShowSSEvent4 "ExitScrShowSSEvent: Executing waiting Function"

   MMI_CM_G1_TEST "group 1 message message"

   
   
   
   
   MMI_PHB_FUNC_TEST "func name log %d"
   MMI_PHB_WARN_TEST "warning message"
   MMI_PHB_ERROR_TEST "error message"
   MMI_PHB_INFO_TEST "info message"
   MMI_PHB_G4_TEST "group 4 message message"

   
   
   MMI_PHB_FUNC_PopulateLookUpTable_BEGIN "---[Phonebook.c] mmi_phb_lookup_table_populate() --> Begin Populate Entry = [%d] ---"
   MMI_PHB_FUNC_PopulateLookUpTable_END "---[Phonebook.c] mmi_phb_lookup_table_populate() --> End Populate Entry = [%d] ---"

   
   MMI_PHB_IMAGE_UPDATE_BY_INDEX "---[PhonebookInlineEdit.c] mmi_phb_image_update_by_index() --> Image Index = [%d] ---"
   MMI_PHB_IMAGE_DELETE_BY_INDEX "---[PhonebookInlineEdit.c] mmi_phb_image_delete_by_index() --> Image Index = [%d] ---"
   MMI_PHB_IMAGE_DUPLICATE_BY_INDEX "---[PhonebookInlineEdit.c] mmi_phb_image_duplicate_by_index() --> Dst Index = [%d] Src Index = [%d]---"
   MMI_PHB_IMAGE_COPY "---[PhonebookInlineEdit.c] mmi_phb_image_copy() ---"
   MMI_PHB_IMAGE_COPY_1 "---[PhonebookInlineEdit.c] mmi_phb_image_copy() --> Source and Destination are the same path.---"
   MMI_PHB_IMAGE_COPY_2 "---[PhonebookInlineEdit.c] mmi_phb_image_copy() --> Open Source File Fail---"
   MMI_PHB_IMAGE_COPY_3 "---[PhonebookInlineEdit.c] mmi_phb_image_copy() --> Open Destination File Fail---"   
   MMI_PHB_IMAGE_COPY_4 "---[PhonebookInlineEdit.c] mmi_phb_image_copy() --> Copy Fail  Read Result = [%d]  Write Result = [%d]---"   

   
   MMI_PHB_FUNC_lookUpNumber "---[PhonebookStubsToOthers.c] lookUpNumber() ---"
   
   MMI_PHB_FUNC_SendDataForCallerGrp "---[PhonebookStubsToOthers.c] mmi_phb_sms_send_data_for_group() --> Caller Group Member Count = [%d]---"   
   MMI_PHB_IMAGE_GET_PATH_FROM_ID_1 "---[PhonebookStubsToOthers.c] mmi_phb_image_get_path_from_id() --> Record Index = [%d]---"
   MMI_PHB_IMAGE_GET_PATH_FROM_ID_2 "---[PhonebookStubsToOthers.c] mmi_phb_image_get_path_from_id() --> Open File Result = [%d]---"
   MMI_PHB_IMAGE_GET_PATH_FROM_ID_3 "---[PhonebookStubsToOthers.c] mmi_phb_image_get_path_from_id() --> Get Image Success ---"


   
   
   
  

   

   
   
   MMI_VOBJ_INIT "--- [vObjects.c] mmi_vobj_init() ---"
   MMI_VOBJ_DEINIT "--- [vObjects.c] mmi_vobj_deinit() ---"
   MMI_VOBJ_IRDA_RECEIVE_IND "--- [vObjects.c] mmi_vobj_irda_receive_ind() ---"   
   MMI_VOBJ_ENTRY_IRDA_PROCESSING_SCREEN "--- [vObjects.c] mmi_vobj_entry_irda_processing_screen() ---"   
   MMI_VOBJ_REGISTER_SMS_REQ "--- [vObjects.c] mmi_vobj_register_sms_req() ===> port=[%d] ---"   
   MMI_VOBJ_REGISTER_VCARD_SMS_RSP "--- [vObjects.c] mmi_vobj_register_vcard_sms_rsp() ===> result=[%d] cause=[%d]---"   
   MMI_VOBJ_REGISTER_VCLNDR_SMS_RSP "--- [vObjects.c] mmi_vobj_register_vclndr_sms_rsp() ---"   
   MMI_VOBJ_SMS_RECEIVE_IND "--- [vObjects.c] mmi_vobj_sms_receive_ind() ===> port=[%d]---"   
   MMI_VOBJ_SMS_GET_INCOMING_MSG_REQ "--- [vObjects.c] mmi_vobj_sms_get_incoming_msg_req() ---"   
   MMI_VOBJ_SMS_GET_INCOMING_MSG_RSP "--- [vObjects.c] mmi_vobj_sms_get_incoming_msg_rsp() ---"      
   MMI_VOBJ_IS_PENDING_OBJECT "--- [vObjects.c] mmi_vobj_is_pending_object() ---"      
   MMI_VOBJ_ENTRY_RECV_OBJECT "--- [vObjects.c] mmi_vobj_entry_recv_object() ===> type=[%d]---"      
   MMI_VOBJ_CLEAR_ONE_FILE_BUFFER "--- [vObjects.c] mmi_vobj_clear_one_file_buffer() ---"      
   MMI_VOBJ_GET_FILE_BUFFER_SIZE "--- [vObjects.c] mmi_vobj_get_file_buffer_size() ===> begin=[%d] end=[%d]---"      


  

  


   	
   	
   	
   	
   	
	TRC_MMI_CB_DELETE_CB_MESSAGE "[CB][File]CellBroadcast.c [Function]DeleteCBMessage()[0] [Value]delete_index = %d"
	TRC_MMI_CB_DELETE_CB_MESSAGE_1 "[CB][File]CellBroadcast.c [Function]DeleteCBMessage()[1] [Value]error1 = %d"
	TRC_MMI_CB_DELETE_CB_MESSAGE_2 "[CB][File]CellBroadcast.c [Function]DeleteCBMessage()[2] [Value]error2 = %d"
	TRC_MMI_CB_DELETE_CB_MESSAGE_3 "[CB][File]CellBroadcast.c [Function]DeleteCBMessage()[3] [Value]error3 = %d"
	TRC_MMI_CB_ADD_CB_MESSAGE "[CB][File]CellBroadcast.c [Function]AddCBMessage()[0] [Value]currCBTotal = %d"
	TRC_MMI_CB_ADD_CB_MESSAGE_1 "[CB][File]CellBroadcast.c [Function]AddCBMessage()[1] [Value]error = %d"
	TRC_MMI_CB_READ_CHNL_INFO_FROM_NVRAM "[CB][File]CellBroadcast.c [Function]ReadCbChnlInfoFromNvram() [Value]error = %d"
	TRC_MMI_CB_WRITE_CHNL_INFO_FROM_NVRAM "[CB][File]CellBroadcast.c [Function]WriteCbChnlInfoToNvram() [Value]error = %d"
	TRC_MMI_CB_READ_MESSAGE_INFO_FROM_NVRAM "[CB][File]CellBroadcast.c [Function]ReadCBMessageInfoFromNvram() [Value]error = %d"
	TRC_MMI_CB_WRITE_MESSAGE_INFO_FROM_NVRAM "[CB][File]CellBroadcast.c [Function]WriteCBMessageInfoFromNvram() [Value]error = %d"
	TRC_MMI_CB_READ_CB_MESSAGE_CONTENT_FROM_NVRAM "[CB][File]CellBroadcast.c [Function]ReadCBMessageContent()[0]"
	TRC_MMI_CB_READ_CB_MESSAGE_CONTENT_FROM_NVRAM_1 "[CB][File]CellBroadcast.c [Function]ReadCBMessageContent()[1] [Value]alphabetType = %d"
	TRC_MMI_CB_GET_CB_MODE_RSP_ACTIVE "[CB][File]CellBroadcast.c [Function]mmi_msg_get_cb_mode_rsp_active()"
	TRC_MMI_CB_GET_CB_MODE_RSP_DISPLAY "[CB][File]CellBroadcast.c [Function]mmi_msg_get_cb_mode_rsp_display()[0]"
	TRC_MMI_CB_GET_CB_MODE_RSP_DISPLAY_1 "[CB][File]CellBroadcast.c [Function]mmi_msg_get_cb_mode_rsp_display()[1] [Event] cb_info is filled up"
	TRC_MMI_CB_GET_CB_MODE_RSP_LANGUAGE "[CB][File]CellBroadcast.c [Function]mmi_msg_get_cb_mode_rsp_language()"
	TRC_MMI_CB_SET_CB_MODE_RSP "[CB][File]CellBroadcast.c [Function]mmi_msg_set_cb_mode_rsp() [Value]result = %d"
	TRC_MMI_CB_SUBSCRIBE_CB_REQ "[CB][File]CellBroadcast.c [Function]mmi_msg_subscribe_cb_req()"
	TRC_MMI_CB_SUBSCRIBE_CB_RSP "[CB][File]CellBroadcast.c [Function]mmi_msg_subscribe_cb_req() [Value]result = %d"
	TRC_MMI_CB_DEINIT_CELL_BROADCAST_APP "[CB][File]CellBroadcast.c [Function]DeInitCellBroadcastApp()"
	TRC_MMI_CB_RESET_CB_INFO_STRUCTS "[CB][File]CellBroadcast.c [Function]ResetCBInfoStructs()"
	TRC_MMI_CB_INIT_CELL_BROADCAST_APP "[CB][File]CellBroadcast.c [Function]InitCellBroadcastApp()"
	TRC_MMI_CB_MMI_MSG_DELETE_CB_MESSAGE "[CB][File]CellBroadcast.c [Function]mmi_msg_delete_cb_message()[0] [Value]currindex = %d"
	TRC_MMI_CB_MMI_MSG_DELETE_CB_MESSAGE_1 "[CB][File]CellBroadcast.c [Function]mmi_msg_delete_cb_message()[1] [Event]Msgpage > 0"
	TRC_MMI_CB_ENTRY_NEW_CB_IND_SINGLE_MODE "[CB][File]CellBroadcast.c [Function]mmi_msg_entry_new_cb_ind() [Event]Single Mode"
	TRC_MMI_CB_ENTRY_NEW_CB_IND_TWO_MODE "[CB][File]CellBroadcast.c [Function]mmi_msg_entry_new_cb_ind() [Value]Display Mode = %d"
	TRC_MMI_CB_CONVERT_CB_FOR_DISPLAY "[CB][File]CellBroadcast.c [Function]ConvertCBForDisplay() [Value]len = %d, format = %d"
	TRC_MMI_CB_READ_CONTENT_FOR_DISPLAY "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_read_content_for_display() [Value]index = %d, content_state = %d"
	TRC_MMI_CB_READ_CONTENT_FROM_NVRAM "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_read_content_from_nvram()[0] [Value]start_page = %d, page_num = %d"
	TRC_MMI_CB_READ_CONTENT_FROM_NVRAM_1 "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_read_content_from_nvram()[1] [Value]error = %d"
	TRC_MMI_CB_MMI_MSG_NEW_CB_IND "[CB][File]CellBroadcast.c [Function]mmi_msg_new_cb_ind()[0] [Event]Begin"
	TRC_MMI_CB_MMI_MSG_NEW_CB_IND_1 "[CB][File]CellBroadcast.c [Function]mmi_msg_new_cb_ind()[1] [Event]Display In Idle Feature"
	TRC_MMI_CB_MMI_MSG_NEW_CB_IND_2 "[CB][File]CellBroadcast.c [Function]mmi_msg_new_cb_ind()[2] [Event]Two Display Mode"
	TRC_MMI_CB_MMI_MSG_NEW_CB_IND_3 "[CB][File]CellBroadcast.c [Function]mmi_msg_new_cb_ind()[3] [Event]Single Display Mode"
	TRC_MMI_CB_NEED_NEW_CB_IND "[CB][File]CellBroadcast.c [Function]mmi_msg_need_new_cb_ind()[0] [Value]currCBTotal = %d"
	TRC_MMI_CB_NEED_NEW_CB_IND_1 "[CB][File]CellBroadcast.c [Function]mmi_msg_need_new_cb_ind()[1] [Value]i = %d"

	TRC_MMI_CB_HANDLE_NEW_CB_IND "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[0] [Event]Begin"
	TRC_MMI_CB_HANDLE_NEW_CB_IND_1 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[1] [Value]Page = %d"
	TRC_MMI_CB_HANDLE_NEW_CB_IND_2 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[2] [Value]CurrTotalPage = %d"
	TRC_MMI_CB_HANDLE_NEW_CB_IND_3 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[3] [Value]is_immediate_mode = %d"
	TRC_MMI_CB_HANDLE_NEW_CB_IND_4 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[4] [Value]currCBTotal = %d"
	TRC_MMI_CB_HANDLE_NEW_CB_IND_5 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[5] [Value]currindex = %d"
	TRC_MMI_CB_HANDLE_NEW_CB_IND_6 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[6] [Value]immediate_index = %d"   
	TRC_MMI_CB_HANDLE_NEW_CB_IND_7 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[7] [Value]deleteIndex = %d"
	TRC_MMI_CB_HANDLE_NEW_CB_IND_8 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[8] [Value]deleteIndex = %d"
	TRC_MMI_CB_HANDLE_NEW_CB_IND_9 "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_new_cb_ind()[9] [Event]i == curr_total_message"
   
	TRC_MMI_CB_SET_DISPLAY_IN_IDLE_FLAG "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_set_display_in_idle_flag() [Value]flag = %d"
	TRC_MMI_CB_GET_DISPLAY_IN_IDLE_FLAG "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_get_display_in_idle_flag() [Value]display_in_idle_flag = %d"
	TRC_MMI_CB_GET_CB_CONTENT "[CB][File]CellBroadcast.c [Function]mmi_msg_get_cb_content()"
	TRC_MMI_CB_HANDLE_CB_GS_CHANGE_IND "[CB][File]CellBroadcast.c [Function]mmi_msg_handle_cb_gs_change_ind() [Value]geography_type = %d"
	TRC_MMI_CB_DISPLAY_CONTENT_IN_IDLE "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_display_content_in_idle() [Value]currCBTotal = %d"

	TRC_MMI_CB_IS_IDLE_MSG_SUBSCRIBE "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_is_idle_msg_subscribe()[0] [Value]index = %d"
	TRC_MMI_CB_IS_IDLE_MSG_SUBSCRIBE_1 "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_is_idle_msg_subscribe()[1] [Value]mi = %d"

	TRC_MMI_CB_NEED_DISPLAY_IN_IDLE "[CB][File]CellBroadcast.c [Function]mmi_msg_cb_need_display_in_idle() [Value]currCBTotal = %d"


#line 523 "..\\..\\plutommi\\mmi\\inc\\MMI_common_app_trc.h"

#line 1055 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"
#line 1 "..\\..\\plutommi\\mmi\\inc\\MMI_conn_app_trc.h"


























































































    
    
    

    
    MMI_CCA_INIT_BEGIN "[OTAP][CCA] Initialising..."
    MMI_CCA_INIT_END "[OTAP][CCA] Initialised"
    MMI_CCA_MALLOC_NULL "[OTAP][CCA] malloc returns 0."
    MMI_CCA_RESET "[OTAP][CCA] Reset CCA"
    MMI_CCA_MALLOC_MEMORY_INFO "[OTAP][CCA] MemoryFull (alloc=%d,max-allow-size=%d,total-mem-left=%d)"
    MMI_CCA_RESET_CONTEXT "[OTAP][CCA] mmi_cca_reset_context"
    MMI_CCA_RESET_PROVISIONING_CONTEXT "[OTAP][CCA] mmi_cca_reset_provisioning_context"
    MMI_CCA_HAS_PROVISIONING_CONTEXT "[OTAP][CCA] mmi_cca_has_provisioning_context (has=%d)"
    MMI_CCA_START_PROVISIONING_JOB "[OTAP][CCA] mmi_cca_start_provisioning_job (state=%d)"
    MMI_CCA_RESET_ASYNC_CONTEXT "[OTAP][CCA] mmi_cca_reset_async_context"
    MMI_CCA_HAS_ASYNC_CONTEXT "[OTAP][CCA] mmi_cca_has_async_context (oper=%d)"
    MMI_CCA_START_ASYNC_JOB "[OTAP][CCA] mmi_cca_start_async_job (srcmod=%d,state=%d,oper=%d)"
    MMI_CCA_HAS_QUEUED_JOB "[OTAP][CCA] mmi_cca_has_queued_job"
    MMI_CCA_DO_NEXT_QUEUED_JOB "[OTAP][CCA] mmi_cca_do_next_queued_job"

    MMI_CCA_NEW_CONFIG_RESULT "[OTAP][CCA] mmi_cca_new_config_result (config_id=%X, result=%d)"
    MMI_CCA_NEW_CONFIG_RESULT_ERROR_EXIST "[OTAP][CCA] config ID already exists"
    MMI_CCA_GET_CONFIG_RESULT "[OTAP][CCA] mmi_cca_get_config_result (config_id=%X)"
    MMI_CCA_CONFIG_RESULT_ERROR_CONFIG_ID_NOT_FOUND "[OTAP][CCA] config ID not found"
    MMI_CCA_UPDATE_CONFIG_RESULT "[OTAP][CCA] mmi_cca_update_config_result (config_id=%X, result=%d)"
    MMI_CCA_CONFIG_COMPLETE "[OTAP][CCA] mmi_cca_configure_complete"
    MMI_CCA_APP_CONFIG_RSP_HDLR "[OTAP][CCA] mmi_cca_app_configure_rsp_hdlr(config_id=%X,status=%d)"
    MMI_CCA_APP_CONFIG_RSP_HDLR_DEFAULT_STATUS "[OTAP][CCA] ERROR: return staus must be one of:\n\t{CCA_STATUS_OK, CCA_STATUS_INVALID_SETTING, CCA_STATUS_SETTING_SKIPPED, CCA_STATUS_ENDKEY_PRESSED}"
    MMI_CCA_SOURCE_NEW_DOC_IND_HDLR "mmi_cca_source_new_doc_ind_hdlr(spec_id=%X,hConfig=%X)"
    MMI_CCA_SOURCE_NEW_DOC_IND_HDLR_BUSY "[OTAP][CCA] pending provisioning job (state=%d)"

    MMI_CCA_GET_PROF_IND_HDLR "[OTAP][CCA] mmi_cca_get_prof_ind_hdlr (srcmod=%d,app_id=%X,prof_id=%d)"
    MMI_CCA_GET_PROF_IND_HDLR_BUSY "[OTAP][CCA] failed async-GET request due to CCA non-idle (state=%d)"
    MMI_CCA_UPDATE_PROF_IND_HDLR "[OTAP][CCA] mmi_cca_update_prof_ind_hdlr (srcmod=%d,app_id=%X,prof_id=%d,hConfig=%X)"
    MMI_CCA_UPDATE_PROF_IND_HDLR_BUSY "[OTAP][CCA] failed async-UPDATE request due to CCA non-idle (state=%d)"
    MMI_CCA_APP_GET_PROF_RSP_HDLR_CCA_STATE "[OTAP][CCA] mmi_cca_app_get_prof_rsp_hdlr (state=%d,oper=%d)"
    MMI_CCA_APP_GET_PROF_RSP_HDLR_DATA_INFO "[OTAP][CCA] mmi_cca_app_get_prof_rsp_hdlr (app_id=%X,prof_id=%d,hConfig=%X,result=%d)"
    MMI_CCA_APP_UPDATE_PROF_RSP_HDLR_CCA_STATE "[OTAP][CCA] mmi_cca_app_update_prof_rsp_hdlr (state=%d,oper=%d)"
    MMI_CCA_APP_UPDATE_PROF_RSP_HDLR_DATA_INFO "[OTAP][CCA] mmi_cca_app_update_prof_rsp_hdlr (app_id=%X,prof_id=%d,hConfig=%X,result=%d)"
 
    MMI_CCA_SEND_APP_CONFIG_IND "[OTAP][CCA] mmi_cca_send_app_configure_ind (config_id=%X,hConfig=%X,crtConfigIndex=%d)"
    MMI_CCA_SEND_NEW_DOC_CONTINUE_IND "[OTAP][CCA] mmi_cca_send_new_doc_continue_ind"
    MMI_CCA_SEND_SOURCE_NEW_DOC_RSP "[OTAP][CCA] mmi_cca_send_source_new_doc_rsp"
    MMI_CCA_SEND_SOURCE_UI_NEW_SETTING_RSP "[OTAP][CCA] mmi_cca_send_source_ui_new_setting_rsp (trans_id=%d,response=%d)"
    MMI_CCA_SEND_SOURCE_UI_AUTH_RSP "[OTAP][CCA] mmi_cca_send_source_ui_auth_rsp (trans_id=%d,pin=%s,status=%d)"
    MMI_CCA_SEND_CCA_APP_CONFIGURE_RSP "[OTAP][CCA] mmi_cca_send_cca_app_configure_rsp (conf_id=%X,doc_hdl=%X,status=%d)"

    MMI_CCA_SEND_CCA_GET_PROF_RSP "[OTAP][CCA] mmi_cca_send_cca_get_prof_rsp (dest_mod_id=%d,app_id=%X,prof_id=%d,hConfig=%X,result=%d)"
    MMI_CCA_SEND_CCA_APP_GET_PROF_IND "[OTAP][CCA] mmi_cca_send_cca_app_get_prof_ind (app_id=%X,prof_id=%d)"
    MMI_CCA_SEND_CCA_UPDATE_PROF_RSP "[OTAP][CCA] mmi_cca_send_cca_update_prof_rsp (dest_mod_id=%d,app_id=%X,prof_id=%d,hConfig=%X,result=%d)"
    MMI_CCA_SEND_CCA_APP_UPDATE_PROF_IND "[OTAP][CCA] mmi_cca_send_cca_app_update_prof_ind (app_id=%X,prof_id=%d,hConfig=%X)"
    MMI_CCA_SEND_CCA_APP_GET_PROF_RSP "[OTAP][CCA] mmi_cca_send_cca_app_get_prof_rsp (app_id=%X,prof_id=%d,hConfig=%X,result=%d)"
    MMI_CCA_SEND_CCA_APP_UPDATE_PROF_RSP "[OTAP][CCA] mmi_cca_send_cca_app_update_prof_rsp (app_id=%X,prof_id=%d,hConfig=%X,result=%d)"
 
    
    MMI_CCA_UI_ENTRY_SETTINGS_INFO "[OTAP][CCA] mmi_cca_ui_entry_settings_info()"
    MMI_CCA_CHECK_APP_CONFIG_ID "[OTAP][CCA] \t (index=%d, config_id=%X)"
    MMI_CCA_CHECK_APP_L1NODE_NOT_FOUND "[OTAP][CCA] -->level 1 node symbol not found (i=%d,configID=%d)"
    MMI_CCA_CHECK_APP_APPCHECK_FAIL "[OTAP][CCA] -->app check failed (i=%d,configID=%d)"
    MMI_CCA_CHECK_APP_APPID_NOT_FOUND "[OTAP][CCA] -->appid not found in doc (i=%d,configID=%d)"
    MMI_CCA_CHECK_APP_CHECK_STATUS "[OTAP][CCA] appid found result (i=%d,configID=%d,result=%d)"
    MMI_CCA_CHECK_APP_APPID_NOT_DEFINED "[OTAP][CCA] -->no appid defined"
    MMI_CCA_CHECK_APP_INCLUDED_APPNUM "[OTAP][CCA] -->included in configuration (i=%d,configID=%d,num-app=%d)"
    MMI_CCA_UI_SHOW_POPUP_IN_CALL "[OTAP][CCA] mmi_cca_ui_show_popup(strid=%d,imgid=%d) blocked due to in-call"
 
    
    MMI_CCA_OMA_NEW_DOC_CONTINUE "[OTAP][CCA] mmi_cca_oma_new_doc_continue (crtConfigIndex=%d)"
    MMI_CCA_OMA_NEW_DOC_CONTINUE_FIND_APP "[OTAP][CCA] find an app included in configuration (configID=%d)"
    MMI_CCA_OMA_NEW_DOC_PROCESS_NEXT_APP "[OTAP][CCA] mmi_cca_oma_new_doc_process_next_app (index=%d)"
    MMI_CCA_OMA_VALIDATE_ADD_ID "[OTAP][CCA] mmi_cca_oma_validate_add_id (count=%d,total=%d) FULL!"
    MMI_CCA_OMA_VALIDATE_ADD_NODE "[OTAP][CCA] mmi_cca_oma_validate_add_node (count=%d,total=%d) FULL!"

    
    MMI_CCA_DISPATCHER_PROV "[OTAP][CCA] mmi_cca_dispatch_mmi_cca_app_configure_ind (config_id=%X)"
    MMI_CCA_DISPATCHER_PROV_APP_NOT_SUPPORT "[OTAP][CCA] mmi_cca_dispatch_mmi_cca_app_configure_ind() app not supported"
    MMI_CCA_DISPATCHER_PROV_CONFIG_ID_NOT_FOUND "[OTAP][CCA] mmi_cca_dispatch_mmi_cca_app_configure_ind() config id not found"
    MMI_CCA_DISPATCHER_ASYNC "[OTAP][CCA] mmi_cca_dispatch_mmi_profile_operations (oper=%d,app_id=%X)"
    MMI_CCA_DISPATCHER_ASYNC_GET "[OTAP][CCA] OPER-GET (app_id=%X,prof_id=%d)"
    MMI_CCA_DISPATCHER_ASYNC_UPDATE "[OTAP][CCA] OPER-UPDATE (app_id=%X,prof_id=%d,hConfig=%X)"
    MMI_CCA_DISPATCHER_ASYNC_APP_NOT_FOUND "[OTAP][CCA] mmi_cca_dispatch_mmi_profile_operations() app not found"





MMI_CCA_WLAN_RECV_DOC "[OTAP][WLAN] Start WLAN OTAP."
MMI_CCA_WLAN_SEND_RSP "[OTAP][WLAN] Finish WLAN OTAP, result: %d"
MMI_CCA_WLAN_ENCRYPTION "[OTAP][WLAN] encryption: %d"
MMI_CCA_WLAN_AUTHENTICATION "[OTAP][WLAN] authentication: %d"
MMI_CCA_WLAN_PRE_DISCARD_PROF "[OTAP][WLAN] Discard profile during document extraction."
MMI_CCA_WLAN_POST_DISCARD_PROF "[OTAP][WLAN] Discard profile during post validation."


   
   
   MMI_USB_FUNC_DETECT_QUERY_SCR "[UsbMMI] EntryUsbDetectQueryScr() "
   MMI_USB_FUNC_EXIT_DETECT_QUERY_SCR "[UsbMMI] ExitUsbDetectQueryScr() "
   MMI_USB_FUNC_DETECT_SCR_END_KEY_HDLR "[UsbMMI] UsbDetectScrENDKeyHdlr() "
   MMI_USB_FUNC_PEND_DETECT_TIMEOUT "[UsbMMI] PendingUsbDetectionTimeoutHdlr() "
   MMI_USB_FUNC_START_TIMER "[UsbMMI] PendingUsbDetectionHdlr() "
   MMI_USB_FUNC_DETECT_SCR "[UsbMMI] UsbDetectIndHdlr() "
   MMI_USB_FUNC_CONF_FIRST_PAGE "[UsbMMI] UsbConfigFirstPage(): mode = %d "
   MMI_USB_FUNC_CONF_RSP_HDLR "[UsbMMI] UsbConfigRspHdlr() "
   MMI_USB_FUNC_CONF_MS "[UsbMMI] UsbConfigMassStorage() "
   MMI_USB_FUNC_CONF_CDCACM "[UsbMMI] UsbConfigCDCACM() "
   MMI_USB_FUNC_UART_SWITCH_RSP_HDLE "[UsbMMI] UsbUartSwitchRspHdlr() "
   MMI_USB_FUNC_GET_UART_PORT_RSP_HDLE "[UsbMMI] UsbGetUartPortRspHdlr() "


   
   MMI_USB_G7_CONF_SCR_NOT_ALLOW "[UsbMMI] PermitUsbCfgScreenDisplay(): FALSE "
   MMI_USB_G7_CONF_SCR_ALLOW "[UsbMMI] PermitUsbCfgScreenDisplay(): TRUE "
   MMI_USB_G7_DETECT_SCR_END_KEY "[UsbMMI] UsbDetectScrENDKeyHdlr(): Handler-> %X "
   MMI_USB_G7_CONF_AS_MS "[UsbMMI] UsbDetectScrLskHdlr(): MS Selected "
   MMI_USB_G7_CONF_AS_CDCACM "[UsbMMI] UsbDetectScrLskHdlr(): CDCACM Selected "
   MMI_USB_G7_CONF_AS_NOTHING "[UsbMMI] UsbDetectScrLskHdlr(): Unrecognized! "
   MMI_USB_G7_PEND_DETECT_TIMEOUT_ALLOW "[UsbMMI] PendingUsbDetectionTimeoutHdlr(): Enter Config Screen "
   MMI_USB_G7_PEND_DETECT_TIMEOUT_NOT_ALLOW "[UsbMMI] PendingUsbDetectionTimeoutHdlr(): Wait again "
   MMI_USB_G7_START_PEND_TIMEER "[UsbMMI] PendingUsbDetectionHdlr(): Start Timer "
   MMI_USB_G7_DETECT_SCR_PLUGIN "[UsbMMI] UsbDetectIndHdlr(): Plug in "
   MMI_USB_G7_DETECT_SCR_PLUGOUT "[UsbMMI] UsbDetectIndHdlr(): Plug out "
   MMI_USB_G7_SEND_SWITCH_PORT "[UsbMMI] SendUsbUartSwitchToHW(): app:%d, new_port: %d"



   
   MMI_USB_CUR_STATE "[UsbMMI] current state (%d)"
   MMI_USB_STATE_TRANSITION "[UsbMMI] state transition. (%d -> %d)"

    
    
    
    MMI_DA_RB_KILL "*--- mmi_da_rb_kill(), reader = [%d] ---*"
    MMI_DA_RB_KILL2 "*--- mmi_da_rb_kill() ---*"
    MMI_DA_RB_FETCH "*--- mmi_da_rb_fetch(), reader = [%d] ---*"
    MMI_DA_RB_INSERT "*--- mmi_da_rb_insert(), writer = [%d] ---*"
    MMI_DA_STACK_PUSH "*--- mmi_da_stack_push(), stack_size = [%d] ---*"
    MMI_DA_STACK_POP "*--- mmi_da_stack_pop(), stack_size = [%d] ---*"
    MMI_DA_FINALLY_GO_BACK_HISTORY "*--- mmi_da_finally_go_back_history() ---*"
    MMI_DA_ENTER_IDLE_SCREEN_NOTIFY "*--- mmi_da_enter_idle_screen_notiry(), stack_size = [%d] ---*"
    MMI_DA_EXIT_NEW_PUSH_IND "*--- mmi_da_exit_new_push_ind() ---*"
    MMI_DA_ENTRY_NEW_PUSH_IND "*--- mmi_da_entry_new_push_ind() ---*"
    MMI_DA_PROCESS_DRM_FILE "*--- mmi_da_process_drm_file(), result = [%d] ---*"
    MMI_DA_DOWNLOAD_FILE "*--- mmi_da_entry_download_file() ---*"
    MMI_DA_DISPATCH_FILE "*--- mmi_da_entry_dispatch_file() ---*"
    MMI_DA_RECV_GET_FILE_IND "*--- mmi_da_recv_get_file_ind() ---*"
    MMI_DA_GET_DRIVE_CALLBACK "*--- mmi_da_get_drive_callback(), drv = [%c] ---*"
    MMI_DA_ENTRY_SAVE "*--- mmi_da_entry_save() ---*"
    MMI_DA_FINAL_STATE "*--- mmi_da_final_state(), action = [%d], state = [%d] ---*"
    MMI_DA_FINAL_STATE_DRM "*--- mmi_Da_final_state_drm, serial = [%d], returnValue = [%d] ---*"
    MMI_DA_DISPATCH_TO_APP_INTERNAL "*---mmi_da_dispatch_to_app_internal() ---*"
    MMI_DA_DISPATCH_TO_APP "*--- mmi_da_dispatch_to_app ---*"
    MMI_DA_REPORT_TO_APP "*--- mmi_da_report_to_app , cause = [%d], seq_num = [%d], acc_size = [%d] ---*"
    MMI_DA_GET_SETTING "*--- mmi_da_get_setting, %d %d %d %d %d %d ---*"
    MMI_DA_DRM_TIMEOUT_HDLR "*--- mmi_da_drm_timeout_hdlr, returnValue = [%d] ---*"


    MMI_DA_OMA_FINAL "*--- mmi_da_oma_final() ---*"
    MMI_DA_OMA_SEND_SET_CHANNEL_REQ "*--- mmi_da_oma_send_set_channal_req() ---*"
    MMI_DA_OMA_RECV_SET_CHANNEL_RSP "*--- mmi_da_oma_recv_set_channel_rsp() ---*"
    MMI_DA_OMA_SEND_UNSET_CHANNEL_REQ "*--- mmi_da_oma_send_unset_channel_req() ---*"
    MMI_DA_OMA_RECV_UNSET_CHANNEL_RSP "*--- mmi_da_oma_recv_unset_channel_req() ---*"
    MMI_DA_OMA_SEND_HTTP_REQ "*--- mmi_da_oma_send_http_req(), request_id = [%d] ---*"
    MMI_DA_OMA_RECV_HTTP_RSP "*--- mmi_da_oma_recv_http_rsp() ---*"
    MMI_DA_OMA_SEND_CANCEL_REQ "*--- mmi_da_oma_send_cancel_req() ---*"
    MMI_DA_OMA_RECV_CANCEL_RSP "*--- mmi_da_recv_cancel_rsp() ---*"
    MMI_DA_OMA_RECV_DL_PROGRESS_IND "*--- mmi_da_oma_recv_dl_progress_ind(), seq = [%d], size = [%d] ---*"
    MMI_DA_OMA_SEND_REPORT "*--- mmi_da_oma_send_report(), error = [%d] ---*"
    MMI_DA_OMA_ENTRY_PERCENTAGE_BAR "*--- mmi_da_oma_entry_percentage_bar ---*"
    MMI_DA_DD_READ_ELEMENT "*--- mmi_da_read_element, item = [%d] ---*"
    MMI_DA_OMA_ERROR "*--- mmi_da_oma_error , error place = [%d] --- *"

    MMI_TRC_DA_FUNC "--- [mmi_da] Func[0x%x], (J=%d,P=%d) ---"
    MMI_TRC_DA_FUNC_EX "--- [mmi_da] Func[0x%x], (J=%d,P=%d), Para:%d,%d,%d ---"
    MMI_TRC_DA_END_FUNC "--- [mmi_da] End func[0x%x], (J=%d,P=%d) ---"
    MMI_TRC_DA_MIMETYPE "--- [mmi_da] Mime-type is [%s] ---"


    MMI_DTCNT_APP_SELECT_OK "[DATA ACCOUNT] App Select Account Result = [%d]"   
    MMI_DTCNT_PS_LIST_IND "[DATA ACCOUNT] Wap Account List Ind app_id = [%d], bearer_scrope = [%d], Num_id = [%d]"    
    MMI_DTCNT_PS_LIST_SHOW_BEARER "[DATA ACCOUNT] Wap Account List bearer type bearer = [%d]"    

    
    MMI_DTCNT_OTA_SET_GPRS_REQ "[DATA ACCOUNT OTA] OTA Set GPRS Account Req acct_id = [%d], MAX_ID = [%d]"    
    MMI_DTCNT_OTA_INTALL_GPRS "[DATA ACCOUNT OTA] OTA Install GPRS Account  acct_id = [%d], index = [%d]"    
    MMI_DTCNT_OTA_INTALL_ABORT "[DATA ACCOUNT OTA] OTA Install ABORT!"    
    MMI_DTCNT_OTA_INTALL_ERROR_NAP_ID "[DATA ACCOUNT OTA] OTA Install Error Napid!" 
    MMI_DTCNT_OTA_INTALL_ERROR_AUTHTYPE "[DATA ACCOUNT OTA] OTA Install Error AuthType!" 
    MMI_DTCNT_OTA_INTALL_ERROR_CALLTYPE "[DATA ACCOUNT OTA] OTA Install Error CallType!" 
    MMI_DTCNT_OTA_INTALL_ERROR_ADDR "[DATA ACCOUNT OTA] OTA Install Error Address!" 
    MMI_DTCNT_OTA_INTALL_ERROR_BEARER "[DATA ACCOUNT OTA] OTA Install Error Bearer!" 
    MMI_DTCNT_OTA_INTALL_BEARER_CSD "[DATA ACCOUNT OTA] OTA Install Bearer = CSD!" 
    MMI_DTCNT_OTA_INTALL_BEARER_GPRS "[DATA ACCOUNT OTA] OTA Install Bearer = GPRS!" 
    MMI_DTCNT_OTA_INTALL_CSD "[DATA ACCOUNT OTA] OTA Install CSD Account  acct_id = [%d], index = [%d]"    
    MMI_DTCNT_OTA_INTALL_RSP_TO_CCA "[DATA ACCOUNT OTA] OTA Install RSP TO CCA!"    
    MMI_DTCNT_OTA_PROC_CCA_DOC "[DATA ACCOUNT OTA]  mmi_dtcnt_ota_proc_cca_doc!"
    MMI_DTCNT_OTA_INSTALL_NAME_LEN "[DATA ACCOUNT OTA]  install name string len = [%d]"
    

    
    MMI_DTCNT_DM_RECEIVE_IND "[DATA ACCOUNT OTA]  DM RECEIVE IND!"    
    MMI_DTCNT_DM_UPDATE_IND "[DATA ACCOUNT OTA]  DM UPDATE IND!"    
    MMI_DTCNT_DM_BEARER_TYPE "[DATA ACCOUNT OTA]  DM Bearer Type = [%d]"    
    MMI_DTCNT_DM_GET_CCA_BY_CSD "[DATA ACCOUNT OTA]  mmi_dtcnt_get_cca_by_csd_prof acct_id = [%d]"    
    MMI_DTCNT_DM_GET_CCA_BY_GPRS "[DATA ACCOUNT OTA]  mmi_dtcnt_get_cca_by_gprs_prof acct_id = [%d]"    
    MMI_DTCNT_DM_GET_BEARER_BY_CCA "[DATA ACCOUNT OTA]  mmi_dtcnt_get_prof_by_cca bearer = [%d]"    
    MMI_DTCNT_DM_SAVE_CSD_PROF "[DATA ACCOUNT OTA]  Save CSD Profile acct_id = [%d]"    
    MMI_DTCNT_DM_SAVE_GPRS_PROF "[DATA ACCOUNT OTA]  Save GPRS Profile acct_id = [%d]"    
    MMI_DTCNT_DM_STRING_IFDCS "[DATA ACCOUNT OTA]  DM String Ifdcs acct_id = [%d], IFdcs = [%d]"    
    MMI_DTCNT_DM_READY_CHECK "[DATA ACCOUNT OTA]  DM READY CHECK"    

    
    MMI_DTCNT_WIFI_DO_ACTION_INIT "[DATA ACCOUNT WIFI]  Do Action Init!"    
    MMI_DTCNT_WIFI_DO_ACTION_DEINIT "[DATA ACCOUNT WIFI]  Do Action Deinit!"    
    MMI_DTCNT_WIFI_DO_ACTION_CONNECT "[DATA ACCOUNT WIFI]  Do Action Connect!"    
    MMI_DTCNT_WIFI_DO_ACTION_DISCONNECT "[DATA ACCOUNT WIFI]  Do Action Disconnect!"    
    MMI_DTCNT_WIFI_DO_ACTION_SCAN "[DATA ACCOUNT WIFI]  Do Action Scan!"    

    MMI_DTCNT_WIFI_SEND_INIT_REQ "[DATA ACCOUNT WIFI]  Send Init Req pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_DEINIT_REQ "[DATA ACCOUNT WIFI]  Send Deinit Req pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_CONNECT_REQ "[DATA ACCOUNT WIFI]  Send Connect Req pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_DISCONNECT_REQ "[DATA ACCOUNT WIFI]  Send Disconnect Req pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_LIST_REQ "[DATA ACCOUNT WIFI]  Send List Req pre_status = [%d], status = [%d]"    

    MMI_DTCNT_WIFI_SEND_INIT_CNF "[DATA ACCOUNT WIFI]  Send Init Cnf pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_DEINIT_CNF "[DATA ACCOUNT WIFI]  Send Deinit Cnf pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_CONNECT_CNF "[DATA ACCOUNT WIFI]  Send Connect Cnf pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_DISCONNECT_CNF "[DATA ACCOUNT WIFI]  Send Disconnect Cnf pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_CONNECT_IND "[DATA ACCOUNT WIFI]  Send Connect Ind pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_DISCONNECT_IND "[DATA ACCOUNT WIFI]  Send Disconnect Ind pre_status = [%d], status = [%d]"    
    MMI_DTCNT_WIFI_SEND_LIST_CNF "[DATA ACCOUNT WIFI]  Send List Cnf pre_status = [%d], status = [%d]"    


    MMI_DTCNT_WIFI_SEND_DEINIT_CNF_1 "[DATA ACCOUNT WIFI]  deinit delete process screen!"    
    MMI_DTCNT_WIFI_SEND_DISCONNECT_CNF_1 "[DATA ACCOUNT WIFI]  disconnect delete process screen!"    
    MMI_DTCNT_WIFI_ALWAYS_ASK_CONNECT_REQ "[DATA ACCOUNT WIFI]  Always Ask Connect Conn Flag = [%d], before conn flag = [%d]"    
    MMI_DTCNT_WIFI_ALWAYS_ASK_CONNECT_PROF "[DATA ACCOUNT WIFI]  Always Ask Connect Prof Pre_status = [%d], before conn flag = [%d]"    

    
    MMI_DTCNT_WIFI_OTA_FAIL_ENCRYPT "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL ENCRYPT!"  
    MMI_DTCNT_WIFI_OTA_FAIL_ENCRYPT_SWITCH "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL ENCRYPT_SWITCH!"  
    MMI_DTCNT_WIFI_OTA_FAIL_AUTH "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL AUTH!"  
    MMI_DTCNT_WIFI_OTA_FAIL_AUTH_SWITCH "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL AUTH SWITCH!"  
    MMI_DTCNT_WIFI_OTA_FAIL_SSID "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL SSID!"  
    MMI_DTCNT_WIFI_OTA_FAIL_SSID_FORMAT "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL SSID FORMAT!"  
    MMI_DTCNT_WIFI_OTA_FAIL_NW_KEY "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL NW KEY!"  
    MMI_DTCNT_WIFI_OTA_FAIL_NW_KEY_FORMAT "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL NW_KEY_FORMAT!"  
    
    MMI_DTCNT_WIFI_OTA_FAIL_WEP_KEY_LEN "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL WEP_KEY_LEN!"  
    MMI_DTCNT_WIFI_OTA_FAIL_INDEX_INSTALL "[DATA ACCOUNT WIFI OTA]  WIFI OTA FAIL Index of install!"  
    

#line 344 "..\\..\\plutommi\\mmi\\inc\\MMI_conn_app_trc.h"

#line 1056 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"

    
    
    
   MMI_MV_FUNC_XML_DATA_ADDRESS_HDLR "[MMSViewer] mmi_mv_xml_data_address_hdlr:: Duplicate Address "
   MMI_MV_FUNC_XML_START_HDLR_TEXT "[MMSViewer] text.begin > text.end  "
   MMI_MV_FUNC_XML_START_HDLR_AUDIO "[MMSViewer] image.begin > image.end "
   MMI_MV_FUNC_XML_START_HDLR_IMG "[MMSViewer] audio.begin > audio.end "
   MMI_MV_FUNC_XML_START_HDLR_VIDEO "[MMSViewer] video.begin > video.end "
   MMI_MV_READ_FILE "[MMSViewer] Read Length(bytes) %d "
   MMI_MV_CONVERTED_TO_UCS2_LEN "[MMSViewer] Converted Length(chars) %d "
   MMI_MV_UNKNOWN_MEDIA "[MMSViewer] %d object has unknown MIME Type "
   MMI_MV_VIEWER_NOT_IN_HISTORY "[MMSViewer] Viewer not in History "

   
   
   

   
   
   MMI_IRDA_FUNC_INIT_CNTX "[IrdaMMI.c] mmi_irda_init_cntx"
   MMI_IRDA_FUNC_INIT_PROTOCOL_EVENT "[IrdaMMI.c] mmi_irda_init_protocol_events"

   
   MMI_IRDA_FUNC_OPEN_IR "[IrdaMMI.c] mmi_irda_init_ir"
   
   MMI_IRDA_OBEX_FUNC_SND_ABORT "[IrdaMMI.c] mmi_irda_obex_snd_abort"
   MMI_IRDA_OBEX_FUNC_SND_DISCONNECT "[IrdaMMI.c] mmi_irda_obex_snd_disconnect"
   MMI_IRDA_OBEX_FUNC_SND_CONNECT_TERM "[IrdaMMI.c] mmi_irda_obex_snd_connect_terminated"

   
   MMI_IRDA_FUNC_SND_OBJ "[IrdaMMI.c] mmi_irda_send_obj"

   
   MMI_IRDA_OBEX_FUNC_CONNECT_IND_HDLR "[IrdaMMI.c] mmi_irda_obex_connect_ind_handler"
   MMI_IRDA_OBEX_FUNC_CONNECT_CNF_HDLR "[IrdaMMI.c] mmi_irda_obex_connect_cnf_handler"
   MMI_IRDA_OBEX_FUNC_DISCONNECT_IND_HDLR "[IrdaMMI.c] mmi_irda_obex_disconnect_ind_handler"
   MMI_IRDA_OBEX_FUNC_PUT_OBJ_IND_HDLR "[IrdaMMI.c] mmi_irda_obex_put_object_ind_handler"
   MMI_IRDA_OBEX_FUNC_PUT_OBJ_CNF_HDLR "[IrdaMMI.c] mmi_irda_obex_put_object_cnf_handler"

   
   MMI_IRDA_FUNC_SEND_MSG_TO_OBEX "[IrdaMMI.c] mmi_irda_send_msg_to_obex"
   MMI_IRDA_FUNC_SEND_MSG_TO_LMP "[IrdaMMI.c] mmi_irda_send_msg_to_lmp"

  
   MMI_IRDA_STATE_TRANSITION "[IrdaMMI] state transition. (%d -> %d)"
   MMI_IRDA_STATE_ERROR "[IrdaMMI] wrong state. (%d)"


	
   MMI_BT_G7_SCR_ACTPROF "[BTMMI] : Main Menu, Act Profile = %d "
   MMI_BT_G7_SCR_PWRON_PROC "[BTMMI] : Power on in progress "
   MMI_BT_G7_SCR_PWRON_DONE "[BTMMI] : Power on Done, Return = %d "
   MMI_BT_G7_SCR_PWROFF "[BTMMI] : Power off "
   MMI_BT_G7_SCR_SEARCH "[BTMMI] : Enter searching screen Permit = %d "
   MMI_BT_G7_SCR_SHOW_PROGRESSING "[BTMMI] : Show progressing  SCRID=%d, TitleID=%d, ContentID=%d "
   MMI_BT_G7_SCR_SHOW_PROGRESSING2 "[BTMMI] : Show progressing_2  SCRID=%d, TitleID=%d, ContentID=%d "
   MMI_BT_G7_SCR_SHOW_PROGRESSING_UPDATE "[BTMMI] : Update progressing string SCRID=%d, TitleID=%d, ContentID=%d "
   MMI_BT_G7_SCR_STOP_PROGRESS "[BTMMI] : Stop progressing  SCRID=%d, TitleID=%d, ContentID=%d "
   MMI_BT_G7_SCR_INQ_CB "[BTMMI] : Inquiry Callback, found=%d "
   MMI_BT_G7_SCR_INQ_RES_LIST "[BTMMI] : InqRes[%d]:%x %x %x %x %x %x TrDev[%d]:%x %x %x %x %x %x "
   MMI_BT_G7_SCR_ABORT "[BTMMI] : Abort, PinReQStat = %d "
   MMI_BT_G7_SCR_PAIR "[BTMMI] : General Paining, PinStat = %d "
   MMI_BT_G7_SCR_PINREQ "[BTMMI] : PIN Request Screen, PinStat = %d "
   MMI_BT_G7_SCR_SENDPINREQ "[BTMMI] : Send PIN Request, PinStat = %d, CODE:%x %x %x %x %x %x %x %x "
   MMI_BT_G7_SCR_PINRSP "[BTMMI] : PIN Response, PinStat = %d, Res = %d "
   MMI_BT_G7_SCR_CONN_RFCOM "[BTMMI] : Send RFCOM connection request "
   MMI_BT_G7_SCR_CONN_RFCOM_RES "[BTMMI] : RFCOM establish, Res = %d "
   MMI_BT_G7_SCR_ENLIST_RES "[BTMMI] : Enlist Done, Res = %d "
   MMI_BT_G7_SCR_VRSD "[BTMMI] : Voice Dail "
   MMI_BT_G7_SCR_CON_MYDEV "[BTMMI] : Connect to TrDev "
   MMI_BT_G7_SCR_REN "[BTMMI] : TrDev Rename "
   MMI_BT_G7_SCR_DEL_TR "[BTMMI] : TrDev Delete "
   MMI_BT_G7_SCR_DEL_TR_RES "[BTMMI] : TrDev Delete Done, Res = %d"
   MMI_BT_G7_SCR_SEARCH_ALL "[BTMMI] : Seach all device"
   MMI_BT_G7_SCR_PWRON_STEP "[BTMMI] : Power on step (%d) is_pwron=%d, is_idle=%d"
   MMI_BT_G7_SCR_DEV_CNT "[BTMMI] : Found Dev (%d)"
   MMI_BT_G7_SCR_SCO_CONN_IND "[BTMMI] : SCO Connect IND, sco_state = %d"
   MMI_BT_G7_SCR_PINREQ_IND "[BTMMI] : PIN Require IND, bt_state = %d"
   MMI_BT_G7_SCR_PWR_READY "[BTMMI] : Power on ready, is_pwron = %d"
   MMI_BT_G7_SCR_RFC_CON_IND "[BTMMI] : RFCOM Connect IND, rfc_state = %d"
   MMI_BT_G7_SCR_MYDEV_RFC_CON "[BTMMI] : RFCOM Connect Res from Mydev, res = %d"
   MMI_BT_G7_SCR_PROF_CON_IND "[BTMMI] : Profile Connect Complete, prof = %d, result = %d, connecting_profile = %d, act screen = %d"
   MMI_BT_G7_SCR_PROF_DISCON_IND "[BTMMI] : Profile Disconnect Complete, prof = %d, result = %d, disconnecting_conn_type = %d, act screen = %d"
   MMI_BT_G7_SCR_CHK_PERM "[BTMMI] : Check Permission, Pwr = %d, ActPrf = %d, Panic = %d "
   MMI_BT_G7_SCR_PINREQ_IDLE "[BTMMI] : Recv PIN req in IDLE, Res = %d, Addr:%x %x %x %x %x %x, Key:%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x "
   MMI_BT_G7_SCR_REG_CB "[BTMMI] : Register callback function"
   MMI_BT_G7_SCR_CLR_CB "[BTMMI] : Clear callback func"
   MMI_BT_G7_SCR_GTIMER_START "[BTMMI] : Screen Guard Timer Start!"
   MMI_BT_G7_SCR_GTIMER_STOP "[BTMMI] : Screen Guard Timer Stop!"
   MMI_BT_G7_SCR_GTIMER_TO "[BTMMI] : Screen Guard Timer Timeout!"
   MMI_BT_G7_SCR_PIN_REQ_CB "[BTMMI] : PIN request callback: curscr(%d) SCR_CONNECT(%d) "
   MMI_BT_G7_SCR_STO_ENDKEY "[BTMMI] : Store END key handler"
   MMI_BT_G7_SCR_RESTO_ENDKEY "[BTMMI] : Restore END key handler"
   MMI_BT_G7_SCR_CLR_ENDKEY "[BTMMI] : Clear END key handler"
   MMI_BT_G7_SCR_EXE_ENDKEY "[BTMMI] : Execute END key handler"
   MMI_BT_G7_SCR_HIGHLIGHT_ITEM "[BTMMI] : BT MMI SCR Highlight Item(%d)"
   MMI_BT_G7_SCR_SCO_IND "[BTMMI] :SCO ind, result=%d scr_flag=%d, ext_scr_flag=%d"
   MMI_BT_G7_SCR_HW_OFF "[BTMMI] : HW OFF, ready=%d, active connections=%d, power status=%d"
   MMI_BT_G7_SCR_HW_ON "[BTMMI] : HW ON, hw_ready=%d, power status=%d"
   MMI_BT_G7_HW_READY_TIMER_START "[BTMMI] : HW Ready Timer Start"
   MMI_BT_G7_HW_READY_TIMER_TIMEOUT "[BTMMI] : HW Ready Timer Timeout"
   MMI_BT_G7_GEN_UPDATE_STATUS_ICON "[BTMMI] : BT Status Icon, hw_ready=%d, blinking=%d, power=%d, connections=%d, a2dp=%d, hfp=%d, earphone=%d"
   MMI_BT_G7_LP_TEST "[BTMMI] : LP Test, test_bt_at=%d, lap=0x%06x, uap=0x%02x, nap=0x%04x, pin_code[0]=%d, pin_code[1]=%d, pin_code[2]=%d, pin_code[3]=%d"
   MMI_BT_G7_BT_INIT "[BTMMI] : BT Init"
   MMI_BT_G7_BT_SCR_INIT "[BTMMI] : BT Scr Init"
   MMI_BT_G7_BT_PS_HW_INIT "[BTMMI] : BT PS and HW Init, flight_mode=%d, sim_ready=%d, power=%d"
   MMI_BT_G7_BT_ON_OFF_STRESS_TEST "[BTMMI] : BT On Off Stress Test, BTMMI flag=%d, bt_on_off_test_count=%d"
   MMI_BT_G7_BT_LP_TEST_RESULT "[BTMMI] : LP Test Result, result=%d"
   MMI_BT_G7_SCR_INQ_RES_DEL_CB "[BTMMI] : Inq result screen deleted callback, state=%d"
   MMI_BT_G7_SCR_POWER_OFF_GUARD_TIMEOUT "[BTMMI] : Power off timeout, state=%d"
   MMI_BT_G7_SCR_RELEASE_ALL_CONN_GUARD_TIMEOUT "[BTMMI] : Release all conn timeout, state=%d"
   MMI_BT_G7_SCR_INQ_PROGRESS_DEL_CB "[BTMMI] : Inq progress screen deleted callback, state=%d"
   MMI_BT_G7_BT_SCR_STATUS "[BTMMI] : BT Scr Status, state=%d, flag=%d, blinking_flag=%d"
   MMI_BT_G7_SCR_PERMISSION_STATUS "[BTMMI] : Permission Status, hw_ready=%d, btcore_state=%d"
   MMI_BT_G7_SCR_POWER_AND_READY_STATUS "[BTMMI] : Power and BT stack ready Status, Power=%d, stack_ready=%d"
   MMI_BT_G7_BT_DEINIT "[BTMMI] : BT Deinit"
   MMI_BT_G7_BT_GET_DEVICE_NAME "[BTMMI] : BT Get Device Name, paired_dev_index=%d, number_of_char=%d, max_allowed_chinese_char=%d, max_allowed_eng_char=%d"
   MMI_BT_G7_BT_2BYTE_CHAR_INDEX "[BTMMI] : 2byte ucs2 char index, index_of_2byte_ucs2_char=%d"
   MMI_BT_G7_BT_COPY_N_UTF8_CHAR "[BTMMI] : mmi_bt_copy_n_utf8_chars, size_of_dest=%d, char_num=%d"
   MMI_BT_G7_BT_COPY_N_UTF8_CHAR_FINISH "[BTMMI] : mmi_bt_copy_n_utf8_chars finish, char_copied=%d, byte_copied=%d"
   MMI_BT_G7_BT_TEST_2BYTE_UCS2_CHAR "[BTMMI] : mmi_bt_test_2bytes_ucs2_char_in_utf8_string, char_num=%d"
   MMI_BT_G7_BT_TEST_2BYTE_UCS2_CHAR_FINISH "[BTMMI] : mmi_bt_test_2bytes_ucs2_char_in_utf8_string finish, found_index=%d"
   MMI_BT_G7_BT_ENTRY_COD_DEV_WITH_SER_SELECT_SCREEN "[BTMMI] : mmi_bt_entry_cod_device_with_service_select_screen: cod = %x, service_id = %x, app_cb = %x"
   MMI_BT_G7_BT_INQUIRY_SPEC_COD_DEV "[BTMMI] : mmi_bt_inquiry_specific_cod_dev: app_cb = %x"
   MMI_BT_G7_BT_CONNECT_CONFIRM "[BTMMI] : mmi_bt_entry_connect_confirm: app_cb = %x, flag = %x"
   MMI_BT_G7_BT_SELECT_DEVICE_CB "[BTMMI] : select_device_cb: result = %d, lap=%x, uap=%x, nap=%x"
   MMI_BT_G7_BT_ENTRY_MY_SPEC_DEV_MENU "[BTMMI] : mmi_bt_entry_my_specific_dev_menu: cod = %x, service_id = %x, app_cb = %x"
   MMI_BT_G7_BT_MY_SPEC_DEV_HILITE_HDLR "[BTMMI] : mmi_bt_my_specific_dev_hilite_hdlr: app_cb = %x"
   MMI_BT_G7_BT_SELECT_MY_SPEC_DEV "[BTMMI] : mmi_bt_select_my_specific_dev: app_cb = %x"
   MMI_BT_G7_BT_IS_SERVICE_SUPPORT "[BTMMI] : mmi_bt_is_service_support: service_id = %x, result = %x"
   MMI_BT_G7_BT_ENTRY_DUMMY_SPEC_COD_DEV "[BTMMI] : mmi_bt_entry_dummy_specific_cod_device: IsBackHistory = %d, flag = %x, is_redrawing_bk_screens = %d"
   MMI_BT_G7_BT_ENTRY_DUMMY_SPEC_COD_DEV_DEL_CB "[BTMMI] : mmi_bt_dummy_specific_cod_device_del_cb: callback = %x"
   MMI_BT_G7_BT_DUMMY_SPEC_COD_DEV_TIMER_EXPIRE "[BTMMI] : mmi_bt_dummy_specific_cod_device_timer_expire_hdlr: callback = %x"
   MMI_BT_G7_BT_IS_DEVICE_PAIRED "[BTMMI] : mmi_bt_is_device_paired, lap=0x%06x, uap=0x%02x, nap=0x%04x"
   MMI_BT_G7_BT_PAIRED_DEVICE "[BTMMI] : paired device, lap=0x%06x, uap=0x%02x, nap=0x%04x"
   MMI_BT_G7_BT_POWER_SWITCH_ON_COMPLETE "[BTMMI] : mmi_bt_power_switch_on_complete: flag = 0x%x"    
   MMI_BT_G7_BT_CONFIRM_SCR_DEL_CB "[BTMMI] : mmi_bt_entry_XXX_confirm_del_cb: flag = 0x%x"    
   MMI_BT_G7_BT_ENTRY_CONFIRM "[BTMMI] : mmi_bt_entry_confirm, scr_id = %d, flag = 0x%x"    
   MMI_BT_G7_BT_DISPLAY_CONFIRM_SCR "[BTMMI] : mmi_bt_display_XXX_confirm_scr: flag = 0x%x"    

    

   
    

   
   MMI_BT_G7_DISCON "[BTCORE] : Send Disconnect to L4 "
   MMI_BT_G7_PWRON "[BTCORE] : Power on"
   MMI_BT_G7_BG_PWRON "[BTCORE] : Power on in BackGround"
   MMI_BT_G7_PWRON_FIN "[BTCORE] : Power on Done "
   MMI_BT_G7_PWRON_REG_DEV "[BTCORE] : Register TrDev "
   MMI_BT_G7_PWRON_REG_DEV_CONT "[BTCORE] : Register TrDev Continue"
   MMI_BT_G7_PWRON_REG_DEV_DONE "[BTCORE] : Register TrDev Done, Callback"
   MMI_BT_G7_SEND_MSG_2_L4 "[BTCORE] : Send Msg (%d) to L4 "
   MMI_BT_G7_PWROFF_RESET_CONTEXT "[BTCORE] : Power off reset context"
   MMI_BT_G7_PWROFF "[BTCORE] : Power off, bt_stat=%d"
   MMI_BT_G7_INQ "[BTCORE] : Inquiry, bt_stat=%d, cod=%d, num=%d"
   MMI_BT_G7_INQ_RES "[BTCORE] : Inquiry Done, bt_stat=%d, inq_status=%"
   MMI_BT_G7_INQ_TOUT "[BTCORE] : Inquiry Timeout"
   MMI_BT_G7_PAIR "[BTCORE] : Pair, bt_stat=%d, Addr:%x %x %x %x %x %x"
   MMI_BT_G7_PAIR_RES "[BTCORE] : Pair Done, bt_stat=%d, Res=%d"
   MMI_BT_G7_PIN_REQ "[BTCORE] : PIN IND, bt_stat=%d, Addr:%x %x %x %x %x %x"
   MMI_BT_G7_SEND_PIN "[BTCORE] : Send PIN , bt_stat=%d, Addr:%x %x %x %x %x %x, key:%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"
   MMI_BT_G7_SEND_PIN_RES "[BTCORE] : Send PIN Done"
   MMI_BT_G7_LNKEY_IND "[BTCORE] : LNKKEY IND, bt_stat=%d, Addr:%x %x %x %x %x %x, key:%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"
   MMI_BT_G7_REG_TR "[BTCORE] : Register TrDev, bt_stat=%d, Addr:%x %x %x %x %x %x, key:%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"
   MMI_BT_G7_REG_TR_RES "[BTCORE] : Register TrDev Done, TrNum = %d"
   MMI_BT_G7_DEL_TR "[BTCORE] : Del TrDev"
   MMI_BT_G7_DEL_TR_RES "[BTCORE] : Del TrDev Done, TrNum = %d"
   MMI_BT_G7_SET_AUTH "[BTCORE] : Set Auth, vis=%d, auth=%d"
   MMI_BT_G7_SET_AUTH_RES "[BTCORE] : Set Auth Done"
   MMI_BT_G7_SET_AUDPATH "[BTCORE] : Set Audio Path"
   MMI_BT_G7_RFCOM_CON_REQ "[BTCORE] : RFC Conn Req, bt_stat=%d, auth=%d, prof=%d, Addr:%x %x %x %x %x %x"
   MMI_BT_G7_RFCOM_CON_IND "[BTCORE] : RFC Conn IND, bt_stat=%d, status=%d, Addr:%x %x %x %x %x %x"
   MMI_BT_G7_PROFILE_CON_IND "[BTCORE] : Profile Connect IND, bt_stat=%d, prof=%d"
   MMI_BT_G7_RING_REQ "[BTCORE] :Ring Request, bt_stat=%d"
   MMI_BT_G7_RING_STOPTIMER "[BTCORE] :Ring Timer Stop"
   MMI_BT_G7_CKPD "[BTCORE] :CKPD bt_stat=%d, call_stat=%d"
   MMI_BT_G7_SPEECH "[BTCORE] :Turn on Speech, onoff=%d, bt_stat=%d, call_stat=%d"
   MMI_BT_G7_ADD_SCO_LNK "[BTCORE] :ADD SCO LNK, bt_stat=%d, call_stat=%d"
   MMI_BT_G7_RMV_SCO_LNK "[BTCORE] :RMV SCO LNK, bt_stat=%d, call_stat=%d"
   MMI_BT_G7_SCO_CON_IND "[BTCORE] :SCO Connect IND, bt_stat=%d, call_stat=%d"
   MMI_BT_G7_ADJ_VOL "[BTCORE] :Adjust Volume, bt_stat=%d, call_stat=%d"
   MMI_BT_G7_NVR_READ "[BTCORE] : Read Nvram, flag=%x, TrDevNum=%d"
   MMI_BT_G7_NVR_WRITE "[BTCORE] : Write Nvram, flag=%x, TrDevNum=%d"
   MMI_BT_G7_ABORT "[BTCORE] : Abort, bt_stat=%d, call_stat=%d"
   MMI_BT_G7_INIT_CTX "[BTCORE] : Init Context, GuardFlag %d"
   MMI_BT_G7_STATE_CHANGE "[BTCORE] : State %Mmmi_bt_state_enum(%d) => %Mmmi_bt_state_enum(%d)"
   MMI_BT_G7_INIT_EVENT_HDLR "[BTCORE] : INIT Protocol event handler"
   MMI_BT_G7_CLEAR_EVENT_HDLR "[BTCORE] : CLEAR Protocol event handler"
   MMI_BT_G7_HIDE "[BTCORE] : Hide BT Device (%d)"
   MMI_BT_G7_MAKE_IDLE "[BTCORE] : MAKE IDLE"
   MMI_BT_G7_MAKE_IDLE_RSP "[BTCORE] : Recv MAKE IDLE Rsp"
   MMI_BT_G7_WARN_DUP_OP "[BTCORE] : !!!WARNING!!! Command Overwrite!!! 0x%x"
   MMI_BT_G7_WARN_CBFP_OVERWRITE "[BTCORE] : !!!WARNING!!! Callback function overwrite!!! 0x%x, 0x%x"
   MMI_BT_G7_BT_AUDPATH_ON "[BTCORE] : Turn on Bluetooth voice path (L1SP)"
   MMI_BT_G7_BT_AUDPATH_OFF "[BTCORE] : Turn off Bluetooth voice path (L1SP)"
   MMI_BT_G7_BT_SPEECH_ON "[BTCORE] : Turn on Speech"
   MMI_BT_G7_BT_SETCB "[BTCORE] : Set callback function 0x%x"
   MMI_BT_G7_BT_RESETCB "[BTCORE] : Reset callback function 0x%x"
   MMI_BT_G7_BT_RESET_HW "[BTCORE] : Reset HW, reset_hw=%d"
   MMI_BT_G7_BT_RESET_HW_PWR_TIMEOUT "[BTCORE] : Reset HW Time Out"
   MMI_BT_G7_BT_ERROR_IND "[BTCORE] : Error Indicator = %d"
   MMI_BT_G7_BT_SET_FLAG "[BTCORE] : Set flag = %d"
   MMI_BT_G7_BT_RESET_FLAG "[BTCORE] : Reset flag = %d"
   MMI_BT_G7_BT_ADDRESS "[BTCORE] : Set BT address = 0x%02x, 0x%02x, 0x1b, 0x12, 0x34, 0x56"

   MMI_BT_G7_LOG_STATE "[BTCORE] : State: %Mmmi_bt_state_enum(%d)"

   MMI_BT_G7_WARNING_STATE_ERROR "[BTCORE] : !!!WARNING!!! Wrong State!!!"
   MMI_BT_G7_PANIC "*********** [BTCORE] : PANIC!!! [bt_stat=%d, call_stat=%d, cnt=%d] ***********"
   MMI_BT_G7_PANIC_PENDING_CB "*********** [BTCORE] : PANIC!!! [Pending Callback (%d)0x%x] ***********"
   MMI_BT_G7_PANIC_RECOVERED "*********** [BTCORE] : PANIC_RECOVERED!!! [Prof: %Mmmi_bt_prof_enum] ***********"


   MMI_BT_G7_AUDIO_CON_IND "[BTCORE] :Audio Connect IND, bt_stat=%d, status=%d, call_stat=%d"
   MMI_BT_G7_AUDIO_CON_CNF "[BTCORE] :Audio Connect CNF, result=%d, bt_stat=%d, status=%d, call_stat=%d"
   MMI_BT_G7_AUDIO_DISCON_IND "[BTCORE] :Audio Disconnect IND, bt_stat=%d, status=%d, call_stat=%d"
   MMI_BT_G7_AUDIO_DISCON_CNF "[BTCORE] :Audio Disconnect CNF, result=%d, bt_stat=%d, status=%d, call_stat=%d"   
   MMI_BT_G7_STATUS_IND "[BTCORE] :HFG Status IND, bt_stat=%d, status=%d, connection id:%d"
   MMI_BT_G7_PAIRED_DEV_INFO "[BTCORE] : Device Info, Cod=0x%x, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_SDP_IND "[BTCORE] : SDP IND, bt_stat=%d, service=%d, server_channel=%d"
   MMI_BT_G7_SDP_SEARCH_CNF "[BTCORE] : SDP Search CNF, bt_stat=%d, total_service_num=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_SDP_CLOSE_IND "[BTCORE] : SDP CLOSE IND, bt_stat=%d, result=%d, total_service_num=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_DEACTIVATE_FLAG "[BTCORE] : Deactivate flag, bt_stat=0x%04x"
   MMI_BT_G7_REJECT_RFC_CONNECT_IND "[BTCORE] : Reject Rfc Connection Device Info, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_CONNECTABLE_REQ "[BTCORE] : Connectable Info, connectable = %d, visible = %d"
   MMI_BT_G7_GEN_CONNECT_IND "[BTCORE] : Connect Ind, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_GEN_CONNECT_CNF "[BTCORE] : Connect Cnf, result=%d, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_GEN_DISCONNECT_IND "[BTCORE] : Disconnect Ind, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_GEN_DISCONNECT_CNF "[BTCORE] : Disconnect Cnf, result=%d, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_BOND_IND "[BTCORE] : Bond Ind, result=%d, cod =0x%x, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_BOND_CNF "[BTCORE] : Bond Cnf, result=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
   MMI_BT_G7_PAIR_IND "[BTCORE] : Pair Ind, cod =0x%x, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
    MMI_BT_G7_PAIR_RSP "[BTCORE] : Pair Rsp, bt_stat =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
	MMI_BT_G7_MATCH_CACHE_DEV_INFO "[BTCORE] :Matched Cache Device Info, Cod=0x%x, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
	MMI_BT_G7_MATCH_DISCOVERED_DEV_INFO "[BTCORE] :Matched Discovered Device Info, Cod=0x%x, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
	MMI_BT_G7_ADD_CACHE_DEV_INFO "[BTCORE] :Added Cache Device Info, CacheIndex=%d Cod=0x%x, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
	MMI_BT_G7_CALL_STATUS "[BTCORE] :Call Status, Call Status=%d"
	MMI_BT_G7_REJECT_PIN_REQ "[BTCORE] :Reject Second Pin Req"
  	MMI_BT_G7_MY_DEV_FUL_REJECT_PIN_REQ "[BTCORE] :Reject Pin Req because of my device list full"
   MMI_BT_G7_ACTIVATE_TIMER_START "[BTCORE] : Activate Timer Start"
   MMI_BT_G7_ACTIVATE_TIMER_TIMEOUT "[BTCORE] : Activate Timer Timeout"
	MMI_BT_G7_DISCOVERY_CNF "[BTCORE] :Discovery CNF, discovered device num = %d, cnf device num = %d "
	MMI_BT_G7_DISCOVERY_CNF_WARNING "[BTCORE] :WARNING, discovered device num != cnf number "
	MMI_BT_G7_DISCOVERY_IND_WITHOUT_NAME "[BTCORE] :Discovered Device Without Name"
	MMI_BT_G7_SET_LOCAL_NAME_CNF "[BTCORE] :Set Local Name CNF, bt_stat=%d, result=%d, bt_flag=%d, bt_ramflag=%d"
	MMI_BT_G7_SET_SEC_CNF "[BTCORE] :Set Security CNF, bt_stat=%d, result=%d, bt_flag=%d, bt_ramflag=%d"
	MMI_BT_G7_GET_REMOTE_DEV_NAME_CNF "[BTCORE] :Get remote device name cnf, bt_stat=%d, result=%d, bt_flag=%d, bt_ramflag=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
	MMI_BT_G7_GET_LOCAL_BD_ADD_CNF "[BTCORE] :Get local device addr cnf, bt_stat=%d, bt_flag=%d, bt_ramflag=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
	MMI_BT_G7_GEN_CNF "[BTCORE] :Genernal CNF, bt_stat=%d, result=%d"
   MMI_BT_G7_BT_CORE_INIT "[BTCORE] : BT Core Init"
    MMI_BT_G7_BT_CORE_STATUS "[BTCORE] : BT Core Status, state=%d, flag=%d, ram_flag=%d, deactivate_flag=%d"
    MMI_BT_G7_BT_STATE_TRANS "[BTCORE] : CM State Trans, state=%d --> %d"
    MMI_BT_G7_PROF_CB_BEFORE_CON_DIS "[BTCORE] : Profile CB before releasing connection, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
    MMI_BT_G7_GEN_CONNECT_ACCEPT_CNF_REQ "[BTCORE] : Connect Accept Cnf Req, bt_stat=%d, profile_id=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
    MMI_BT_G7_POWER_ON_FINISH "[BTCORE] : Power On Finished"
    MMI_BT_G7_POWER_OFF_FINISH "[BTCORE] : Power Off Finished"
    MMI_BT_G7_DEACTIVATE_CNF "[BTCORE] : Deactivate Cnf, profile=0x%04x"
    MMI_BT_G7_CONNECTION_ID_EXISTED "[BTCORE] : Connection Id Existed, conn_id=%d"
    MMI_BT_G7_CONNECTION_NOT_FOUND "[BTCORE] : Connection Not Existed, conn_id=%d"
    MMI_BT_G7_ACTIVATE_CNF "[BTCORE] : Activate Cnf, profile_id=0x%04x"
	
    MMI_BT_G7_REG_PAIRING_PERMISSION_CB "[BTCORE] : register pairing permission cb, profile_id=0x%04x, func_ptr=0x%x"
    MMI_BT_G7_UNREG_PAIRING_PERMISSION_CB "[BTCORE] : unregister pairing permission cb, profile_id=0x%04x"
    MMI_BT_G7_IS_PAIRING_PERMITTED "[BTCORE] : check if pairing permission, profile_id=0x%04x, result=%d"
    

    
    MMI_BT_G7_BT_HFG_STATE_TRANS "[BTCORE-HFG] : HFG State Trans, state=%d --> %d"
    
    MMI_BT_G7_BT_HSG_STATE_TRANS "[BTCORE-HSG] : HSG State Trans, state=%d --> %d"
    
    MMI_BT_G7_BT_HIDD_STATE_TRANS "[BTCORE-HIDD] : HIDD State Trans, state=%d --> %d"
    MMI_BT_HID_ACCEPT_FILE_RECV "[HID MMI] mmi_bth_hidd_accept_conn()"
    MMI_BT_HID_REJECT_FILE_RECV "[HID MMI] mmi_bth_hidd_reject_conn()"
    MMI_BT_HID_AUTH_CONFIRM_DEL_CB "[HID MMI] mmi_bth_hidd_authorize_confirm_del_cb(), HID_state: %d"
    MMI_BT_HID_ENTRY_CONN_CONFIRM_SCR "[HID MMI] mmi_bt_hid_entry_conn_confirm_scr()"
    DESKTOPX_KEY_UP_EVENT_CALLBACK "[HID MMI] mmi_bt_hid_desktop_key_up_event_callback(),key code = %d,  key type = %d"
    MEDIA_PLAYER_KEY_UP_EVENT_CALLBACK "[HID MMI] mmi_bt_hid_media_player_key_up_event_callback(),key code = %d,  key type = %d"
    PRESENTER_KEY_UP_EVENT_CALLBACK "[HID MMI] mmi_bt_hid_presenter_key_up_event_callback(),key code = %d,  key type = %d"

    
    MMI_SPP_SUPPORT_MAX_SPP_CONS "[MMI_SPP]:MMI_BTH_SPP_MAX_CONNECTION=%d"
    MMI_SPP_APP_INX "[MMI_SPP]:app_inx=%d"
    MMI_SPP_SDP_REQUEST_ONGOING_APP_INX "[MMI_SPP]:Sdp request ongoing with app_inx=%d"
    MMI_SPP_SDP_RESULT_SRV_CHNL_NUM "[MMI_SPP]: Sdp atrribute_rsp with srv_chnl_num=%d"
    MMI_SPP_SDP_SEARCH_CNF_RESULT "[MMI_SPP]:Sdp attribute_cnf with result=%d"
    MMI_SPP_CON_REQ_REJECT "[MMI_SPP]:Spp Con_Req is rejected"
    MMI_SPP_CON_REQ_NO_FREE_ENTRY "[MMI_SPP]:SPP Con_Req but no free entry"
    MMI_SPP_CON_REQ_REJECT_ALREADY_CONNECTED "[MMI_SPP]:SPP Con_Req reject due to this address already connected"
    MMI_SPP_CON_REQ_REJECT_ALREADY_CONNECTING "[MMI_SPP]:SPP Con_Req reject due to this address already connecting"
    MMI_SPP_TRY_FIND_EXIST_SCO_ENTRY "[MMI_SPP]:Try to find an existing sco entry with same addr and rfchnl closed"
    MMI_SPP_TRY_FIND_FREE_ENTRY "[MMI_SPP]:Try to find an available entry"
    MMI_SPP_INVALID_CON_REQ_TYPE "[MMI_SPP]:Invalid spp con req type=%d"
    MMI_SPP_CANNOT_FIND_ENTRY_ADDR_SRV_CHNL_NUM "[MMI_SPP]:In connect_cnf_hdler(): find no entry with lap=%d,uap=%d,nap=%d,srv_chnl_num=%d" 
    MMI_SPP_CON_IND_NO_FREE_ENTRY "[MMI_SPP]:In con_ind_hdler(): no free entry"
    MMI_SPP_FIND_ENTRY_BY_PORT "[MMI_SPP]:Search entry by port=%d"
    MMI_SPP_INVALID_WHEN_AUDIO_CON_REQ "[MMI_SPP]:Invalid state=%d when Audio con_req"
    MMI_SPP_CANNOT_FIND_MATCHED_ENTRY "[MMI_SPP]:Can not find any matched entry"
    MMI_SPP_INVALID_WHEN_AUDIO_DISCON_REQ "[MMI_SPP]:Invalid audio_state=%d when Audio discon_req"
    MMI_SPP_RESET_ENTRY "[MMI_SPP]:Reset entry due to rfchnl closed and audio_state idle"
    MMI_SPP_NOT_RESET_ENTRY_DUE_TO_RFCHNL_NOT_CLOSED "[MMI_SPP]:Not reset entry due to rfchnl is not closed, callback will need this entry later. state=%d"
    MMI_SPP_UART_PLUGOUT_IND "[MMI_SPP]:Recv uart_plugout_ind with port=%d"
    MMI_SPP_SEND_UART_PLUGOUT_CNF "[MMI_SPP]:Send uart_plugout_cnf with port=%d"
    MMI_SPP_RECV_UART_OWNER_IND "[MMI_SPP]:Recv uart_owner_ind with port=%d"
    MMI_SPP_SEND_UART_OWNER_CNF "[MMI_SPP]:Send uart_owner_cnf with port=%d"
    MMI_SPP_RECV_UART_READY_TO_READ_IND "[MMI_SPP]:Recv uart_ready_to_read_ind with port=%d"
    MMI_SPP_RECV_UART_READY_TO_WRITE_IND "[MMI_SPP]:Recv uart_ready_to_write_ind with port=%d"
    MMI_SPP_SERVICE_NOT_REG_CALLBACK_FUNC "[MMI_SPP]: SPP Service at port=%d, not register callback func sets in SPPServerAppTable"
    MMI_SPP_FIND_AVAILABLE_ENTRY_INX "[MMI_SPP]:In mmi_bth_spp_find_available_entry(): find at inx=%d"
    MMI_SPP_FIND_ENTRY_BY_CONNECT_TYPE_INX "[MMI_SPP]:In mmi_bth_spp_find_entry_by_connect_type(): find at inx=%d"
    MMI_SPP_FIND_EXISTING_SCO_ENTRY_INX "[MMI_SPP]:In mmi_bth_spp_find_existing_sco_entry(): find at inx=%d"
    MMI_SPP_FIND_ENTRY_BY_PORT_INX "[MMI_SPP]:In mmi_bth_spp_find_entry_by_port(): find at inx=%d"
    MMI_SPP_SEARCH_SPPSRVAPPTABLE_BY_PORT_INX "[MMI_SPP]:In search_inx_of_spp_server_app_registerfunc_table(): find at inx=%d"
    MMI_SPP_DISC_CNF_HDLER_RESET_ENTRY "[MMI_SPP]:In mmi_bth_spp_disconnect_cnf_hdler(): reset entry"
    MMI_SPP_DISC_CNF_HDLER_NOT_RESET_ENTRY "[MMI_SPP]:In mmi_bth_spp_disconnect_cnf_hdler(): not reset entry due to audio state=%d"
    MMI_SPP_DISC_IND_HDLER_RESET_ENTRY "[MMI_SPP]:In mmi_bth_spp_disconnect_ind_hdler(): reset entry"
    MMI_SPP_DISC_IND_HDLER_NOT_RESET_ENTRY "[MMI_SPP]:In mmi_bth_spp_disconnect_ind_hdler(): not reset entry due to audio state=%d"    
    MMI_SPP_AUDIO_CON_CNF_HDLER_AUDIO_STATE "[MMI_SPP]:In mmi_bth_spp_audio_connect_cnf_hdler(): audio state=%d"
    MMI_SPP_AUDIO_CON_CNF_HDLER_SWITCH_TO_AUDIO_CONNECT "[MMI_SPP]:In mmi_bth_spp_audio_connect_cnf_hdler(): from audio state=%d to audio connected"
    MMI_SPP_AUDIO_CON_IND_HDLER_CON_STATE "[MMI_SPP]:In mmi_bth_spp_audio_connect_ind_hdler(): connection state=%d"
    MMI_SPP_AUDIO_DISC_CNF_HDLER_AUDIO_STATE "[MMI_SPP]:In mmi_bth_spp_audio_disconnect_cnf_hdler(): audio_state=%d"    
    MMI_SPP_DISC_AUDIO_LINK_FIRST "[MMI_SPP]:In mmi_bth_spp_disconnect_req_hdler(): Audio Link is connected, DISC Audio Link first"
    MMI_SPP_DISC_AUDIO_LINK_RC "[MMI_SPP]:In mmi_bth_spp_disconnect_req_hdler(): DISC Audio Link first, rc=%d"
    MMI_SPP_DISC_REQ_HDLER_AUDIO_STATE "mmi_bth_spp_disconnect_req_hdler(): Audio state=%d"
    MMI_SPP_RECV_AUDIO_DISC_IND_THEN_DISC_SPP_CHNL "[MMI_SPP]:In mmi_bth_spp_audio_disconnect_ind_hdler():Recv audio_disc_ind then disc SPP chnl"
    MMI_SPP_RECV_AUDIO_DISC_CNF_THEN_DISC_SPP_CHNL "[MMI_SPP]:In mmi_bth_spp_audio_disconnect_cnf_hdler():Recv audio_disc_cnf then disc SPP chnl"
    MMI_SPP_CLIENT_SEND_FIRST_DATA "[MMI_SPP]:MMI recv UART_OWNER_IND,SPPClientSendFirstDataPattern()"
    MMI_SPP_SCO_RSSI_VAL "[MMI_SPP]:In mmi_bth_spp_sco_rssi_ind_hdler():addr0=%02x,addr1=%02x,addr2=%02x,addr3=%02x,addr4=%02x,addr5=%02x,rssi_val=%02x"

    
    MMI_SPP_CLIENT_APP_SDP_RESULT_IND_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_SDP_RESULT_IND_CB"
    MMI_SPP_CLIENT_APP_SDP_SEARCH_CNF_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_SDP_SEARCH_CNF_CB"
    MMI_SPP_CLIENT_APP_CONNECT_CNF_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_CONNECT_CNF_CB"
    MMI_SPP_CLIENT_APP_UART_OWNER_IND_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_UART_OWNER_IND_CB"
    MMI_SPP_CLIENT_APP_UART_READY_TO_READ_IND_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_UART_READY_TO_READ_IND_CB"
    MMI_SPP_CLIENT_APP_UART_READY_TO_WRITE_IND_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_UART_READY_TO_WRITE_IND_CB"
    MMI_SPP_CLIENT_APP_UART_PLUGOUT_IND_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_UART_PLUGOUT_IND_CB"
    MMI_SPP_CLIENT_APP_DISCONNECT_IND_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_DISCONNECT_IND_CB"
    MMI_SPP_CLIENT_APP_DISCONNECT_CNF_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_DISCONNECT_CNF_CB"
    MMI_SPP_CLIENT_APP_AUDIO_CONNECT_CNF_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_AUDIO_CONNECT_CNF_CB"
    MMI_SPP_CLIENT_APP_AUDIO_CONNECT_IND_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_AUDIO_CONNECT_IND_CB"
    MMI_SPP_CLIENT_APP_AUDIO_DISCONNECT_CNF_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_AUDIO_DISCONNECT_CNF_CB"
    MMI_SPP_CLIENT_APP_AUDIO_DISCONNECT_IND_CB "[MMI_SPP]:MMI_SPP_CLIENT_APP_AUDIO_DISCONNECT_IND_CB"

    
    MMI_SPP_SERVER_APP_CONNECT_IND_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_CONNECT_IND_CB"
    MMI_SPP_SERVER_APP_UART_OWNER_IND_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_UART_OWNER_IND_CB"
    MMI_SPP_SERVER_APP_UART_READY_TO_READ_IND_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_UART_READY_TO_READ_IND_CB"
    MMI_SPP_SERVER_APP_UART_READY_TO_WRITE_IND_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_UART_READY_TO_WRITE_IND_CB"
    MMI_SPP_SERVER_APP_UART_PLUGOUT_IND_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_UART_PLUGOUT_IND_CB"
    MMI_SPP_SERVER_APP_DISCONNECT_IND_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_DISCONNECT_IND_CB"
    MMI_SPP_SERVER_APP_DISCONNECT_CNF_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_DISCONNECT_CNF_CB"
    MMI_SPP_SERVER_APP_AUDIO_CONNECT_CNF_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_AUDIO_CONNECT_CNF_CB"
    MMI_SPP_SERVER_APP_AUDIO_CONNECT_IND_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_AUDIO_CONNECT_IND_CB"
    MMI_SPP_SERVER_APP_AUDIO_DISCONNECT_CNF_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_AUDIO_DISCONNECT_CNF_CB"
    MMI_SPP_SERVER_APP_AUDIO_DISCONNECT_IND_CB "[MMI_SPP]:MMI_SPP_SERVER_APP_AUDIO_DISCONNECT_IND_CB"
    


  
   MMI_OPP_STATE_TRANSITION "[OPPMMI] state transition. (%d -> %d)"
   MMI_OPP_STATE_ERROR "[OPPMMI] wrong state. (%d)"
    MMI_OPP_CURR_STATE "[OPPMMI] OPPS (%d), OPPC(%d)"
    MMI_BT_OPP_INIT "[OPPMMI] mmi_bt_opp_init()"
    MMI_BT_OPP_INIT_RECEIVED_FOLDER_USBMS_BOOT "[OPPMMI] mmi_opp_init_received_folder(), USBMS BOOT"
    MMI_BT_OPP_INIT_RECEIVED_FOLDER_CREATE_DIR "[OPPMMI] mmi_opp_init_received_folder(), FS_CreateDir (%d)"
    MMI_BT_OPP_INIT_RECEIVED_FOLDER_OPEN_DIR "[OPPMMI] mmi_opp_init_received_folder(), FS_Open (%d)"
    MMI_BT_OPP_SEND_FILE_OBJ "[OPPMMI] mmi_opp_send_file_obj()"
    MMI_BT_OPP_SEND_FILE_OBJ_USB_MODE "[OPPMMI] mmi_opp_send_file_obj(), USB MODE"
    MMI_BT_OPP_SEND_FILE_OBJ_FS_OPEN "[OPPMMI] mmi_opp_send_file_obj(), FS_Open (%d)"
    MMI_BT_OPP_OPPC_MAX_PACKET_SIZE "[OPPMMI] mmi_bt_oppc_connect_rsp_handler(), max packet size (%d)"
    MMI_BT_OPP_OPPC_PUSH_RSP_REMAIN_LEN "[OPPMMI] mmi_bt_oppc_push_rsp_handler(), remain len (%d, %d)"
    MMI_BT_OPP_OPPC_PUSH_RSP_FS_READ "[OPPMMI] mmi_bt_oppc_push_rsp_handler(), FS_read (%d)"
    MMI_BT_OPP_OPP_SND_ABORT "[OPPMMI] mmi_bt_opp_snd_abort()"
    MMI_BT_OPP_OPPC_CONN_TERM "[OPPMMI] mmi_opp_opc_connection_terminated(), cause (%d)"
    MMI_BT_OPP_OPPC_CTX "[OPPMMI] OPPC CTX(reqId: %d, goepId:%d, cmId:%d)"
    MMI_BT_OPP_OPPC_DISC_CONN_RSP "[OPPMMI] mmi_bt_oppc_disconnect_rsp_handler()"
    MMI_BT_OPP_OPPC_DISC_CONN_IND "[OPPMMI] mmi_bt_oppc_disconnect_ind_handler()"
    MMI_BT_OPP_OPPC_ABORT_IND "[OPPMMI] mmi_bt_oppc_abort_ind_handler()"
    MMI_BT_OPP_OPPS_CTX "[OPPMMI] OPPS CTX(reqId: %d, goepId:%d, cmId:%d)"
    MMI_BT_OPP_OPPS_ACTIVATE "[OPPMMI] mmi_bt_opps_activate()"
    MMI_BT_OPP_OPPS_DEACTIVATE "[OPPMMI] mmi_bt_opps_deactivate()"
    MMI_BT_OPP_OPPS_DISC_CLIENT "[OPPMMI] mmi_bt_opps_disconnect_client(), conn_id (%d)"
    MMI_BT_OPP_OPPS_CONN_TERM "[OPPMMI] mmi_opp_ops_connection_terminated(), cause (%d)"
    MMI_BT_OPP_ACCEPT_FILE_RECV "[OPPMMI] mmi_opp_accept_file_recv()"
    MMI_BT_OPP_REJECT_FILE_RECV "[OPPMMI] mmi_opp_reject_file_recv()"
    MMI_BT_OPP_CONFIRM_DEL_CB "[OPPMMI] mmi_opp_confirm_del_cb()"
    MMI_BT_OPP_DISCOVERY_DEVICE "[OPPMMI] mmi_opp_discovery_device()"
    MMI_BT_OPP_OPPS_FIRST_PUSH_IND "[OPPMMI] mmi_bt_opps_first_push_ind_handler()"
    MMI_BT_OPP_OPPS_FIRST_PUSH_IND_FS_OPEN "[OPPMMI] mmi_bt_opps_first_push_ind_handler(), FS_Open (%d)"
    MMI_BT_OPP_OPPS_FIRST_PUSH_IND_FRAG_LEN "[OPPMMI] mmi_bt_opps_first_push_ind_handler(), frag len (%d), total obj len (%d)"
    MMI_BT_OPP_OPPS_FIRST_PUSH_IND_FS_WRITE "[OPPMMI] mmi_bt_opps_first_push_ind_handler(), FS_Write (%d)"
    MMI_BT_OPP_OPPS_NEXT_PUSH_IND "[OPPMMI] mmi_bt_opps_next_push_ind_handler()"
    MMI_BT_OPP_OPPS_NEXT_PUSH_IND_FS_HDLE "[OPPMMI] mmi_bt_opps_next_push_ind_handler(), file handle (%d)"
    MMI_BT_OPP_OPPS_NEXT_PUSH_IND_FRAG_LEN "[OPPMMI] mmi_bt_opps_next_push_ind_handler(), frag len (%d), total obj len (%d)"
    MMI_BT_OPP_OPPS_NEXT_PUSH_IND_FS_WRITE "[OPPMMI] mmi_bt_opps_nextpush_ind_handler(), FS_Write (%d)"
    MMI_BT_OPP_OPPS_DISC_CONN_RSP "[OPPMMI] mmi_bt_opps_disconnect_rsp_handler()"
    MMI_BT_OPP_OPPS_DISC_CONN_IND "[OPPMMI] mmi_bt_opps_disconnect_ind_handler()"
    MMI_BT_OPP_OPPS_ABORT_IND "[OPPMMI] mmi_bt_opps_abort_ind_handler()"
    MMI_BT_OPP_OPPS_AUTH_IND_USB_MODE "[OPPMMI] mmi_bt_opps_authorize_ind_hdler(), USB MODE" 

  
   MMI_FTP_STATE_TRANSITION "[FTPMMI_GOEP] state transition. (%d -> %d)"
   MMI_FTP_STATE_ERROR "[FTPMMI_GOEP] wrong state. (%d)"

   MMI_BT_FTP_STATE_TRANSITION "[FTPMMI_GOEP] state transition. index: %d , state:(%d -> %d)"
   MMI_BT_FTP_STATE_ERROR "[FTPMMI_GOEP] wrong state. index: %d , state:(%d)"
   MMI_BT_FTP_INIT "[FTPMMI_GOEP] mmi_bt_ftp_init()"
   MMI_BT_FTP_DEINIT "[FTPMMI_GOEP] mmi_bt_ftp_deinit()"
   MMI_BT_FTP_EVENT_HDLR "[FTPMMI_GOEP] mmi_bt_ftp_event_hdlr()"
   MMI_BT_FTP_FTPS_ACTIVATE "[FTPMMI_GOEP] mmi_bt_ftps_activate()"
   MMI_BT_FTP_FTPS_DEACTIVATE "[FTPMMI_GOEP] mmi_bt_ftps_deactivate()"
   MMI_BT_FTP_FTPS_STATE "[FTPMMI_GOEP] FTPS check state. index:(%d) , state:(%d)"
   MMI_BT_FTP_FTPS_DISCONNECT_CLIENT "[FTPMMI_GOEP] mmi_bt_ftps_disconnect_client()"
   MMI_BT_FTP_FTPS_DISCONNECT_CLIENT_CHECK "[FTPMMI_GOEP] context index:(%d), state:(%d), context.g_conn_id:(%d), cm.g_conn_id(%d)"
   MMI_BT_FTP_FTPS_SET_FOLDER_SCR_CALLBACK "[FTPMMI_GOEP] mmi_bt_ftps_set_shared_fodler()"
   MMI_BT_FTP_FTPS_AUTHORIZE_ACCEPT "[FTPMMI_GOEP] mmi_bt_ftps_authorize_accept() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)"
   MMI_BT_FTP_FTPS_AUTHORIZE_REJECT "[FTPMMI_GOEP] mmi_bt_ftps_authorize_reject() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)"   
   MMI_BT_FTP_FTPS_AUTHORIZE_DEL_CB "[FTPMMI_GOEP] mmi_bt_ftps_authorize_confirm_del_cb() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)"   
   MMI_BT_FTP_FTPS_GET_DEV_NAME "[FTPMMI_GOEP] mmi_bt_ftps_get_dev_name() check context index:(%d), cur_goep_conn_id:(%d)"
   MMI_BT_FTP_FTPS_ICON_STOP_TIMER "[FTPMMI_GOEP] mmi_bt_ftps_pull_stop_icon_timer_expire_hdler()"
   MMI_BT_FTP_FTPC_CONNECT_SERVER "[FTPMMI_GOEP] mmi_bt_ftpc_connect_server()"
   MMI_BT_FTP_FTPC_CONNECT_SERVER_CHECK "[FTPMMI_GOEP] mmi_bt_ftpc_connect_server() check context index:(%d), state:(%d), lap:(%d), uap:(%d), nap:(%d)"
   MMI_BT_FTP_FTPC_IS_RECEIVING "[FTPMMI_GOEP] mmi_bt_ftpc_is_recving() FTPC check state. state:(%d)"
   MMI_BT_FTP_FTPC_IS_CANCELING "[FTPMMI_GOEP] mmi_bt_ftpc_is_canceling() FTPC check state. state:(%d)"
   MMI_BT_FTP_FTPC_IS_ABORTING "[FTPMMI_GOEP] mmi_bt_ftpc_is_aborting() FTPC check state. state:(%d)"
   MMI_BT_FTP_FTPC_CONNECT_CANCEL "[FTPMMI_GOEP] mmi_bt_ftpc_connect_cancel() FTPC check state. state:(%d)"
   MMI_BT_FTP_FTPC_SEND_DISCONNECT "[FTPMMI_GOEP] mmi_bt_ftpc_send_disconnect() FTPC check state. state:(%d)"
   MMI_BT_FTP_FTPC_BACK_FOLDER "[FTPMMI_GOEP] mmi_bt_ftpc_back_folder() state:(%d), goep_conn_id:(%d)"   
   MMI_BT_FTP_FTPC_ROOT_FOLDER "[FTPMMI_GOEP] mmi_bt_ftpc_root_folder() state:(%d), goep_conn_id:(%d)"
   MMI_BT_FTP_FTPC_CHANGE_FOLDER "[FTPMMI_GOEP] mmi_bt_ftpc_change_folder() state:(%d), goep_conn_id:(%d)"
   MMI_BT_FTP_FTPC_CHANGE_FOLDER_FORWARD "[FTPMMI_GOEP] mmi_bt_ftpc_change_folder(): Forward Folder"
   MMI_BT_FTP_FTPC_CHANGE_FOLDER_BACK "[FTPMMI_GOEP] mmi_bt_ftpc_change_folder(): Back Folder"
   MMI_BT_FTP_FTPC_CHANGE_FOLDER_REFRESH "[FTPMMI_GOEP] mmi_bt_ftpc_change_folder(): Refresh Folder"
   MMI_BT_FTP_FTPC_GET_FILE_OBJ "[FTPMMI_GOEP] mmi_bt_ftpc_get_file_obj() FTPC check state. state:(%d)"
   MMI_BT_FTP_FTPC_CONNECTION_TERMINATED "[FTPMMI_GOEP] mmi_bt_ftpc_connection_terminated()"
   MMI_BT_FTP_CNTX_INIT "[FTPMMI_GOEP] mmi_bt_ftp_cntx_init()"
   MMI_BT_FTP_WORK_FOLDER_INIT "[FTPMMI_GOEP] mmi_bt_ftp_work_folder_init()"
   MMI_BT_FTP_WORK_FOLDER_INIT_OPEN_NO_ERROR "[FTPMMI_GOEP] mmi_bt_ftp_work_folder_init() open no error"
   MMI_BT_FTP_WORK_FOLDER_INIT_OPEN_ERROR "[FTPMMI_GOEP] mmi_bt_ftp_work_folder_init() open error"
   MMI_BT_FTP_DISCONNECT_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr() ind->goep_id:(%d), ind->req_id:(%d), server->goep_id:(%d), server->state:(%d), client->goep_id:(%d), client->req_id:(%d), client->state:(%d)"
   MMI_BT_FTP_FTPS_DISCONNECT_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr() ind->goep_id:(%d), ind->req_id:(%d), server->goep_id:(%d), server->state:(%d) "
   MMI_BT_FTP_FTPC_DISCONNECT_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr() ind->goep_id:(%d), ind->req_id:(%d), client->goep_id:(%d), client->req_id:(%d), client->state:(%d)"
   MMI_BT_FTP_DISCONNECT_IND_HDLR_FIND_INDEX_FAILED "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- all open FTS and FTC:find index failed"   
   MMI_BT_FTPC_DISCONN_IND_HDLR_FIND_INDEX_FAILED_CONN_CACEL "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- client connect cacel case: find index failed"   
   MMI_BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPS "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- only open FTS: find index failed"   
   MMI_BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPC "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- only open FTC: find index failed"   
   MMI_BT_FTP_FTPS_CNTX_INIT "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init()"
   MMI_BT_FTP_FTPS_CNTX_INIT_FS_OPEN "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init(), folder path init FS_OPEN(%d)"
   MMI_BT_FTP_FTPS_CNTX_INIT_FS_READ "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init(), folder path init read root folder FS_READ(%d)"
   MMI_BT_FTP_FTPS_WRITE_OBJ "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), push_ind->pkt_type(%d)"
   MMI_BT_FTP_FTPS_WRITE_OBJ_PATH_ERROR "[FTPMMI_GOEP] mmi_bt_ftps_write_obj() -- path error"
   MMI_BT_FTP_FTPS_WRITE_OBJ_OPEN "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), file open FS_OPEN(%d)"
   MMI_BT_FTP_FTPS_WRITE_OBJ_WRITE "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), file write FS_WRITE(%d)"
   MMI_BT_FTP_FTPS_GEN_DUP_OBJ_NAME "[FTPMMI_GOEP] mmi_bt_ftps_gen_dup_name()"
   MMI_BT_FTP_FTPS_PUSH_OBJ "[FTPMMI_GOEP] mmi_bt_ftps_push_obj()"
   MMI_BT_FTP_FTPS_PUSH_OBJ_CHECK_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_push_obj(), check folder FS_OPEN(%d)"
   MMI_BT_FTP_FTPS_PUSH_OBJ_ERR_GOTO "[FTPMMI_GOEP] mmi_bt_ftps_push_obj() -- ERR GOTO"
   MMI_BT_FTP_FTPS_PUSH_DELETE "[FTPMMI_GOEP] mmi_bt_ftps_push_delete()"
   MMI_BT_FTP_FTPS_PUSH_DELETE_INVALID_NAME "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- invalid name"
   MMI_BT_FTP_FTPS_PUSH_DELETE_WITHOUT_NAME "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- without name"
   MMI_BT_FTP_FTPS_PUSH_DELETE_FILE "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- delete file FS_XDelete(%d)"
   MMI_BT_FTP_FTPS_PUSH_DELETE_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- delete folder FS_RemoveDir(%d)"
   MMI_BT_FTP_FTPS_PUSH_CONTINUE "[FTPMMI_GOEP] mmi_bt_ftps_write_obj_continue(), push_ind->pkt_type(%d)"
   MMI_BT_FTP_FTPS_PUSH_CONTINUE_WRITE "[FTPMMI_GOEP] mmi_bt_ftps_write_obj_continue(), file write FS_WRITE(%d)"
   MMI_BT_FTP_FTPS_CREATE_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_create_folder(), goep_conn_id(%d)"
   MMI_BT_FTP_FTPS_CREATE_FOLDER_CREATE_DIR "[FTPMMI_GOEP] mmi_bt_ftps_create_folder(), FS_CreateDir(%d)"
   MMI_BT_FTP_FTPS_SET_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_set_folder(), goep_conn_id(%d)"
   MMI_BT_FTP_FTPS_SET_PARENT_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_set_parent_folder(), goep_conn_id(%d)"
   MMI_BT_FTP_FTPS_PULL_CONTINUE "[FTPMMI_GOEP] mmi_bt_ftps_pull_continue(), goep_conn_id(%d)"
   MMI_BT_FTP_FTPS_SEND_OBJ "[FTPMMI_GOEP] mmi_bt_ftps_send_obj(), goep_conn_id(%d)"
   MMI_BT_FTP_FTPS_SEND_FOLDER_CONTENT "[FTPMMI_GOEP] mmi_bt_ftps_send_folder_content(), goep_conn_id(%d)"
   MMI_BT_FTP_FTPS_SEND_FOLDER_CONTENT_OPEN_ERROR "[FTPMMI_GOEP] mmi_bt_ftps_send_folder_content() -- open folder content file error "
   MMI_BT_FTP_FTPS_FIND_GOEP_ID_FAILED "[FTPMMI_GOEP] mmi_bt_ftps_find_goep_id() -- failed, server->goep_conn_id:(%d), find->goep_conn_id:(%d)"  
   MMI_BT_FTP_FTPS_SDP_DEREGISTER_CNF_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_sdp_deregister_cnf_hdlr(), state(%d)"
   MMI_BT_FTP_FTPS_REGISTER_SERVER_RSP_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_register_server_rsp_hdlr(), state(%d)"
   MMI_BT_FTP_FTPS_DEREGISTER_SERVER_RSP_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_deregister_server_rsp_hdlr(), state(%d)"
   MMI_BT_FTP_FTPS_CONNECT_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_connect_ind_hdlr(), state(%d)"
   MMI_BT_FTP_FTPS_PUSH_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_push_ind_hdlr(), state(%d)"
   MMI_BT_FTP_FTPS_PULL_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr(), state(%d), ind->pkt_type:(%d)"  
   MMI_BT_FTP_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr() -- continue write, state(%d)"  
   MMI_BT_FTP_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER_FS_ERROR "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr() -- gen folder error, ret(%d)"  
   MMI_BT_FTP_FTPS_SET_FOLDER_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_set_folder_ind_hdlr(), state(%d), ind->setpath_flag:(%d)"
   MMI_BT_FTP_FTPS_ABORT_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_abort_ind_hdlr(), state(%d)"
   MMI_BT_FTP_FTPS_AUTHORIZE_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_authorize_ind_hdlr(), state(%d)"
   MMI_BT_FTP_FTPS_SET_FS_FLAG "[FTPMMI_GOEP] mmi_bt_ftps_set_fs_flag()"
   MMI_BT_FTP_FTPS_READ_FS_FLAG "[FTPMMI_GOEP] mmi_bt_ftps_read_fs_flag_and_popup()"   
   MMI_BT_FTP_FTPS_USB_PLUG_IN "[FTPMMI_GOEP] mmi_bt_ftps_usb_plugin_hdle()"   
   MMI_BT_FTP_FTPC_CNTX_INIT "[FTPMMI_GOEP] mmi_bt_ftpc_cntx_init()"  
   MMI_BT_FTP_FTPC_RECEIVED_FOLDER_INIT "[FTPMMI_GOEP] mmi_bt_ftpc_received_folder_init()"
   MMI_BT_FTP_FTPC_RECEIVED_FOLDER_INIT_OPEN "[FTPMMI_GOEP] mmi_bt_ftpc_received_folder_init() FS_Open(%d)"
   MMI_BT_FTP_FTPC_RECEIVED_FOLDER_INIT_CREATE "[FTPMMI_GOEP] mmi_bt_ftpc_received_folder_init() FS_CreateDir(%d)"
   MMI_BT_FTP_FTPC_FS_RECOVERY "[FTPMMI_GOEP] mmi_bt_ftpc_fs_recovery() FS_CreateDir(%d)"
   MMI_BT_FTP_FTPC_FIND_GOEP_ID_FAILED "[FTPMMI_GOEP] mmi_bt_ftpc_find_goep_id() -- failed, client->goep_conn_id:(%d), find->goep_conn_id:(%d)"  
   MMI_BT_FTP_FTPC_GEN_DUP_OBJ_NAME "[FTPMMI_GOEP] mmi_bt_ftpc_gen_dup_name()"
   MMI_BT_FTP_FTPC_WRITE_OBJ "[FTPMMI_GOEP] mmi_bt_ftpc_write_obj(), rsp->pkt_type(%d)"
   MMI_BT_FTP_FTPC_WRITE_OBJ_OPEN "[FTPMMI_GOEP] mmi_bt_ftpc_write_obj(), file open FS_OPEN(%d)"
   MMI_BT_FTP_FTPC_WRITE_OBJ_WRITE "[FTPMMI_GOEP] mmi_bt_ftpc_write_obj(), file write FS_WRITE(%d)"
   MMI_BT_FTP_FTPC_WRITE_OBJ_CONTINUE "[FTPMMI_GOEP] mmi_bt_ftpc_write_obj_continue(), rsp->pkt_type(%d)"
   MMI_BT_FTP_FTPC_WRITE_OBJ_CONTINUE_WRITE "[FTPMMI_GOEP] mmi_bt_ftpc_write_obj_continue(), file write FS_WRITE(%d)"
   MMI_BT_FTP_FTPC_GET_FOLDER "[FTPMMI_GOEP] mmi_bt_ftpc_get_folder(), rsp->rsp_code(%d), rsp->pkt_type(%d), rsp->to_self(%d)"
   MMI_BT_FTP_FTPC_GET_FOLDER_PARSE_RESUME "[FTPMMI_GOEP] mmi_bt_ftpc_get_folder() -- parse resume, entity of cur folder:(%d), parsed cnt of cur folder:(%d)"
   MMI_BT_FTP_FTPC_GET_FOLDER_PARSE_DONE "[FTPMMI_GOEP] mmi_bt_ftpc_get_folder() -- parse done(goto), parse_return:(%d), entity of cur folder:(%d), parsed cnt of cur folder:(%d)"
   MMI_BT_FTP_FTPC_GET_FOLDER_CONTINUE_PARSE "[FTPMMI_GOEP] mmi_bt_ftpc_get_folder() -- continue parse(goto) send pull_rsp to self"
   MMI_BT_FTP_FTPC_GET_FOLDER_OPEN "[FTPMMI_GOEP] mmi_bt_ftpc_write_obj(), file open FS_OPEN(%d)"
   MMI_BT_FTP_FTPC_GET_FOLDER_WRITE "[FTPMMI_GOEP] mmi_bt_ftpc_write_obj(), file write FS_WRITE(%d)"
   MMI_BT_FTP_FTPC_GET_OBJ "[FTPMMI_GOEP] mmi_bt_ftpc_get_obj(), rsp->rsp_code(%d), rsp->pkt_type(%d)"
   MMI_BT_FTP_FTPC_PARSE_FOLDER_CONTENT "[FTPMMI_GOEP] mmi_bt_ftpc_parse_folder_content()"
   MMI_BT_FTP_FTPC_PARSE_FOLDER_CONTENT_PAUSE "[FTPMMI_GOEP] mmi_bt_ftpc_parse_folder_content() -- parsing pause!!, entity of cur folder:(%d)"
   MMI_BT_FTP_FTPC_FOLDER_LISTING_START_EL "[FTPMMI_GOEP] mmi_bt_ftpc_folder_listing_startElement() -- parsing pause!!, entity of cur folder:(%d)"
   MMI_BT_FTP_FTPC_GET_FOLDER_CONTENT "[FTPMMI_GOEP] mmi_bt_ftpc_get_folder_content(), state:(%d), goep_conn_id:(%d)"
   MMI_BT_FTP_FTPC_CONNECT_RSP_HDLR "[FTPMMI_GOEP] mmi_bt_ftpc_connect_rsp_hdlr(), state:(%d)"
   MMI_BT_FTP_FTPC_PULL_RSP_HDLR "[FTPMMI_GOEP] mmi_bt_ftpc_pull_rsp_hdlr(), state:(%d)"
   MMI_BT_FTP_FTPC_SET_FOLDER_RSP_HDLR "[FTPMMI_GOEP] mmi_bt_ftpc_set_folder_rsp_hdlr(), state:(%d)"
   MMI_BT_FTP_FTPC_ABORT_RSP_HDLR "[FTPMMI_GOEP] mmi_bt_ftpc_abort_rsp_hdlr(), state:(%d)"
   MMI_BT_FTP_CONNECTION_TERMINATED "[FTPMMI_GOEP] mmi_bt_ftp_connection_terminated(), server/client role:(%d)"
   MMI_BT_FTP_BLINKING "[FTPMMI_GOEP] mmi_bt_ftp_blinking(), server/client role:(%d), action:(%d)"
   MMI_BT_FTP_CHECK_FOLDER_EXISTED "[FTPMMI_GOEP] mmi_bt_ftp_check_folder_existed()"   
   MMI_BT_FTP_DELETE_FILE "[FTPMMI_GOEP] mmi_bt_ftp_delete_file()"   
   MMI_BT_FTP_FTPC_GET_LIST "[FTPMMI_SCR] mmi_bt_ftpc_get_list_files()"   
   MMI_BT_FTP_FTPC_GET_ALL "[FTPMMI_SCR] mmi_bt_ftpc_get_all_files()"
   MMI_BT_FTP_FTPC_FIND_NEXT_FILE "[FTPMMI_SCR] mmi_bt_ftpc_find_next_file()"
   MMI_BT_FTP_FTPC_CHECK_LIST "[FTPMMI_SCR] mmi_bt_ftpc_check_list()"
   MMI_BT_FTP_FTPC_FREE_LIST "[FTPMMI_SCR] mmi_bt_ftpc_free_list()"
   MMI_BT_FTP_FTPC_GET_NEXT_FILE "[FTPMMI_SCR] mmi_bt_ftpc_get_next_file()"
   MMI_BT_FTP_FTPC_RESET_PULL_VAR "[FTPMMI_SCR] mmi_bt_ftpc_reset_pull_variable()"
   MMI_BT_FTP_FTPC_PARSE_EL_START_ERR "[FTPMMI_GOEP] mmi_bt_ftpc_folder_listing_startElement() -- parser error and stopped."
   MMI_BT_FTP_FTPC_PARSE_EL_END_ERR "[FTPMMI_GOEP] mmi_bt_ftpc_folder_listing_endElement() -- parser error and stopped."
   MMI_BT_FTP_FTPC_STORE_ENDKEY "[FTPMMI_SCR] mmi_bt_ftpc_store_endkey_hdlr() -- Store END key handler."
   MMI_BT_FTP_FTPC_CLEAR_ENDKEY "[FTPMMI_SCR] mmi_bt_ftpc_clear_endkey_hdlr() -- Clear END key handler."
   MMI_BT_FTP_FTPC_EXE_ENDKEY "[FTPMMI_SCR] mmi_bt_ftpc_exe_endkey_hdlr() -- Execute END key handler."
   MMI_BT_FTP_FTPC_RENAME_OBJ "[FTPMMI_SCR] mmi_bt_ftpc_rename_recved_obj()."
   MMI_BT_FTP_FTPC_RECV_USB_IN "[FTPMMI_SCR] mmi_bt_ftpc_recving_usbin()."
   MMI_BT_FTP_FTPC_ABORTED_HDL "[FTPMMI_GOEP] mmi_bt_ftpc_receiving_aborted_hdlr()."
   MMI_BT_FTP_FTPC_DEL_TMP_FILE "[FTPMMI_GOEP] mmi_bt_ftpc_del_tmp_obj()."
   MMI_BT_FTP_FTPC_SET_FLAG_ABORT_REQ_SENT "[FTPMMI_GOEP] mmi_bt_ftpc_set_abort_req_sent_flag()."
   MMI_BT_FTP_FTPC_RESET_FLAG_ABORT_REQ_SENT "[FTPMMI_GOEP] mmi_bt_ftpc_reset_abort_req_sent_flag()."
   MMI_BT_FTP_FTPC_BROWSE_FILES_FAILED_TIMER "[FTPMMI_GOEP] mmi_bt_ftpc_browse_files_failed_timer_expire_hdler()."
   MMI_BT_FTP_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN "[FTPMMI_GOEP] mmi_bt_ftpc_parse_folder_content().   FS_OPEN(%d)"
   MMI_BT_FTP_WRITE_BUF2FILE_FS_WRITE "[FTPMMI_GOEP] mmi_bt_ftp_write_buf2file().   FS_WRITE(%d)"
   MMI_BT_FTP_FTPC_READ_FS_FLAG "[FTPMMI_GOEP] mmi_bt_ftpc_read_fs_flag_and_popup(). "
   MMI_BT_FTP_FTPC_SET_FS_FLAG "[FTPMMI_GOEP] mmi_bt_ftpc_set_fs_flag(). "
   MMI_BT_FTP_FTPC_ADD_HISTORY_BEFORE_CM "[FTPMMI_GOEP] mmi_bt_ftp_add_history_before_cm_marker(). "

   
   MMI_BT_MMI_OBEX_GET_PROFILE_SHARED_BUF "[BTMMIOBEX] mmi_bt_obex_get_profile_shared_buffer()."

   
   MMI_BPP_XHTML_BPP_COMPOSE_FILE_HEADER "[BPPMMI] bpp_compose_xhtml_file_header(), media:(%d)"    
   MMI_BPP_XHTML_BPP_COMPOSE_FILE_HEADER_WRITE_FAILED "[BPPMMI] bpp_compose_xhtml_file_header(), FS_Write ret:(%d)"    
   MMI_BPP_XHTML_BPP_COMPOSE_FILE_HEADER_INIT_FAILED "[BPPMMI] bpp_compose_xhtml_file_header()"    
   MMI_BPP_XHTML_BPP_COMPOSE_FILE_HEADER_OPEN_FAILED "[BPPMMI] bpp_compose_xhtml_file_header(), FS_Open ret:(%d)"    
   MMI_BPP_XHTML_BPP_COMPOSE_COLOR "[BPPMMI] bpp_compose_xhtml_write_color(), color:(%d)"    
   MMI_BPP_XHTML_BPP_COMPOSE_CHK_HEADER "[BPPMMI] bpp_compose_xhtml_chunk_header(), chk_num:(%d), len:(%d), chk_flag:(%d)"    
   MMI_BPP_XHTML_BPP_COMPOSE_CHK_PAYLOAD "[BPPMMI] bpp_compose_xhtml_chunk_payload(), tmp_buf*:(%d), tmp_buf_len:(%d)"    
   MMI_BPP_XHTML_BPP_COMPOSE_CHK_PAYLOAD_CNTX_BUFF "[BPPMMI] bpp_compose_xhtml_chunk_payload()"    
   MMI_BPP_XHTML_BPP_COMPOSE_CHK_PAYLOAD_TMP_BUFF "[BPPMMI] bpp_compose_xhtml_chunk_payload()"    
   MMI_BPP_XHTML_BPP_COMPOSE_CALCULATE_TMP_BUFF_LEN "[BPPMMI] bpp_compose_xhtml_calculate_tmp_buff_len()"
   MMI_BPP_XHTML_BPP_COMPOSE_CALCULATE_REF_BUFF_LEN "[BPPMMI] bpp_compose_xhtml_calculate_ref_buff_len()"
   MMI_BPP_XHTML_BPP_COMPOSE_CALCULATE_IMG_OFFSET "[BPPMMI] bpp_compose_xhtml_calculate_img_offset()"
   MMI_BPP_XHTML_BPP_COMPOSE_NEW_DATA_ELEMENT_ATTR "[BPPMMI] bpp_compose_xhtml_new_data_element_attr()"
   MMI_BPP_XHTML_BPP_COMPOSE_NEW_TXT_DATA "[BPPMMI] bpp_compose_xhtml_new_txt_data(), write_file_flag:(%d), app_callback:(%d)"
   MMI_BPP_XHTML_BPP_NEW_TXT_WRITE_WHOLE_FILE "[BPPMMI] bpp_compose_xhtml_new_txt_data()"
   MMI_BPP_XHTML_BPP_NEW_TXT_WRITE_WHOLE_BUFF "[BPPMMI] bpp_compose_xhtml_new_txt_data()"
   MMI_BPP_XHTML_BPP_NEW_TXT_WRITE_FAILED "[BPPMMI] bpp_compose_xhtml_new_txt_data(), FS_Write ret:(%d)"    
   MMI_BPP_XHTML_BPP_NEW_TXT_READ_FAILED "[BPPMMI] bpp_compose_xhtml_new_txt_data(), FS_Read ret:(%d)"    
   MMI_BPP_XHTML_BPP_COMPOSE_NEW_IMG_DATA "[BPPMMI] bpp_compose_xhtml_new_img_data(), write_file_flag:(%d), app_callback:(%d)"
   MMI_BPP_XHTML_BPP_COMPOSE_NEW_IMAGE_HEADER "[BPPMMI] bpp_compose_xhtml_new_image_header(), image_type:(%d)"
   MMI_BPP_XHTML_BPP_NEW_IMG_WRITE_FAILED "[BPPMMI] bpp_compose_xhtml_new_img_data(), FS_Write ret:(%d)"
   MMI_BPP_XHTML_BPP_NEW_IMG_READ_FAILED "[BPPMMI] bpp_compose_xhtml_new_img_data(), FS_Read ret:(%d)"    
   MMI_BPP_XHTML_BPP_NEW_IMG_WRITE_WHOLE_FILE "[BPPMMI] bpp_compose_xhtml_new_img_data()"
   MMI_BPP_XHTML_BPP_NEW_IMG_WRITE_WHOLE_BUFF "[BPPMMI] bpp_compose_xhtml_new_img_data()"
   MMI_BPP_XHTML_BPP_COMPOSE_DATA_PAUSE "[BPPMMI] bpp_compose_xhtml_data_pause()"
   MMI_BPP_XHTML_BPP_COMPOSE_DATA_RESUME "[BPPMMI] bpp_compose_xhtml_data_resume_hdlr()"
   MMI_BPP_XHTML_BPP_DATA_RESUME_WRITE_FAILED "[BPPMMI] bpp_compose_xhtml_data_resume_hdlr(), FS_Write ret:(%d)"
   MMI_BPP_XHTML_BPP_DATA_RESUME_READ_FAILED "[BPPMMI] bpp_compose_xhtml_data_resume_hdlr(), FS_Read ret:(%d)"    
   MMI_BPP_XHTML_BPP_CANCEL_COMPOSE "[BPPMMI] bpp_cancel_xhtml_composing()"
   MMI_BPP_XHTML_BPP_COMPOSE_CNTX_RESET "[BPPMMI] bpp_compose_xhtml_cntx_reset()"
   MMI_BPP_XHTML_BPP_COMPOSE_DATA_ELEMENT "[BPPMMI] bpp_compose_xhtml_data_element(), data->type:(%d), mmi_bpp_xhtml_cntx_p->status:(%d), data->new_line:(%d)"
   MMI_BPP_XHTML_WORK_FOLDER_INIT "[BPPMMI] bpp_xhtml_work_folder_init()"
   MMI_BPP_XHTML_WORK_FOLDER_INIT_USB_MS "[BPPMMI] bpp_xhtml_work_folder_init()"   
   MMI_BPP_XHTML_WORK_FOLDER_INIT_OPEN_ERROR "[BPPMMI] bpp_xhtml_work_folder_init()"      
   MMI_BPP_XHTML_APP_COMPOSE_TABLE_CSS "[BPPMMI] app_config_table_css(), caption_side:(%d), text_align:(%d), margin:(%d), font:(%d)"    
   MMI_BPP_XHTML_APP_COMPOSE_STYLE_CLASS "[BPPMMI] app_config_style_class()"    
   MMI_BPP_XHTML_APP_COMPOSE_STYLE_CLASS_WRITE_FAILED "[BPPMMI] app_config_style_class(), FS_Write ret:(%d)"       
   MMI_BPP_XHTML_APP_COMPOSE_FILE_START "[BPPMMI] app_compose_xhtml_file_start()"    
   MMI_BPP_XHTML_APP_COMPOSE_FILE_START_WRITE_FAILED "[BPPMMI] app_compose_xhtml_file_start(), FS_Write ret:(%d)" 
   MMI_BPP_XHTML_APP_COMPOSE_FILE_FAILED "[BPPMMI] app_compose_xhtml_file_failed()"    
   MMI_BPP_XHTML_APP_COMPOSE_FILE_END "[BPPMMI] app_compose_xhtml_file_end()"    
   MMI_BPP_XHTML_APP_COMPOSE_FILE_END_CB "[BPPMMI] app_compose_xhtml_file_end_cb()"    
   MMI_BPP_XHTML_APP_COMPOSE_FILE_END_WRITE_FAILED "[BPPMMI] app_compose_xhtml_file_end(), FS_Write ret:(%d)" 
   MMI_BPP_XHTML_APP_COMPOSE_TABLE_ELEMENT_START "[BPPMMI] app_compose_xhtml_table_element_start()"    
   MMI_BPP_XHTML_APP_COMPOSE_TABLE_START_WRITE_FAILED "[BPPMMI] app_compose_xhtml_table_element_start(), FS_Write ret:(%d)" 
   MMI_BPP_XHTML_APP_COMPOSE_TABLE_ELEMENT_END "[BPPMMI] app_compose_xhtml_table_element_end()"    
   MMI_BPP_XHTML_APP_COMPOSE_TABLE_END_WRITE_FAILED "[BPPMMI] app_compose_xhtml_table_element_end(), FS_Write ret:(%d)" 
   MMI_BPP_XHTML_APP_COMPOSE_ROW_ELEMENT_START "[BPPMMI] app_compose_xhtml_row_element_start()"    
   MMI_BPP_XHTML_APP_COMPOSE_ROW_START_WRITE_FAILED "[BPPMMI] app_compose_xhtml_row_element_start(), FS_Write ret:(%d)" 
   MMI_BPP_XHTML_APP_COMPOSE_ROW_ELEMENT_END "[BPPMMI] app_compose_xhtml_row_element_end()"    
   MMI_BPP_XHTML_APP_COMPOSE_ROW_END_WRITE_FAILED "[BPPMMI] app_compose_xhtml_row_element_end(), FS_Write ret:(%d)" 
   MMI_BPP_XHTML_APP_COMPOSE_DATA_ELEMENT_START "[BPPMMI] app_compose_xhtml_data_element_start()"    
   MMI_BPP_XHTML_APP_COMPOSE_DATA_START_WRITE_FAILED "[BPPMMI] app_compose_xhtml_data_element_start(), FS_Write ret:(%d)" 
   MMI_BPP_XHTML_APP_COMPOSE_DATA_ELEMENT_END "[BPPMMI] app_compose_xhtml_data_element_end()"    
   MMI_BPP_XHTML_APP_COMPOSE_DATA_END_WRITE_FAILED "[BPPMMI] app_compose_xhtml_data_element_end(), FS_Write ret:(%d)" 
   MMI_BPP_XHTML_APP_COMPOSE_DATA_ELEMENT_FROM_FILE "[BPPMMI] app_compose_xhtml_data_element_from_file()"
   MMI_BPP_XHTML_APP_COMPOSE_DATA_ELEMENT_FROM_BUFF "[BPPMMI] app_compose_xhtml_data_element_from_buff()"

   
   MMI_BPP_STATUS_TRANSITION "[BPPMMI] status transition. (%d -> %d)"
   MMI_BPP_STATUS_ERROR "[BPPMMI] wrong status. (%d)"
   MMI_BPP_INIT "[BPPMMI] mmi_bt_bpp_init()"       
   MMI_BPP_DEINIT "[BPPMMI] mmi_bt_bpp_deinit()"       
   MMI_BPP_RESET "[BPPMMI] mmi_bt_bpp_reset()"       
   MMI_BPP_CNTX_INIT "[BPPMMI] mmi_bt_bpp_cntx_init()"          
   MMI_BPP_EVENT_HDLR_INIT "[BPPMMI] mmi_bt_bpp_event_hdlr_init()"          
   MMI_BPP_APP_IS_PRINTING "[BPPMMI] mmi_bt_bpp_app_is_printing(), current application:(%d), current status:(%d)"       
   MMI_BPP_IS_CONNECTING "[BPPMMI] mmi_bt_bpp_app_is_connecting(), current application:(%d), current status:(%d)"       
   MMI_BPP_APP_PRINT "[BPPMMI] mmi_bt_bpp_app_print(), register application:(%d), register callback:(%d)"       
   MMI_BPP_CONNECT_PRINTER "[BPPMMI] mmi_bt_bpp_connect_printer()"       
   MMI_BPP_DISCONNECT_PRINTER "[BPPMMI] mmi_bt_bpp_disconnect_printer()"       
   MMI_BPP_GET_PRINTER_ATTR "[BPPMMI] mmi_bt_bpp_get_printer_attr(), got_attr_flag:(%d)"       
   MMI_BPP_SET_PRINTER_ATTR "[BPPMMI] mmi_bt_bpp_set_printer_attr()"       
   MMI_BPP_DOCUMENT_COMPOSE_DONE "[BPPMMI] mmi_bt_bpp_document_compose_done(), doc_flag:(%d)"
   MMI_BPP_AUTH_SEND "[BPPMMI] mmi_bt_bpp_auth_send()"
   MMI_BPP_AUTH_REJECT "[BPPMMI] mmi_bt_bpp_auth_reject()"
   MMI_BPP_CREATE_JOB "[BPPMMI] mmi_bt_bpp_create_job()"
   MMI_BPP_CREATE_JOB_CANT_SUPPORT_INLINE "[BPPMMI] mmi_bt_bpp_create_job() -- this printer can't support inline image"   
   MMI_BPP_PRINT "[BPPMMI] mmi_bt_bpp_print()"       
   MMI_BPP_DISC_TIMER_EXPIRE_HDLR "[BPPMMI] mmi_bt_bpp_disc_timer_expire_hdlr()"
   MMI_BPP_TIMER_EXPIRE_HDLR "[BPPMMI] mmi_bt_bpp_obex_timer_expire_hdlr()"       
   MMI_BPP_CONNECT_TIMER_EXPIRE_HDLR "[BPPMMI] mmi_bt_bpp_connect_timer_expire_hdlr()"       
   MMI_BPP_EVENT_IND_HDLR "[BPPMMI] mmi_bt_bpp_event_ind_hdlr(), current status:(%d)"       
   MMI_BPP_EVENT_IND_HDLR_ERROR_EVENT "[BPPMMI] mmi_bt_bpp_event_ind_hdlr(), event error case"       
   MMI_BPP_EVENT_IND_HDLR_INSERT_TROUBLE "[BPPMMI] mmi_bt_bpp_event_ind_hdlr()"       
   MMI_BPP_DISCONNECT_IND_HDLR "[BPPMMI] mmi_bt_bpp_disconnect_ind_hdlr(), current screen_id:(%d), current status:(%d)"       
   MMI_BPP_PROG_UPDATE_IND_ERROR "[BPPMMI] mmi_bt_bpp_prog_update_ind_hdlr(), ind->conn_id(%d), bpp->g_conn_id(%d), ind->job_id(%d), bpp->job_id(%d)"       
   MMI_BPP_BACKGROUND_PRINT "[BPPMMI] mmi_bt_bpp_background_print"       
   MMI_BPP_FOREGROUND_PRINT "[BPPMMI] mmi_bt_bpp_foreground_print, current status:(%d)"       
   MMI_BPP_PLUG_OUT_HDLR "[BPPMMI] mmi_bt_bpp_plug_out_hdlr(), mmi_bpp_status:(%d), curr_scr_id(%d)"       
   MMI_BPP_CALL_BACK_APP "[BPPMMI] mmi_bt_bpp_cm_call_back(), MMI_BOOL result:(%d), lap:(%d), uap:(%d), nap:(%d) "
   

   
   MMI_BPP_BUSY_POPUP "[BPPSCRMMI] mmi_bt_bpp_busy_popup()"       
   MMI_BPP_CONNECT_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_connect_del_cb()"
   MMI_BPP_DUMMY_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_dummy_del_cb()"   
   MMI_BPP_CREATING_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_creating_del_cb()"
   MMI_BPP_COMPOSING_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_composing_del_cb()"
   MMI_BPP_PRINTING_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_printing_del_cb()"
   MMI_BPP_GETTING_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_getting_del_cb()"       
   MMI_BPP_AUTH_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_auth_del_cb()"       
   MMI_BPP_PRINT_SETTING_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_print_setting_del_cb()"       
   MMI_BPP_EXIT_AUTHENTICATING "[BPPSCRMMI] mmi_bt_bpp_exit_authenticating()"       
   MMI_BPP_EXIT_PRINTING "[BPPSCRMMI] mmi_bt_bpp_exit_printing()"       
   MMI_BPP_EXIT_PRINT_SETTING "[BPPSCRMMI] mmi_bt_bpp_exit_print_setting()"
   MMI_BPP_PRE_ENTRY_DEV_SEL "[BPPSCRMMI] mmi_bt_pre_entry_printer_device_select_screen()"
   MMI_BPP_ENTRY_CONNECTING "[BPPSCRMMI] mmi_bt_bpp_entry_connecting()"
   MMI_BPP_ENTRY_PRINTING "[BPPSCRMMI] mmi_bt_bpp_entry_printing()"       
   MMI_BPP_ENTRY_AUTHENTICATING "[BPPSCRMMI] mmi_bt_bpp_entry_authenticating()"       
   MMI_BPP_ENTRY_AUTHENTICATING_INSERT "[BPPSCRMMI] mmi_bt_bpp_entry_authenticating() -- Insert History"       
   MMI_BPP_ENTRY_GETTING "[BPPSCRMMI] mmi_bt_bpp_entry_getting()"       
   MMI_BPP_ENTRY_TROUBLE "[BPPSCRMMI] mmi_bt_bpp_entry_trouble()"       
   MMI_BPP_PRE_ENTRY_PRINT_SETTING "[BPPSCRMMI] mmi_bt_bpp_pre_entry_print_setting(), got_attr:(%d)"       
   MMI_BPP_ENTRY_PRINT_SETTING "[BPPSCRMMI] mmi_bt_bpp_entry_print_setting()"       
   MMI_BPP_POPUP "[BPPSCRMMI] mmi_bt_bpp_popup(), popup_cause:(%d)"       
   MMI_BPP_BLINKING "[BPPSCRMMI] mmi_bt_bpp_blinking(), blink_action:(%d)"       
   MMI_BPP_DEL_SCR "[BPPSCRMMI] mmi_bt_bpp_del_scr(), scr_id:(%d)"       
   MMI_BPP_PRINT_SETTING_FILL_INLINE_STRUCT "[BPPSCRMMI] mmi_bt_bpp_print_setting_fill_inline_struct()"       
   MMI_BPP_PRINT_SETTING_FILL_INLINE_DEFAULT "[BPPSCRMMI] mmi_bt_bpp_print_setting_fill_inline_default()"       
   MMI_BPP_ENTRY_PREVIEW "[BPPSCRMMI] mmi_bt_bpp_entry_preview()"       
   MMI_BPP_SELECT_PREVIEW_IMG_PORTRAIT_SETTING "[BPPSCRMMI] mmi_bt_bpp_select_preview_img(), layout: Portrait"      
   MMI_BPP_SELECT_PREVIEW_IMG_SIDES_SETTING "[BPPSCRMMI] mmi_bt_bpp_select_preview_img(), layout: Two-Sided"      
   MMI_BPP_SELECT_PREVIEW_IMG_PAGES_2_SETTING "[BPPSCRMMI] mmi_bt_bpp_select_preview_img(), layout: 2 pages per sheet"      
   MMI_BPP_SELECT_PREVIEW_IMG_PAGES_4_SETTING "[BPPSCRMMI] mmi_bt_bpp_select_preview_img(), layout: 4 pages per sheet"      
   MMI_BPP_DISCONNECT "[BPPSCRMMI] mmi_bt_bpp_disconnect()"       
   MMI_BPP_PRINT_SETTING_DISCONNECT "[BPPSCRMMI] mmi_bt_bpp_print_setting_disconnect()"       
   MMI_BPP_CREATE_JOB_DISCONNECT "[BPPSCRMMI] mmi_bt_bpp_create_job_disconnect()"       
   MMI_BPP_COMPOSING_DISCONNECT "[BPPSCRMMI] mmi_bt_bpp_composing_disconnect()"       
   MMI_BPP_PRINTING_DISCONNECT "[BPPSCRMMI] mmi_bt_bpp_printing_disconnect()"       
   MMI_BPP_PRINT_SETTING_CHECK "[BPPSCRMMI] mmi_bt_bpp_print_setting_check()"       
   MMI_BPP_DISCONNECT_CLEAR_SCRS "[BPPSCRMMI] mmi_bt_bpp_disconnect_clear_scrs()"       
   MMI_BPP_DEINIT_CLEAR_SCRS "[BPPSCRMMI] mmi_bt_bpp_disconnect_clear_scrs()"       
   MMI_BPP_ENTRY_DISCONNECTING "[BPPSCRMMI] mmi_bt_bpp_entry_disconnecting()"       
   MMI_BPP_DISCONNECT_DEL_CB "[BPPSCRMMI] mmi_bt_bpp_disconnect_del_cb()"       
   MMI_BPP_ENTRY_CREATING "[BPPSCRMMI] mmi_bt_bpp_entry_creating()"       
   MMI_BPP_ENTRY_COMPOSING "[BPPSCRMMI] mmi_bt_bpp_entry_composing()"       
   MMI_BPP_SCR_CNTX_INIT "[BPPSCRMMI] mmi_bt_bpp_scr_cntx_init()"          
   
   
   
   MMI_AVRCP_STATE_TRANSITION "[AVRCPMMI] state transition for chnl [%d]: (%d -> %d)"
   MMI_AVRCP_STATE_ERROR "[AVRCPMMI] wrong state for chnl [%d]: (%d)"
   MMI_AVRCP_STATE_CURRENT "[AVRCPMMI] current state for chnl [%d]: (%d)"   
   
   MMI_AVRCP_INIT_EVENT_HDLR "[AVRCPMMI] mmi_bchs_avrcp_init_event_handler()"

   
   MMI_A2DP_STATE_TRANSITION "[A2DPMMI] state transition: (%d -> %d)"
   MMI_A2DP_STATE_ERROR "[A2DPMMI] wrong state: (%d)"
   MMI_A2DP_STATE_CURRENT "[A2DPMMI] current state: (%d)"   

   MMI_A2DP_INIT_EVENT_HDLR "[A2DPMMI] mmi_bchs_avrcp_init_event_handler()"
   
    
   MMI_BT_BIP_INIT "[BIP_MMI] mmi_bt_bip_init..."   
   MMI_BT_BIP_DEINIT "[BIP_MMI] mmi_bt_bip_deinit..."   
   MMI_BT_BIP_BIPS_ACTIVATE "[BIP_MMI] mmi_bt_bipr_activate..."   
   MMI_BT_BIP_BIPS_DEACTIVATE "[BIP_MMI] mmi_bt_bipr_deactivate...state=%d"   
   MMI_BT_BIP_BIPS_DISCONNECT_CLIENT "[BIP_MMI] mmi_bt_bipr_disconnect_client..state=%d"   
   MMI_BT_BIP_SEND_IMAGE_TO_DEV "[BIP_MMI] mmi_bt_bip_send_image_to_dev..."   
   MMI_BT_BIPI_CONNECT_SERVER "[BIP_MMI] mmi_bt_bipi_connect_responder...state=%d"   
   MMI_BT_BIPR_SET_FOLDER_SCR_CALLBACK "[BIP_MMI] mmi_bt_bipr_set_shared_fodler..."   
   MMI_BT_BIP_CONNECT_CNF "[BIP_MMI] connect_cnf: cnf_code = (%d), state=%d"   
   MMI_BT_BIP_PUSH_CONNECT_CNF "[BIP_MMI] push_connect_cnf..."   
   MMI_BT_BIP_PULL_CONNECT_CNF "[BIP_MMI] mmi_bt_bipi_pull_connect_cnf_hdlr..."   
   MMI_BT_BIP_GET_IMGLIST_NUM "[BIP_MMI] img_handle_num_in_imglist = (%d)"   
   MMI_BT_BIPR_ACTIVATE_CNF "[BIP_MMI] mmi_bt_bipr_activate_cnf_hdlr...state=(%d)"   
   MMI_BT_BIPR_SDP_REGISTER_CNF "[BIP_MMI] mmi_bt_bipr_sdp_register_cnf_hdlr...,result=%d"   
   MMI_BT_BIPR_SDP_DEREGISTER_CNF "[BIP_MMI] mmi_bt_bipr_sdp_deregister_cnf_hdlr...state=%d"   
   MMI_BT_BIPR_DEACTIVATE_CNF "[BIP_MMI] mmi_bt_bipr_deactivate_cnf_hdlr...state=%d"   
   MMI_BT_BIPR_CONNECT_IND "[BIP_MMI] mmi_bt_bipr_connect_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_DISCONNECT_IND "[BIP_MMI] disconnect_ind..."   
   MMI_BT_BIPR_GET_CAPABILITIES_IND "[BIP_MMI] bipr_get_capabilities_ind_hdlr...state=(%d)"   
   MMI_BT_BIPR_PUT_IMG_IND "[BIP_MMI] mmi_bt_bipr_put_img_ind_hdlr...state=(%d)"   
   MMI_BT_BIPR_PUT_THM_IND "[BIP_MMI] put_thm_ind...state=(%d)"   
   MMI_BT_BIPR_GET_IMGLIST_IND "[BIP_MMI] mmi_bt_bipr_get_imglist_ind_hdlr...state=(%d)"   
   MMI_BT_BIPR_GET_IMGPROP_IND "[BIP_MMI] mmi_bt_bipr_get_imgprop_ind_hdlr...state=(%d)"   
   MMI_BT_BIPR_GET_IMG_IND "[BIP_MMI] mmi_bt_bipr_get_img_ind_hdlr...state=(%d)"   
   MMI_BT_BIPR_GET_THM_IND "[BIP_MMI] mmi_bt_bipr_get_thm_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_ABORT_IND "[BIP_MMI] mmi_bt_bipr_abort_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_COMPLETE_IND "[BIP_MMI] mmi_bt_bipr_complete_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_PUSH_CONTINUE_IND "[BIP_MMI] mmi_bt_bipi_push_continue_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_PULL_CONTINUE_IND "[BIP_MMI] mmi_bt_bipi_pull_continue_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_RESPONDER_CONTINUE_IND "[BIP_MMI] MMI_BT_BIP_RESPONDER_CONTINUE_IND..."   
   MMI_BT_BIP_PUSH_DISCONNECT_IND "[BIP_MMI] mmi_bt_bipi_push_disconnect_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_PULL_DISCONNECT_IND "[BIP_MMI] mmi_bt_bipi_pull_disconnect_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_RESPONDER_DISCONNECT_IND "[BIP_MMI] mmi_bt_bipr_disconnect_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_INITIATOR_DISCONNECT_IND "[BIP_MMI] mmi_bt_bipi_disconnect_ind_hdlr...state=(%d)"   
   MMI_BT_BIP_ABORT_CNF "[BIP_MMI] abort_cnf: cnf_code = (%d),state=%d"   
   MMI_BT_BIP_GET_CAPABILITIES_CNF "[BIP_MMI] get_capabilities_cnf: cnf_code=(%d),state=%d"   
   MMI_BT_BIP_PUT_IMG_CNF "[BIP_MMI] put_img_cnf: cnf_code=(%d),state=(%d)"   
   MMI_BT_BIP_PUT_THM_CNF "[BIP_MMI] put_imgthm_cnf: cnf_code=(%d),state=(%d)"   
   MMI_BT_BIP_GET_IMG_CNF "[BIP_MMI] get_img_cnf: cnf_code = (%d),state=(%d)"   
   MMI_BT_BIP_GET_IMGLIST_CNF "[BIP_MMI] get_imglist_cnf: cnf_code = (%d),state=(%d)"   
   MMI_BT_BIP_GET_IMGPROP_CNF "[BIP_MMI] get_imgprop_cnf: cnf_code = (%d),state=(%d)"   
   MMI_BT_BIP_GET_THM_CNF "[BIP_MMI] get_imgthm_cnf: cnf_code = (%d),state=(%d)"   
   MMI_BT_BIP_PUSH_ABORT "[BIP_MMI] push_abort...state=(%d)"   
   MMI_BT_BIP_SERVER_IS_RECEIVING "[BIP MMI]mmi_bip_server_is_receiving...state=%d"
   MMI_BT_BIP_CONNECT_PULL_RESPONDER "[BIP MMI]mmi_bt_bipi_connect_pull_responder..initiator state=%d"
   MMI_BT_BIP_INIT_SHARED_FOLDER "[BIP MMI]responder shared_folder: "
   MMI_BT_BIP_SEND_MSG "[BIP MMI]send msg : %d"
   MMI_BT_BIP_STOP_BLINKING_TIMER_HDLR "[BIP MMI]bipr_icon_blinking_timeout"
   MMI_BT_BIP_RENAME_PUSHED_THM "[BIP MMI]mmi_bt_bip_rename_pushed_thm, img_name: "
   MMI_BT_BIP_SEND_PUSH_REQ "[BIP MMI]Entering mmi_bt_bipi_send_push_req ..."
   MMI_BT_BIP_FMGR_PUSH_IMG_CALLBACK "[BIP MMI]bipi_fmgr_forward_to_bip_callback...result=(%d)"
   MMI_BT_BIP_PUSH_IS_SENDING "[BIP MMI] mmi_bt_bipi_push_is_sending. initiator state=(%d)"
   MMI_BT_BIP_PUSH_IS_ABORTING "[BIP MMI] mmi_bt_bipi_push_is_aborting. initiator state=(%d)"
   MMI_BT_BIP_PUSH_DEINIT "[BIP MMI]===bipi_push_deinit .state=%d.."
   MMI_BT_BIP_GET_RECV_IMG_CNT "[BIP MMI]bip_get_recv_images_cnt :(%d)"
   MMI_BT_BIP_SET_RECV_IMG_CNT "[BIP MMI]bip_set_recv_images_cnt :(%d)"
   MMI_BT_BIP_SEND_DISCONNECT_REQ "[BIP MMI]bip_send_disconnect_req...type=(%d)"
   MMI_BT_BIP_SEND_ABORT_REQ "[BIP MMI] bipi send ABORT req...state=%d"
   MMI_BT_BIP_PUSH_ABORT_CNF "[BIP MMI]bipi_push_abort_cnf_hdlr call send_disconnect_req..."
   MMI_BT_BIP_SEND_GET_IMGLIST_REQ "[BIP MMI]bipi_send_get_imglist_req...state=(%d)"
   MMI_BT_BIP_SEND_GET_IMG_REQ "[BIP MMI]bipi_send_get_img_req...state=(%d)"
   MMI_BT_BIP_SEND_GET_IMGPROP_REQ "[BIP MMI]bipi_send_get_imgprop_req...state=(%d)"
   MMI_BT_BIP_SEND_GET_IMGTHM_REQ "[BIP MMI]bipi_send_get_imgthm_req...state=(%d)"
   MMI_BT_BIP_AUTH_CONFIRM_DEL_CB "[BIP MMI] bipr_authorize_confirm_del_cb, state=%d"
   MMI_BT_BIP_PULL_SIMPLE_ABORT "[BIP MMI]===bipi_pull_simple_abort...state=(%d)"
   MMI_BT_BIP_PULL_ABORT_GETIMG "[BIP MMI]===bipi_pull_abort_getting_images...state=(%d)"
   MMI_BT_BIP_PULL_ABORT_CNF "[BIP MMI]bipi_pull_abort_cnf_hdlr...state=(%d),curOper=(%d)"
   MMI_BT_BIP_PULL_IS_RECVING "[BIP MMI]mmi_bt_bipi_pull_is_recving...state=%d"
   MMI_BT_BIP_PULL_IS_CONNECTING "[BIP MMI]mmi_bt_bipi_pull_is_connecting...state=%d"
   MMI_BT_BIP_PULL_IS_CANCELING "[BIP MMI]mmi_bt_bipi_pull_is_canceling...state=%d"
   MMI_BT_BIP_PULL_IS_ABORTING "[BIP MMI]mmi_bt_bipi_pull_is_aborting...state=%d"
   MMI_BT_BIP_PULL_IS_GETTING_THM "[BIP MMI]mmi_bt_bipi_pull_is_getting_thm...state=%d"
   MMI_BT_BIP_PULL_CONNECT_CANCEL "[BIP MMI]bipi_pull_connect_cancel...state=(%d)"
   MMI_BT_BIP_EXIT_IMAGE_BROWSER "[BIP MMI]mmi_bt_bipi_pull_exit_image_browser...state=%d"
   MMI_BT_BIP_EXIT_RECVING "[BIP MMI]mmi_bt_bipi_pull_exit_recving...state=%d"
   MMI_BT_BIP_PULL_GET_IMAGE "[BIP MMI]bipi_pull_get_image...state=%d"
   MMI_BT_BIP_PULL_GET_FILENAME_WITH_HANDLE "[BIP MMI]get_filename_with_imghandle %s..."
   MMI_BT_BIP_CONSTRUCT_IMGLIST "[BIP MMI]mmi_bt_bipr_construct_img_list ..."
   MMI_BT_BIP_GET_PARTIAL_IMGLIST "[BIP MMI]mmi_bt_bip_get_partial_imglist, start_index=%d, max_num=%d"
   MMI_BT_BIP_I_CONNECTION_TERMINATED "[BIP MMI]mmi_bt_bipi_connection_terminated...state=%d"
   MMI_BT_BIP_R_CONNECTION_TERMINATED "[BIP MMI]mmi_bt_bipi_connection_terminated...state=%d"
   MMI_BT_BIP_REQUEST_TIMEOUT "[BIP MMI]mmi_bt_bip_request_timeout_hdlr...state=%d"
   MMI_BT_BIP_GENERATE_THM "[BIP MMI]Generating thumbnail...img_path: "
   MMI_BT_BIP_THM_PATH "[BIP MMI]thm_path: "
   MMI_BT_BIP_GDI_ENCODING_RETURN "[BIP MMI] gdi_image_encode_file_to_jpeg return: (%d)"
   MMI_BT_BIP_GDI_ENCODING_SUCCESS "[BIP MMI]Generating thumbnail...SUCCESS!"
   MMI_BT_BIP_GDI_ENCODING_FAILED "[BIP MMI]Generating thumbnail...FAILED!"
   MMI_BT_BIP_RENAME_PULLED_THM "[BIP MMI]mmi_bt_bip_rename_pulled_thm..."
   MMI_BT_BIP_CONSTRUCT_SEND_THM_PATH "[BIP MMI]construct_thm_path..."
   MMI_BT_BIP_GEN_DUP_NAME "[BIP MMI]mmi_bt_bip_gen_dup_name ..old_name: "
   MMI_BT_BIP_GEN_NEW_NAME "[BIP MMI]mmi_bt_bip_gen_dup_name ..new_name: "
   MMI_BT_BIP_RENAME_RECVED_FILE "[BIP MMI]mmi_bt_bip_rename_recved_file ..dst_name..src_name"
   MMI_BT_BIP_RENAME_RECVED_FILE_DST_FILE "[BIP MMI]mmi_bt_bip_rename_recved_file ..dst_file: "
   MMI_BT_BIP_DRM_FORBIDDEN "[BIP MMI]---DRM FORBIDDEN---"
   MMI_BT_BIP_FILE_PATH_TO_FORWARD "[BIP MMI] send_file_through_BT: "
   MMI_BT_BIP_SENDFILE_ISNOT_IMAGE "[BIP MMI]==file to push is NOT image file!"
   MMI_BT_BIP_SENDFILE_IS_IMAGE "[BIP MMI]==file to push IS image file!"
   MMI_BT_BIP_DSTDEV_SUPPORT_BIP "[BIP MMI]==selected BT dev support BIP!=="
   MMI_BT_BIP_DSTDEV_SUPPORT_OPP "[BIP MMI]==selected BT dev support OPP!=="
   MMI_BT_BIP_PUSH_THROUGH_BIP "[BIP MMI]== push file through BIP =="
   MMI_BT_BIP_PUSH_THROUGH_OPP "[BIP MMI]== push file through OPP =="
   MMI_BT_BIP_CONNECT_IND_STATE_ERROR "[BIP MMI]===bipr_connect_ind_hdlr state != MMI_BIPR_STATE_ACTIVE, response with FAILED!"
   MMI_BT_BIP_OPEN_SHARED_FOLDER_ERROR "[BIP MMI]===FS_Open shared_folder ERROR! return: 0X%x"
   MMI_BT_BIP_FRIENDLY_NAME "[BIP MMI]friendly_name :"
   MMI_BT_BIP_THM_IS_REQUESTED "[BIP MMI]---- thm is requested! "
   MMI_BT_BIP_STOP_BLINKING_TIMER "[BIP MMI]===bipr_get_img_ind_hdlr StopTimer:BT_BIP_BLINKING_TIMER"
   MMI_BT_BIP_RENAME_PUSHED_THM_DST_NAME "[BIP MMI]mmi_bt_bip_rename_pushed_thm: thm_name="
   MMI_BT_BIP_START_BLINKING_TIMER "[BIP MMI]===bipr_complete_ind_hdlr .StartTimer:BT_BIP_BLINKING_TIMER.."
   MMI_BT_BIP_FIND_FILENAME "[BIP MMI] get_filename_with_imghandle find name: "
   MMI_BT_BIP_FINDFIRST_RETURN "[BIP MMI]FS_FindFirstN return 0x%x"
   MMI_BT_BIP_CONSTRUCT_IMGLIST_COUNT "[BIP MMI]responder construct imglist: img_count=%d"
   MMI_BT_BIP_START_BLINKING "[BIP MMI]mmi_bt_bip_start_blinking..."
   MMI_BT_BIP_STOP_BLINKING "[BIP MMI]mmi_bt_bip_stop_blinking..."
   MMI_BT_BIP_ENTRY_SENDING_SCR "[BIP MMI]mmi_bipi_entry_sending_scr..."
   MMI_BT_BIP_EXIT_SENDING_SCR "[BIP MMI]mmi_bipi_exit_sending_scr..."
   MMI_BT_BIP_ENTRY_ABORT_SCR "[BIP MMI]mmi_bipi_entry_abort_scr..."
   MMI_BT_BIP_SENDING_SCR_DEL_CB "[BIP MMI]mmi_bipi_sending_screen_del_cb..."
   MMI_BT_BIP_ABORTING_SCR_DEL_CB "[BIP MMI]mmi_bipi_aborting_screen_del_cb..."
   MMI_BT_BIP_SENDING_SCR_ENDKEY_HANDLER "[BIP MMI]mmi_bt_bipi_sending_scr_EndKey_press_handler..."
   MMI_BT_BIP_PULL_ENTRY_CONNECT_SCR "[BIP MMI]mmi_bt_bipi_pull_entry_connect_scr..."
   MMI_BT_BIP_PULL_CONNECT_SCR_ENDKEY "[BIP MMI]mmi_bt_bipi_connecting_scr_EndKey_press_handler..."
   MMI_BT_BIP_PULL_ENTRY_CANCELING_SCR "[BIP MMI]mmi_bt_bipi_pull_entry_canceling..."
   MMI_BT_BIP_PULL_ENTRY_DISCONNECTING_SCR "[BIP MMI]mmi_bt_bipi_pull_entry_disconnecting..."
   MMI_BT_BIP_PULL_DISCONNECTING_SCR_DEL_CB "[BIP MMI]mmi_bt_bipi_pull_disconnecting_screen_del_cb..."
   MMI_BT_BIP_PULL_CONNECTING_SCR_DEL_CB "[BIP MMI]mmi_bt_bipi_pull_connecting_screen_del_cb..."
   MMI_BT_BIP_PULL_RECVING_SCR_DEL_CB "[BIP MMI]mmi_bt_bipi_pull_recving_screen_del_cb..."
   MMI_BT_BIP_PULL_CANCELING_SCR_DEL_CB "[BIP MMI]mmi_bt_bipi_pull_canceling_screen_del_cb..."
   MMI_BT_BIP_PULL_IMGBROWSER_SCR_DEL_CB "[BIP MMI]mmi_bt_bipi_pull_imglist_browser_del_cb..."
   MMI_BT_BIP_PULL_ENTRY_IMG_DETAIL "[BIP MMI]mmi_bt_bipi_pull_entry_img_detail..."
   MMI_BT_BIP_PULL_EXIT_PREVIEW "[BIP MMI]mmi_bt_bipi_pull_exit_preview_scr..."
   MMI_BT_BIP_PULL_ENTRY_PREVIEW "[BIP MMI]mmi_bt_bipi_pull_entry_preview_thumbnail..."
   MMI_BT_BIP_PULL_ENTRY_GETTING_IMG "[BIP MMI]mmi_bt_bipi_pull_entry_getting_img..."
   MMI_BT_BIP_PULL_ENTRY_ABORTING "[BIP MMI]mmi_bt_bipi_pull_entry_aborting..."
   MMI_BT_BIP_PULL_ENDKEY "[BIP MMI]mmi_bt_bipi_pull_EndKey_press_handler..."
   MMI_BT_BIP_PULL_ENTRY_OPTION "[BIP MMI]mmi_bt_bipi_pull_entry_imglist_option..."
   MMI_BT_BIP_PULL_ENTRY_EXIT_CONFIRM_SCR "[BIP MMI]mmi_bt_bipi_pull_entry_exit_confirm_scr..."
   MMI_BT_BIP_PULL_EXIT_CONFIRM_SCR_ENDKEY "[BIP MMI]mmi_bt_bipi_pull_exit_cfm_scr_EndKey_press_handler..."
   MMI_BT_BIP_PULL_ENTRY_GETTING_IMGPROP "[BIP MMI]mmi_bt_bipi_pull_entry_getting_imgprop..."
   MMI_BT_BIP_PULL_ENTRY_GETTING_IMGTHM "[BIP MMI]mmi_bt_bipi_pull_entry_getting_imgthm..."
   MMI_BT_BIP_PULL_OPTION_LSK "[BIP MMI]mmi_bt_bipi_pull_imglist_option_LSK..."
   MMI_BT_BIP_PULL_EXIT_RECV_IMG "[BIP MMI]mmi_bt_bipi_pull_exit_recv_img..."
   MMI_BT_BIP_PULL_ABORTING_SCR_DEL_CB "[BIP MMI]mmi_bt_bipi_pull_aborting_screen_del_cb..."
   MMI_BT_BIP_PULL_EXIT_CONFIRM_SCR_RSK "[BIP MMI]mmi_bt_bipi_pull_entry_exit_confirm_scr_RSK..."
   MMI_BT_BIP_PULL_GETTING_PROP_SCR_DEL_CB "[BIP MMI]mmi_bt_bipi_pull_getting_imgprop_screen_del_cb..."
   MMI_BT_BIP_NOTIFY_RECV_ERR "[BIP MMI]bipi_notify_recv_err, cause=(%d)"
   MMI_BT_BIP_PULL_CLEAR_ABORT_SCR "[BIP MMI]mmi_bt_bipi_pull_clear_abort_scr..."
   MMI_BT_BIP_PULL_CLEAR_GET_IMGPROP_SCR "[BIP MMI]mmi_bt_bipi_pull_clear_get_imgprop_scr..."
   MMI_BT_BIP_PULL_ENTRY_REFRESH_SCR "[BIP MMI]mmi_bt_bipi_pull_entry_option_refresh_scr..."
   MMI_BT_BIP_PULL_REFRESH_IMGLIST "[BIP MMI]mmi_bt_bipi_pull_refresh_imglist..."
   MMI_BT_BIP_PULL_EXEC_OPER "[BIP MMI]mmi_bt_bipi_pull_exec_operation...oper=(%d)"
   MMI_BT_BIP_PULL_GET_CUR_IMGPROP "[BIP MMI]mmi_bt_bipi_get_cur_imgprop..."
   MMI_BT_BIP_PULL_GET_CUR_IMGTHM "[BIP MMI]mmi_bt_bipi_get_cur_imgthm..."
   MMI_BT_BIP_PULL_GET_CUR_IMG "[BIP MMI]mmi_bt_bipi_get_cur_image..."
   MMI_BT_BIP_PULL_REFRESH_DOWNLOAD_LIST "[BIP MMI]mmi_bt_bipi_refresh_download_list.."
   MMI_BT_BIP_PULL_GET_SELECTED_IMG "[BIP MMI]mmi_bt_bipi_get_selected_images..img_num=%d"
   MMI_BT_BIP_PULL_GET_ALL_IMG "[BIP MMI]mmi_bt_bipi_get_all_images..."
   MMI_BT_BIP_PULL_GET_NEXT_IMG "[BIP MMI]mmi_bt_bipi_get_next_image..."
   MMI_BT_BIP_SCR_GET_IMG_CNF "[BIP MMI]mmi_bt_bipi_scr_get_img_cnf..cnf_code=%d"
   MMI_BT_BIP_PULL_IMG_END "[BIP MMI]mmi_bt_bipi_pull_img_end. result=%d.."
   MMI_BT_BIP_PULL_ENTRY_IDLE_NOTIFY_SCR "[BIP MMI]mmi_bt_bipi_pull_entry_idle_notify_scr..."
   MMI_BT_BIP_PULL_NOTIFY_SCR_DEL_CB "[BIP MMI]mmi_bt_bipi_pull_notify_scr_browse_cb..."
   MMI_BT_BIP_PULL_NOTIFY_SCR_BROWSE "[BIP MMI]mmi_bt_bipi_pull_notify_scr_browse..."
   MMI_BT_BIP_PULL_ENTRY_IMGLIST_BROWSER "[BIP MMI]mmi_bt_bipi_pull_entry_imglist_browser..."
   MMI_BT_BIP_PULL_APP_MEM_FREE "[BIP MMI]mmi_bt_bipi_pull_app_mem_free..."
   MMI_BT_BIP_GET_IMGHANDLE_FOR_DISPLAY "[BIP MMI]mmi_bt_bipi_pull_get_img_handle_for_display..."
   MMI_BT_BIP_GET_THM_FOR_DISPLAY "[BIP MMI]---mmi_bt_bipi_pull_get_img_thm_for_display...index=%d"
   MMI_BT_BIP_SCR_IMGLIST_GOTTEN "[BIP MMI]mmi_bt_bipi_pull_scr_imglist_gotten..."
   MMI_BT_BIP_PULL_SCR_CONNECT_TERMINATED "[BIP MMI]mmi_bt_bipi_pull_scr_connect_terminated..."
   MMI_BT_BIP_SCR_ABORT_SIMPLE_OPER "[BIP MMI]mmi_bt_bipi_pull_abort_simple_operation..."
   MMI_BT_BIP_SCR_ABORT_GET_IMG "[BIP MMI]mmi_bt_bipi_pull_abort_getting_images_operation..."
   MMI_BT_BIP_PULL_SCR_ABORTED "[BIP MMI]mmi_bt_bipi_pull_scr_aborted...next_oper = %d"
   MMI_BT_BIP_PULL_GET_NEXT_THM "[BIP MMI]mmi_bt_bipi_get_next_thm...."
   MMI_BT_BIP_SCR_GET_THM_CNF "[BIP MMI]mmi_bt_bipi_scr_get_thm_cnf ...cnf_code=%d"
   MMI_BT_BIP_GET_IMGHANDLE_FROM_INDEX "[BIP MMI]mmi_bt_bipi_pull_get_img_handle_from_index: %d"
   MMI_BT_BIP_ENTRY_RECV_CONFIRM_SCR "[BIP MMI]mmi_bt_bipr_entry_recv_confirm_scr...."
   MMI_BT_BIP_R_ACCEPT_CONN "[BIP MMI]mmi_bt_bipr_accept_conn...."
   MMI_BT_BIP_R_REJECT_CONN "[BIP MMI]mmi_bt_bipr_reject_conn...."
   MMI_BT_BIP_I_CLEAR_SCR "[BIP MMI]mmi_bt_bipi_clear_scrs...."
   MMI_BT_BIP_ABORT_SCR_ENDKEY "[BIP MMI]mmi_bt_bipi_abort_scr_EndKey_press_handler..."
   MMI_BT_BIP_HISTORY_REPLACE "[BIP MMI]mmi_bt_bip_history_replace...."
   MMI_BT_BIP_ADD_HISTORY_BEFORE_CM "[BIP MMI]mmi_bt_bip_add_history_before_cm_marker..."
   MMI_BT_BIP_SCR_RECV_IMG_IND "[BIP MMI]mmi_bt_bip_scr_recv_img_ind..."
   MMI_BT_BIP_EXEC_ENDKEY_HDLR "[BIP MMI]mmi_bt_bip_exe_endkey_hdlr..."


   MMI_BT_BIP_FS_OPEN_RETURN "[BIP MMI]FS_Open return 0x%x"
   MMI_BT_BIP_FS_READ_RETURN "[BIP MMI]FS_Read return 0x%x"
   MMI_BT_BIP_FS_WRITE_RETURN "[BIP MMI]FS_WRITE return 0x%x"
   MMI_BT_BIP_FS_SEEK_RETURN "[BIP MMI]FS_Seek return 0x%x"
   MMI_BT_BIP_FS_GETFILESIZE_RETRUN "[BIP MMI]FS_GetFileSize return ret=0x%x\n, size=%d"
   MMI_BT_BIP_FS_CLOSE_RETURN "[BIP MMI]FS_Close return ret=0x%x"
   MMI_BT_BIP_FS_DELETE_RETURN "[BIP MMI]FS_Delete return ret=0x%x"
   MMI_BT_BIP_GDI_GET_DIMENSION "[ BIP MMI ] gdi_image_get_dimension_file return: result=%d, w=%d, h=%d"

   
   
   
  
   MMI_VRSD_FUNC_SYNC_TAG_WITH_DB "*---[VoiceDial.c] mmi_vrsd_sync_tag_with_db() => result:[%d], org_len:[%d], db_len:[%d] ---*"	
  
   MMI_VRSD_FUNC_TRAIN_INIT "*---[VRSDMain.c] mmi_vrsd_train_init() => app_id:[%d], appref_id:[%d], session_id[%d], result:[%d]---*"
   MMI_VRSD_FUNC_TRAIN_RESULT_IND "*---[VRSDMain.c] mmi_vrsd_train_result_ind() => result:[%d]---*"

   MMI_VRSD_FUNC_RCG_INIT "*---[VRSDMain.c] mmi_vrsd_rcg_init() => session_id[%d], result:[%d]---*"
   MMI_VRSD_FUNC_RCG_RESULT_IND_1 "*---[VRSDMain.c] mmi_vrsd_rcg_result_ind() => result:[%d]---*"
   MMI_VRSD_FUNC_RCG_RESULT_IND_2 "*---[VRSDMain.c] mmi_vrsd_rcg_result_ind() => tag_id[%d], app_id:[%d], appref_id:[%d] ---*"

   MMI_VRSD_FUNC_RECV_VOICE_REQ "*---[VRSDMain.c] mmi_vrsd_recv_voice_req() => result:[%d]---*"

   
   
   
   MMI_VRSI_FUNC_CENTRAL_ADD_ALL "*---[VRSIMainCmd.c] mmi_vrsi_init_central_add_all() => mmi state: [%d]---*"	
   MMI_VRSI_FUNC_CENTRAL_ABORT "*---[VRSIMainCmd.c] mmi_vrsi_init_central_abort() => mmi state: [%d]---*"
   MMI_VRSI_FUNC_CENTRAL_RESET "*---[VRSIMainCmd.c] mmi_vrsi_init_central_reset() => mmi state: [%d]---*"
   MMI_VRSI_FUNC_CENTRAL_CHANGE_LANG_RESET "*---[VRSIMainCmd.c] mmi_vrsi_init_central_change_language_reset() => mmi state: [%d]---*"
   MMI_VRSI_FUNC_CENTRAL_ADD_DONE "*---[VRSIMainCmd.c] mmi_vrsi_init_central_done() => total add fail: [%d]---*"
   MMI_VRSI_FUNC_CENTRAL_CMD_FAIL "*---[VRSIMainCmd.c] mmi_vrsi_init_central_count_fail() => tag long: [%d] , fail count: [%d]---*"
   MMI_VRSI_FUNC_CENTRAL_SYNC_TAG "*---[VRSIMainCmd.c] mmi_vrsi_init_central_sync_tag() => sync result: [%d]---*"
   MMI_VRSI_FUNC_RCG_CLOSE "*---[VRSIMainCmd.c] call mmi_vrsi_rcg_close() => mmi state: [%d] session id: [%d]---*"

   MMI_VRSI_FUNC_MDI_CALLBACK_HDLR "*---[VRSIMainCmd.c] mmi_vrsi_mdi_callback_hdlr() => callback result: [%d] , mmi state: [%d]---*"
   MMI_VRSI_FUNC_RESULT_ERROR_HDLR "*---[VRSIMainCmd.c] mmi_vrsi_result_error_hdlr() => error result: [%d], scenario: [%d], grammar: [%d]---*"
   MMI_VRSI_FUNC_RCG_GRAMMAR1_RESULT "*---[VRSIMainCmd.c] mmi_vrsi_rcg_read_grammar1_result() => type: [%d], pre_cmd: [%d], post_cmd: [%d], tag_num:[%d] ---*"
   MMI_VRSI_FUNC_RCG_GRAMMAR2_RESULT "*---[VRSIMainCmd.c] mmi_vrsi_rcg_read_grammar2_result() => type: [%d], pre_cmd: [%d], post_cmd: [%d], tag_num:[%d] ---*"
   MMI_VRSI_FUNC_RCG_GRAMMAR3_RESULT "*---[VRSIMainCmd.c] mmi_vrsi_rcg_read_grammar3_result() => type: [%d], pre_cmd: [%d], post_cmd: [%d], tag_num:[%d] ---*"
   MMI_VRSI_FUNC_RCG_GRAMMAR4_RESULT "*---[VRSIMainCmd.c] mmi_vrsi_rcg_read_grammar4_result() => type: [%d], pre_cmd: [%d], post_cmd: [%d], tag_num:[%d] ---*"
   MMI_VRSI_FUNC_RCG_GRAMMAR5_RESULT "*---[VRSIMainCmd.c] mmi_vrsi_rcg_read_grammar5_result() => type: [%d], pre_cmd: [%d], post_cmd: [%d], tag_num:[%d] ---*"

   MMI_VRSI_FUNC_MDI_INIT_RESULT "*---[MMI VRSI] call mdi_audio_vrsi_init() result => result: [%d]---*"

   MMI_VRSI_FUNC_TRAIN_ADD_START "*---[VRSISettings.c] call mmi_vrsi_train_option_add_start() => result: [%d], session_id: [%d], tag_long: [%d]---*"
   MMI_VRSI_FUNC_TRAIN_ADD_RESULT "*---[VRSISettings.c] call mmi_vrsi_train_option_add_result() => curr_tag: [%d], app_id: [%d], tag_long: [%d], tag_id: [%d]---*"   
   MMI_VRSI_FUNC_TRAIN_GET_ID_LOC "*---[VRSISettings.c] call mmi_vrsi_train_util_get_id_and_loc() => app_id: [%d], tag_long: [%d], tag_id: [%d]---*"



    
    MMI_MMS_BGSR_TIMEOUT_PROCEDURE "[BGSR] mmi_mms_bgsr_timeout_procedure()"    
    MMI_MMS_BGSR_TIMEOUT_PROCEDURE_FINISH "[BGSR] mmi_mms_bgsr_timeout_procedure() FINISH"    
    MMI_MMS_BGSR_TRANSLATE_MSG_ID_TO_NVRAM_IND "[BGSR] mmi_mms_bgsr_translate_msg_id_to_nvram_ind(), msg_id = %d"    
    MMI_MMS_BGSR_TRANSLATE_RESULT "[BGSR] mmi_mms_bgsr_translate_result(), mma result = %Mmma_result_enum"
    MMI_MMS_BGSR_TRANSLATE_RESULT_TO_STRID "[BGSR] mmi_mms_bgsr_translate_result_to_strid(), bgsr_result = %Mmmi_mms_bgsr_result_enum"
    MMI_MMS_BGSR_ACTION_FSM "[BGSR] mmi_mms_bgsr_action_fsm(), cur_action=%Mmmi_mms_bgsr_action_type_enum"
    MMI_MMS_BGSR_ACTION_FSM_FINISH "[BGSR] mmi_mms_bgsr_action_fsm() FINISH, cur_action=%Mmmi_mms_bgsr_action_type_enum"
    MMI_MMS_BGSR_SEND_REQ "[BGSR] mmi_mms_bgsr_send_req(), msg_id=%d"
    MMI_MMS_BGSR_CANCEL_SEND_REQ "[BGSR] mmi_mms_bgsr_cancel_send_req(), msg_id=%d"
    MMI_MMS_BGSR_DOWNLOAD_REQ "[BGSR] mmi_mms_bgsr_download_req(), msg_id=%d"
    MMI_MMS_BGSR_CANCEL_DOWNLOAD_REQ "[BGSR] mmi_mms_bgsr_cancel_download_req(), msg_id=%d"
    MMI_MMS_BGSR_CHANGE_MSG_NOTIFY "[BGSR] mmi_mms_bgsr_change_msg_notify(), cur_action=%Mmmi_mms_bgsr_msg_operation_notify_enum"
    MMI_MMS_BGSR_SHOW_MMS_STATUS_ICON "[BGSR] mmi_mms_bgsr_show_mms_status_icon(), status=%Mmmi_mms_bgsr_indicator_type_enum"
    MMI_MMS_BGSR_GET_MSG_INFO "[BGSR] mmi_mms_bgsr_get_msg_info(), msg_id=%d"
    MMI_MMS_BGSR_SYNC "[BGSR] mmi_mms_bgsr_sync()"
    MMI_MMS_BGSR_SEND_MMS_REQ "[BGSR] mmi_mms_bgsr_send_mms_req(), msg_id=%d"
    MMI_MMS_BGSR_SEND_MMS_IND_HDLR "[BGSR] mmi_mms_bgsr_send_mms_ind_hdlr(), msg_id=%d"
    MMI_MMS_BGSR_SEND_MMS_RSP "[BGSR] mmi_mms_bgsr_send_mms_rsp(), msg_id=%d"    
    MMI_MMS_BGSR_DOWNLOAD_MMS_REQ "[BGSR] mmi_mms_bgsr_download_mms_req(), msg_id=%d"
    MMI_MMS_BGSR_DOWNLOAD_MMS_IND_HDLR "[BGSR] mmi_mms_bgsr_download_mms_ind_hdlr(), msg_id=%d"    
    MMI_MMS_BGSR_DOWNLOAD_MMS_RSP "[BGSR] mmi_mms_bgsr_download_mms_rsp(), msg_id=%d"    
    MMI_MMS_BGSR_GET_MEM_STATUS_REQ "[BGSR] mmi_mms_bgsr_get_mem_status_req()"    

    MMI_MMS_BGSR_ABORT_SEND_MMS_REQ "[BGSR] mmi_mms_bgsr_abort_send_mms_req(), msg_id=%d"
    MMI_MMS_BGSR_ABORT_DOWNLOAD_MMS_REQ "[BGSR] mmi_mms_bgsr_abort_download_mms_req(), msg_id=%d"
    MMI_MMS_BGSR_SAVE_MMS_REQ "[BGSR] mmi_mms_bgsr_save_mms_req(), msg_id=%d"
    MMI_MMS_BGSR_DELETE_MMS_REQ "[BGSR] mmi_mms_bgsr_delete_mms_req(), msg_id=%d"
    MMI_MMS_BGSR_USB_START_CB "[BGSR] mmi_mms_bgsr_usb_start_cb()"
    MMI_MMS_BGSR_INTERRUPT_END_CB "[BGSR] mmi_mms_bgsr_interrupt_end_cb(), interrupt=%Mmmi_mms_bgsr_interrupt_reason_enum"
    MMI_MMS_BGSR_FREE_SIZE "[BGSR] mmi_mms_bgsr_free_size =%d"

    MMI_MMS_BGSR_MSG_NOT_FOUND "[BGSR] the message is not found"
    MMI_MMS_BGSR_MEMORY_NOT_ALLOCATED "[BGSR] the memory is not allocated"
    MMI_MMS_BGSR_UNKNOWN_OPERATION "[BGSR] the unknown operation"    
    MMI_MMS_BGSR_NO_POPUP "[BGSR] popup prohibited"        
    MMI_MMS_BGSR_NO_SOUND_POPUP "[BGSR] popup without sound"    
    MMI_MMS_BGSR_NORMAL_POPUP "[BGSR] popup normal"   
    MMI_MMS_BGSR_ECHO_CURRENT_INFO_ID "[BGSR] current info, send_id = %d, dl_id=%d"   
    MMI_MMS_BGSR_ECHO_CURRENT_INFO_SEND_Q "[BGSR] send q :"   
    MMI_MMS_BGSR_ECHO_CURRENT_INFO_SEND_FAIL_Q "[BGSR] send fail q :"   
    MMI_MMS_BGSR_ECHO_CURRENT_INFO_DL_Q "[BGSR] download q :"           
    MMI_MMS_BGSR_ECHO_CURRENT_INFO_DL_FAIL_Q "[BGSR] download fail q :"       
    MMI_MMS_BGSR_ECHO_CURRENT_INFO_Q "[BGSR] id = %d, ntt = %d, ex_time = %d, status = %Mmmi_mms_bgsr_msg_status_enum, quota = %d, folder = %d, send_setting = %d, result = %Mmmi_mms_bgsr_result_enum, fail_flag = %d, size = %d, is_rr = %d, op = %Mmmi_mms_bgsr_msg_operation_notify_enum"   
    MMI_MMS_BGSR_NOT_SYNC "[BGSR] not sync yet"       
    MMI_MMS_BGSR_NOT_READY "[BGSR] not ready yet"       
    MMI_MMS_BGSR_SEND_PREVIOUS_MSG "[BGSR] send a previous sent msg"           
    MMI_MMS_BGSR_SEND_NEW_MSG "[BGSR] send a newly created msg"               
    MMI_MMS_BGSR_SEND_PREVIOUS_FAIL_MSG "[BGSR] send a previous sent fail msg"
    MMI_MMS_BGSR_SEND_RR "[BGSR] send a read report"                                  
    MMI_MMS_BGSR_ALREADY_A_SENDING_MSG "[BGSR] there is already a sending msg, id= %d"
    MMI_MMS_BGSR_DOWNLOAD_PREVIOUS_MSG "[BGSR] download a previous downloaded msg"           
    MMI_MMS_BGSR_DOWNLOAD_PREVIOUS_FAIL_MSG "[BGSR] download a previous downloaded fail msg"    
    MMI_MMS_BGSR_DOWNLOAD_NEW_MSG "[BGSR] download a newly created msg"                   
    MMI_MMS_BGSR_ALREADY_A_DOWNLOAD_MSG "[BGSR] there is already a downloading msg, id= %d"
    MMI_MMS_BGSR_THE_MSG_IS_TRANSMITTING "[BGSR] the message is transmitting, id= %d"    
    MMI_MMS_BGSR_DECREASE_NTT "[BGSR] decrease the ntt of msg in fail q"        
    MMI_MMS_BGSR_MOVE_MSG_FROM_FAIL_Q "[BGSR] move msg from fail q to send/recv q"            
    MMI_MMS_BGSR_NVRAM_IDX_EXCEED "[BGSR] NVRAM index exceed the max value"            
    MMI_MMS_BGSR_OK "[BGSR] the result is ok"                
    MMI_MMS_BGSR_FAIL "[BGSR] the result is fail"
    MMI_MMS_BGSR_RETRY "[BGSR] the message will be retry again"    
    MMI_MMS_BGSR_NOT_RETRY "[BGSR] the message will NOT be retry again"        
    MMI_MMS_BGSR_TRY_TO_SEND "[BGSR] try to send a message"        
    MMI_MMS_BGSR_TRY_TO_DOWNLOAD "[BGSR] try to download a message"        
    MMI_MMS_BGSR_CLEAR_SEND_ID "[BGSR] clear the sending msg id"            
    MMI_MMS_BGSR_CLEAR_DOWNLOAD_ID "[BGSR] clear the downloading msg id"                

    
    MMI_VOIP_LOG_TRC_CALL_ACTIVATED "[Voip Log] call has been started (%d, %d)\n"
    MMI_VOIP_LOG_TRC_CALL_OVER_MAX "[Voip Log] call has reached the max value (%d)\n"
    MMI_VOIP_LOG_TRC_CALL_RENAME_FAIL "[Voip Log] rename the special file fail!!\n"
    MMI_VOIP_LOG_TRC_CALL_STARTED "[Voip Log] call is kept in temp table (%d, %d)\n"
    MMI_VOIP_LOG_TRC_CALL_CLEAR "[Voip Log] call is cleaned (%d, %d)\n"
    
   
   
   
END_MODULE_MSG


START_MODULE_MSG MOD_MMI_COMMON_APP 20
    MMI_COMMON_APP_BUFFER_TRACE " *** Get data in [lower Panel] ***"
END_MODULE_MSG

START_MODULE_MSG MOD_MMI_CONN_APP 20
    MMI_CONN_APP_BUFFER_TRACE " *** Get data in [lower Panel] ***"
END_MODULE_MSG

START_MODULE_MSG MOD_MMI_FW 20
    MMI_FW_BUFFER_TRACE " *** Get data in [lower Panel] ***"
END_MODULE_MSG

START_MODULE_MSG MOD_MMI_INET_APP 20
    MMI_INET_APP_BUFFER_TRACE " *** Get data in [lower Panel] ***"
END_MODULE_MSG

START_MODULE_MSG MOD_MMI_MEDIA_APP 20
    MMI_MEDIA_APP_BUFFER_TRACE " *** Get data in [lower Panel] ***"
END_MODULE_MSG

#line 2101 "..\\..\\plutommi\\mmi\\inc\\mmi_trc.h"


